Search.setIndex({"docnames": ["ADMINISTRATA", "API", "CHANGELOG", "CONDA_ENVIRONMENT", "CONTACT", "CREDITS", "DISCLAIMER", "EFFICIENCY", "EXAMPLES", "FAQ", "GIT", "GUIDELINES", "INSTALLATION", "LICENSE", "NIX-README", "PUBLICATIONS", "README", "SOLVERS", "USAGE", "VIEWERS", "VKML", "contents", "design", "external_definitions", "generated/examples", "generated/examples.benchmarking", "generated/examples.benchmarking.benchmarker", "generated/examples.benchmarking.size", "generated/examples.benchmarking.steps", "generated/examples.benchmarking.utils", "generated/examples.benchmarking.versions", "generated/examples.cahnHilliard", "generated/examples.cahnHilliard.mesh2D", "generated/examples.cahnHilliard.mesh2DCoupled", "generated/examples.cahnHilliard.mesh3D", "generated/examples.cahnHilliard.sphere", "generated/examples.cahnHilliard.sphereDaemon", "generated/examples.cahnHilliard.tanh1D", "generated/examples.cahnHilliard.test", "generated/examples.chemotaxis", "generated/examples.chemotaxis.input", "generated/examples.chemotaxis.input2D", "generated/examples.chemotaxis.parameters", "generated/examples.chemotaxis.test", "generated/examples.convection", "generated/examples.convection.advection", "generated/examples.convection.advection.explicitUpwind", "generated/examples.convection.advection.implicitUpwind", "generated/examples.convection.advection.vanLeerUpwind", "generated/examples.convection.exponential1D", "generated/examples.convection.exponential1D.cylindricalMesh1D", "generated/examples.convection.exponential1D.cylindricalMesh1DNonUniform", "generated/examples.convection.exponential1D.mesh1D", "generated/examples.convection.exponential1D.tri2D", "generated/examples.convection.exponential1DBack", "generated/examples.convection.exponential1DBack.mesh1D", "generated/examples.convection.exponential1DSource", "generated/examples.convection.exponential1DSource.mesh1D", "generated/examples.convection.exponential1DSource.tri2D", "generated/examples.convection.exponential2D", "generated/examples.convection.exponential2D.cylindricalMesh2D", "generated/examples.convection.exponential2D.cylindricalMesh2DNonUniform", "generated/examples.convection.exponential2D.mesh2D", "generated/examples.convection.exponential2D.tri2D", "generated/examples.convection.peclet", "generated/examples.convection.powerLaw1D", "generated/examples.convection.powerLaw1D.mesh1D", "generated/examples.convection.powerLaw1D.tri2D", "generated/examples.convection.robin", "generated/examples.convection.source", "generated/examples.convection.test", "generated/examples.diffusion", "generated/examples.diffusion.anisotropy", "generated/examples.diffusion.circle", "generated/examples.diffusion.circleQuad", "generated/examples.diffusion.coupled", "generated/examples.diffusion.electrostatics", "generated/examples.diffusion.explicit", "generated/examples.diffusion.explicit.mesh1D", "generated/examples.diffusion.explicit.mixedelement", "generated/examples.diffusion.explicit.test", "generated/examples.diffusion.explicit.tri2D", "generated/examples.diffusion.mesh1D", "generated/examples.diffusion.mesh20x20", "generated/examples.diffusion.mesh20x20Coupled", "generated/examples.diffusion.nthOrder", "generated/examples.diffusion.nthOrder.input4thOrder1D", "generated/examples.diffusion.nthOrder.input4thOrder_line", "generated/examples.diffusion.nthOrder.test", "generated/examples.diffusion.steadyState", "generated/examples.diffusion.steadyState.mesh1D", "generated/examples.diffusion.steadyState.mesh1D.inputPeriodic", "generated/examples.diffusion.steadyState.mesh1D.tri2Dinput", "generated/examples.diffusion.steadyState.mesh20x20", "generated/examples.diffusion.steadyState.mesh20x20.gmshinput", "generated/examples.diffusion.steadyState.mesh20x20.isotropy", "generated/examples.diffusion.steadyState.mesh20x20.modifiedMeshInput", "generated/examples.diffusion.steadyState.mesh20x20.orthoerror", "generated/examples.diffusion.steadyState.mesh20x20.tri2Dinput", "generated/examples.diffusion.steadyState.mesh50x50", "generated/examples.diffusion.steadyState.mesh50x50.input", "generated/examples.diffusion.steadyState.mesh50x50.tri2Dinput", "generated/examples.diffusion.steadyState.otherMeshes", "generated/examples.diffusion.steadyState.otherMeshes.cubicalProblem", "generated/examples.diffusion.steadyState.otherMeshes.grid3Dinput", "generated/examples.diffusion.steadyState.otherMeshes.prism", "generated/examples.diffusion.steadyState.test", "generated/examples.diffusion.test", "generated/examples.diffusion.variable", "generated/examples.elphf", "generated/examples.elphf.diffusion", "generated/examples.elphf.diffusion.mesh1D", "generated/examples.elphf.diffusion.mesh1Ddimensional", "generated/examples.elphf.diffusion.mesh2D", "generated/examples.elphf.input", "generated/examples.elphf.phase", "generated/examples.elphf.phaseDiffusion", "generated/examples.elphf.poisson", "generated/examples.elphf.test", "generated/examples.flow", "generated/examples.flow.stokesCavity", "generated/examples.flow.test", "generated/examples.levelSet", "generated/examples.levelSet.advection", "generated/examples.levelSet.advection.circle", "generated/examples.levelSet.advection.mesh1D", "generated/examples.levelSet.advection.test", "generated/examples.levelSet.advection.trench", "generated/examples.levelSet.distanceFunction", "generated/examples.levelSet.distanceFunction.circle", "generated/examples.levelSet.distanceFunction.interior", "generated/examples.levelSet.distanceFunction.mesh1D", "generated/examples.levelSet.distanceFunction.square", "generated/examples.levelSet.distanceFunction.test", "generated/examples.levelSet.electroChem", "generated/examples.levelSet.electroChem.adsorbingSurfactantEquation", "generated/examples.levelSet.electroChem.adsorption", "generated/examples.levelSet.electroChem.gapFillDistanceVariable", "generated/examples.levelSet.electroChem.gapFillMesh", "generated/examples.levelSet.electroChem.gold", "generated/examples.levelSet.electroChem.howToWriteAScript", "generated/examples.levelSet.electroChem.leveler", "generated/examples.levelSet.electroChem.lines", "generated/examples.levelSet.electroChem.matplotlibSurfactantViewer", "generated/examples.levelSet.electroChem.mayaviSurfactantViewer", "generated/examples.levelSet.electroChem.metalIonDiffusionEquation", "generated/examples.levelSet.electroChem.simpleTrenchSystem", "generated/examples.levelSet.electroChem.surfactantBulkDiffusionEquation", "generated/examples.levelSet.electroChem.test", "generated/examples.levelSet.electroChem.trenchMesh", "generated/examples.levelSet.surfactant", "generated/examples.levelSet.surfactant.circle", "generated/examples.levelSet.surfactant.expandingCircle", "generated/examples.levelSet.surfactant.square", "generated/examples.levelSet.surfactant.test", "generated/examples.levelSet.test", "generated/examples.meshing", "generated/examples.meshing.gmshRefinement", "generated/examples.meshing.inputGrid2D", "generated/examples.meshing.sphere", "generated/examples.meshing.test", "generated/examples.parallel", "generated/examples.phase", "generated/examples.phase.anisotropy", "generated/examples.phase.anisotropyOLD", "generated/examples.phase.binary", "generated/examples.phase.binaryCoupled", "generated/examples.phase.impingement", "generated/examples.phase.impingement.mesh20x20", "generated/examples.phase.impingement.mesh40x1", "generated/examples.phase.impingement.test", "generated/examples.phase.missOrientation", "generated/examples.phase.missOrientation.circle", "generated/examples.phase.missOrientation.mesh1D", "generated/examples.phase.missOrientation.modCircle", "generated/examples.phase.missOrientation.test", "generated/examples.phase.polyxtal", "generated/examples.phase.polyxtalCoupled", "generated/examples.phase.quaternary", "generated/examples.phase.simple", "generated/examples.phase.symmetry", "generated/examples.phase.test", "generated/examples.reactiveWetting", "generated/examples.reactiveWetting.liquidVapor1D", "generated/examples.reactiveWetting.liquidVapor2D", "generated/examples.reactiveWetting.test", "generated/examples.riemann", "generated/examples.riemann.acoustics", "generated/examples.riemann.test", "generated/examples.test", "generated/examples.updating", "generated/examples.updating.update0_1to1_0", "generated/examples.updating.update1_0to2_0", "generated/examples.updating.update2_0to3_0", "generated/fipy", "generated/fipy.boundaryConditions", "generated/fipy.boundaryConditions.boundaryCondition", "generated/fipy.boundaryConditions.constraint", "generated/fipy.boundaryConditions.fixedFlux", "generated/fipy.boundaryConditions.fixedValue", "generated/fipy.boundaryConditions.nthOrderBoundaryCondition", "generated/fipy.boundaryConditions.test", "generated/fipy.matrices", "generated/fipy.matrices.offsetSparseMatrix", "generated/fipy.matrices.petscMatrix", "generated/fipy.matrices.pysparseMatrix", "generated/fipy.matrices.scipyMatrix", "generated/fipy.matrices.sparseMatrix", "generated/fipy.matrices.test", "generated/fipy.matrices.trilinosMatrix", "generated/fipy.meshes", "generated/fipy.meshes.abstractMesh", "generated/fipy.meshes.builders", "generated/fipy.meshes.builders.abstractGridBuilder", "generated/fipy.meshes.builders.grid1DBuilder", "generated/fipy.meshes.builders.grid2DBuilder", "generated/fipy.meshes.builders.grid3DBuilder", "generated/fipy.meshes.builders.periodicGrid1DBuilder", "generated/fipy.meshes.builders.utilityClasses", "generated/fipy.meshes.cylindricalGrid1D", "generated/fipy.meshes.cylindricalGrid2D", "generated/fipy.meshes.cylindricalNonUniformGrid1D", "generated/fipy.meshes.cylindricalNonUniformGrid2D", "generated/fipy.meshes.cylindricalUniformGrid1D", "generated/fipy.meshes.cylindricalUniformGrid2D", "generated/fipy.meshes.factoryMeshes", "generated/fipy.meshes.gmshMesh", "generated/fipy.meshes.grid1D", "generated/fipy.meshes.grid2D", "generated/fipy.meshes.grid3D", "generated/fipy.meshes.mesh", "generated/fipy.meshes.mesh1D", "generated/fipy.meshes.mesh2D", "generated/fipy.meshes.nonUniformGrid1D", "generated/fipy.meshes.nonUniformGrid2D", "generated/fipy.meshes.nonUniformGrid3D", "generated/fipy.meshes.periodicGrid1D", "generated/fipy.meshes.periodicGrid2D", "generated/fipy.meshes.periodicGrid3D", "generated/fipy.meshes.representations", "generated/fipy.meshes.representations.abstractRepresentation", "generated/fipy.meshes.representations.gridRepresentation", "generated/fipy.meshes.representations.meshRepresentation", "generated/fipy.meshes.skewedGrid2D", "generated/fipy.meshes.sphericalNonUniformGrid1D", "generated/fipy.meshes.sphericalUniformGrid1D", "generated/fipy.meshes.test", "generated/fipy.meshes.topologies", "generated/fipy.meshes.topologies.abstractTopology", "generated/fipy.meshes.topologies.gridTopology", "generated/fipy.meshes.topologies.meshTopology", "generated/fipy.meshes.tri2D", "generated/fipy.meshes.uniformGrid", "generated/fipy.meshes.uniformGrid1D", "generated/fipy.meshes.uniformGrid2D", "generated/fipy.meshes.uniformGrid3D", "generated/fipy.solvers", "generated/fipy.solvers.petsc", "generated/fipy.solvers.petsc.comms", "generated/fipy.solvers.petsc.comms.parallelPETScCommWrapper", "generated/fipy.solvers.petsc.comms.petscCommWrapper", "generated/fipy.solvers.petsc.comms.serialPETScCommWrapper", "generated/fipy.solvers.petsc.dummySolver", "generated/fipy.solvers.petsc.linearBicgSolver", "generated/fipy.solvers.petsc.linearCGSSolver", "generated/fipy.solvers.petsc.linearGMRESSolver", "generated/fipy.solvers.petsc.linearLUSolver", "generated/fipy.solvers.petsc.linearPCGSolver", "generated/fipy.solvers.petsc.petscKrylovSolver", "generated/fipy.solvers.petsc.petscSolver", "generated/fipy.solvers.pyAMG", "generated/fipy.solvers.pyAMG.linearCGSSolver", "generated/fipy.solvers.pyAMG.linearGMRESSolver", "generated/fipy.solvers.pyAMG.linearGeneralSolver", "generated/fipy.solvers.pyAMG.linearLUSolver", "generated/fipy.solvers.pyAMG.linearPCGSolver", "generated/fipy.solvers.pyAMG.preconditioners", "generated/fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner", "generated/fipy.solvers.pyamgx", "generated/fipy.solvers.pyamgx.aggregationAMGSolver", "generated/fipy.solvers.pyamgx.classicalAMGSolver", "generated/fipy.solvers.pyamgx.linearBiCGStabSolver", "generated/fipy.solvers.pyamgx.linearCGSolver", "generated/fipy.solvers.pyamgx.linearFGMRESSolver", "generated/fipy.solvers.pyamgx.linearGMRESSolver", "generated/fipy.solvers.pyamgx.linearLUSolver", "generated/fipy.solvers.pyamgx.preconditioners", "generated/fipy.solvers.pyamgx.preconditioners.preconditioners", "generated/fipy.solvers.pyamgx.pyAMGXSolver", "generated/fipy.solvers.pyamgx.smoothers", "generated/fipy.solvers.pyamgx.smoothers.smoothers", "generated/fipy.solvers.pysparse", "generated/fipy.solvers.pysparse.linearCGSSolver", "generated/fipy.solvers.pysparse.linearGMRESSolver", "generated/fipy.solvers.pysparse.linearJORSolver", "generated/fipy.solvers.pysparse.linearLUSolver", "generated/fipy.solvers.pysparse.linearPCGSolver", "generated/fipy.solvers.pysparse.preconditioners", "generated/fipy.solvers.pysparse.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.pysparse.preconditioners.preconditioner", "generated/fipy.solvers.pysparse.preconditioners.ssorPreconditioner", "generated/fipy.solvers.pysparse.pysparseSolver", "generated/fipy.solvers.pysparseMatrixSolver", "generated/fipy.solvers.scipy", "generated/fipy.solvers.scipy.linearBicgstabSolver", "generated/fipy.solvers.scipy.linearCGSSolver", "generated/fipy.solvers.scipy.linearGMRESSolver", "generated/fipy.solvers.scipy.linearLUSolver", "generated/fipy.solvers.scipy.linearPCGSolver", "generated/fipy.solvers.scipy.scipyKrylovSolver", "generated/fipy.solvers.scipy.scipySolver", "generated/fipy.solvers.solver", "generated/fipy.solvers.test", "generated/fipy.solvers.trilinos", "generated/fipy.solvers.trilinos.comms", "generated/fipy.solvers.trilinos.comms.epetraCommWrapper", "generated/fipy.solvers.trilinos.comms.parallelEpetraCommWrapper", "generated/fipy.solvers.trilinos.comms.serialEpetraCommWrapper", "generated/fipy.solvers.trilinos.linearBicgstabSolver", "generated/fipy.solvers.trilinos.linearCGSSolver", "generated/fipy.solvers.trilinos.linearGMRESSolver", "generated/fipy.solvers.trilinos.linearLUSolver", "generated/fipy.solvers.trilinos.linearPCGSolver", "generated/fipy.solvers.trilinos.preconditioners", "generated/fipy.solvers.trilinos.preconditioners.domDecompPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.icPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.preconditioner", "generated/fipy.solvers.trilinos.trilinosAztecOOSolver", "generated/fipy.solvers.trilinos.trilinosMLTest", "generated/fipy.solvers.trilinos.trilinosNonlinearSolver", "generated/fipy.solvers.trilinos.trilinosSolver", "generated/fipy.steppers", "generated/fipy.steppers.pidStepper", "generated/fipy.steppers.pseudoRKQSStepper", "generated/fipy.steppers.stepper", "generated/fipy.terms", "generated/fipy.terms.abstractBinaryTerm", "generated/fipy.terms.abstractConvectionTerm", "generated/fipy.terms.abstractDiffusionTerm", "generated/fipy.terms.abstractUpwindConvectionTerm", "generated/fipy.terms.advectionTerm", "generated/fipy.terms.asymmetricConvectionTerm", "generated/fipy.terms.binaryTerm", "generated/fipy.terms.cellTerm", "generated/fipy.terms.centralDiffConvectionTerm", "generated/fipy.terms.coupledBinaryTerm", "generated/fipy.terms.diffusionTerm", "generated/fipy.terms.diffusionTermCorrection", "generated/fipy.terms.diffusionTermNoCorrection", "generated/fipy.terms.explicitDiffusionTerm", "generated/fipy.terms.explicitSourceTerm", "generated/fipy.terms.explicitUpwindConvectionTerm", "generated/fipy.terms.exponentialConvectionTerm", "generated/fipy.terms.faceTerm", "generated/fipy.terms.firstOrderAdvectionTerm", "generated/fipy.terms.hybridConvectionTerm", "generated/fipy.terms.implicitDiffusionTerm", "generated/fipy.terms.implicitSourceTerm", "generated/fipy.terms.nonDiffusionTerm", "generated/fipy.terms.powerLawConvectionTerm", "generated/fipy.terms.residualTerm", "generated/fipy.terms.sourceTerm", "generated/fipy.terms.term", "generated/fipy.terms.test", "generated/fipy.terms.transientTerm", "generated/fipy.terms.unaryTerm", "generated/fipy.terms.upwindConvectionTerm", "generated/fipy.terms.vanLeerConvectionTerm", "generated/fipy.testFiPy", "generated/fipy.tests", "generated/fipy.tests.doctestPlus", "generated/fipy.tests.lateImportTest", "generated/fipy.tests.test", "generated/fipy.tests.testProgram", "generated/fipy.tools", "generated/fipy.tools.comms", "generated/fipy.tools.comms.commWrapper", "generated/fipy.tools.comms.dummyComm", "generated/fipy.tools.debug", "generated/fipy.tools.decorators", "generated/fipy.tools.dimensions", "generated/fipy.tools.dimensions.DictWithDefault", "generated/fipy.tools.dimensions.NumberDict", "generated/fipy.tools.dimensions.physicalField", "generated/fipy.tools.dump", "generated/fipy.tools.inline", "generated/fipy.tools.logging", "generated/fipy.tools.numerix", "generated/fipy.tools.parser", "generated/fipy.tools.sharedtempfile", "generated/fipy.tools.test", "generated/fipy.tools.vector", "generated/fipy.tools.version", "generated/fipy.tools.vitals", "generated/fipy.variables", "generated/fipy.variables.addOverFacesVariable", "generated/fipy.variables.arithmeticCellToFaceVariable", "generated/fipy.variables.betaNoiseVariable", "generated/fipy.variables.binaryOperatorVariable", "generated/fipy.variables.cellToFaceVariable", "generated/fipy.variables.cellVariable", "generated/fipy.variables.constant", "generated/fipy.variables.constraintMask", "generated/fipy.variables.coupledCellVariable", "generated/fipy.variables.distanceVariable", "generated/fipy.variables.exponentialNoiseVariable", "generated/fipy.variables.faceGradContributionsVariable", "generated/fipy.variables.faceGradVariable", "generated/fipy.variables.faceVariable", "generated/fipy.variables.gammaNoiseVariable", "generated/fipy.variables.gaussCellGradVariable", "generated/fipy.variables.gaussianNoiseVariable", "generated/fipy.variables.harmonicCellToFaceVariable", "generated/fipy.variables.histogramVariable", "generated/fipy.variables.interfaceAreaVariable", "generated/fipy.variables.interfaceFlagVariable", "generated/fipy.variables.leastSquaresCellGradVariable", "generated/fipy.variables.levelSetDiffusionVariable", "generated/fipy.variables.meshVariable", "generated/fipy.variables.minmodCellToFaceVariable", "generated/fipy.variables.modCellGradVariable", "generated/fipy.variables.modCellToFaceVariable", "generated/fipy.variables.modFaceGradVariable", "generated/fipy.variables.modPhysicalField", "generated/fipy.variables.modularVariable", "generated/fipy.variables.noiseVariable", "generated/fipy.variables.operatorVariable", "generated/fipy.variables.scharfetterGummelFaceVariable", "generated/fipy.variables.surfactantConvectionVariable", "generated/fipy.variables.surfactantVariable", "generated/fipy.variables.test", "generated/fipy.variables.unaryOperatorVariable", "generated/fipy.variables.uniformNoiseVariable", "generated/fipy.variables.variable", "generated/fipy.viewers", "generated/fipy.viewers.matplotlibViewer", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlibViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib1DViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DContourViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibStreamViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibVectorViewer", "generated/fipy.viewers.matplotlibViewer.test", "generated/fipy.viewers.mayaviViewer", "generated/fipy.viewers.mayaviViewer.mayaviClient", "generated/fipy.viewers.mayaviViewer.mayaviDaemon", "generated/fipy.viewers.mayaviViewer.test", "generated/fipy.viewers.multiViewer", "generated/fipy.viewers.test", "generated/fipy.viewers.testinteractive", "generated/fipy.viewers.tsvViewer", "generated/fipy.viewers.viewer", "generated/fipy.viewers.vtkViewer", "generated/fipy.viewers.vtkViewer.test", "generated/fipy.viewers.vtkViewer.vtkCellViewer", "generated/fipy.viewers.vtkViewer.vtkFaceViewer", "generated/fipy.viewers.vtkViewer.vtkViewer", "glossary", "introduction", "manual", "numerical/discret", "numerical/equation", "numerical/index", "numerical/scheme", "references", "tutorial/generated/package", "tutorial/generated/package.subpackage", "tutorial/generated/package.subpackage.base", "tutorial/generated/package.subpackage.object", "tutorial/index"], "filenames": ["ADMINISTRATA.rst", "API.rst", "CHANGELOG.rst", "CONDA_ENVIRONMENT.rst", "CONTACT.rst", "CREDITS.rst", "DISCLAIMER.rst", "EFFICIENCY.rst", "EXAMPLES.rst", "FAQ.rst", "GIT.rst", "GUIDELINES.rst", "INSTALLATION.rst", "LICENSE.rst", "NIX-README.rst", "PUBLICATIONS.rst", "README.rst", "SOLVERS.rst", "USAGE.rst", "VIEWERS.rst", "VKML.rst", "contents.rst", "design.rst", "external_definitions.rst", "generated/examples.rst", "generated/examples.benchmarking.rst", "generated/examples.benchmarking.benchmarker.rst", "generated/examples.benchmarking.size.rst", "generated/examples.benchmarking.steps.rst", "generated/examples.benchmarking.utils.rst", "generated/examples.benchmarking.versions.rst", "generated/examples.cahnHilliard.rst", "generated/examples.cahnHilliard.mesh2D.rst", "generated/examples.cahnHilliard.mesh2DCoupled.rst", "generated/examples.cahnHilliard.mesh3D.rst", "generated/examples.cahnHilliard.sphere.rst", "generated/examples.cahnHilliard.sphereDaemon.rst", "generated/examples.cahnHilliard.tanh1D.rst", "generated/examples.cahnHilliard.test.rst", "generated/examples.chemotaxis.rst", "generated/examples.chemotaxis.input.rst", "generated/examples.chemotaxis.input2D.rst", "generated/examples.chemotaxis.parameters.rst", "generated/examples.chemotaxis.test.rst", "generated/examples.convection.rst", "generated/examples.convection.advection.rst", "generated/examples.convection.advection.explicitUpwind.rst", "generated/examples.convection.advection.implicitUpwind.rst", "generated/examples.convection.advection.vanLeerUpwind.rst", "generated/examples.convection.exponential1D.rst", "generated/examples.convection.exponential1D.cylindricalMesh1D.rst", "generated/examples.convection.exponential1D.cylindricalMesh1DNonUniform.rst", "generated/examples.convection.exponential1D.mesh1D.rst", "generated/examples.convection.exponential1D.tri2D.rst", "generated/examples.convection.exponential1DBack.rst", "generated/examples.convection.exponential1DBack.mesh1D.rst", "generated/examples.convection.exponential1DSource.rst", "generated/examples.convection.exponential1DSource.mesh1D.rst", "generated/examples.convection.exponential1DSource.tri2D.rst", "generated/examples.convection.exponential2D.rst", "generated/examples.convection.exponential2D.cylindricalMesh2D.rst", "generated/examples.convection.exponential2D.cylindricalMesh2DNonUniform.rst", "generated/examples.convection.exponential2D.mesh2D.rst", "generated/examples.convection.exponential2D.tri2D.rst", "generated/examples.convection.peclet.rst", "generated/examples.convection.powerLaw1D.rst", "generated/examples.convection.powerLaw1D.mesh1D.rst", "generated/examples.convection.powerLaw1D.tri2D.rst", "generated/examples.convection.robin.rst", "generated/examples.convection.source.rst", "generated/examples.convection.test.rst", "generated/examples.diffusion.rst", "generated/examples.diffusion.anisotropy.rst", "generated/examples.diffusion.circle.rst", "generated/examples.diffusion.circleQuad.rst", "generated/examples.diffusion.coupled.rst", "generated/examples.diffusion.electrostatics.rst", "generated/examples.diffusion.explicit.rst", "generated/examples.diffusion.explicit.mesh1D.rst", "generated/examples.diffusion.explicit.mixedelement.rst", "generated/examples.diffusion.explicit.test.rst", "generated/examples.diffusion.explicit.tri2D.rst", "generated/examples.diffusion.mesh1D.rst", "generated/examples.diffusion.mesh20x20.rst", "generated/examples.diffusion.mesh20x20Coupled.rst", "generated/examples.diffusion.nthOrder.rst", "generated/examples.diffusion.nthOrder.input4thOrder1D.rst", "generated/examples.diffusion.nthOrder.input4thOrder_line.rst", "generated/examples.diffusion.nthOrder.test.rst", "generated/examples.diffusion.steadyState.rst", "generated/examples.diffusion.steadyState.mesh1D.rst", "generated/examples.diffusion.steadyState.mesh1D.inputPeriodic.rst", "generated/examples.diffusion.steadyState.mesh1D.tri2Dinput.rst", "generated/examples.diffusion.steadyState.mesh20x20.rst", "generated/examples.diffusion.steadyState.mesh20x20.gmshinput.rst", "generated/examples.diffusion.steadyState.mesh20x20.isotropy.rst", "generated/examples.diffusion.steadyState.mesh20x20.modifiedMeshInput.rst", "generated/examples.diffusion.steadyState.mesh20x20.orthoerror.rst", "generated/examples.diffusion.steadyState.mesh20x20.tri2Dinput.rst", "generated/examples.diffusion.steadyState.mesh50x50.rst", "generated/examples.diffusion.steadyState.mesh50x50.input.rst", "generated/examples.diffusion.steadyState.mesh50x50.tri2Dinput.rst", "generated/examples.diffusion.steadyState.otherMeshes.rst", "generated/examples.diffusion.steadyState.otherMeshes.cubicalProblem.rst", "generated/examples.diffusion.steadyState.otherMeshes.grid3Dinput.rst", "generated/examples.diffusion.steadyState.otherMeshes.prism.rst", "generated/examples.diffusion.steadyState.test.rst", "generated/examples.diffusion.test.rst", "generated/examples.diffusion.variable.rst", "generated/examples.elphf.rst", "generated/examples.elphf.diffusion.rst", "generated/examples.elphf.diffusion.mesh1D.rst", "generated/examples.elphf.diffusion.mesh1Ddimensional.rst", "generated/examples.elphf.diffusion.mesh2D.rst", "generated/examples.elphf.input.rst", "generated/examples.elphf.phase.rst", "generated/examples.elphf.phaseDiffusion.rst", "generated/examples.elphf.poisson.rst", "generated/examples.elphf.test.rst", "generated/examples.flow.rst", "generated/examples.flow.stokesCavity.rst", "generated/examples.flow.test.rst", "generated/examples.levelSet.rst", "generated/examples.levelSet.advection.rst", "generated/examples.levelSet.advection.circle.rst", "generated/examples.levelSet.advection.mesh1D.rst", "generated/examples.levelSet.advection.test.rst", "generated/examples.levelSet.advection.trench.rst", "generated/examples.levelSet.distanceFunction.rst", "generated/examples.levelSet.distanceFunction.circle.rst", "generated/examples.levelSet.distanceFunction.interior.rst", "generated/examples.levelSet.distanceFunction.mesh1D.rst", "generated/examples.levelSet.distanceFunction.square.rst", "generated/examples.levelSet.distanceFunction.test.rst", "generated/examples.levelSet.electroChem.rst", "generated/examples.levelSet.electroChem.adsorbingSurfactantEquation.rst", "generated/examples.levelSet.electroChem.adsorption.rst", "generated/examples.levelSet.electroChem.gapFillDistanceVariable.rst", "generated/examples.levelSet.electroChem.gapFillMesh.rst", "generated/examples.levelSet.electroChem.gold.rst", "generated/examples.levelSet.electroChem.howToWriteAScript.rst", "generated/examples.levelSet.electroChem.leveler.rst", "generated/examples.levelSet.electroChem.lines.rst", "generated/examples.levelSet.electroChem.matplotlibSurfactantViewer.rst", "generated/examples.levelSet.electroChem.mayaviSurfactantViewer.rst", "generated/examples.levelSet.electroChem.metalIonDiffusionEquation.rst", "generated/examples.levelSet.electroChem.simpleTrenchSystem.rst", "generated/examples.levelSet.electroChem.surfactantBulkDiffusionEquation.rst", "generated/examples.levelSet.electroChem.test.rst", "generated/examples.levelSet.electroChem.trenchMesh.rst", "generated/examples.levelSet.surfactant.rst", "generated/examples.levelSet.surfactant.circle.rst", "generated/examples.levelSet.surfactant.expandingCircle.rst", "generated/examples.levelSet.surfactant.square.rst", "generated/examples.levelSet.surfactant.test.rst", "generated/examples.levelSet.test.rst", "generated/examples.meshing.rst", "generated/examples.meshing.gmshRefinement.rst", "generated/examples.meshing.inputGrid2D.rst", "generated/examples.meshing.sphere.rst", "generated/examples.meshing.test.rst", "generated/examples.parallel.rst", "generated/examples.phase.rst", "generated/examples.phase.anisotropy.rst", "generated/examples.phase.anisotropyOLD.rst", "generated/examples.phase.binary.rst", "generated/examples.phase.binaryCoupled.rst", "generated/examples.phase.impingement.rst", "generated/examples.phase.impingement.mesh20x20.rst", "generated/examples.phase.impingement.mesh40x1.rst", "generated/examples.phase.impingement.test.rst", "generated/examples.phase.missOrientation.rst", "generated/examples.phase.missOrientation.circle.rst", "generated/examples.phase.missOrientation.mesh1D.rst", "generated/examples.phase.missOrientation.modCircle.rst", "generated/examples.phase.missOrientation.test.rst", "generated/examples.phase.polyxtal.rst", "generated/examples.phase.polyxtalCoupled.rst", "generated/examples.phase.quaternary.rst", "generated/examples.phase.simple.rst", "generated/examples.phase.symmetry.rst", "generated/examples.phase.test.rst", "generated/examples.reactiveWetting.rst", "generated/examples.reactiveWetting.liquidVapor1D.rst", "generated/examples.reactiveWetting.liquidVapor2D.rst", "generated/examples.reactiveWetting.test.rst", "generated/examples.riemann.rst", "generated/examples.riemann.acoustics.rst", "generated/examples.riemann.test.rst", "generated/examples.test.rst", "generated/examples.updating.rst", "generated/examples.updating.update0_1to1_0.rst", "generated/examples.updating.update1_0to2_0.rst", "generated/examples.updating.update2_0to3_0.rst", "generated/fipy.rst", "generated/fipy.boundaryConditions.rst", "generated/fipy.boundaryConditions.boundaryCondition.rst", "generated/fipy.boundaryConditions.constraint.rst", "generated/fipy.boundaryConditions.fixedFlux.rst", "generated/fipy.boundaryConditions.fixedValue.rst", "generated/fipy.boundaryConditions.nthOrderBoundaryCondition.rst", "generated/fipy.boundaryConditions.test.rst", "generated/fipy.matrices.rst", "generated/fipy.matrices.offsetSparseMatrix.rst", "generated/fipy.matrices.petscMatrix.rst", "generated/fipy.matrices.pysparseMatrix.rst", "generated/fipy.matrices.scipyMatrix.rst", "generated/fipy.matrices.sparseMatrix.rst", "generated/fipy.matrices.test.rst", "generated/fipy.matrices.trilinosMatrix.rst", "generated/fipy.meshes.rst", "generated/fipy.meshes.abstractMesh.rst", "generated/fipy.meshes.builders.rst", "generated/fipy.meshes.builders.abstractGridBuilder.rst", "generated/fipy.meshes.builders.grid1DBuilder.rst", "generated/fipy.meshes.builders.grid2DBuilder.rst", "generated/fipy.meshes.builders.grid3DBuilder.rst", "generated/fipy.meshes.builders.periodicGrid1DBuilder.rst", "generated/fipy.meshes.builders.utilityClasses.rst", "generated/fipy.meshes.cylindricalGrid1D.rst", "generated/fipy.meshes.cylindricalGrid2D.rst", "generated/fipy.meshes.cylindricalNonUniformGrid1D.rst", "generated/fipy.meshes.cylindricalNonUniformGrid2D.rst", "generated/fipy.meshes.cylindricalUniformGrid1D.rst", "generated/fipy.meshes.cylindricalUniformGrid2D.rst", "generated/fipy.meshes.factoryMeshes.rst", "generated/fipy.meshes.gmshMesh.rst", "generated/fipy.meshes.grid1D.rst", "generated/fipy.meshes.grid2D.rst", "generated/fipy.meshes.grid3D.rst", "generated/fipy.meshes.mesh.rst", "generated/fipy.meshes.mesh1D.rst", "generated/fipy.meshes.mesh2D.rst", "generated/fipy.meshes.nonUniformGrid1D.rst", "generated/fipy.meshes.nonUniformGrid2D.rst", "generated/fipy.meshes.nonUniformGrid3D.rst", "generated/fipy.meshes.periodicGrid1D.rst", "generated/fipy.meshes.periodicGrid2D.rst", "generated/fipy.meshes.periodicGrid3D.rst", "generated/fipy.meshes.representations.rst", "generated/fipy.meshes.representations.abstractRepresentation.rst", "generated/fipy.meshes.representations.gridRepresentation.rst", "generated/fipy.meshes.representations.meshRepresentation.rst", "generated/fipy.meshes.skewedGrid2D.rst", "generated/fipy.meshes.sphericalNonUniformGrid1D.rst", "generated/fipy.meshes.sphericalUniformGrid1D.rst", "generated/fipy.meshes.test.rst", "generated/fipy.meshes.topologies.rst", "generated/fipy.meshes.topologies.abstractTopology.rst", "generated/fipy.meshes.topologies.gridTopology.rst", "generated/fipy.meshes.topologies.meshTopology.rst", "generated/fipy.meshes.tri2D.rst", "generated/fipy.meshes.uniformGrid.rst", "generated/fipy.meshes.uniformGrid1D.rst", "generated/fipy.meshes.uniformGrid2D.rst", "generated/fipy.meshes.uniformGrid3D.rst", "generated/fipy.solvers.rst", "generated/fipy.solvers.petsc.rst", "generated/fipy.solvers.petsc.comms.rst", "generated/fipy.solvers.petsc.comms.parallelPETScCommWrapper.rst", "generated/fipy.solvers.petsc.comms.petscCommWrapper.rst", "generated/fipy.solvers.petsc.comms.serialPETScCommWrapper.rst", "generated/fipy.solvers.petsc.dummySolver.rst", "generated/fipy.solvers.petsc.linearBicgSolver.rst", "generated/fipy.solvers.petsc.linearCGSSolver.rst", "generated/fipy.solvers.petsc.linearGMRESSolver.rst", "generated/fipy.solvers.petsc.linearLUSolver.rst", "generated/fipy.solvers.petsc.linearPCGSolver.rst", "generated/fipy.solvers.petsc.petscKrylovSolver.rst", "generated/fipy.solvers.petsc.petscSolver.rst", "generated/fipy.solvers.pyAMG.rst", "generated/fipy.solvers.pyAMG.linearCGSSolver.rst", "generated/fipy.solvers.pyAMG.linearGMRESSolver.rst", "generated/fipy.solvers.pyAMG.linearGeneralSolver.rst", "generated/fipy.solvers.pyAMG.linearLUSolver.rst", "generated/fipy.solvers.pyAMG.linearPCGSolver.rst", "generated/fipy.solvers.pyAMG.preconditioners.rst", "generated/fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner.rst", "generated/fipy.solvers.pyamgx.rst", "generated/fipy.solvers.pyamgx.aggregationAMGSolver.rst", "generated/fipy.solvers.pyamgx.classicalAMGSolver.rst", "generated/fipy.solvers.pyamgx.linearBiCGStabSolver.rst", "generated/fipy.solvers.pyamgx.linearCGSolver.rst", "generated/fipy.solvers.pyamgx.linearFGMRESSolver.rst", "generated/fipy.solvers.pyamgx.linearGMRESSolver.rst", "generated/fipy.solvers.pyamgx.linearLUSolver.rst", "generated/fipy.solvers.pyamgx.preconditioners.rst", "generated/fipy.solvers.pyamgx.preconditioners.preconditioners.rst", "generated/fipy.solvers.pyamgx.pyAMGXSolver.rst", "generated/fipy.solvers.pyamgx.smoothers.rst", "generated/fipy.solvers.pyamgx.smoothers.smoothers.rst", "generated/fipy.solvers.pysparse.rst", "generated/fipy.solvers.pysparse.linearCGSSolver.rst", "generated/fipy.solvers.pysparse.linearGMRESSolver.rst", "generated/fipy.solvers.pysparse.linearJORSolver.rst", "generated/fipy.solvers.pysparse.linearLUSolver.rst", "generated/fipy.solvers.pysparse.linearPCGSolver.rst", "generated/fipy.solvers.pysparse.preconditioners.rst", "generated/fipy.solvers.pysparse.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.pysparse.preconditioners.preconditioner.rst", "generated/fipy.solvers.pysparse.preconditioners.ssorPreconditioner.rst", "generated/fipy.solvers.pysparse.pysparseSolver.rst", "generated/fipy.solvers.pysparseMatrixSolver.rst", "generated/fipy.solvers.scipy.rst", "generated/fipy.solvers.scipy.linearBicgstabSolver.rst", "generated/fipy.solvers.scipy.linearCGSSolver.rst", "generated/fipy.solvers.scipy.linearGMRESSolver.rst", "generated/fipy.solvers.scipy.linearLUSolver.rst", "generated/fipy.solvers.scipy.linearPCGSolver.rst", "generated/fipy.solvers.scipy.scipyKrylovSolver.rst", "generated/fipy.solvers.scipy.scipySolver.rst", "generated/fipy.solvers.solver.rst", "generated/fipy.solvers.test.rst", "generated/fipy.solvers.trilinos.rst", "generated/fipy.solvers.trilinos.comms.rst", "generated/fipy.solvers.trilinos.comms.epetraCommWrapper.rst", "generated/fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.rst", "generated/fipy.solvers.trilinos.comms.serialEpetraCommWrapper.rst", "generated/fipy.solvers.trilinos.linearBicgstabSolver.rst", "generated/fipy.solvers.trilinos.linearCGSSolver.rst", "generated/fipy.solvers.trilinos.linearGMRESSolver.rst", "generated/fipy.solvers.trilinos.linearLUSolver.rst", "generated/fipy.solvers.trilinos.linearPCGSolver.rst", "generated/fipy.solvers.trilinos.preconditioners.rst", "generated/fipy.solvers.trilinos.preconditioners.domDecompPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.icPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.preconditioner.rst", "generated/fipy.solvers.trilinos.trilinosAztecOOSolver.rst", "generated/fipy.solvers.trilinos.trilinosMLTest.rst", "generated/fipy.solvers.trilinos.trilinosNonlinearSolver.rst", "generated/fipy.solvers.trilinos.trilinosSolver.rst", "generated/fipy.steppers.rst", "generated/fipy.steppers.pidStepper.rst", "generated/fipy.steppers.pseudoRKQSStepper.rst", "generated/fipy.steppers.stepper.rst", "generated/fipy.terms.rst", "generated/fipy.terms.abstractBinaryTerm.rst", "generated/fipy.terms.abstractConvectionTerm.rst", "generated/fipy.terms.abstractDiffusionTerm.rst", "generated/fipy.terms.abstractUpwindConvectionTerm.rst", "generated/fipy.terms.advectionTerm.rst", "generated/fipy.terms.asymmetricConvectionTerm.rst", "generated/fipy.terms.binaryTerm.rst", "generated/fipy.terms.cellTerm.rst", "generated/fipy.terms.centralDiffConvectionTerm.rst", "generated/fipy.terms.coupledBinaryTerm.rst", "generated/fipy.terms.diffusionTerm.rst", "generated/fipy.terms.diffusionTermCorrection.rst", "generated/fipy.terms.diffusionTermNoCorrection.rst", "generated/fipy.terms.explicitDiffusionTerm.rst", "generated/fipy.terms.explicitSourceTerm.rst", "generated/fipy.terms.explicitUpwindConvectionTerm.rst", "generated/fipy.terms.exponentialConvectionTerm.rst", "generated/fipy.terms.faceTerm.rst", "generated/fipy.terms.firstOrderAdvectionTerm.rst", "generated/fipy.terms.hybridConvectionTerm.rst", "generated/fipy.terms.implicitDiffusionTerm.rst", "generated/fipy.terms.implicitSourceTerm.rst", "generated/fipy.terms.nonDiffusionTerm.rst", "generated/fipy.terms.powerLawConvectionTerm.rst", "generated/fipy.terms.residualTerm.rst", "generated/fipy.terms.sourceTerm.rst", "generated/fipy.terms.term.rst", "generated/fipy.terms.test.rst", "generated/fipy.terms.transientTerm.rst", "generated/fipy.terms.unaryTerm.rst", "generated/fipy.terms.upwindConvectionTerm.rst", "generated/fipy.terms.vanLeerConvectionTerm.rst", "generated/fipy.testFiPy.rst", "generated/fipy.tests.rst", "generated/fipy.tests.doctestPlus.rst", "generated/fipy.tests.lateImportTest.rst", "generated/fipy.tests.test.rst", "generated/fipy.tests.testProgram.rst", "generated/fipy.tools.rst", "generated/fipy.tools.comms.rst", "generated/fipy.tools.comms.commWrapper.rst", "generated/fipy.tools.comms.dummyComm.rst", "generated/fipy.tools.debug.rst", "generated/fipy.tools.decorators.rst", "generated/fipy.tools.dimensions.rst", "generated/fipy.tools.dimensions.DictWithDefault.rst", "generated/fipy.tools.dimensions.NumberDict.rst", "generated/fipy.tools.dimensions.physicalField.rst", "generated/fipy.tools.dump.rst", "generated/fipy.tools.inline.rst", "generated/fipy.tools.logging.rst", "generated/fipy.tools.numerix.rst", "generated/fipy.tools.parser.rst", "generated/fipy.tools.sharedtempfile.rst", "generated/fipy.tools.test.rst", "generated/fipy.tools.vector.rst", "generated/fipy.tools.version.rst", "generated/fipy.tools.vitals.rst", "generated/fipy.variables.rst", "generated/fipy.variables.addOverFacesVariable.rst", "generated/fipy.variables.arithmeticCellToFaceVariable.rst", "generated/fipy.variables.betaNoiseVariable.rst", "generated/fipy.variables.binaryOperatorVariable.rst", "generated/fipy.variables.cellToFaceVariable.rst", "generated/fipy.variables.cellVariable.rst", "generated/fipy.variables.constant.rst", "generated/fipy.variables.constraintMask.rst", "generated/fipy.variables.coupledCellVariable.rst", "generated/fipy.variables.distanceVariable.rst", "generated/fipy.variables.exponentialNoiseVariable.rst", "generated/fipy.variables.faceGradContributionsVariable.rst", "generated/fipy.variables.faceGradVariable.rst", "generated/fipy.variables.faceVariable.rst", "generated/fipy.variables.gammaNoiseVariable.rst", "generated/fipy.variables.gaussCellGradVariable.rst", "generated/fipy.variables.gaussianNoiseVariable.rst", "generated/fipy.variables.harmonicCellToFaceVariable.rst", "generated/fipy.variables.histogramVariable.rst", "generated/fipy.variables.interfaceAreaVariable.rst", "generated/fipy.variables.interfaceFlagVariable.rst", "generated/fipy.variables.leastSquaresCellGradVariable.rst", "generated/fipy.variables.levelSetDiffusionVariable.rst", "generated/fipy.variables.meshVariable.rst", "generated/fipy.variables.minmodCellToFaceVariable.rst", "generated/fipy.variables.modCellGradVariable.rst", "generated/fipy.variables.modCellToFaceVariable.rst", "generated/fipy.variables.modFaceGradVariable.rst", "generated/fipy.variables.modPhysicalField.rst", "generated/fipy.variables.modularVariable.rst", "generated/fipy.variables.noiseVariable.rst", "generated/fipy.variables.operatorVariable.rst", "generated/fipy.variables.scharfetterGummelFaceVariable.rst", "generated/fipy.variables.surfactantConvectionVariable.rst", "generated/fipy.variables.surfactantVariable.rst", "generated/fipy.variables.test.rst", "generated/fipy.variables.unaryOperatorVariable.rst", "generated/fipy.variables.uniformNoiseVariable.rst", "generated/fipy.variables.variable.rst", "generated/fipy.viewers.rst", "generated/fipy.viewers.matplotlibViewer.rst", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.rst", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib1DViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibStreamViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibVectorViewer.rst", "generated/fipy.viewers.matplotlibViewer.test.rst", "generated/fipy.viewers.mayaviViewer.rst", "generated/fipy.viewers.mayaviViewer.mayaviClient.rst", "generated/fipy.viewers.mayaviViewer.mayaviDaemon.rst", "generated/fipy.viewers.mayaviViewer.test.rst", "generated/fipy.viewers.multiViewer.rst", "generated/fipy.viewers.test.rst", "generated/fipy.viewers.testinteractive.rst", "generated/fipy.viewers.tsvViewer.rst", "generated/fipy.viewers.viewer.rst", "generated/fipy.viewers.vtkViewer.rst", "generated/fipy.viewers.vtkViewer.test.rst", "generated/fipy.viewers.vtkViewer.vtkCellViewer.rst", "generated/fipy.viewers.vtkViewer.vtkFaceViewer.rst", "generated/fipy.viewers.vtkViewer.vtkViewer.rst", "glossary.rst", "introduction.rst", "manual.rst", "numerical/discret.rst", "numerical/equation.rst", "numerical/index.rst", "numerical/scheme.rst", "references.rst", "tutorial/generated/package.rst", "tutorial/generated/package.subpackage.rst", "tutorial/generated/package.subpackage.base.rst", "tutorial/generated/package.subpackage.object.rst", "tutorial/index.rst"], "titles": ["Git practices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fipy</span></code> Package Documentation", "Change Log", "Create a conda_ environment", "Contact", "Contributors", "Disclaimer", "Efficiency", "Examples", "Frequently Asked Questions", "Git usage", "Development Guidelines", "Installation", "Terms of Use", "Nix Installation", "Publications", "Overview", "Solvers", "Using FiPy", "Viewers", "Virtual Kinetics of Materials Laboratory", "FiPy Contents", "Design and Implementation", "External Command-line Flags", "examples", "examples.benchmarking", "examples.benchmarking.benchmarker", "examples.benchmarking.size", "examples.benchmarking.steps", "examples.benchmarking.utils", "examples.benchmarking.versions", "examples.cahnHilliard", "examples.cahnHilliard.mesh2D", "examples.cahnHilliard.mesh2DCoupled", "examples.cahnHilliard.mesh3D", "examples.cahnHilliard.sphere", "examples.cahnHilliard.sphereDaemon", "examples.cahnHilliard.tanh1D", "examples.cahnHilliard.test", "examples.chemotaxis", "examples.chemotaxis.input", "examples.chemotaxis.input2D", "examples.chemotaxis.parameters", "examples.chemotaxis.test", "examples.convection", "examples.convection.advection", "examples.convection.advection.explicitUpwind", "examples.convection.advection.implicitUpwind", "examples.convection.advection.vanLeerUpwind", "examples.convection.exponential1D", "examples.convection.exponential1D.cylindricalMesh1D", "examples.convection.exponential1D.cylindricalMesh1DNonUniform", "examples.convection.exponential1D.mesh1D", "examples.convection.exponential1D.tri2D", "examples.convection.exponential1DBack", "examples.convection.exponential1DBack.mesh1D", "examples.convection.exponential1DSource", "examples.convection.exponential1DSource.mesh1D", "examples.convection.exponential1DSource.tri2D", "examples.convection.exponential2D", "examples.convection.exponential2D.cylindricalMesh2D", "examples.convection.exponential2D.cylindricalMesh2DNonUniform", "examples.convection.exponential2D.mesh2D", "examples.convection.exponential2D.tri2D", "examples.convection.peclet", "examples.convection.powerLaw1D", "examples.convection.powerLaw1D.mesh1D", "examples.convection.powerLaw1D.tri2D", "examples.convection.robin", "examples.convection.source", "examples.convection.test", "examples.diffusion", "examples.diffusion.anisotropy", "examples.diffusion.circle", "examples.diffusion.circleQuad", "examples.diffusion.coupled", "examples.diffusion.electrostatics", "examples.diffusion.explicit", "examples.diffusion.explicit.mesh1D", "examples.diffusion.explicit.mixedelement", "examples.diffusion.explicit.test", "examples.diffusion.explicit.tri2D", "examples.diffusion.mesh1D", "examples.diffusion.mesh20x20", "examples.diffusion.mesh20x20Coupled", "examples.diffusion.nthOrder", "examples.diffusion.nthOrder.input4thOrder1D", "examples.diffusion.nthOrder.input4thOrder_line", "examples.diffusion.nthOrder.test", "examples.diffusion.steadyState", "examples.diffusion.steadyState.mesh1D", "examples.diffusion.steadyState.mesh1D.inputPeriodic", "examples.diffusion.steadyState.mesh1D.tri2Dinput", "examples.diffusion.steadyState.mesh20x20", "examples.diffusion.steadyState.mesh20x20.gmshinput", "examples.diffusion.steadyState.mesh20x20.isotropy", "examples.diffusion.steadyState.mesh20x20.modifiedMeshInput", "examples.diffusion.steadyState.mesh20x20.orthoerror", "examples.diffusion.steadyState.mesh20x20.tri2Dinput", "examples.diffusion.steadyState.mesh50x50", "examples.diffusion.steadyState.mesh50x50.input", "examples.diffusion.steadyState.mesh50x50.tri2Dinput", "examples.diffusion.steadyState.otherMeshes", "examples.diffusion.steadyState.otherMeshes.cubicalProblem", "examples.diffusion.steadyState.otherMeshes.grid3Dinput", "examples.diffusion.steadyState.otherMeshes.prism", "examples.diffusion.steadyState.test", "examples.diffusion.test", "examples.diffusion.variable", "examples.elphf", "examples.elphf.diffusion", "examples.elphf.diffusion.mesh1D", "examples.elphf.diffusion.mesh1Ddimensional", "examples.elphf.diffusion.mesh2D", "examples.elphf.input", "examples.elphf.phase", "examples.elphf.phaseDiffusion", "examples.elphf.poisson", "examples.elphf.test", "examples.flow", "examples.flow.stokesCavity", "examples.flow.test", "examples.levelSet", "examples.levelSet.advection", "examples.levelSet.advection.circle", "examples.levelSet.advection.mesh1D", "examples.levelSet.advection.test", "examples.levelSet.advection.trench", "examples.levelSet.distanceFunction", "examples.levelSet.distanceFunction.circle", "examples.levelSet.distanceFunction.interior", "examples.levelSet.distanceFunction.mesh1D", "examples.levelSet.distanceFunction.square", "examples.levelSet.distanceFunction.test", "examples.levelSet.electroChem", "examples.levelSet.electroChem.adsorbingSurfactantEquation", "examples.levelSet.electroChem.adsorption", "examples.levelSet.electroChem.gapFillDistanceVariable", "examples.levelSet.electroChem.gapFillMesh", "examples.levelSet.electroChem.gold", "examples.levelSet.electroChem.howToWriteAScript", "examples.levelSet.electroChem.leveler", "examples.levelSet.electroChem.lines", "examples.levelSet.electroChem.matplotlibSurfactantViewer", "examples.levelSet.electroChem.mayaviSurfactantViewer", "examples.levelSet.electroChem.metalIonDiffusionEquation", "examples.levelSet.electroChem.simpleTrenchSystem", "examples.levelSet.electroChem.surfactantBulkDiffusionEquation", "examples.levelSet.electroChem.test", "examples.levelSet.electroChem.trenchMesh", "examples.levelSet.surfactant", "examples.levelSet.surfactant.circle", "examples.levelSet.surfactant.expandingCircle", "examples.levelSet.surfactant.square", "examples.levelSet.surfactant.test", "examples.levelSet.test", "examples.meshing", "examples.meshing.gmshRefinement", "examples.meshing.inputGrid2D", "examples.meshing.sphere", "examples.meshing.test", "examples.parallel", "examples.phase", "examples.phase.anisotropy", "examples.phase.anisotropyOLD", "examples.phase.binary", "examples.phase.binaryCoupled", "examples.phase.impingement", "examples.phase.impingement.mesh20x20", "examples.phase.impingement.mesh40x1", "examples.phase.impingement.test", "examples.phase.missOrientation", "examples.phase.missOrientation.circle", "examples.phase.missOrientation.mesh1D", "examples.phase.missOrientation.modCircle", "examples.phase.missOrientation.test", "examples.phase.polyxtal", "examples.phase.polyxtalCoupled", "examples.phase.quaternary", "examples.phase.simple", "examples.phase.symmetry", "examples.phase.test", "examples.reactiveWetting", "examples.reactiveWetting.liquidVapor1D", "examples.reactiveWetting.liquidVapor2D", "examples.reactiveWetting.test", "examples.riemann", "examples.riemann.acoustics", "examples.riemann.test", "examples.test", "examples.updating", "examples.updating.update0_1to1_0", "examples.updating.update1_0to2_0", "examples.updating.update2_0to3_0", "fipy", "fipy.boundaryConditions", "fipy.boundaryConditions.boundaryCondition", "fipy.boundaryConditions.constraint", "fipy.boundaryConditions.fixedFlux", "fipy.boundaryConditions.fixedValue", "fipy.boundaryConditions.nthOrderBoundaryCondition", "fipy.boundaryConditions.test", "fipy.matrices", "fipy.matrices.offsetSparseMatrix", "fipy.matrices.petscMatrix", "fipy.matrices.pysparseMatrix", "fipy.matrices.scipyMatrix", "fipy.matrices.sparseMatrix", "fipy.matrices.test", "fipy.matrices.trilinosMatrix", "fipy.meshes", "fipy.meshes.abstractMesh", "fipy.meshes.builders", "fipy.meshes.builders.abstractGridBuilder", "fipy.meshes.builders.grid1DBuilder", "fipy.meshes.builders.grid2DBuilder", "fipy.meshes.builders.grid3DBuilder", "fipy.meshes.builders.periodicGrid1DBuilder", "fipy.meshes.builders.utilityClasses", "fipy.meshes.cylindricalGrid1D", "fipy.meshes.cylindricalGrid2D", "fipy.meshes.cylindricalNonUniformGrid1D", "fipy.meshes.cylindricalNonUniformGrid2D", "fipy.meshes.cylindricalUniformGrid1D", "fipy.meshes.cylindricalUniformGrid2D", "fipy.meshes.factoryMeshes", "fipy.meshes.gmshMesh", "fipy.meshes.grid1D", "fipy.meshes.grid2D", "fipy.meshes.grid3D", "fipy.meshes.mesh", "fipy.meshes.mesh1D", "fipy.meshes.mesh2D", "fipy.meshes.nonUniformGrid1D", "fipy.meshes.nonUniformGrid2D", "fipy.meshes.nonUniformGrid3D", "fipy.meshes.periodicGrid1D", "fipy.meshes.periodicGrid2D", "fipy.meshes.periodicGrid3D", "fipy.meshes.representations", "fipy.meshes.representations.abstractRepresentation", "fipy.meshes.representations.gridRepresentation", "fipy.meshes.representations.meshRepresentation", "fipy.meshes.skewedGrid2D", "fipy.meshes.sphericalNonUniformGrid1D", "fipy.meshes.sphericalUniformGrid1D", "fipy.meshes.test", "fipy.meshes.topologies", "fipy.meshes.topologies.abstractTopology", "fipy.meshes.topologies.gridTopology", "fipy.meshes.topologies.meshTopology", "fipy.meshes.tri2D", "fipy.meshes.uniformGrid", "fipy.meshes.uniformGrid1D", "fipy.meshes.uniformGrid2D", "fipy.meshes.uniformGrid3D", "fipy.solvers", "fipy.solvers.petsc", "fipy.solvers.petsc.comms", "fipy.solvers.petsc.comms.parallelPETScCommWrapper", "fipy.solvers.petsc.comms.petscCommWrapper", "fipy.solvers.petsc.comms.serialPETScCommWrapper", "fipy.solvers.petsc.dummySolver", "fipy.solvers.petsc.linearBicgSolver", "fipy.solvers.petsc.linearCGSSolver", "fipy.solvers.petsc.linearGMRESSolver", "fipy.solvers.petsc.linearLUSolver", "fipy.solvers.petsc.linearPCGSolver", "fipy.solvers.petsc.petscKrylovSolver", "fipy.solvers.petsc.petscSolver", "fipy.solvers.pyAMG", "fipy.solvers.pyAMG.linearCGSSolver", "fipy.solvers.pyAMG.linearGMRESSolver", "fipy.solvers.pyAMG.linearGeneralSolver", "fipy.solvers.pyAMG.linearLUSolver", "fipy.solvers.pyAMG.linearPCGSolver", "fipy.solvers.pyAMG.preconditioners", "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner", "fipy.solvers.pyamgx", "fipy.solvers.pyamgx.aggregationAMGSolver", "fipy.solvers.pyamgx.classicalAMGSolver", "fipy.solvers.pyamgx.linearBiCGStabSolver", "fipy.solvers.pyamgx.linearCGSolver", "fipy.solvers.pyamgx.linearFGMRESSolver", "fipy.solvers.pyamgx.linearGMRESSolver", "fipy.solvers.pyamgx.linearLUSolver", "fipy.solvers.pyamgx.preconditioners", "fipy.solvers.pyamgx.preconditioners.preconditioners", "fipy.solvers.pyamgx.pyAMGXSolver", "fipy.solvers.pyamgx.smoothers", "fipy.solvers.pyamgx.smoothers.smoothers", "fipy.solvers.pysparse", "fipy.solvers.pysparse.linearCGSSolver", "fipy.solvers.pysparse.linearGMRESSolver", "fipy.solvers.pysparse.linearJORSolver", "fipy.solvers.pysparse.linearLUSolver", "fipy.solvers.pysparse.linearPCGSolver", "fipy.solvers.pysparse.preconditioners", "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner", "fipy.solvers.pysparse.preconditioners.preconditioner", "fipy.solvers.pysparse.preconditioners.ssorPreconditioner", "fipy.solvers.pysparse.pysparseSolver", "fipy.solvers.pysparseMatrixSolver", "fipy.solvers.scipy", "fipy.solvers.scipy.linearBicgstabSolver", "fipy.solvers.scipy.linearCGSSolver", "fipy.solvers.scipy.linearGMRESSolver", "fipy.solvers.scipy.linearLUSolver", "fipy.solvers.scipy.linearPCGSolver", "fipy.solvers.scipy.scipyKrylovSolver", "fipy.solvers.scipy.scipySolver", "fipy.solvers.solver", "fipy.solvers.test", "fipy.solvers.trilinos", "fipy.solvers.trilinos.comms", "fipy.solvers.trilinos.comms.epetraCommWrapper", "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper", "fipy.solvers.trilinos.comms.serialEpetraCommWrapper", "fipy.solvers.trilinos.linearBicgstabSolver", "fipy.solvers.trilinos.linearCGSSolver", "fipy.solvers.trilinos.linearGMRESSolver", "fipy.solvers.trilinos.linearLUSolver", "fipy.solvers.trilinos.linearPCGSolver", "fipy.solvers.trilinos.preconditioners", "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner", "fipy.solvers.trilinos.preconditioners.icPreconditioner", "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner", "fipy.solvers.trilinos.preconditioners.preconditioner", "fipy.solvers.trilinos.trilinosAztecOOSolver", "fipy.solvers.trilinos.trilinosMLTest", "fipy.solvers.trilinos.trilinosNonlinearSolver", "fipy.solvers.trilinos.trilinosSolver", "fipy.steppers", "fipy.steppers.pidStepper", "fipy.steppers.pseudoRKQSStepper", "fipy.steppers.stepper", "fipy.terms", "fipy.terms.abstractBinaryTerm", "fipy.terms.abstractConvectionTerm", "fipy.terms.abstractDiffusionTerm", "fipy.terms.abstractUpwindConvectionTerm", "fipy.terms.advectionTerm", "fipy.terms.asymmetricConvectionTerm", "fipy.terms.binaryTerm", "fipy.terms.cellTerm", "fipy.terms.centralDiffConvectionTerm", "fipy.terms.coupledBinaryTerm", "fipy.terms.diffusionTerm", "fipy.terms.diffusionTermCorrection", "fipy.terms.diffusionTermNoCorrection", "fipy.terms.explicitDiffusionTerm", "fipy.terms.explicitSourceTerm", "fipy.terms.explicitUpwindConvectionTerm", "fipy.terms.exponentialConvectionTerm", "fipy.terms.faceTerm", "fipy.terms.firstOrderAdvectionTerm", "fipy.terms.hybridConvectionTerm", "fipy.terms.implicitDiffusionTerm", "fipy.terms.implicitSourceTerm", "fipy.terms.nonDiffusionTerm", "fipy.terms.powerLawConvectionTerm", "fipy.terms.residualTerm", "fipy.terms.sourceTerm", "fipy.terms.term", "fipy.terms.test", "fipy.terms.transientTerm", "fipy.terms.unaryTerm", "fipy.terms.upwindConvectionTerm", "fipy.terms.vanLeerConvectionTerm", "fipy.testFiPy", "fipy.tests", "fipy.tests.doctestPlus", "fipy.tests.lateImportTest", "fipy.tests.test", "fipy.tests.testProgram", "fipy.tools", "fipy.tools.comms", "fipy.tools.comms.commWrapper", "fipy.tools.comms.dummyComm", "fipy.tools.debug", "fipy.tools.decorators", "fipy.tools.dimensions", "fipy.tools.dimensions.DictWithDefault", "fipy.tools.dimensions.NumberDict", "fipy.tools.dimensions.physicalField", "fipy.tools.dump", "fipy.tools.inline", "fipy.tools.logging", "fipy.tools.numerix", "fipy.tools.parser", "fipy.tools.sharedtempfile", "fipy.tools.test", "fipy.tools.vector", "fipy.tools.version", "fipy.tools.vitals", "fipy.variables", "fipy.variables.addOverFacesVariable", "fipy.variables.arithmeticCellToFaceVariable", "fipy.variables.betaNoiseVariable", "fipy.variables.binaryOperatorVariable", "fipy.variables.cellToFaceVariable", "fipy.variables.cellVariable", "fipy.variables.constant", "fipy.variables.constraintMask", "fipy.variables.coupledCellVariable", "fipy.variables.distanceVariable", "fipy.variables.exponentialNoiseVariable", "fipy.variables.faceGradContributionsVariable", "fipy.variables.faceGradVariable", "fipy.variables.faceVariable", "fipy.variables.gammaNoiseVariable", "fipy.variables.gaussCellGradVariable", "fipy.variables.gaussianNoiseVariable", "fipy.variables.harmonicCellToFaceVariable", "fipy.variables.histogramVariable", "fipy.variables.interfaceAreaVariable", "fipy.variables.interfaceFlagVariable", "fipy.variables.leastSquaresCellGradVariable", "fipy.variables.levelSetDiffusionVariable", "fipy.variables.meshVariable", "fipy.variables.minmodCellToFaceVariable", "fipy.variables.modCellGradVariable", "fipy.variables.modCellToFaceVariable", "fipy.variables.modFaceGradVariable", "fipy.variables.modPhysicalField", "fipy.variables.modularVariable", "fipy.variables.noiseVariable", "fipy.variables.operatorVariable", "fipy.variables.scharfetterGummelFaceVariable", "fipy.variables.surfactantConvectionVariable", "fipy.variables.surfactantVariable", "fipy.variables.test", "fipy.variables.unaryOperatorVariable", "fipy.variables.uniformNoiseVariable", "fipy.variables.variable", "fipy.viewers", "fipy.viewers.matplotlibViewer", "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer", "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer", "fipy.viewers.matplotlibViewer.matplotlib1DViewer", "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer", "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer", "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer", "fipy.viewers.matplotlibViewer.matplotlib2DViewer", "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer", "fipy.viewers.matplotlibViewer.matplotlibStreamViewer", "fipy.viewers.matplotlibViewer.matplotlibVectorViewer", "fipy.viewers.matplotlibViewer.test", "fipy.viewers.mayaviViewer", "fipy.viewers.mayaviViewer.mayaviClient", "fipy.viewers.mayaviViewer.mayaviDaemon", "fipy.viewers.mayaviViewer.test", "fipy.viewers.multiViewer", "fipy.viewers.test", "fipy.viewers.testinteractive", "fipy.viewers.tsvViewer", "fipy.viewers.viewer", "fipy.viewers.vtkViewer", "fipy.viewers.vtkViewer.test", "fipy.viewers.vtkViewer.vtkCellViewer", "fipy.viewers.vtkViewer.vtkFaceViewer", "fipy.viewers.vtkViewer.vtkViewer", "Glossary", "Introduction", "FiPy Manual", "Finite Volume Method", "General Conservation Equation", "Theoretical and Numerical Background", "Numerical Schemes", "References", "package", "package.subpackage", "package.subpackage.base", "package.subpackage.object", "How to Read the Modules Documentation"], "terms": {"refer": [0, 2, 9, 16, 21, 22, 72, 82, 120, 179, 183, 193, 236, 251, 470, 478, 479], "usag": [0, 6, 7, 21, 469], "current": [0, 2, 9, 10, 12, 14, 16, 18, 20, 48, 139, 140, 141, 146, 183, 192, 194, 335, 338, 377, 381, 400, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 471], "convent": [0, 21, 469, 472], "whether": [0, 9, 11, 13, 20, 22, 75, 136, 141, 143, 144, 146, 377, 381, 390, 391, 394, 396, 411, 440, 443, 444, 445, 446, 447, 448, 449, 451, 452], "fix": [0, 9, 10, 12, 21, 73, 74, 76, 82, 91, 117, 163, 176, 177, 179, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 469], "bug": [0, 2, 4, 9, 22, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "ad": [0, 2, 5, 10, 12, 18, 22, 115, 120, 168, 169, 176, 177, 179, 191, 198, 199, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 356, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 478], "featur": [0, 4, 9, 22, 120, 468, 475], "all": [0, 2, 3, 4, 7, 9, 10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 32, 33, 76, 82, 97, 103, 107, 111, 117, 140, 143, 144, 146, 155, 158, 160, 163, 165, 166, 176, 177, 183, 185, 189, 191, 192, 193, 211, 226, 262, 268, 269, 273, 274, 285, 301, 307, 311, 316, 334, 336, 337, 347, 377, 379, 381, 385, 390, 394, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 468, 471, 472, 474, 478, 479], "work": [0, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 48, 64, 75, 82, 120, 164, 165, 166, 179, 183, 191, 192, 194, 335, 340, 371, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468, 469, 471, 478], "fipi": [0, 2, 3, 4, 5, 7, 10, 11, 14, 15, 16, 17, 19, 20, 22, 24, 32, 33, 34, 35, 37, 40, 41, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 82, 83, 84, 86, 91, 92, 95, 96, 105, 109, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 131, 139, 140, 141, 143, 144, 146, 158, 159, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 468, 469, 471, 472, 473, 474, 476, 477, 478, 480], "should": [0, 2, 7, 9, 10, 11, 12, 16, 18, 48, 73, 74, 75, 82, 92, 139, 146, 165, 166, 179, 183, 191, 192, 193, 226, 256, 294, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 381, 386, 390, 394, 395, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 478, 479], "conduct": [0, 9, 82, 471, 474], "pull": [0, 21, 469], "request": [0, 2, 4, 17], "If": [0, 4, 8, 9, 12, 15, 17, 18, 22, 35, 37, 50, 51, 52, 57, 60, 61, 66, 73, 74, 75, 76, 78, 79, 82, 86, 111, 112, 113, 114, 115, 116, 117, 124, 139, 140, 141, 143, 144, 146, 164, 165, 166, 168, 169, 178, 179, 191, 192, 193, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 311, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 385, 386, 390, 391, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 471, 478, 479], "i": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 32, 33, 34, 35, 37, 40, 41, 48, 50, 51, 52, 53, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 86, 87, 91, 92, 94, 95, 96, 98, 100, 101, 105, 108, 109, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 130, 132, 136, 138, 139, 140, 141, 146, 151, 152, 158, 159, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 194, 196, 198, 200, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 279, 280, 281, 282, 283, 284, 285, 292, 293, 295, 296, 299, 301, 304, 305, 306, 307, 308, 311, 316, 318, 319, 320, 321, 322, 333, 334, 335, 337, 338, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 379, 380, 381, 385, 386, 390, 391, 394, 395, 396, 398, 399, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 443, 444, 446, 448, 449, 451, 452, 456, 461, 462, 468, 469, 471, 472, 473, 474, 475, 478, 479], "alreadi": [0, 4, 11, 191, 381, 390], "report": [0, 2, 4, 18, 377], "github": [0, 2, 9, 10, 12, 14, 16, 21, 176, 177, 468], "issu": [0, 2, 9, 10, 12, 16, 18, 21, 22, 165, 166, 192, 193, 386, 411, 451], "name": [0, 2, 3, 6, 9, 11, 12, 18, 21, 32, 33, 34, 35, 37, 40, 41, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 73, 74, 76, 78, 79, 82, 83, 84, 86, 91, 95, 96, 105, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 131, 140, 143, 144, 159, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 183, 184, 191, 193, 211, 226, 230, 256, 311, 342, 377, 381, 386, 390, 391, 396, 400, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 478, 479], "accordingli": 0, "issue12345": 0, "summary_of_what_branch_address": 0, "checkout": [0, 10, 12], "b": [0, 2, 15, 18, 22, 32, 33, 104, 141, 165, 166, 168, 179, 226, 273, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 471, 475], "edit": [0, 2, 140, 340, 475], "add": [0, 2, 12, 15, 18, 21, 57, 114, 115, 179, 198, 199, 200, 211, 226, 230, 256, 311, 342, 367, 381, 390, 441, 456], "emac": 0, "commit": 0, "m": [0, 12, 14, 15, 18, 21, 75, 112, 114, 136, 141, 143, 146, 163, 164, 176, 177, 178, 179, 183, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 339, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 461, 469, 475], "refactoring_stage_a": 0, "refactoring_stage_b": 0, "sure": [0, 10, 12, 17, 18, 136, 192], "up": [0, 2, 4, 7, 9, 12, 14, 15, 17, 18, 19, 22, 32, 33, 73, 74, 120, 140, 164, 178, 226, 441, 456, 471], "date": [0, 2], "fetch": [0, 10, 12], "origin": [0, 2, 22, 168, 176, 177, 221, 222, 223, 224, 225, 244, 245, 253, 254, 255, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "state": [0, 2, 9, 10, 12, 13, 32, 33, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 66, 67, 73, 74, 76, 82, 83, 84, 86, 92, 95, 108, 115, 140, 146, 179, 183, 191, 472, 473], "diff": [0, 37, 192, 193], "resolv": [0, 2, 9, 12, 191, 347], "ani": [0, 2, 3, 8, 9, 10, 11, 12, 13, 16, 17, 18, 21, 22, 32, 33, 76, 117, 140, 141, 143, 144, 146, 179, 191, 192, 193, 200, 226, 236, 256, 347, 379, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 468, 471, 472, 478, 479], "conflict": [0, 2, 3, 12], "test": [0, 2, 5, 7, 8, 9, 10, 12, 14, 17, 21, 24, 33, 40, 41, 48, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 69, 73, 74, 78, 79, 81, 82, 83, 84, 92, 94, 96, 97, 98, 100, 101, 103, 104, 105, 108, 111, 115, 117, 120, 124, 125, 127, 129, 130, 131, 132, 136, 140, 151, 152, 164, 165, 166, 168, 169, 172, 173, 174, 180, 187, 191, 194, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 256, 335, 347, 350, 351, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374, 375, 381, 390, 391, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 445, 447, 448, 449, 451, 452, 454, 455, 460, 468, 469], "python": [0, 2, 3, 4, 7, 8, 9, 14, 15, 16, 17, 19, 21, 23, 82, 92, 139, 140, 141, 143, 144, 146, 158, 163, 176, 177, 178, 179, 183, 192, 194, 311, 381, 390, 395, 399, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 454, 455, 456, 468, 469, 471, 475, 478, 479], "setup": [0, 2, 8, 12, 14, 18, 82, 109, 111, 115, 117, 124, 125, 129, 131, 140, 194, 379], "py": [0, 2, 7, 8, 11, 12, 14, 16, 18, 35, 79, 81, 82, 91, 92, 94, 95, 96, 101, 105, 108, 112, 114, 139, 140, 141, 146, 158, 176, 177, 179, 191, 194, 311, 454, 455, 456, 478], "necessari": [0, 2, 3, 9, 12, 17, 18, 22, 68, 78, 81, 82, 163, 164, 165, 166, 169, 176, 177, 183, 191, 192, 193, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451, 472, 478], "fork": 0, "repositori": [0, 2, 9, 10, 12, 22, 381, 400, 468], "remot": 0, "link": [0, 2, 4, 10, 12, 22], "your": [0, 2, 4, 8, 9, 10, 11, 12, 14, 15, 18, 20, 75, 82, 191, 192, 193, 311, 390, 394, 468, 478], "myfork": 0, "myforkurl": 0, "push": 0, "now": [0, 2, 4, 9, 10, 12, 14, 18, 33, 64, 73, 74, 76, 82, 111, 112, 113, 117, 120, 140, 164, 165, 166, 179, 191, 192, 193, 468, 471], "creat": [0, 2, 7, 9, 13, 18, 21, 35, 37, 50, 51, 52, 60, 61, 72, 73, 74, 78, 82, 83, 84, 86, 111, 112, 113, 114, 115, 116, 127, 131, 140, 143, 144, 159, 163, 164, 168, 169, 172, 173, 174, 176, 177, 178, 179, 180, 191, 192, 196, 200, 221, 222, 223, 224, 225, 226, 233, 234, 236, 237, 238, 243, 244, 245, 251, 253, 254, 262, 268, 269, 273, 274, 285, 295, 298, 299, 300, 301, 307, 311, 316, 324, 325, 326, 327, 328, 329, 330, 333, 334, 336, 337, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 381, 390, 394, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 451, 452, 454, 455, 456, 461, 462, 463, 465, 466, 467, 468, 469, 471, 478, 479], "against": [0, 7, 18, 50, 51, 52, 55, 57, 60, 61, 62, 66, 69, 78, 79, 82, 164, 165, 166, 168, 179, 191, 381, 390, 442], "usnistgov": [0, 4, 9, 10, 12], "The": [0, 2, 4, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 32, 33, 34, 35, 37, 48, 50, 51, 52, 53, 57, 58, 60, 61, 63, 67, 68, 69, 73, 74, 75, 76, 78, 79, 81, 82, 86, 91, 92, 95, 96, 98, 100, 101, 105, 109, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 130, 131, 132, 136, 138, 139, 140, 141, 143, 144, 146, 151, 152, 153, 158, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 180, 183, 191, 192, 193, 194, 198, 199, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 263, 264, 265, 266, 267, 268, 271, 272, 273, 275, 279, 280, 281, 282, 283, 284, 285, 292, 293, 294, 295, 296, 301, 304, 305, 306, 307, 308, 311, 318, 319, 320, 321, 322, 333, 338, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 386, 390, 394, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 480], "initi": [0, 2, 9, 12, 22, 32, 33, 50, 51, 52, 57, 60, 61, 72, 78, 82, 83, 84, 86, 91, 113, 120, 124, 127, 131, 139, 140, 143, 144, 146, 152, 153, 164, 165, 166, 168, 169, 172, 173, 174, 178, 179, 183, 191, 192, 226, 331, 332, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 407, 411, 415, 425, 431, 432, 434, 436], "autom": [0, 2, 5, 7, 22, 192, 468], "check": [0, 2, 10, 11, 12, 18, 22, 48, 79, 82, 112, 127, 153, 226, 391, 399, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "statu": [0, 10, 12, 17], "absolut": [0, 9, 96, 112, 127, 381, 390, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "document": [0, 2, 4, 6, 8, 10, 12, 13, 18, 21, 22, 82, 335, 381, 394, 395, 400, 468, 470, 478], "failur": [0, 2, 9, 46, 47, 82, 377, 378], "still": [0, 2, 7, 9, 12, 75, 115, 179, 191, 192, 379, 394, 471], "an": [0, 2, 3, 4, 7, 8, 10, 12, 13, 15, 16, 17, 18, 20, 21, 22, 32, 33, 37, 50, 51, 60, 61, 68, 69, 72, 73, 74, 75, 76, 78, 79, 82, 83, 84, 86, 92, 109, 111, 112, 113, 114, 115, 116, 117, 120, 130, 136, 139, 140, 152, 159, 163, 164, 165, 166, 169, 172, 173, 174, 176, 177, 179, 183, 191, 192, 194, 200, 226, 263, 264, 265, 266, 267, 271, 272, 273, 275, 279, 280, 281, 282, 283, 284, 304, 305, 306, 308, 318, 319, 320, 321, 322, 347, 377, 381, 390, 391, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 446, 447, 448, 463, 468, 469, 471, 472, 474, 475, 478, 479], "experiment": [0, 2, 82, 139, 140, 141, 146, 163, 176, 177], "you": [0, 2, 3, 4, 8, 9, 10, 11, 12, 14, 15, 18, 20, 21, 32, 33, 34, 35, 75, 82, 139, 141, 146, 163, 164, 176, 177, 191, 192, 193, 226, 311, 394, 469, 478, 479], "would": [0, 11, 12, 16, 18, 32, 34, 35, 82, 120, 165, 166, 179, 192, 194, 381, 396, 471], "like": [0, 7, 9, 12, 16, 18, 20, 22, 57, 82, 120, 179, 191, 200, 381, 390, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 456, 468, 471, 472, 478, 479], "its": [0, 2, 7, 12, 13, 17, 18, 20, 22, 48, 82, 131, 140, 163, 176, 177, 192, 196, 200, 226, 268, 269, 299, 301, 311, 333, 334, 337, 338, 350, 360, 368, 369, 381, 390, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 444, 451, 462, 471, 478], "impact": 0, "mai": [0, 3, 4, 7, 9, 10, 12, 13, 15, 16, 17, 18, 22, 48, 82, 165, 166, 192, 193, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 256, 311, 379, 386, 394, 471, 479], "prepend": 0, "wip": 0, "titl": [0, 2, 13, 21, 40, 41, 143, 144, 163, 176, 177, 339, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "thi": [0, 2, 3, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 32, 33, 35, 37, 46, 47, 48, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 86, 87, 92, 94, 95, 96, 97, 98, 100, 101, 105, 108, 109, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 131, 136, 138, 139, 140, 141, 146, 151, 152, 153, 158, 159, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 180, 183, 191, 192, 193, 194, 196, 198, 199, 200, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 256, 268, 269, 294, 295, 299, 301, 311, 333, 334, 335, 337, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 379, 380, 381, 386, 390, 394, 395, 396, 398, 400, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 456, 462, 468, 469, 471, 473, 474, 478, 479], "prevent": [0, 7, 17, 141, 183, 378, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 478], "being": [0, 10, 12, 13, 18, 50, 51, 52, 60, 61, 78, 82, 95, 96, 100, 101, 105, 179, 191, 251, 411, 468, 471, 478, 479], "befor": [0, 2, 9, 10, 11, 12, 17, 18, 23, 32, 33, 82, 165, 166, 178, 191, 192, 203, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 385, 479], "": [0, 2, 3, 4, 5, 7, 8, 11, 12, 15, 17, 18, 21, 22, 32, 33, 40, 68, 73, 74, 82, 109, 112, 114, 117, 140, 141, 143, 146, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 183, 191, 192, 199, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 443, 444, 446, 447, 448, 449, 451, 452, 468, 469, 473, 475, 478], "allow": [0, 2, 7, 9, 12, 17, 18, 20, 22, 87, 97, 117, 172, 173, 174, 179, 377, 390, 395, 468, 474], "run": [0, 2, 3, 7, 8, 10, 11, 12, 17, 19, 20, 21, 22, 37, 50, 51, 52, 57, 60, 61, 66, 73, 74, 76, 78, 82, 86, 92, 97, 107, 111, 112, 113, 114, 115, 116, 117, 139, 140, 141, 146, 155, 158, 160, 164, 168, 169, 178, 179, 185, 189, 191, 194, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 377, 380, 381, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 454, 455, 456, 468, 469], "pleas": [0, 2, 4, 8, 9, 12, 15, 16, 191, 192, 193], "respect": [0, 2, 109, 114, 116, 164, 165, 166, 169, 178, 183, 200, 471, 472], "resourc": [0, 2, 4, 12, 18, 194], "do": [0, 2, 4, 8, 10, 11, 12, 18, 21, 22, 48, 82, 130, 132, 140, 141, 179, 183, 191, 192, 193, 200, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 262, 340, 381, 396, 398, 441, 456, 461, 469, 478, 479], "bulk": [0, 136, 139, 140, 146, 165, 166], "local": [0, 12, 14, 20, 73, 74, 82, 96, 152, 226, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 400, 468], "machin": [0, 18, 20, 22], "own": [0, 8, 10, 12, 14, 17, 18, 22, 82, 191, 192, 390, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 476, 477, 480], "account": [0, 4, 12, 18, 139, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "have": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 22, 33, 69, 72, 78, 79, 81, 82, 87, 109, 111, 112, 113, 114, 115, 116, 120, 131, 139, 141, 146, 163, 165, 166, 176, 177, 178, 179, 191, 192, 193, 200, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 262, 347, 379, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 451, 461, 471, 472, 478], "lot": [0, 97, 377], "enabl": [0, 2, 16, 17, 18, 21, 22, 194, 378, 469], "servic": [0, 13], "can": [0, 2, 3, 4, 7, 8, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 32, 33, 35, 37, 50, 51, 52, 57, 60, 61, 66, 69, 72, 73, 74, 75, 78, 82, 83, 84, 86, 91, 108, 109, 111, 112, 113, 115, 116, 120, 124, 125, 127, 129, 131, 141, 146, 151, 152, 158, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 183, 191, 192, 193, 194, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 296, 311, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 394, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 451, 468, 469, 471, 472, 473, 474, 476, 477, 478, 479, 480], "avoid": [0, 2, 12, 120, 191, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "individu": [0, 2, 8, 9, 22, 193], "skip": [0, 18, 377], "ci": [0, 2, 468], "messag": [0, 4, 17, 18, 21, 82, 386, 468, 469], "when": [0, 2, 7, 8, 9, 10, 12, 14, 16, 17, 18, 20, 22, 82, 111, 120, 127, 140, 141, 165, 166, 179, 191, 192, 193, 211, 225, 226, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 381, 395, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451, 471, 472, 479], "readi": [0, 10, 12, 226], "successfulli": [0, 10, 12], "pass": [0, 2, 10, 12, 17, 18, 52, 120, 191, 192, 193, 194, 335, 377, 381, 390, 446, 447, 451, 468, 478], "send": [0, 4], "mail": [0, 2, 9, 16, 18, 21, 192, 193], "list": [0, 2, 9, 10, 11, 12, 14, 15, 16, 21, 22, 23, 73, 74, 82, 111, 112, 113, 143, 144, 192, 193, 194, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 316, 390, 404, 407, 411, 412, 415, 416, 418, 420, 431, 432, 434, 435, 436, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 468, 471, 479], "about": [0, 2, 4, 7, 8, 9, 10, 12, 14, 15, 18, 22, 32, 33, 34, 35, 37, 82, 158, 163, 165, 166, 179, 191, 192, 194, 311, 335, 347, 381, 400], "develop": [0, 2, 3, 4, 5, 10, 13, 15, 16, 18, 20, 21, 194, 469, 475], "automat": [0, 2, 8, 9, 12, 18, 22, 32, 33, 34, 35, 82, 83, 84, 165, 166, 183, 191, 192, 381, 391, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 446, 447, 456, 478, 479], "see": [0, 2, 4, 7, 8, 12, 17, 18, 19, 20, 21, 22, 23, 37, 73, 74, 82, 83, 84, 111, 112, 113, 120, 139, 141, 146, 163, 164, 165, 166, 168, 169, 176, 177, 179, 191, 192, 193, 197, 273, 335, 351, 358, 359, 362, 366, 373, 377, 395, 451, 456, 468, 469, 471, 473], "respond": 0, "without": [0, 2, 7, 12, 13, 18, 20, 22, 69, 82, 168, 169, 176, 177, 183, 192, 377, 378, 381, 390, 396, 431, 451, 478], "further": [0, 2, 4, 11, 12, 18, 22, 48, 120, 146, 351, 358, 359, 362, 366, 373], "action": [0, 22, 140, 158, 168, 395, 468, 478], "part": [0, 9, 10, 12, 14, 20, 22, 37, 82, 109, 139, 183, 226, 251, 471], "administr": [0, 15], "onli": [0, 2, 3, 7, 8, 10, 11, 12, 17, 18, 19, 20, 21, 22, 34, 35, 75, 76, 82, 113, 115, 117, 120, 138, 139, 141, 143, 144, 164, 165, 166, 179, 183, 191, 198, 199, 226, 243, 347, 350, 353, 354, 355, 356, 360, 361, 364, 367, 368, 369, 371, 377, 381, 390, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 435, 436, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 468, 471, 474], "us": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 15, 16, 17, 19, 21, 22, 32, 33, 34, 35, 37, 48, 52, 53, 58, 66, 67, 69, 72, 73, 74, 75, 79, 81, 82, 83, 84, 86, 87, 91, 94, 95, 96, 105, 108, 112, 120, 124, 125, 131, 138, 139, 140, 141, 143, 144, 146, 163, 164, 165, 166, 168, 169, 178, 179, 183, 191, 192, 193, 194, 200, 203, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 256, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 285, 292, 293, 294, 295, 296, 301, 304, 305, 306, 307, 308, 311, 318, 319, 320, 322, 331, 332, 336, 337, 338, 339, 341, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 381, 386, 390, 391, 394, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479], "interfac": [0, 2, 5, 8, 9, 12, 15, 17, 18, 20, 22, 109, 127, 136, 139, 140, 151, 152, 153, 163, 165, 166, 176, 177, 179, 263, 264, 265, 266, 267, 271, 272, 273, 275, 279, 280, 281, 282, 283, 284, 287, 290, 304, 305, 306, 308, 318, 319, 320, 321, 322, 396, 411, 436, 468, 475], "particularli": [0, 3, 10, 12, 73, 74, 82], "long": [0, 2, 18, 48, 112, 165, 166, 192, 379, 381, 390, 394, 479], "histori": 0, "consid": [0, 2, 9, 12, 69, 76, 82, 120, 163, 176, 177, 178, 192, 311, 471], "squash": 0, "we": [0, 2, 4, 7, 9, 10, 11, 12, 15, 16, 18, 22, 32, 33, 34, 35, 37, 48, 50, 51, 52, 55, 57, 60, 61, 62, 66, 68, 72, 73, 74, 75, 76, 78, 79, 82, 83, 84, 86, 111, 112, 113, 114, 115, 116, 117, 120, 130, 132, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 183, 191, 192, 193, 226, 236, 340, 371, 390, 394, 398, 404, 411, 412, 416, 418, 439, 471, 478, 479], "azur": [0, 2, 468], "cloud": [0, 2, 468], "These": [0, 2, 7, 8, 9, 11, 12, 18, 20, 22, 32, 33, 73, 74, 116, 120, 472, 476, 477, 478, 480], "ar": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 20, 22, 33, 37, 40, 41, 48, 53, 58, 69, 73, 74, 75, 76, 82, 83, 84, 92, 109, 111, 112, 113, 114, 115, 116, 117, 120, 136, 139, 140, 141, 146, 152, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 183, 191, 192, 193, 194, 199, 226, 237, 238, 243, 251, 255, 256, 260, 311, 315, 335, 347, 350, 353, 354, 355, 356, 360, 361, 364, 367, 368, 369, 371, 377, 379, 381, 383, 390, 394, 398, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 445, 451, 468, 471, 472, 473, 474, 478, 479], "configur": [0, 2, 4, 18, 287, 288, 290], "fipysourc": [0, 18], "pipelin": [0, 2, 5, 456], "yml": [0, 3, 12], "workflow": 0, "nistthedocs2death": 0, "nix": [0, 2, 21, 469], "lock": [0, 3, 12, 18], "environ": [0, 2, 9, 15, 17, 21, 22, 193, 381, 400, 441, 468, 469, 473], "solver": [0, 2, 3, 5, 7, 9, 12, 15, 18, 21, 22, 32, 34, 35, 37, 48, 53, 55, 57, 58, 62, 67, 81, 82, 83, 84, 86, 87, 91, 111, 112, 114, 120, 140, 165, 166, 168, 178, 179, 191, 192, 194, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 468, 469, 470, 471], "petsc": [0, 2, 18, 21, 33, 86, 111, 468, 469], "pyspars": [0, 2, 3, 12, 18, 21, 22, 33, 37, 87, 192, 468, 469, 471], "scipi": [0, 2, 3, 9, 11, 18, 21, 22, 50, 51, 60, 61, 73, 74, 78, 79, 82, 165, 166, 179, 271, 272, 275, 285, 377, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451, 468, 469, 471], "trilino": [0, 2, 5, 12, 14, 18, 21, 33, 87, 194, 468, 469], "file": [0, 2, 3, 8, 10, 11, 12, 14, 16, 18, 21, 22, 40, 41, 42, 73, 74, 78, 79, 81, 94, 95, 96, 97, 98, 100, 101, 105, 139, 140, 141, 143, 144, 146, 164, 168, 169, 172, 173, 174, 226, 379, 381, 391, 396, 404, 412, 416, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 478], "render": [0, 2, 9, 16, 22, 82, 194, 436, 463, 465, 466, 467], "filenam": [0, 9, 18, 73, 74, 114, 143, 144, 168, 226, 391, 407, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "templat": [0, 8], "platform": [0, 2, 3, 9, 10, 12, 18, 19, 468], "done": [0, 9, 10, 12, 18, 192, 379], "new": [0, 2, 7, 9, 12, 14, 22, 72, 82, 115, 116, 140, 146, 169, 179, 192, 193, 222, 226, 232, 234, 237, 243, 251, 377, 381, 386, 390, 391, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468, 479], "valid": [0, 2, 18, 468], "everyth": [0, 12, 192], "log": [0, 21, 116, 143, 165, 166, 178, 183, 184, 381, 390, 443, 444, 445, 446, 447, 448, 449, 451, 452, 469, 470], "changelog": [0, 2], "txt": [0, 2, 381, 396], "rel": [0, 2, 18, 22, 32, 33, 112, 183, 381, 390, 394], "after": [0, 2, 11, 12, 14, 18, 22, 33, 48, 114, 116, 120, 179, 192, 379, 381, 386, 390, 394, 411], "x": [0, 2, 8, 9, 10, 12, 14, 16, 17, 18, 19, 21, 23, 37, 41, 52, 55, 57, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 86, 91, 92, 95, 96, 98, 100, 101, 105, 108, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 130, 131, 132, 136, 140, 143, 144, 151, 152, 158, 159, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 180, 191, 192, 193, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 445, 447, 448, 449, 451, 452, 454, 455, 456, 461, 468], "y": [0, 8, 9, 10, 12, 15, 16, 18, 19, 21, 41, 53, 58, 72, 73, 74, 83, 84, 95, 113, 120, 124, 127, 129, 130, 132, 140, 143, 144, 151, 152, 159, 163, 164, 168, 172, 174, 176, 177, 179, 180, 192, 193, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 445, 447, 448, 449, 451, 452, 454, 455, 461, 468], "mileston": 0, "z": [0, 10, 12, 21, 159, 163, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 390, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 454, 455], "obtain": [0, 2, 8, 9, 10, 18, 21, 32, 34, 35, 76, 82, 117, 120, 140, 141, 158, 164, 165, 166, 179, 191, 193, 226, 418, 431, 469, 471, 473, 474], "rest": [0, 140], "format": [0, 2, 17, 18, 33, 37, 381, 390, 391, 400, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 461, 463, 465, 466, 467, 468], "everi": [0, 20, 22, 82, 139, 146, 316, 381, 390, 394], "close": [0, 2, 12, 14, 20, 22, 75, 82, 120, 183, 226, 381, 396, 451], "sinc": [0, 2, 7, 22, 111, 112, 113, 115, 117, 179, 192, 193, 236, 340, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 474], "last": [0, 2, 9, 120, 183, 191, 192, 193, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 351, 358, 359, 362, 366, 373, 374, 381, 390, 394, 400, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "major": [0, 2, 9, 183], "curat": [0, 8], "output": [0, 2, 16, 17, 20, 32, 33, 34, 35, 37, 120, 226, 311, 335, 394, 461], "so": [0, 3, 4, 7, 11, 12, 14, 18, 20, 21, 22, 32, 34, 35, 68, 75, 114, 116, 120, 140, 143, 144, 163, 165, 166, 168, 176, 177, 179, 183, 191, 192, 226, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 381, 390, 394, 411, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 469, 471, 474, 479], "clear": [0, 2, 18, 22], "what": [0, 2, 11, 18, 21, 22, 82, 183, 192, 335, 394, 398, 469, 478], "big": 0, "deal": [0, 11, 12, 18, 22, 138], "sometim": [0, 2, 9, 73, 74], "redund": [0, 22], "e": [0, 2, 3, 9, 11, 12, 15, 16, 18, 20, 55, 57, 58, 62, 67, 75, 76, 82, 109, 114, 115, 117, 140, 165, 166, 169, 179, 183, 184, 191, 193, 256, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 446, 447, 461, 471, 472, 473, 475, 476, 477, 480], "g": [0, 3, 9, 11, 12, 15, 16, 18, 20, 40, 73, 74, 82, 96, 109, 114, 115, 165, 166, 178, 179, 193, 226, 256, 339, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 446, 447, 461, 471, 473, 475, 476, 477, 480], "issue123": 0, "blah": 0, "prefer": [0, 2, 9, 11, 12, 18, 73, 74, 471], "given": [0, 2, 3, 7, 8, 12, 16, 18, 22, 37, 50, 51, 52, 53, 58, 60, 61, 63, 67, 68, 72, 76, 78, 79, 82, 101, 109, 116, 120, 129, 130, 132, 136, 139, 140, 141, 146, 152, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 180, 183, 191, 192, 198, 199, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374, 377, 381, 386, 390, 391, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451, 456, 471, 472, 476, 477, 480], "correspond": [0, 16, 68, 82, 141, 146, 198, 199, 200, 226, 381, 390, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "under": [0, 2, 15, 17, 21, 22, 32, 33, 82, 163, 176, 177, 178, 183, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 400, 469, 479], "altern": [0, 3, 8, 12, 18, 143, 144, 225, 296, 394, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 478], "item": [0, 192, 193], "remov": [0, 2, 9, 10, 12, 20, 120, 141, 163, 391, 398, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451], "appropri": [0, 2, 9, 12, 18, 82, 86, 114, 116, 168, 178, 179, 191, 200, 224, 340, 381, 390, 471, 478], "move": [0, 2, 8, 9, 12, 15, 82, 94, 120, 143, 144, 165, 166, 179, 191], "thank": [0, 2, 18, 120], "mention": [0, 12, 82, 474], "recogn": 0, "outsid": [0, 159, 236, 461], "contributor": [0, 21, 469, 470], "requir": [0, 2, 3, 7, 9, 16, 17, 18, 19, 20, 21, 22, 33, 50, 51, 60, 61, 69, 75, 78, 81, 82, 92, 120, 139, 140, 141, 146, 159, 165, 166, 168, 169, 176, 177, 179, 183, 192, 193, 225, 226, 236, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 288, 294, 295, 301, 304, 305, 306, 307, 308, 311, 318, 319, 320, 321, 322, 334, 335, 336, 337, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468, 469, 471, 479], "pygithub": 0, "panda": [0, 18, 468], "doesn": [0, 2, 4, 18, 21, 32, 33, 34, 35, 183, 226, 262, 441, 469], "t": [0, 2, 3, 4, 10, 11, 12, 15, 18, 21, 22, 32, 33, 34, 35, 37, 72, 73, 74, 75, 78, 79, 82, 109, 111, 115, 124, 125, 136, 140, 141, 146, 151, 152, 163, 164, 165, 166, 169, 172, 173, 174, 176, 177, 178, 179, 183, 192, 193, 226, 256, 262, 342, 347, 361, 371, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 469, 472, 473, 475, 478, 479], "show": [0, 2, 4, 7, 18, 46, 47, 120, 141, 143, 144, 146, 168, 431], "green": [0, 2], "box": [0, 2, 20, 82, 163, 176, 177, 180, 191, 251, 273], "note": [0, 4, 12, 14, 22, 32, 33, 68, 82, 163, 179, 211, 226, 230, 256, 311, 342, 379, 418, 441], "readm": [0, 2], "instal": [0, 2, 3, 6, 9, 10, 11, 17, 18, 20, 21, 22, 23, 139, 146, 163, 176, 177, 468, 469, 470, 475], "tag": [0, 2, 4, 10, 12], "abov": [0, 7, 9, 11, 16, 18, 22, 37, 82, 120, 140, 141, 146, 179, 180, 251, 347, 381, 390, 478], "annot": [0, 385], "upon": [0, 13, 18, 22, 73, 74], "success": [0, 3, 7, 9, 10, 12, 75, 296], "system": [0, 2, 10, 12, 14, 16, 17, 18, 75, 82, 111, 112, 113, 116, 136, 139, 163, 164, 168, 169, 176, 177, 178, 179, 183, 198, 199, 200, 235, 255, 256, 273, 285, 292, 293, 294, 295, 296, 307, 330, 335, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468, 471, 472, 473, 475], "build": [0, 2, 7, 10, 12, 17, 18, 19, 22, 78, 120, 140, 158, 164, 168, 178, 179, 226, 256, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "product": [0, 2, 6, 12, 18, 22, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "artifact": 0, "place": [0, 2, 9, 11, 12, 22, 33, 340, 379, 381, 390, 391, 394, 445], "dist": [0, 2, 379], "linux": [0, 2, 12, 14, 20, 23, 111, 468], "none": [0, 2, 11, 34, 35, 73, 74, 111, 112, 113, 114, 116, 117, 140, 143, 144, 163, 166, 176, 177, 183, 184, 197, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 263, 264, 265, 267, 268, 273, 274, 279, 280, 285, 288, 292, 295, 304, 305, 306, 307, 308, 311, 321, 336, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 379, 380, 381, 386, 390, 391, 394, 395, 396, 400, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 479], "whl": 0, "tar": 0, "gz": [0, 140, 164, 168, 169, 172, 173, 174, 391, 407], "windows_nt": 0, "zip": [0, 176, 177, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "doc": [0, 2, 18, 377, 395, 468, 475], "pdf": [0, 2, 15, 18, 475], "html": [0, 4, 9, 12, 14, 18, 335, 395], "directori": [0, 7, 8, 9, 10, 12, 14, 16, 18, 23, 82, 92, 139, 140, 141, 146, 158, 179, 476, 477, 480], "unpack": [0, 2, 12, 18], "xzf": 0, "c": [0, 2, 7, 12, 15, 17, 18, 22, 68, 82, 104, 136, 140, 141, 146, 163, 164, 165, 166, 176, 177, 183, 340, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468, 475], "attach": [0, 2, 478], "associ": [0, 18, 22, 139, 140, 165, 166], "pypi": [0, 2, 468], "twine": 0, "fipy_vers": 0, "web": [0, 2, 12, 20], "site": [0, 4, 12, 140, 141, 146], "ctcm": [0, 9, 194, 468], "export": [0, 2, 5, 18, 21, 73, 74, 226, 469], "fipy_wwwhost": 0, "bunter": [0, 2], "u": [0, 2, 4, 8, 9, 15, 18, 21, 22, 50, 51, 52, 53, 55, 57, 58, 60, 61, 82, 120, 124, 125, 151, 165, 166, 179, 183, 184, 191, 192, 193, 347, 351, 358, 359, 361, 362, 366, 373, 411, 415, 434, 435, 469, 472, 473, 478], "www": [0, 4, 9, 12, 17, 18, 35, 48, 468, 475], "wd15": [0, 12, 14], "fipy_wwwactiv": 0, "updatewww": 0, "upload_product": 0, "some": [0, 2, 7, 9, 10, 11, 12, 16, 17, 18, 22, 32, 33, 34, 35, 40, 41, 73, 74, 82, 91, 120, 140, 168, 183, 192, 193, 256, 260, 311, 315, 347, 361, 381, 383, 400, 468, 475], "version": [0, 3, 7, 8, 10, 11, 12, 14, 16, 17, 18, 20, 21, 22, 82, 120, 184, 191, 192, 193, 226, 236, 393, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 469], "rsync": 0, "mac": [0, 2, 12, 14, 20, 23], "o": [0, 2, 5, 12, 14, 18, 23, 72, 73, 74, 140, 164, 168, 169, 172, 173, 174], "caus": [0, 2, 9, 16, 18, 120, 163, 176, 177, 191, 192, 211, 226, 230, 256, 311, 342, 441], "problem": [0, 2, 5, 7, 8, 9, 15, 16, 17, 18, 22, 32, 33, 34, 35, 37, 50, 51, 52, 53, 57, 58, 60, 61, 63, 66, 67, 69, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 86, 91, 94, 95, 96, 97, 98, 100, 101, 103, 105, 111, 112, 113, 114, 115, 116, 117, 124, 125, 129, 131, 140, 159, 163, 165, 166, 169, 176, 177, 178, 179, 183, 191, 192, 194, 311, 329, 347, 361, 411, 468, 472], "thei": [0, 4, 9, 11, 12, 16, 18, 22, 75, 82, 165, 166, 192, 193, 194, 347, 377, 390, 479], "try": [0, 2, 3, 10, 12, 17, 35, 50, 51, 60, 61, 73, 74, 79, 82, 120, 140, 163, 165, 166, 176, 177, 179, 192, 381, 390], "erron": 0, "rsrc": 0, "2": [0, 3, 7, 9, 11, 12, 15, 16, 21, 22, 32, 33, 34, 35, 37, 40, 41, 48, 50, 51, 60, 61, 64, 66, 67, 68, 72, 73, 74, 75, 76, 78, 79, 82, 83, 84, 86, 91, 96, 105, 109, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 130, 131, 132, 136, 140, 141, 143, 144, 146, 151, 152, 153, 159, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 194, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 328, 338, 340, 347, 350, 351, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374, 377, 381, 390, 391, 394, 395, 398, 399, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 445, 447, 449, 451, 452, 454, 455, 461, 469, 471, 472, 474, 475], "6": [0, 2, 7, 9, 15, 16, 18, 32, 33, 34, 35, 37, 48, 53, 73, 74, 82, 86, 96, 111, 112, 113, 114, 116, 120, 127, 140, 141, 143, 144, 146, 151, 163, 165, 166, 168, 169, 176, 177, 178, 179, 183, 184, 192, 194, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 361, 381, 390, 398, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 461, 474, 475], "doe": [0, 2, 3, 10, 12, 17, 18, 19, 21, 22, 64, 82, 114, 116, 120, 179, 191, 200, 226, 251, 335, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 394, 395, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451, 468, 469, 471, 478], "onc": [0, 4, 7, 12, 14, 76, 82, 114, 116, 131, 158, 178, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390], "receiv": [0, 2, 18], "amend": 0, "ask": [0, 2, 4, 11, 16, 21, 192, 193, 469, 470], "maintain": [0, 18, 111, 112, 113, 192, 193, 411, 436], "process": [0, 2, 7, 12, 15, 16, 18, 20, 21, 22, 32, 33, 163, 176, 177, 178, 194, 226, 316, 339, 390, 454, 455, 468, 469, 472, 473], "hour": [0, 18, 20, 22, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "don": [0, 2, 11, 18, 21, 163, 176, 177, 179, 192, 193, 256, 347, 469, 478, 479], "wish": [0, 3, 8, 9, 12, 18, 68, 72, 139, 141, 146, 164, 180, 192], "wait": [0, 22, 165, 166], "trigger": [0, 440], "reason": [0, 2, 9, 12, 17, 18, 22, 33, 79, 82, 120, 140, 179, 192, 311, 381, 390, 461, 471], "manual": [0, 2, 8, 9, 12, 20, 21, 32, 33, 34, 35, 73, 74, 191, 418, 469, 475, 479], "gener": [0, 2, 3, 7, 10, 12, 15, 17, 18, 21, 22, 82, 97, 117, 140, 165, 166, 179, 191, 192, 193, 196, 200, 225, 226, 230, 231, 232, 273, 292, 293, 294, 295, 379, 386, 390, 396, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 441, 442, 463, 468, 469, 471, 473, 474, 478], "revis": [0, 2, 10, 12], "number": [0, 2, 9, 10, 12, 14, 17, 18, 22, 52, 64, 76, 79, 81, 82, 87, 108, 111, 112, 113, 116, 117, 120, 136, 139, 140, 141, 143, 146, 158, 178, 179, 191, 192, 222, 225, 226, 232, 234, 235, 237, 238, 243, 251, 254, 255, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 288, 294, 295, 301, 304, 305, 306, 307, 308, 311, 318, 319, 320, 321, 322, 331, 332, 334, 335, 336, 337, 338, 342, 353, 371, 381, 385, 390, 394, 404, 407, 412, 415, 416, 418, 420, 425, 431, 432, 434, 439, 443, 444, 445, 446, 447, 448, 449, 451, 452, 471, 472, 474], "sha256": 0, "openssl": 0, "dgst": 0, "path": [0, 11, 16, 18, 72, 140, 164, 168, 169, 172, 173, 174, 226, 454, 455], "reset": [0, 82, 146, 164, 168], "0": [0, 3, 7, 9, 11, 12, 17, 18, 21, 22, 32, 33, 34, 35, 37, 40, 41, 48, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 86, 87, 91, 92, 95, 96, 98, 100, 101, 103, 105, 108, 109, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 130, 131, 132, 136, 140, 141, 143, 144, 146, 151, 152, 158, 159, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 187, 191, 192, 193, 199, 200, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 294, 339, 340, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 381, 390, 394, 396, 398, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 461, 469, 471, 474], "nist": [0, 2, 4, 7, 9, 12, 13, 18, 194, 390, 468], "gov": [0, 4, 9, 12, 17, 18, 335, 468], "how": [1, 2, 4, 8, 12, 18, 21, 22, 32, 33, 68, 73, 74, 82, 140, 158, 159, 165, 166, 168, 191, 192, 193, 377, 431, 469, 470, 478], "read": [1, 2, 4, 12, 21, 22, 168, 191, 192, 193, 226, 381, 391, 396, 407, 469, 470], "modul": [1, 2, 5, 8, 9, 11, 12, 16, 17, 18, 20, 21, 22, 24, 25, 31, 39, 44, 45, 49, 54, 56, 59, 65, 71, 77, 85, 89, 90, 93, 99, 102, 109, 110, 119, 122, 123, 128, 134, 150, 156, 162, 167, 171, 182, 186, 190, 191, 192, 193, 194, 195, 202, 210, 212, 239, 247, 256, 257, 258, 270, 276, 278, 285, 286, 289, 291, 297, 303, 307, 313, 314, 323, 338, 342, 375, 376, 377, 379, 380, 381, 382, 387, 390, 394, 395, 396, 401, 404, 412, 416, 418, 432, 441, 442, 454, 463, 470, 471, 475, 476, 477, 478], "mainten": 2, "releas": [2, 7, 10, 12, 18, 21, 22, 163, 176, 177, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 469, 470], "compat": [2, 18, 112, 192, 193, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "recent": [2, 7, 10, 12, 22, 191, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 351, 358, 359, 362, 366, 373, 374, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "numpi": [2, 3, 17, 21, 22, 32, 33, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468, 469, 471], "25": [2, 18, 32, 33, 34, 120, 124, 163, 164, 176, 177, 178, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 340, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 461, 475], "930": 2, "get": [2, 4, 9, 18, 19, 21, 22, 120, 165, 166, 394, 411], "again": [2, 73, 74, 76, 78, 79, 81, 82, 94, 96, 98, 100, 101, 105, 112, 113, 114, 116, 117, 120, 165, 166, 178, 179, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 361], "925": 2, "discourag": 2, "stackoverflow": [2, 16, 21], "876": 2, "875": [2, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "791": 2, "896": 2, "poor": [2, 18, 116, 472], "garbag": 2, "collect": [2, 12, 21, 163, 401, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 445, 449, 458, 468], "petsc4pi": [2, 3, 12, 17, 18, 260, 468], "18": [2, 82, 108, 176, 177, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 390, 435, 472, 475], "wa": [2, 5, 7, 9, 11, 13, 17, 18, 22, 64, 82, 164, 165, 166, 168, 169, 172, 173, 174, 191, 192, 377, 379, 381, 390, 398, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468], "memori": [2, 7, 33, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "leak": 2, "term": [2, 16, 18, 21, 22, 32, 33, 34, 35, 37, 50, 51, 52, 60, 61, 69, 75, 79, 87, 114, 115, 120, 139, 140, 141, 165, 166, 168, 169, 176, 177, 179, 183, 191, 192, 194, 199, 200, 203, 469, 472, 473, 474], "justerrorvector": [2, 21, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "isn": [2, 3, 12, 21, 469], "strictli": 2, "exampl": [2, 4, 7, 9, 11, 12, 14, 16, 17, 18, 20, 21, 22, 194, 377, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 456, 470, 471, 472, 479], "contribut": [2, 5, 18, 22, 75, 198, 199, 200, 347, 356, 361], "jon83carvalho": 2, "clarifi": 2, "mani": [2, 8, 9, 10, 12, 18, 20, 22, 78, 79, 81, 82, 120, 165, 166, 179, 191, 192, 194, 377, 468, 473, 478], "point": [2, 8, 9, 11, 18, 22, 35, 72, 73, 74, 76, 82, 91, 96, 117, 120, 140, 159, 163, 165, 166, 176, 177, 179, 192, 226, 243, 390, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 471], "migrat": [2, 4, 8], "continu": [2, 9, 10, 12, 16, 18, 21, 69, 76, 91, 114, 117, 120, 192, 468, 469, 470, 471], "integr": [2, 8, 10, 12, 18, 21, 22, 165, 166, 339, 381, 390, 468, 469, 470, 471], "updat": [2, 3, 5, 9, 12, 21, 37, 82, 120, 139, 143, 144, 146, 183, 294, 379, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 468, 469], "wheel": 2, "distribut": [2, 12, 13, 16, 18, 20, 22, 76, 117, 404, 412, 416, 418, 420, 432, 439, 456, 468], "substanti": [2, 7], "refactor": [2, 5, 21, 226, 469], "matric": [2, 18, 21, 22, 194, 200, 256, 471], "more": [2, 3, 4, 7, 8, 10, 11, 12, 17, 18, 21, 22, 32, 34, 35, 50, 51, 52, 60, 61, 73, 74, 75, 82, 87, 114, 116, 124, 139, 141, 146, 165, 166, 179, 183, 191, 192, 193, 225, 226, 347, 361, 381, 390, 395, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 445, 446, 447, 461, 469, 471, 478], "consist": [2, 3, 8, 9, 12, 116, 138, 226, 471, 473], "across": [2, 316, 451, 471], "863": 2, "refin": [2, 9, 226], "851": 2, "debug": [2, 18, 21, 22, 377], "848": 2, "contact": [2, 8, 15, 16, 21, 191, 469, 475], "inform": [2, 12, 18, 158, 176, 177, 191, 335, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 400, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468], "singl": [2, 9, 11, 18, 20, 22, 32, 33, 34, 35, 75, 76, 111, 115, 117, 165, 166, 179, 183, 221, 222, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 251, 338, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 458], "page": [2, 12, 14, 18, 339], "847": 2, "set": [2, 3, 5, 9, 14, 16, 17, 18, 20, 21, 22, 33, 69, 72, 73, 74, 76, 82, 84, 108, 109, 117, 120, 124, 125, 127, 129, 130, 131, 132, 140, 141, 143, 144, 152, 158, 164, 165, 166, 168, 169, 179, 180, 192, 193, 194, 203, 211, 226, 230, 253, 256, 311, 335, 342, 379, 380, 381, 390, 391, 394, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 468, 469, 471, 473, 475, 478], "822": 2, "replac": [2, 18, 82, 120, 179, 192, 193, 194, 226, 394, 398, 461], "deprec": [2, 4, 9, 18, 21, 143, 144, 386, 399, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "type": [2, 8, 9, 12, 16, 18, 19, 22, 50, 51, 52, 60, 61, 82, 92, 139, 140, 141, 146, 158, 168, 179, 191, 199, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 386, 390, 391, 394, 395, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451, 468], "798": 2, "py3k": [2, 468], "797": 2, "7": [2, 3, 7, 12, 16, 18, 32, 35, 73, 74, 96, 101, 111, 112, 113, 116, 120, 140, 141, 146, 159, 165, 166, 168, 183, 194, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 361, 381, 390, 394, 398, 399, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 475], "conda": [2, 3, 18, 21, 468, 469, 470], "795": 2, "stop": [2, 17, 378], "divid": [2, 18, 21, 251, 381, 390, 394, 436, 451, 471, 473], "zero": [2, 9, 18, 68, 69, 82, 83, 84, 127, 131, 139, 179, 180, 183, 256, 262, 347, 361, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 446, 447], "warn": [2, 9, 17, 18, 112, 192, 311, 379, 380, 386], "lu": [2, 7, 86, 266, 285, 295, 307, 471], "790": 2, "introduc": [2, 22, 64, 68, 112, 113, 120, 163, 176, 177, 192, 193], "sharedtemporaryfil": [2, 21, 381, 396], "bi": 2, "769": 2, "rais": [2, 3, 11, 12, 114, 211, 226, 377, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "importerror": [2, 50, 51, 60, 61, 73, 74, 79, 82, 163, 165, 166, 176, 177, 179, 191], "768": 2, "disabl": 2, "tvtk": [2, 11, 18, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 377], "prerequisit": [2, 3, 10, 12, 17, 18], "aren": 2, "met": 2, "764": 2, "tabul": 2, "depend": [2, 7, 10, 12, 18, 20, 21, 22, 73, 74, 82, 116, 120, 140, 152, 165, 166, 179, 192, 199, 226, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 379, 393, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 440, 468, 469, 471, 474, 478], "763": 2, "749": 2, "stoke": [2, 120], "caviti": [2, 120], "non": [2, 9, 12, 13, 18, 32, 33, 34, 35, 37, 48, 51, 61, 73, 74, 82, 94, 96, 97, 139, 163, 165, 166, 176, 177, 183, 230, 231, 232, 292, 293, 294, 295, 329, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 391, 418, 471], "newtonian": 2, "748": 2, "721": 2, "862": 2, "could": [2, 7, 9, 16, 18, 73, 74, 117, 165, 166, 178, 183, 191, 192, 411], "load": [2, 96, 105, 391, 468], "qt": [2, 390], "plugin": 2, "xcb": 2, "858": 2, "856": 2, "facevari": [2, 18, 21, 68, 82, 111, 112, 113, 114, 116, 120, 192, 196, 198, 199, 200, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 404, 407, 411, 412, 416, 418, 420, 431, 432, 435, 436, 439, 451, 452, 461, 463, 465, 466, 467, 469, 471], "accumul": [2, 139, 378], "properli": [2, 9, 12, 18, 183, 192, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "parallel": [2, 5, 11, 12, 17, 21, 194, 225, 226, 260, 315, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 381, 383, 468, 469], "850": 2, "switch": [2, 7, 120, 194, 468], "849": 2, "py27": 2, "fail": [2, 11, 17, 18, 191, 381, 390, 411], "841": 2, "matplotlib2dview": [2, 21, 447, 452], "accept": [2, 9, 10, 12, 192, 347, 350, 353, 354, 355, 356, 360, 361, 364, 367, 368, 369, 371, 390], "color": [2, 11, 176, 177, 442, 443, 444, 446, 447, 448, 449, 451], "map": [2, 18, 169, 226, 377], "string": [2, 17, 226, 263, 264, 265, 267, 268, 377, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 479], "836": 2, "coupl": [2, 8, 9, 15, 16, 21, 22, 33, 84, 109, 120, 163, 164, 165, 166, 169, 176, 177, 183, 194, 339, 469, 471, 473], "high": [2, 5, 21, 24, 87, 120, 396, 468, 469], "order": [2, 4, 6, 9, 10, 12, 17, 18, 21, 22, 32, 33, 34, 35, 37, 46, 47, 73, 74, 75, 82, 86, 87, 94, 120, 129, 130, 132, 140, 146, 163, 165, 166, 179, 183, 191, 192, 198, 199, 200, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 353, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 446, 447, 472, 473, 479], "diffus": [2, 5, 15, 16, 18, 20, 21, 32, 34, 35, 37, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 109, 114, 116, 117, 120, 136, 138, 140, 141, 146, 159, 163, 165, 166, 176, 177, 178, 179, 191, 194, 339, 347, 350, 353, 354, 355, 356, 360, 361, 364, 367, 368, 369, 371, 469, 472, 473, 474], "incompat": [2, 3, 12, 191, 192, 193, 381, 390], "833": 2, "tool": [2, 4, 12, 15, 18, 21, 22, 32, 33, 34, 35, 37, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 78, 79, 82, 83, 84, 96, 112, 115, 116, 117, 120, 124, 125, 127, 129, 131, 140, 158, 159, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 194, 226, 371, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 468, 471], "dump": [2, 9, 21, 168, 407], "undocu": 2, "alwai": [2, 8, 9, 10, 12, 16, 18, 32, 33, 34, 35, 82, 196, 225, 268, 269, 299, 301, 311, 333, 334, 337, 350, 360, 368, 369, 379, 394, 425, 432, 440, 444, 462, 471, 478], "gzip": [2, 391], "828": [2, 7], "colorbar": [2, 21, 120, 143, 176, 177, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452], "true": [2, 9, 18, 22, 32, 33, 64, 68, 69, 72, 75, 82, 96, 111, 114, 129, 136, 139, 141, 146, 159, 163, 165, 166, 176, 177, 178, 179, 183, 184, 187, 191, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 379, 380, 381, 385, 390, 391, 394, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 445, 447, 448, 449, 451, 452], "longer": [2, 7, 10, 12, 19, 22, 82, 179, 191, 192, 338, 468], "flow": [2, 9, 18, 21, 179, 183, 329, 339, 472, 475], "826": 2, "gmsh": [2, 3, 5, 11, 21, 72, 73, 74, 105, 139, 141, 146, 193, 226, 377, 468, 469], "818": 2, "gridnd": 2, "mesh": [2, 5, 9, 11, 12, 21, 22, 32, 33, 34, 35, 37, 40, 41, 48, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 86, 87, 91, 92, 95, 96, 97, 98, 100, 101, 105, 108, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 131, 138, 139, 140, 141, 143, 144, 146, 151, 152, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 199, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 391, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 457, 458, 461, 462, 463, 464, 465, 466, 467, 469, 471, 475], "cartesian": [2, 163, 176, 177, 225, 251, 404, 412, 416, 418, 439, 473], "811": [2, 390], "In": [2, 4, 8, 9, 10, 12, 14, 16, 17, 18, 20, 22, 48, 72, 73, 74, 75, 78, 79, 81, 82, 87, 94, 109, 112, 120, 139, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 179, 183, 191, 377, 411, 432, 471, 472, 476, 477, 478, 480], "9": [2, 7, 9, 10, 12, 15, 73, 74, 82, 83, 84, 96, 100, 108, 112, 114, 140, 141, 146, 163, 164, 165, 166, 176, 177, 183, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 340, 381, 390, 394, 398, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 442, 447, 448, 449, 454, 455, 475], "__repr__": [2, 21, 196, 197, 198, 199, 200, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 288, 292, 293, 294, 295, 296, 301, 304, 305, 306, 307, 308, 311, 315, 316, 317, 318, 319, 320, 321, 322, 334, 335, 336, 337, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 383, 384, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441], "throw": [2, 9, 73, 74, 379], "except": [2, 11, 35, 50, 51, 60, 61, 73, 74, 79, 82, 140, 163, 165, 166, 176, 177, 179, 211, 226, 230, 256, 311, 342, 377, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 478], "ab": [2, 37, 72, 82, 96, 120, 125, 129, 130, 132, 165, 166, 179, 183, 184, 226, 347, 361, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "801": 2, "circleci": [2, 468], "36": 2, "serial": [2, 11, 12, 17, 18, 225, 226, 243, 377, 381], "extrem": [2, 18, 192, 311], "slow": [2, 9, 12, 18, 32, 33, 34, 35, 165, 166, 192, 474], "800": [2, 140, 163], "conda2_env": 2, "realli": [2, 3, 9, 12, 20, 298, 300, 340], "end": [2, 4, 8, 18, 37, 50, 52, 57, 60, 61, 72, 75, 76, 82, 114, 116, 117, 130, 132, 139, 140, 141, 146, 163, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 191, 377, 391, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 474, 479], "796": 2, "phase": [2, 5, 7, 9, 15, 16, 18, 20, 21, 22, 32, 33, 37, 109, 111, 113, 114, 116, 183, 192, 194, 472, 475], "polyxt": [2, 8, 9, 21], "freez": [2, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "792": 2, "circlequad": [2, 21], "781": 2, "matplolibview": 2, "ax": [2, 9, 21, 53, 58, 143, 163, 164, 176, 177, 273, 394, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 458], "properti": [2, 5, 13, 22, 32, 33, 139, 140, 141, 143, 144, 146, 176, 177, 193, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 400, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "778": 2, "binder": [2, 21, 469], "762": 2, "equat": [2, 15, 17, 21, 22, 32, 33, 34, 35, 37, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 86, 109, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 129, 130, 131, 132, 136, 139, 140, 141, 146, 151, 152, 159, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 180, 183, 191, 193, 194, 198, 199, 200, 225, 226, 285, 292, 293, 294, 295, 296, 307, 336, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 468, 469, 473, 474], "websit": [2, 10, 12], "right": [2, 9, 18, 21, 32, 33, 34, 35, 37, 50, 51, 52, 57, 60, 61, 68, 69, 72, 76, 82, 83, 84, 86, 109, 115, 117, 120, 124, 127, 130, 132, 136, 139, 140, 141, 151, 163, 164, 165, 166, 169, 176, 177, 178, 179, 183, 191, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 469, 472, 473], "742": 2, "No": [2, 12, 82, 191, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 468], "variabl": [2, 5, 7, 8, 12, 17, 21, 22, 33, 37, 50, 51, 52, 57, 60, 61, 64, 73, 74, 82, 83, 84, 86, 91, 95, 96, 105, 112, 120, 124, 125, 127, 129, 131, 140, 143, 144, 151, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 179, 183, 191, 192, 193, 197, 338, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 394, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 468, 469, 471, 472, 473], "mag": [2, 21, 168, 169, 176, 177, 183, 184, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "735": 2, "pip": [2, 18, 21, 468], "734": 2, "residu": [2, 9, 21, 82, 114, 120, 165, 166, 179, 183, 184, 293, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "688": [2, 475], "need": [2, 3, 4, 9, 10, 11, 12, 18, 20, 22, 32, 33, 34, 35, 48, 52, 75, 82, 113, 120, 140, 163, 165, 166, 176, 177, 179, 183, 191, 192, 193, 203, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 256, 259, 260, 315, 316, 342, 383, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 456, 475, 478, 479], "circl": [2, 8, 9, 18, 21, 35, 74, 159, 168, 169, 176, 177, 226, 411, 431], "viewer": [2, 12, 18, 20, 21, 22, 32, 33, 34, 35, 37, 40, 41, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 82, 83, 84, 86, 91, 95, 96, 108, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 131, 140, 141, 143, 144, 146, 158, 159, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 183, 184, 191, 192, 404, 412, 416, 418, 439, 468, 469, 470], "676": 2, "default": [2, 7, 12, 14, 20, 21, 23, 64, 68, 82, 83, 84, 139, 140, 143, 144, 158, 165, 168, 176, 177, 191, 192, 225, 263, 264, 265, 267, 271, 272, 275, 279, 280, 281, 282, 283, 284, 296, 304, 305, 306, 308, 318, 319, 320, 322, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 379, 381, 386, 390, 394, 395, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 469, 479], "flux": [2, 9, 21, 32, 34, 35, 68, 82, 120, 163, 165, 166, 176, 177, 179, 183, 469, 471], "condit": [2, 11, 17, 21, 22, 32, 33, 37, 50, 51, 52, 57, 60, 61, 68, 69, 73, 74, 75, 78, 82, 83, 84, 86, 87, 91, 103, 113, 120, 129, 131, 140, 143, 144, 165, 166, 168, 169, 172, 173, 174, 179, 183, 191, 192, 193, 195, 196, 198, 199, 200, 201, 226, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 396, 411, 469, 472, 473], "explicitli": [2, 9, 78, 82, 117, 163, 165, 166, 176, 177, 179, 191, 394], "609": 2, "clearli": [2, 9, 22, 165, 166], "400": [2, 7, 111, 115, 116, 165, 166, 168, 178, 179], "globalvalu": [2, 18, 21, 32, 48, 104, 120, 179, 187, 347, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 435, 436, 439], "method": [2, 3, 7, 9, 11, 17, 18, 20, 21, 22, 75, 81, 82, 120, 131, 158, 165, 166, 179, 183, 191, 192, 193, 194, 292, 293, 294, 295, 296, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 379, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 469, 472, 473, 475, 478, 479], "assort": 2, "convect": [2, 16, 18, 21, 109, 165, 166, 178, 191, 194, 329, 339, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 435, 469, 472, 473, 474], "boundari": [2, 21, 22, 37, 50, 51, 52, 57, 60, 61, 68, 69, 73, 74, 75, 78, 82, 83, 84, 86, 91, 103, 114, 116, 120, 129, 131, 138, 139, 140, 141, 143, 144, 146, 165, 166, 168, 169, 172, 173, 174, 178, 179, 183, 191, 192, 193, 195, 196, 198, 199, 200, 201, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 469, 473], "spheric": [2, 225, 244, 245], "There": [2, 12, 14, 18, 136, 139, 165, 166, 179, 192, 411], "known": [2, 8, 9, 18, 22, 32, 33, 163, 165, 166, 176, 177, 411, 471, 473], "vtk": [2, 19, 441, 456, 463, 465, 466, 467], "bitrot": 2, "ha": [2, 3, 7, 8, 9, 12, 14, 18, 19, 20, 22, 32, 33, 34, 35, 48, 51, 61, 64, 73, 74, 75, 76, 82, 91, 113, 114, 115, 116, 117, 120, 139, 140, 141, 143, 158, 168, 169, 178, 179, 192, 193, 194, 200, 311, 379, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 443, 444, 445, 446, 447, 448, 449, 451, 452, 468, 471], "start": [2, 3, 10, 18, 21, 32, 33, 34, 35, 114, 116, 120, 136, 163, 164, 165, 166, 176, 177, 178, 180, 192, 251, 377, 398, 456], "demis": 2, "also": [2, 4, 5, 7, 9, 12, 14, 17, 18, 19, 20, 22, 32, 33, 73, 74, 75, 82, 83, 84, 120, 139, 141, 143, 144, 146, 151, 165, 166, 183, 192, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 381, 386, 390, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 468, 471, 472], "nonuniformgrid1d": [2, 21, 221, 225, 236, 244], "figur": [2, 7, 18, 143, 163, 176, 177, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 471], "out": [2, 12, 13, 18, 68, 163, 165, 176, 177, 183, 251, 273, 377, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 471], "747": 2, "spherical1d": 2, "uniform": [2, 76, 82, 111, 112, 113, 115, 116, 117, 163, 165, 166, 168, 176, 177, 178, 255, 391, 404, 412, 416, 418, 439], "nonuniform": [2, 475], "732": 2, "klkuhlm": 2, "neumann": [2, 21, 83, 84, 198, 469], "bc": [2, 37, 86, 87], "constraint": [2, 3, 12, 18, 21, 69, 140, 178, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "719": 2, "atism": 2, "vertex": [2, 21, 94, 222, 226, 232, 234, 237, 243, 251, 469, 473], "index": [2, 9, 12, 165, 166, 255, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468], "invers": [2, 381, 390, 416], "716": 2, "726": 2, "mayavicli": [2, 21, 35, 159, 454], "663": 2, "datamin": [2, 32, 33, 34, 35, 37, 41, 72, 73, 74, 82, 83, 84, 91, 111, 112, 113, 114, 116, 124, 125, 127, 129, 131, 140, 143, 144, 163, 164, 165, 166, 168, 169, 176, 177, 178, 180, 192, 404, 412, 416, 418, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "datamax": [2, 32, 33, 34, 35, 37, 41, 72, 73, 74, 82, 83, 84, 91, 111, 112, 113, 114, 116, 124, 125, 127, 129, 131, 140, 143, 144, 163, 164, 165, 166, 168, 169, 176, 177, 178, 180, 192, 404, 412, 416, 418, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "argument": [2, 9, 17, 120, 139, 141, 143, 144, 146, 158, 192, 193, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 395, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 478, 479], "ignor": [2, 18, 165, 166, 178, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 266, 295, 321, 338, 347, 395], "662": 2, "scale": [2, 18, 22, 112, 114, 120, 143, 165, 166, 252, 416, 443, 444, 445, 446, 447, 448, 449, 451, 452], "arg": [2, 179, 194, 221, 222, 223, 224, 226, 236, 237, 238, 243, 244, 245, 262, 269, 292, 293, 296, 301, 337, 338, 377, 385, 386, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 443, 444, 446, 448, 449, 451, 452, 456], "primarili": [2, 8, 18, 82, 380, 471], "711": 2, "broken": [2, 10, 12, 22, 140], "plm_rsh_agent": 2, "error": [2, 3, 12, 13, 18, 21, 22, 37, 73, 74, 82, 94, 96, 97, 115, 120, 151, 152, 191, 226, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 288, 294, 295, 301, 304, 305, 306, 307, 308, 311, 318, 319, 320, 321, 322, 334, 335, 336, 337, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 379, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 469, 471], "710": 2, "708": 2, "703": [2, 475], "fortran": [2, 7, 22, 163, 164, 168, 169, 172, 173, 174, 468], "arrai": [2, 7, 9, 18, 22, 37, 53, 72, 92, 104, 124, 129, 130, 132, 140, 165, 166, 176, 177, 184, 194, 255, 338, 347, 350, 351, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374, 381, 390, 394, 398, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468], "support": [2, 3, 5, 9, 12, 17, 18, 19, 21, 183, 191, 192, 226, 262, 269, 273, 274, 285, 301, 307, 311, 335, 336, 337, 379, 390, 401, 441, 469, 471, 479], "solv": [2, 7, 15, 17, 21, 22, 32, 33, 34, 35, 37, 40, 41, 48, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 86, 87, 91, 92, 94, 95, 96, 98, 100, 101, 104, 105, 108, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 130, 131, 132, 136, 140, 151, 152, 153, 159, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 183, 191, 192, 193, 256, 266, 273, 285, 292, 293, 294, 295, 296, 307, 335, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 468, 469, 471, 472, 473], "701": 2, "while": [2, 5, 7, 9, 18, 22, 32, 33, 34, 35, 64, 68, 72, 75, 82, 114, 140, 165, 166, 176, 177, 179, 183, 184, 381, 390, 471, 474], "700": 2, "print": [2, 16, 17, 18, 21, 22, 32, 33, 37, 40, 41, 48, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 76, 78, 79, 81, 82, 83, 84, 86, 87, 91, 92, 95, 96, 98, 100, 101, 104, 105, 108, 111, 112, 114, 116, 117, 120, 125, 127, 129, 130, 131, 132, 140, 151, 152, 153, 164, 165, 166, 168, 169, 172, 173, 174, 178, 179, 183, 184, 187, 191, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374, 377, 381, 385, 390, 391, 394, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "statement": [2, 191], "processor": [2, 11, 18, 111, 381, 396, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 468], "write": [2, 9, 21, 22, 73, 74, 75, 82, 120, 140, 146, 165, 166, 168, 183, 191, 192, 226, 381, 391, 396, 407], "timetest": 2, "forg": [2, 3, 12, 18, 21, 469], "upload": [2, 21, 469], "option": [2, 3, 7, 9, 11, 18, 21, 23, 143, 144, 194, 271, 272, 275, 279, 280, 281, 282, 283, 284, 287, 288, 292, 293, 296, 335, 377, 379, 381, 386, 390, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 469, 479], "fipy_display_matrix": [2, 18], "legaci": [2, 10, 12], "matplotlib": [2, 3, 9, 12, 18, 21, 143, 176, 177, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 468, 469], "built": [2, 10, 12, 22, 124, 140, 158, 164, 168, 169, 176, 177, 230, 231, 232], "symlog": 2, "clean": [2, 226, 377], "benchmark": [2, 21], "8": [2, 7, 11, 12, 35, 73, 74, 81, 82, 91, 96, 98, 108, 120, 140, 141, 146, 159, 163, 165, 166, 178, 179, 183, 184, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 371, 381, 390, 394, 398, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 475], "699": [2, 475], "stipul": 2, "forc": [2, 17, 18], "miniconda": 2, "url": [2, 475], "_cellvolumeaveragevari": 2, "class": [2, 5, 9, 11, 17, 18, 22, 86, 111, 112, 113, 114, 115, 116, 117, 120, 143, 144, 163, 176, 177, 191, 192, 193, 196, 197, 198, 199, 200, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 304, 305, 306, 307, 308, 311, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 378, 379, 380, 381, 383, 384, 390, 394, 400, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 478, 479], "express": [2, 7, 9, 12, 13, 14, 18, 22, 33, 37, 111, 120, 163, 165, 166, 176, 177, 179, 183, 226, 342, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 471], "bad": [2, 4], "call": [2, 16, 18, 22, 82, 140, 183, 191, 192, 193, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 268, 290, 334, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 379, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451, 478, 479], "stack": [2, 12], "make": [2, 7, 8, 11, 12, 14, 18, 21, 22, 32, 34, 35, 37, 72, 109, 116, 120, 136, 165, 166, 176, 177, 178, 179, 183, 191, 192, 193, 226, 356, 380, 381, 390, 407, 411, 415, 418, 420, 425, 431, 434, 435, 436, 440, 468, 469, 470, 471, 478], "698": 2, "nick": [2, 473], "croft": [2, 473, 475], "thesi": [2, 473, 475], "681": 2, "header": 2, "footer": 2, "680": 2, "nixpkg": [2, 12, 14], "661": 2, "recip": [2, 12, 14, 340, 475], "658": 2, "692": 2, "copi": [2, 4, 8, 10, 12, 13, 18, 21, 82, 111, 112, 113, 114, 115, 116, 117, 183, 184, 316, 377, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468], "script": [2, 8, 16, 18, 21, 24, 32, 33, 73, 74, 82, 124, 125, 129, 131, 140, 146, 178, 183, 191, 192, 193, 226, 376, 379, 454, 455, 456, 468, 469, 478], "command": [2, 8, 9, 10, 12, 14, 16, 17, 21, 82, 92, 124, 129, 131, 139, 140, 141, 146, 158, 179, 194, 379, 380, 395, 456, 469], "line": [2, 9, 11, 12, 16, 17, 21, 22, 35, 73, 74, 79, 82, 91, 92, 96, 139, 140, 141, 146, 158, 159, 163, 179, 194, 226, 251, 379, 380, 394, 395, 441, 445, 446, 447, 451, 456, 469, 471], "669": 2, "input": [2, 8, 9, 16, 20, 21, 22, 33, 41, 42, 64, 69, 73, 74, 76, 78, 79, 81, 82, 83, 84, 91, 94, 95, 96, 98, 101, 105, 108, 117, 139, 140, 141, 146, 165, 166, 179, 183, 184, 191, 381, 390, 394], "deadlock": 2, "643": 2, "bring": 2, "from": [2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 32, 33, 34, 35, 37, 40, 41, 48, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 86, 91, 92, 95, 96, 105, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 131, 136, 138, 139, 140, 141, 143, 144, 146, 151, 152, 153, 158, 159, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 268, 316, 325, 334, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 378, 379, 381, 390, 391, 394, 395, 396, 398, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 451, 452, 454, 455, 461, 469, 471, 474, 475, 478, 479], "same": [2, 9, 18, 20, 33, 75, 81, 82, 91, 96, 98, 100, 101, 105, 112, 113, 114, 115, 116, 140, 141, 165, 166, 168, 178, 179, 191, 194, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 379, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451, 461, 471], "sourc": [2, 8, 10, 12, 15, 16, 18, 19, 21, 33, 57, 58, 68, 72, 75, 109, 114, 115, 120, 140, 163, 165, 166, 168, 169, 176, 177, 178, 179, 192, 194, 432, 456, 468, 469, 472, 473], "translat": [2, 7, 22, 165, 166, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "pya": [2, 18], "woodscn": [2, 18], "thing": [2, 4, 9, 11, 12, 18, 191, 192, 471, 478, 479], "spell": [2, 18], "657": 2, "window": [2, 12, 18, 20, 143, 144, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 461, 462, 463, 465, 466, 467, 468], "648": 2, "sphinx": [2, 18, 468], "647": 2, "645": 2, "gmshmesh": [2, 21], "644": 2, "xfong": 2, "655": 2, "mayavi": [2, 3, 9, 12, 18, 21, 139, 144, 146, 441, 454, 455, 456, 468, 469], "wont": 2, "hendrik410": 2, "646": 2, "branch": [2, 21, 163, 176, 177, 469], "601": 2, "content": [2, 226, 461, 476, 477, 480], "rst": 2, "recurs": [2, 471], "mess": 2, "597": 2, "compress": [2, 12, 391, 475], "archiv": [2, 10, 12, 16, 18, 21], "557": 2, "facegradaverag": [2, 21, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "stupid": 2, "552": 2, "458": 2, "wrong": [2, 9, 192], "preced": [2, 17, 18], "lx": [2, 75, 78, 81, 91, 92, 95, 96, 98, 100, 101, 105, 127, 129, 143, 144, 169, 183, 184, 192, 225, 390], "dx": [2, 18, 32, 33, 34, 37, 40, 41, 52, 53, 55, 57, 58, 64, 66, 67, 68, 69, 76, 78, 79, 81, 82, 83, 84, 86, 91, 92, 98, 100, 101, 105, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 130, 131, 132, 140, 143, 144, 152, 158, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 183, 184, 191, 192, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 351, 358, 359, 361, 362, 366, 373, 374, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 442, 447, 448, 449, 451, 452, 454, 455, 461], "nonuniformgrid": 2, "457": 2, "special": [2, 13, 18, 22, 50, 51, 60, 61, 73, 74, 78, 79, 82, 163, 165, 166, 176, 177, 367, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 478, 479], "includ": [2, 3, 5, 8, 12, 13, 14, 16, 18, 20, 69, 120, 139, 163, 165, 166, 176, 177, 178, 192, 193, 194, 226, 461, 471, 472, 478], "432": 2, "340": 2, "packag": [2, 3, 9, 11, 17, 18, 19, 21, 22, 24, 73, 74, 143, 144, 163, 176, 177, 268, 334, 335, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 399, 411, 444, 454, 455, 468, 469, 470, 480], "just": [2, 8, 9, 18, 22, 79, 82, 165, 166, 178, 179, 298, 300, 379, 381, 390, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 446, 447, 473], "master": [2, 10, 12, 14, 21, 469], "predominantli": 2, "devop": 2, "focu": [2, 178], "been": [2, 7, 8, 9, 12, 14, 16, 18, 22, 64, 76, 82, 131, 139, 140, 141, 146, 158, 178, 191, 192, 193, 194, 226, 379, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 471], "easier": [2, 9, 22, 183, 191, 192, 193, 226], "It": [2, 4, 7, 9, 12, 17, 18, 19, 20, 32, 33, 50, 51, 60, 61, 75, 82, 97, 120, 140, 141, 165, 166, 179, 191, 192, 200, 226, 251, 268, 334, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 456, 461, 468], "possibl": [2, 9, 11, 18, 22, 75, 82, 112, 165, 166, 179, 226, 335, 377, 379, 381, 390, 442, 451, 472], "minim": [2, 4, 7, 9, 293, 329, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "base": [2, 3, 7, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 82, 92, 120, 139, 140, 141, 143, 144, 146, 158, 164, 179, 194, 196, 197, 198, 199, 200, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 287, 288, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 304, 305, 306, 307, 308, 311, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 379, 380, 381, 383, 384, 390, 400, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 468, 469, 471, 475, 479], "maco": [2, 111, 468], "travisci": [2, 468], "appveyor": [2, 468], "badg": 2, "636": 2, "robin": [2, 8, 21, 469], "615": 2, "issue555": 2, "inclus": [2, 18, 439], "licens": [2, 12, 22], "613": [2, 475], "607": 2, "600": [2, 418], "explain": [2, 8, 9, 12, 18, 140], "where": [2, 11, 16, 18, 20, 21, 22, 32, 33, 34, 35, 37, 64, 68, 72, 76, 79, 82, 108, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 131, 139, 140, 141, 143, 144, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 183, 184, 191, 192, 196, 197, 198, 199, 200, 338, 347, 351, 356, 358, 359, 362, 364, 366, 371, 373, 381, 390, 394, 398, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 469, 471, 472, 474], "596": 2, "correct": [2, 9, 11, 18, 37, 76, 82, 113, 115, 117, 120, 152, 168, 169, 176, 177, 183, 226, 390, 391, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 442, 463, 471], "en_u": [2, 18], "dictionari": [2, 18, 377, 393], "594": 2, "smoothedaggregationsolv": 2, "593": 2, "585": 2, "tarbal": 2, "582": 2, "navier": [2, 120], "viscou": [2, 120], "limit": [2, 9, 13, 17, 18, 82, 120, 136, 143, 144, 163, 165, 166, 176, 177, 179, 183, 192, 194, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "580": 2, "stokescav": [2, 8, 9, 21], "579": 2, "rowin": 2, "inlin": [2, 5, 7, 9, 12, 18, 21, 194, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468], "578": 2, "577": 2, "epetra": [2, 315, 316], "vector": [2, 9, 21, 33, 73, 74, 75, 120, 191, 192, 199, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 338, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 394, 411, 452, 469, 471], "numarrai": [2, 468], "574": 2, "codaci": 2, "572": 2, "pytrilino": [2, 17, 18, 468, 471], "unavail": [2, 12, 14, 50, 51, 60, 61, 179, 399], "570": 2, "shwina": 2, "569": 2, "gpu": [2, 17, 468], "via": [2, 9, 12, 15, 18, 138, 471], "pyamgx": [2, 18, 21, 37, 468, 469], "567": 2, "dedic": 2, "public": [2, 9, 13, 19, 21, 22, 390, 468, 469, 470, 475], "domain": [2, 18, 22, 32, 33, 37, 72, 73, 74, 76, 79, 82, 83, 91, 92, 111, 112, 113, 117, 120, 131, 140, 163, 164, 165, 166, 168, 169, 172, 176, 177, 179, 180, 183, 210, 225, 226, 324, 327, 328, 451, 471, 473], "556": 2, "550": 2, "546": 2, "ensur": [2, 82, 381, 385, 390], "dtype": 2, "float": [2, 11, 22, 51, 61, 72, 143, 144, 192, 196, 198, 199, 200, 225, 251, 262, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 288, 294, 295, 301, 304, 305, 306, 307, 308, 311, 318, 319, 320, 321, 322, 334, 335, 336, 337, 338, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "matrix": [2, 7, 9, 12, 17, 18, 21, 22, 72, 75, 82, 87, 120, 163, 165, 166, 176, 177, 179, 183, 184, 192, 199, 256, 292, 293, 294, 295, 296, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 468, 471, 472], "multipli": [2, 21, 22, 342, 347, 350, 351, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374, 381, 390], "544": 2, "revert": [2, 226], "issue534": 2, "physic": [2, 9, 15, 20, 22, 75, 112, 140, 179, 183, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 472, 474, 475], "field": [2, 5, 7, 9, 15, 16, 18, 20, 21, 22, 37, 69, 75, 82, 109, 113, 114, 115, 116, 120, 140, 141, 146, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 183, 192, 194, 347, 381, 390, 394, 407, 451, 472, 475], "mishandl": 2, "compound": 2, "unit": [2, 13, 21, 22, 112, 120, 127, 140, 141, 146, 165, 166, 376, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "536": 2, "532": 2, "race": [2, 396], "524": 2, "max": [2, 5, 17, 21, 32, 48, 72, 75, 96, 114, 120, 130, 140, 152, 159, 183, 184, 187, 192, 316, 347, 361, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451], "min": [2, 21, 32, 33, 34, 35, 37, 114, 129, 159, 183, 184, 192, 316, 347, 361, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451], "global": [2, 15, 18, 22, 152, 153, 377], "520": 2, "gitter": 2, "chat": 2, "516": 2, "badger": 2, "489": 2, "631": 2, "628": 2, "627": 2, "omp_num_thread": [2, 18], "625": [2, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "import": [2, 5, 9, 11, 17, 18, 22, 32, 33, 34, 35, 37, 40, 41, 48, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 86, 91, 95, 96, 105, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 131, 136, 140, 143, 144, 151, 152, 153, 158, 159, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 194, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 316, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 378, 381, 390, 391, 394, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 445, 447, 448, 449, 451, 452, 454, 455, 461, 478], "623": 2, "621": 2, "plot": [2, 18, 19, 21, 32, 33, 34, 35, 37, 40, 41, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 82, 83, 84, 86, 91, 92, 95, 96, 108, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 131, 139, 140, 141, 143, 144, 146, 158, 159, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 183, 184, 191, 404, 412, 416, 418, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 468, 469], "617": 2, "pick": [2, 3, 12], "1st": 2, "valu": [2, 7, 8, 9, 11, 20, 21, 22, 32, 33, 37, 40, 41, 53, 55, 58, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 82, 83, 84, 86, 91, 95, 96, 105, 108, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 130, 131, 139, 140, 141, 143, 144, 146, 152, 158, 159, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 183, 184, 191, 192, 196, 197, 198, 199, 200, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 256, 311, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 379, 381, 390, 394, 395, 401, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 469, 471, 474, 479], "1d": [2, 19, 37, 50, 51, 52, 57, 60, 61, 78, 79, 81, 82, 86, 94, 95, 96, 97, 100, 101, 105, 108, 111, 112, 114, 115, 116, 117, 136, 143, 144, 158, 165, 166, 178, 179, 184, 191, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 411, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 468], "cellvari": [2, 18, 21, 22, 32, 33, 34, 35, 37, 40, 41, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 82, 83, 84, 86, 91, 95, 96, 105, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 131, 140, 143, 158, 159, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 183, 184, 191, 192, 226, 236, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 394, 404, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 461, 462, 463, 465, 466, 467, 469], "611": 2, "coeffici": [2, 5, 18, 21, 33, 37, 50, 51, 52, 60, 61, 68, 72, 78, 82, 95, 109, 111, 115, 120, 139, 140, 141, 146, 163, 164, 165, 166, 176, 177, 179, 191, 199, 200, 292, 293, 294, 295, 296, 338, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 435, 469, 471, 472, 474], "cannot": [2, 7, 9, 10, 12, 17, 18, 22, 33, 75, 120, 165, 192, 211, 221, 222, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 251, 342, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451, 468, 471], "610": 2, "anisotropi": [2, 7, 8, 9, 18, 20, 21, 164, 176, 177], "contour": [2, 19, 92, 141, 143, 144, 163, 446, 447, 449, 468], "displai": [2, 18, 19, 21, 22, 37, 73, 74, 82, 97, 114, 116, 139, 140, 141, 143, 144, 146, 163, 176, 177, 385, 386, 394, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 468], "legend": [2, 18, 442, 445], "608": 2, "var": [2, 9, 18, 21, 32, 33, 34, 35, 37, 40, 41, 48, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 86, 87, 91, 92, 95, 96, 98, 100, 101, 104, 105, 108, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 130, 131, 132, 140, 143, 144, 159, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 183, 184, 191, 192, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 379, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "object": [2, 5, 7, 9, 15, 17, 18, 21, 69, 73, 74, 82, 92, 96, 124, 125, 129, 131, 138, 140, 143, 144, 158, 163, 176, 177, 179, 180, 191, 192, 194, 196, 197, 200, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 262, 269, 271, 272, 273, 274, 275, 277, 285, 287, 290, 293, 296, 298, 299, 300, 301, 307, 311, 316, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 341, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 379, 380, 381, 383, 390, 391, 394, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 468, 469, 471, 478], "callabl": 2, "603": 2, "basic": [2, 9, 12, 17, 18, 20, 22, 158, 226, 395], "602": 2, "592": 2, "590": 2, "pyamgsolv": 2, "584": 2, "anim": [2, 143, 144], "jupyt": [2, 12], "notebook": [2, 12], "566": 2, "565": 2, "empti": [2, 176, 177, 377], "env": [2, 3, 12], "564": 2, "board": 2, "561": 2, "cast": [2, 9, 381, 390, 471, 475], "data": [2, 17, 19, 21, 22, 37, 140, 143, 144, 164, 168, 169, 172, 173, 174, 194, 226, 390, 391, 394, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 468, 469, 478], "int64": 2, "int32": 2, "accord": [2, 179], "rule": [2, 35, 159, 165, 166], "safe": [2, 68, 379], "555": 2, "551": 2, "spew": 2, "545": 2, "543": 2, "integ": [2, 82, 192, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "539": 2, "explicit": [2, 3, 9, 12, 18, 21, 33, 46, 75, 82, 140, 164, 165, 166, 169, 172, 173, 174, 179, 183, 192, 193, 342, 351, 358, 359, 362, 366, 367, 373, 374, 471, 474], "mixedel": [2, 21], "538": 2, "534": 2, "physicalfield": [2, 21, 112, 114, 381, 440], "533": 2, "531": 2, "drop_tol": 2, "spars": [2, 12, 17, 179, 194, 202, 256, 285, 307, 468, 471], "linalg": [2, 285, 307], "splu": [2, 285, 307], "gone": 2, "530": 2, "instruct": [2, 8, 10, 12, 18, 478, 479], "528": 2, "525": [2, 113], "guyer": [2, 5, 15, 109, 475], "osx": 2, "513": 2, "give": [2, 9, 12, 17, 18, 22, 114, 116, 146, 178, 179, 226, 347, 377, 411], "510": 2, "weav": [2, 9, 12, 18, 22, 468], "509": 2, "unabl": 2, "506": 2, "spatial": [2, 9, 21, 32, 34, 35, 82, 120, 469], "vari": [2, 9, 21, 22, 73, 74, 82, 91, 168, 451, 469], "anisotrop": [2, 5, 20, 21, 72, 163, 176, 177, 469], "488": 2, "break": [2, 11, 18, 32, 114, 183, 184], "gmshgrid": 2, "435": 2, "fatal": 2, "spmatrix": 2, "h": [2, 15, 18, 176, 177, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 472, 475], "found": [2, 8, 10, 12, 18, 22, 50, 51, 52, 60, 61, 82, 92, 120, 141, 163, 165, 166, 176, 177, 179, 191, 192, 193, 468, 476, 477, 478, 480], "434": 2, "ez_setup": 2, "502": 2, "gmane": [2, 4, 9], "defunct": [2, 4, 468], "recvobj": 2, "allgath": [2, 21, 316], "sendobj": [2, 316], "492": 2, "restor": 2, "trail": 2, "whitespac": 2, "expect": [2, 8, 9, 18, 78, 79, 82, 165, 166, 179, 394, 471], "485": 2, "pep": [2, 11, 468], "440": 2, "483": 2, "provid": [2, 4, 7, 9, 10, 12, 13, 16, 17, 18, 20, 22, 87, 91, 111, 112, 113, 136, 140, 194, 226, 268, 334, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 394, 396, 461, 468, 471, 478, 479], "_facetocelldistanceratio": [2, 18], "why": [2, 18, 21, 377, 469], "scalar": [2, 18, 192, 221, 222, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 251, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "481": 2, "strip": 2, "white": 2, "space": [2, 22, 51, 61, 82, 141, 146, 159, 165, 166, 179, 192, 224, 225, 254, 255, 418, 472], "eof": 2, "r": [2, 15, 20, 32, 33, 34, 35, 40, 41, 50, 51, 60, 61, 69, 72, 82, 120, 140, 141, 143, 146, 152, 159, 163, 165, 166, 176, 177, 178, 183, 184, 226, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 454, 455, 475], "479": 2, "uniformgrid3d": [2, 21, 225], "_celltocellid": 2, "concaten": [2, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "478": 2, "pkgw": 2, "incorrect": [2, 82, 342, 394], "axi": [2, 9, 20, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 66, 67, 127, 191, 192, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 390, 394, 398, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 445], "477": 2, "472": 2, "471": 2, "sort": 2, "entri": [2, 18, 198, 199, 390], "469": 2, "syntax": [2, 12, 16, 18, 22, 165, 166, 191, 192, 193], "466": 2, "465": 2, "implement": [2, 7, 12, 15, 16, 17, 18, 21, 120, 146, 164, 165, 166, 194, 198, 199, 200, 211, 226, 230, 246, 256, 311, 335, 342, 379, 437, 441, 453, 457, 459, 464, 469, 470], "cahnhilliard": [2, 7, 8, 9, 18, 21], "mesh2dcoupl": [2, 8, 9, 18, 21], "463": [2, 15], "typeset": 2, "analyt": [2, 9, 37, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 66, 67, 68, 69, 72, 73, 74, 76, 78, 79, 82, 86, 92, 108, 114, 115, 116, 117, 136, 179, 191, 371], "solut": [2, 7, 9, 16, 17, 18, 22, 37, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 76, 78, 79, 81, 82, 83, 84, 86, 87, 91, 92, 95, 96, 105, 109, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 129, 131, 136, 152, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 179, 191, 192, 194, 200, 311, 338, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 468, 471, 473, 474], "460": 2, "pdflatex": 2, "head": [2, 7], "459": [2, 390], "purg": 2, "gist": 2, "456": [2, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374], "duplic": [2, 4, 377, 381, 390, 407, 411, 415, 420, 425, 431, 434, 435, 436, 440], "ufunc": [2, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "454": 2, "452": 2, "getter": [2, 193], "setter": [2, 193], "450": 2, "448": 2, "ipython": [2, 18, 468], "447": 2, "proper": [2, 120, 226], "446": 2, "robust": [2, 256], "distutil": [2, 399], "strictvers": 2, "442": 2, "compar": [2, 7, 12, 18, 37, 48, 72, 82, 92, 136, 141, 163, 164, 168, 169, 172, 173, 174, 179, 226, 371, 381, 390, 394, 404, 412, 416, 418], "tupl": [2, 9, 111, 112, 113, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 391, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451, 471], "441": 2, "two": [2, 9, 11, 12, 18, 20, 22, 32, 33, 75, 83, 84, 100, 111, 112, 113, 114, 116, 120, 129, 130, 132, 163, 165, 166, 168, 169, 172, 176, 177, 178, 183, 191, 193, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 390, 394, 411, 435, 471, 475, 478], "439": 2, "alfrenardi": 2, "issue426": 2, "typo": 2, "431": 2, "raybsmith": 2, "429": 2, "matplotlibview": [2, 9, 21, 176, 177], "428": 2, "period": [2, 48, 91, 169, 236, 237, 238], "3d": [2, 19, 34, 114, 159, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 468], "424": 2, "419": 2, "498": 2, "nonlinear": [2, 9], "496": 2, "linearbicgstabsolv": [2, 21], "take": [2, 7, 18, 21, 22, 78, 82, 114, 127, 163, 165, 166, 176, 177, 178, 179, 183, 192, 193, 222, 226, 232, 234, 237, 243, 251, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 469], "494": 2, "493": 2, "review": [2, 15, 21, 469, 475], "io": [2, 12, 14, 17, 381, 396, 468], "access": [2, 18, 20, 22, 163, 176, 177, 192, 381, 396, 478], "leav": [2, 12, 20, 82, 120, 165, 166], "comment": [2, 12, 18, 22], "491": 2, "mpi4pi": [2, 3, 12, 17, 18, 316, 468], "484": 2, "482": 2, "compliant": 2, "476": 2, "setuptool": 2, "suit": [2, 3, 4, 12, 17, 18, 140, 194, 262, 269, 273, 274, 285, 301, 307, 311, 336, 337, 375, 468, 471], "475": 2, "grid3d": [2, 21, 34, 103, 104, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 454, 455], "470": 2, "mesh3d": [2, 21], "celltocellid": 2, "467": 2, "sequenc": [2, 22, 381, 390, 394], "462": 2, "incorrectli": 2, "455": 2, "445": 2, "dendriteview": [2, 163], "put": [2, 18, 21, 32, 34, 35, 192, 381, 390, 394, 398, 469], "over": [2, 11, 18, 22, 32, 33, 34, 35, 37, 64, 82, 91, 111, 120, 131, 163, 165, 166, 178, 179, 192, 193, 294, 296, 394, 432, 446, 447, 471, 473, 474], "bar": [2, 176, 177, 178, 183, 379, 390, 442, 443, 444, 446, 447, 448, 449], "443": 2, "api": [2, 9], "nice": [2, 446, 447, 468], "438": 2, "437": 2, "mislead": 2, "433": 2, "430": 2, "427": 2, "425": [2, 176, 177], "warren": [2, 5, 15, 109, 163, 164, 168, 169, 176, 177, 475], "421": 2, "matplotlib2dgridview": [2, 21, 163, 176, 177], "function": [2, 9, 11, 12, 18, 20, 22, 32, 33, 37, 73, 74, 82, 109, 113, 124, 125, 131, 138, 140, 141, 146, 151, 165, 166, 168, 178, 179, 183, 192, 193, 194, 203, 222, 225, 226, 232, 234, 237, 243, 251, 290, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 381, 385, 386, 390, 391, 393, 394, 395, 396, 398, 411, 432, 441, 442, 456, 463, 471, 472, 473, 478], "416": 2, "reflect": [2, 381, 390, 407, 411, 415, 420, 425, 431, 434, 435, 436, 440], "415": 2, "matplotlibgrid2dview": 2, "414": 2, "periodicgrid3d": [2, 21], "413": 2, "remind": 2, "user": [2, 4, 9, 10, 12, 14, 16, 17, 18, 20, 22, 32, 33, 34, 35, 82, 163, 176, 177, 179, 191, 192, 193, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 436, 439, 440, 474], "differ": [2, 3, 9, 10, 12, 17, 18, 20, 22, 32, 33, 34, 35, 48, 73, 74, 78, 81, 82, 95, 96, 97, 100, 101, 105, 109, 111, 112, 113, 116, 139, 141, 146, 165, 166, 168, 169, 179, 180, 191, 192, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 342, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 451, 458, 471, 473, 475], "conserv": [2, 9, 18, 21, 32, 33, 75, 82, 140, 152, 153, 163, 165, 166, 176, 177, 183, 432, 436, 469, 473], "412": 2, "pickl": [2, 9, 168, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 256, 259, 260, 261, 311, 315, 316, 317, 342, 383, 384, 391, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441], "commun": [2, 4, 16, 17, 18, 22, 72, 125, 127, 129, 131, 140, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 259, 260, 315, 316, 381, 383, 391, 396, 411], "unnecessari": 2, "grid": [2, 18, 82, 120, 165, 166, 169, 179, 221, 222, 223, 224, 225, 233, 234, 236, 237, 238, 243, 244, 245, 253, 254, 255, 435, 451, 468, 473], "408": 2, "407": 2, "strang": 2, "loop": [2, 35, 73, 74, 78, 81, 82, 83, 84, 96, 120, 140, 159, 178, 226], "reshap": [2, 21, 163, 176, 177, 381, 390, 394], "404": 2, "never": [2, 10, 12, 179, 478], "401": 2, "sweep": [2, 18, 21, 68, 72, 75, 82, 114, 115, 120, 165, 166, 179, 183, 184, 192, 193, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 469], "instead": [2, 4, 9, 10, 12, 18, 20, 22, 82, 120, 139, 165, 166, 169, 179, 191, 192, 193, 338, 341, 386, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468, 478], "295": 2, "must": [2, 7, 11, 17, 18, 22, 32, 33, 52, 76, 82, 112, 115, 117, 120, 163, 165, 166, 168, 169, 176, 177, 179, 191, 192, 193, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 342, 351, 358, 359, 362, 366, 373, 374, 379, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 446, 447, 451, 461, 471, 474, 479], "zizou": 2, "signific": [2, 7, 10, 12, 17, 194], "level": [2, 5, 16, 18, 21, 24, 124, 125, 127, 129, 130, 131, 132, 194, 327, 328, 331, 332, 381, 396, 400, 411, 446, 447, 468, 469, 475], "handl": [2, 12, 22, 50, 51, 52, 60, 61, 165, 166, 191, 226], "lsmlib": [2, 11, 18, 21, 411, 469], "scikit": [2, 18, 21, 411, 469], "fmm": [2, 18, 21, 411, 469], "librari": [2, 12, 17, 18, 22, 23, 50, 51, 60, 61, 73, 74, 79, 82, 165, 166, 179, 395, 468, 471], "magnitud": [2, 18, 32, 33, 82, 109, 347, 361, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451, 452], "faster": [2, 7, 18, 22, 179, 474], "than": [2, 3, 4, 7, 9, 11, 12, 16, 17, 18, 22, 48, 66, 67, 82, 92, 141, 165, 166, 168, 179, 191, 192, 193, 226, 347, 361, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 446, 447, 471, 478], "prototyp": 2, "streamplot": [2, 451], "control": [2, 15, 20, 32, 33, 34, 35, 140, 141, 146, 158, 183, 339, 340, 451, 471], "git": [2, 21, 192, 193, 469, 470, 475], "much": [2, 4, 8, 9, 18, 22, 32, 33, 82, 165, 166, 179, 191, 192, 478], "particip": 2, "398": [2, 475], "home": [2, 23], "redirect": [2, 9], "397": 2, "sphinxcontrib": [2, 18], "bibtex": [2, 18], "396": 2, "googl": [2, 4, 17, 468], "395": 2, "ubuntu": 2, "393": 2, "cylindricalnonuniformgrid2d": [2, 21, 225], "exteriorfac": [2, 18, 21, 73, 74, 105, 120, 183, 184, 192, 223, 236, 237, 238, 245, 253], "392": 2, "exit_nist": 2, "cgi": 2, "391": 2, "p\u00e9clet": [2, 52, 64, 191, 192], "inequ": [2, 474], "sign": [2, 4, 21, 192, 381, 390, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "388": 2, "64": 2, "int": [2, 124, 127, 140, 158, 168, 183, 200, 222, 225, 226, 232, 234, 237, 243, 251, 262, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 288, 294, 295, 301, 304, 305, 306, 307, 308, 311, 318, 319, 320, 321, 322, 334, 335, 336, 337, 339, 342, 381, 394, 396, 407, 415, 420, 425, 431, 432, 434, 440, 446, 447, 452], "384": 2, "382": 2, "381": 2, "377": 2, "vanleerconvectionterm": [2, 21, 48, 183, 184, 471, 474], "minmod": 2, "slope": 2, "376": 2, "committicketupdat": 2, "375": [2, 113, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 475], "_formatinteg": 2, "373": 2, "372": 2, "cylindr": [2, 50, 51, 60, 61, 221, 222, 223, 224, 225], "371": 2, "binari": [2, 7, 8, 10, 11, 12, 15, 21, 22, 116, 166, 178, 203, 226, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 475], "370": 2, "368": 2, "well": [2, 4, 9, 10, 12, 16, 18, 22, 32, 33, 109, 165, 166, 178, 179, 191, 192, 194, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 472], "367": 2, "promot": 2, "366": 2, "unop": [2, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "365": 2, "renam": [2, 191, 192], "instanc": [2, 8, 18, 52, 192, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 463], "364": 2, "factori": [2, 82, 178, 191, 225, 441, 442, 463], "360": 2, "css": 2, "356": 2, "353": 2, "ohloh": 2, "repo": 2, "352": 2, "getvers": 2, "350": 2, "element": [2, 7, 16, 37, 73, 74, 79, 109, 138, 158, 226, 230, 231, 232, 339, 347, 381, 390, 394, 398, 400, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468, 471, 473, 475], "347": 2, "activ": [2, 10, 12, 18, 22], "frame": [2, 9, 454, 455], "front": [2, 103, 163, 176, 177, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 436], "339": 2, "loki": 2, "337": 2, "interact": [2, 4, 8, 12, 16, 18, 20, 22, 37, 50, 51, 52, 57, 60, 61, 66, 76, 78, 82, 86, 111, 112, 113, 114, 115, 116, 117, 140, 164, 165, 166, 168, 169, 178, 179, 191, 381, 390, 460], "between": [2, 18, 21, 22, 32, 33, 82, 109, 111, 139, 141, 163, 165, 166, 169, 172, 176, 177, 179, 183, 191, 192, 225, 243, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 379, 390, 394, 411, 431, 468, 469, 471, 474], "336": 2, "clash": 2, "334": 2, "citat": [2, 18], "go": [2, 22, 111, 112, 113, 163, 164, 165, 166, 168, 169, 176, 177], "doi": [2, 15, 475], "333": 2, "seem": [2, 18, 191, 451, 478], "331": 2, "330": 2, "facevalu": [2, 21, 165, 166, 178, 183, 184, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "facecent": [2, 18, 73, 74, 82, 83, 84, 105, 120, 165, 166, 178, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "329": 2, "background": [2, 9, 21, 22, 226, 469, 470], "326": 2, "gmsh2d": [2, 18, 21, 72, 73, 74, 96, 138, 193, 226], "323": 2, "getfacecent": [2, 192], "return": [2, 18, 33, 73, 74, 82, 83, 84, 111, 112, 113, 114, 115, 116, 117, 129, 130, 132, 165, 166, 168, 176, 177, 178, 179, 183, 184, 191, 192, 196, 197, 198, 199, 200, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 288, 292, 293, 294, 295, 296, 301, 304, 305, 306, 307, 308, 311, 315, 316, 317, 318, 319, 320, 321, 322, 334, 335, 336, 337, 338, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 381, 383, 384, 386, 390, 391, 393, 394, 395, 396, 400, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 456, 463], "319": 2, "transientterm": [2, 9, 18, 21, 32, 33, 34, 35, 37, 40, 41, 64, 72, 73, 74, 75, 78, 79, 82, 83, 84, 91, 111, 112, 113, 114, 115, 116, 124, 125, 127, 129, 131, 140, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 183, 184, 192, 193, 342, 351, 358, 359, 362, 366, 373, 374, 471], "dt": [2, 9, 18, 32, 33, 34, 35, 37, 40, 41, 48, 64, 72, 73, 74, 75, 78, 79, 81, 82, 83, 84, 91, 111, 112, 113, 114, 115, 116, 124, 125, 127, 136, 140, 151, 152, 153, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 183, 184, 193, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 404, 416], "318": 2, "311": 2, "305": 2, "mpirun": [2, 18], "np": [2, 18], "wd": 2, "hang": 2, "sandbox": 2, "buildbot": [2, 5, 468], "297": 2, "gnuplot": 2, "291": [2, 347, 350, 351, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374], "efficiency_test": 2, "choke": 2, "liquidvapor2d": [2, 21], "289": [2, 475], "diffusionterm": [2, 9, 18, 21, 22, 32, 33, 34, 35, 37, 40, 41, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 73, 74, 75, 76, 82, 83, 84, 86, 91, 92, 95, 96, 98, 100, 101, 104, 105, 108, 111, 112, 113, 114, 115, 116, 117, 120, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 183, 184, 191, 192, 347, 350, 351, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 371, 373, 374, 471], "_test": 2, "287": 2, "275": 2, "274": 2, "norm2": 2, "272": 2, "269": 2, "gridxd": 2, "255": 2, "5": [2, 3, 7, 9, 12, 15, 16, 18, 22, 32, 33, 34, 35, 37, 58, 68, 72, 73, 74, 75, 76, 82, 91, 96, 103, 114, 115, 116, 117, 120, 125, 127, 129, 131, 140, 141, 146, 152, 159, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 183, 184, 187, 194, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 335, 347, 350, 351, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374, 381, 390, 394, 398, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 449, 451, 452, 454, 455, 461, 471, 474, 475], "mask": [2, 9, 18, 129, 192, 196, 198, 199, 200, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "253": 2, "promin": 2, "245": [2, 146], "_binaryterm": 2, "228": 2, "attempt": [2, 12, 18, 19, 22, 82, 191, 194, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 454, 455], "mpi": [2, 17, 21, 225, 259, 260, 315, 316, 381, 383, 385, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 468, 469], "225": 2, "mostli": [2, 225, 226], "209": [2, 120], "rhie": [2, 120], "chow": [2, 120], "180": [2, 176, 177], "arithmet": [2, 9, 22, 169, 176, 177, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 468], "face": [2, 9, 18, 22, 32, 34, 35, 37, 69, 73, 74, 82, 86, 120, 158, 165, 166, 168, 169, 176, 177, 183, 191, 192, 196, 198, 199, 200, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 452, 471], "cell": [2, 7, 9, 15, 18, 20, 21, 22, 32, 34, 35, 51, 61, 68, 72, 73, 74, 82, 83, 84, 108, 120, 141, 146, 158, 165, 166, 183, 192, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 449, 451, 452, 461, 469, 473, 475], "distanc": [2, 18, 124, 125, 131, 140, 151, 183, 411, 471], "calcul": [2, 7, 9, 12, 14, 18, 19, 20, 22, 32, 34, 35, 52, 73, 74, 82, 91, 92, 120, 131, 140, 165, 166, 183, 191, 192, 194, 230, 231, 232, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 471], "128": 2, "123": [2, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374, 394], "numerix": [2, 9, 18, 21, 32, 33, 34, 35, 37, 40, 41, 48, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 78, 79, 82, 83, 84, 96, 104, 108, 112, 115, 116, 117, 120, 124, 125, 127, 129, 130, 131, 132, 136, 140, 151, 152, 153, 158, 159, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 398, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 445, 447, 448, 449, 451, 452, 454, 455, 471], "dot": [2, 18, 21, 72, 114, 115, 116, 120, 139, 140, 141, 152, 164, 192, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "tensor": [2, 21, 95, 163, 176, 177, 469], "103": 2, "subscrib": [2, 4], "_markstal": 2, "attributeerror": [2, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "61": 2, "implicitdiffusionterm": [2, 21, 191, 192, 200, 471], "simpl": [2, 8, 9, 18, 20, 21, 22, 32, 33, 73, 74, 82, 108, 111, 114, 115, 117, 120, 141, 165, 166, 168, 169, 178, 347, 361, 390, 411, 435, 436, 456, 473], "mesh1d": [2, 8, 9, 16, 18, 21, 53, 58, 62, 63, 67, 79, 81, 94, 95, 96, 100, 101, 105, 112, 113, 116, 165, 166, 233, 471], "346": 2, "text": [2, 8, 9, 16, 18, 22, 33, 37, 50, 52, 57, 60, 61, 76, 82, 86, 109, 111, 115, 116, 117, 127, 130, 132, 136, 140, 143, 144, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 191, 198, 199, 200, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 396, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 468, 471, 472, 474], "trunk": 2, "342": 2, "transient": [2, 16, 18, 21, 73, 74, 78, 79, 82, 83, 84, 109, 164, 178, 179, 194, 469, 472, 473], "implicit": [2, 9, 12, 18, 33, 47, 82, 83, 84, 86, 164, 165, 166, 168, 169, 178, 179, 191, 342, 471], "338": 2, "svntogit": 2, "bump": [2, 15], "increas": [2, 9, 22, 32, 33, 34, 35, 64, 75, 82, 183, 226, 446, 447, 471, 474], "capabl": [2, 7, 9, 12, 17, 18, 19, 22, 259, 260, 315, 316, 383, 471], "eas": 2, "few": [2, 18, 20, 22, 76, 139, 411, 476, 477, 478, 480], "exist": [2, 4, 10, 11, 12, 22, 140, 146, 163, 176, 177, 191, 192, 194, 226, 377, 381, 390, 431, 468, 472, 478], "A": [2, 9, 10, 12, 13, 15, 18, 19, 22, 32, 33, 68, 72, 78, 81, 91, 92, 108, 111, 115, 117, 120, 140, 141, 143, 144, 146, 158, 163, 164, 165, 166, 168, 169, 176, 177, 179, 184, 192, 193, 194, 211, 226, 266, 328, 338, 339, 347, 371, 377, 380, 381, 390, 391, 394, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 468, 471, 472, 473, 475], "mechan": [2, 9, 15, 18, 22, 139, 146, 168, 468, 475], "specifi": [2, 6, 11, 18, 20, 79, 81, 82, 192, 193, 198, 199, 200, 225, 226, 296, 342, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 468, 471, 478, 479], "most": [2, 3, 7, 8, 9, 10, 12, 17, 18, 19, 22, 50, 51, 52, 60, 61, 72, 82, 139, 191, 192, 193, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 351, 358, 359, 362, 366, 373, 374, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451, 468, 471, 478], "partit": [2, 5, 18, 192, 226], "pyamg": [2, 18, 21, 468, 469], "pervas": [2, 5, 11], "full": [2, 5, 12, 22, 109, 141, 178, 191, 194, 478], "namespac": [2, 18, 192, 193, 381, 400], "update2_0to3_0": [2, 8, 21], "detail": [2, 9, 12, 16, 17, 18, 22, 50, 51, 52, 60, 61, 73, 74, 120, 165, 166, 168, 169, 176, 177, 191, 273, 335, 351, 358, 359, 362, 366, 373, 377, 395], "contain": [2, 3, 8, 9, 12, 22, 23, 116, 120, 140, 180, 192, 193, 230, 231, 232, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 476, 477, 480], "timestep": [2, 21, 82, 86, 114, 163, 165, 166, 176, 177, 179, 183, 184, 191, 192, 193, 339, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 418, 469], "brought": 2, "unavoid": 2, "guidanc": [2, 9], "332": 2, "x86_64": 2, "324": 2, "constrain": [2, 18, 21, 37, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 73, 74, 75, 76, 78, 79, 82, 83, 84, 86, 95, 96, 105, 114, 117, 120, 140, 178, 183, 184, 193, 197, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441], "implicitsourceterm": [2, 18, 21, 32, 33, 40, 41, 68, 69, 114, 115, 116, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 183, 184, 192, 371, 471], "317": [2, 15], "gmshimport": [2, 11], "due": [2, 7, 9, 17, 68, 73, 74, 87, 141, 163, 165, 166, 176, 177, 183, 377, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 471], "share": [2, 20, 381, 396], "316": 2, "313": 2, "307": 2, "306": [2, 475], "302": 2, "301": 2, "pycomm": 2, "debian": 2, "300": [2, 120, 416], "mesh2d": [2, 7, 21, 34, 35, 222, 226, 234, 237, 243, 251], "299": 2, "298": [2, 114, 140, 141, 146], "consumpt": [2, 139, 141], "growth": [2, 7, 20, 22, 164, 176, 177, 475], "repeat": [2, 179], "especi": [2, 20, 22, 474], "294": 2, "293": 2, "sphere": [2, 8, 9, 21], "segfault": 2, "292": 2, "290": 2, "improv": [2, 5, 7, 12, 17, 18, 75, 120, 179, 191, 193, 394, 468, 471, 474], "inconsequenti": 2, "288": 2, "themselv": 2, "286": 2, "285": 2, "284": 2, "transpos": [2, 72], "281": 2, "nthorderdiffusionterm": 2, "280": 2, "convectionterm": [2, 9, 18, 64, 69, 165, 183, 184, 191, 192], "277": 2, "step": [2, 7, 9, 12, 14, 18, 21, 22, 32, 33, 34, 35, 37, 40, 41, 48, 73, 74, 75, 78, 79, 81, 82, 83, 84, 92, 113, 114, 115, 124, 125, 127, 136, 139, 140, 141, 146, 151, 152, 153, 163, 164, 165, 166, 168, 169, 172, 173, 174, 179, 183, 184, 191, 192, 226, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 288, 294, 295, 301, 304, 305, 306, 307, 308, 311, 318, 319, 320, 321, 322, 334, 335, 336, 337, 338, 340, 341, 371, 411, 418, 471], "273": 2, "diffusiontermnocorrect": [2, 21, 353], "270": [2, 176, 177], "too": [2, 3, 9, 12, 18, 32, 34, 35], "267": [2, 475], "reduc": [2, 7, 22, 82, 115, 165, 166, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 471, 473], "time": [2, 7, 9, 10, 12, 16, 18, 20, 22, 23, 32, 33, 34, 35, 72, 75, 78, 79, 81, 82, 83, 84, 92, 111, 115, 124, 125, 136, 139, 140, 141, 146, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 179, 183, 184, 192, 199, 222, 226, 232, 234, 237, 243, 251, 338, 341, 371, 418, 441, 471, 472, 474], "chemotaxi": [2, 21], "264": 2, "input2d": [2, 21], "261": 2, "260": 2, "259": 2, "shorthand": [2, 478], "cellcent": [2, 9, 21, 37, 40, 41, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 76, 78, 79, 81, 82, 86, 87, 91, 92, 95, 96, 98, 100, 101, 105, 108, 111, 112, 113, 114, 115, 116, 117, 124, 125, 127, 129, 131, 140, 143, 144, 152, 159, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 192, 193, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 445, 447, 448, 449, 451, 452, 454, 455], "etc": [2, 192, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "258": [2, 475], "gmshexport": 2, "252": 2, "benni": [2, 120], "interpol": [2, 32, 34, 35, 120, 141, 165, 166, 179, 183, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 451, 471, 473], "patch": [2, 4, 9, 83, 84, 451], "250": [2, 140, 141, 146], "tex": 2, "quaternari": [2, 8, 21, 116], "247": 2, "var1": [2, 18, 48, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "var0": [2, 18, 461], "sensibli": 2, "243": [2, 391], "reconstrain": 2, "242": 2, "240": 2, "profil": [2, 40, 76, 78, 79, 82, 117], "merg": [2, 3, 10, 12, 21, 377, 469], "237": 2, "236": 2, "mix": [2, 230, 231, 232, 342, 468], "235": 2, "propag": 2, "231": [2, 339], "factorymesh": [2, 21], "keyword": [2, 9, 141, 143, 144, 146, 377, 379, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "223": [2, 442], "218": 2, "absenc": [2, 17], "enthought": [2, 11, 19, 468], "216": 2, "fresh": [2, 10, 12, 18], "213": 2, "206": 2, "gnuplot1d": 2, "205": 2, "normal": [2, 18, 140, 237, 238, 338, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 451, 471], "203": 2, "help": [2, 4, 8, 9, 12, 17, 18, 191, 192, 193, 194, 377, 456], "202": 2, "manipul": [2, 8, 192, 478], "lead": [2, 18, 139, 163, 176, 177, 471, 474], "201": [2, 339], "veloc": [2, 9, 15, 69, 120, 124, 125, 127, 140, 152, 165, 166, 179, 183, 471], "faq": [2, 4, 9, 192], "200": [2, 64, 76, 82, 114, 117, 127, 141, 143, 176, 177], "195": 2, "multipl": [2, 3, 7, 9, 11, 12, 18, 22, 73, 74, 82, 117, 178, 200, 390, 441, 468, 471], "result": [2, 7, 8, 9, 11, 13, 17, 18, 19, 32, 33, 34, 35, 37, 48, 50, 51, 52, 55, 57, 60, 61, 62, 66, 69, 73, 74, 76, 78, 79, 81, 82, 83, 84, 86, 91, 92, 96, 98, 100, 101, 105, 108, 111, 112, 113, 114, 116, 117, 120, 124, 125, 129, 131, 136, 139, 140, 141, 146, 151, 163, 165, 166, 176, 177, 179, 180, 183, 191, 192, 194, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 371, 381, 390, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 451, 468, 471, 474], "163": [2, 475], "infinit": [2, 9, 37, 76, 79, 82, 117, 179], "162": [2, 120], "ones": [2, 3, 9, 12, 158, 176, 177, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "130": 2, "86": 2, "ly": [2, 127, 129, 143, 144, 192, 225], "lz": [2, 225], "77": [2, 7, 48, 394], "hasold": [2, 9, 40, 41, 72, 75, 82, 114, 116, 124, 125, 127, 129, 131, 140, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 183, 184, 371, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "self": [2, 3, 11, 12, 109, 111, 112, 113, 114, 115, 116, 117, 143, 144, 163, 176, 177, 196, 197, 198, 199, 200, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 288, 290, 292, 293, 294, 295, 296, 301, 304, 305, 306, 307, 308, 311, 315, 316, 317, 318, 319, 320, 321, 322, 334, 335, 336, 337, 342, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 379, 381, 383, 384, 390, 400, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 478, 479], "old": [2, 9, 18, 21, 33, 82, 163, 164, 165, 166, 168, 169, 176, 179, 183, 184, 192, 193, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 391, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 471], "44": [2, 381, 390], "282": 2, "279": 2, "nummesh": [2, 193], "submodul": 2, "278": 2, "form": [2, 16, 18, 21, 22, 32, 33, 34, 35, 37, 72, 75, 82, 91, 115, 120, 138, 141, 165, 166, 169, 178, 179, 183, 192, 193, 353, 367, 381, 390, 469, 471, 472, 474, 478], "268": 2, "slave": 2, "262": 2, "256": 2, "grid1d": [2, 18, 21, 37, 40, 52, 55, 57, 64, 66, 68, 69, 75, 76, 78, 82, 86, 92, 111, 112, 114, 115, 116, 117, 125, 131, 165, 166, 169, 178, 179, 183, 191, 192, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 391, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 445, 454, 455, 461], "251": 2, "241": 2, "238": 2, "predict": [2, 15, 120, 165, 166, 474, 475], "233": 2, "treat": [2, 9, 22, 179, 458], "upwind": [2, 18, 46, 47, 347, 358, 361, 373, 474], "224": [2, 442], "align": [2, 9, 18, 37, 75, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "222": 2, "__add__": [2, 21, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 390], "221": [2, 442], "219": 2, "matforg": 2, "hammer": 2, "208": 2, "207": 2, "ndarrai": [2, 338, 394, 440], "196": 2, "won": [2, 10, 12, 18, 163, 176, 177, 479], "152": 2, "re": [2, 9, 12, 22, 68, 72, 82, 116, 117, 166, 178, 179, 340, 381, 390], "138": 2, "100": [2, 7, 11, 20, 32, 33, 34, 35, 37, 40, 41, 50, 51, 60, 61, 68, 75, 78, 79, 82, 114, 120, 136, 143, 158, 159, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 183, 184, 381, 390, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 442, 445, 447, 448, 451, 452, 454, 455], "80": [2, 120], "idl": [2, 18], "46": [2, 475], "45": [2, 111, 112, 113, 140, 146, 381, 390, 461, 475], "slice": [2, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "produc": [2, 9, 18, 395, 420, 468], "effici": [2, 17, 18, 21, 22, 50, 51, 52, 60, 61, 191, 469, 470, 471], "diagnost": [2, 18], "232": 2, "becaus": [2, 9, 11, 12, 18, 22, 32, 33, 34, 35, 64, 76, 82, 116, 117, 120, 163, 165, 166, 169, 176, 177, 179, 183, 191, 192, 255, 347, 377, 411], "sighup": 2, "230": 2, "226": 2, "backend": [2, 9], "flush_ev": 2, "217": 2, "unpickl": [2, 391], "191": 2, "spheredaemon": [2, 21, 35], "miss": [2, 3, 11, 12], "187": 2, "garbl": 2, "complet": [2, 12, 17, 18, 21, 22, 141, 192, 193, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 469, 471], "independ": [2, 9, 12, 18, 22, 165, 166, 183, 471], "199": 2, "dummi": [2, 18, 116], "notimplementederror": [2, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 342], "instanti": [2, 17, 18, 22, 67, 140, 191, 203, 342, 390, 404, 407, 411, 412, 416, 418, 420, 432, 436, 439], "abstract": [2, 9, 22, 191, 196, 268, 269, 299, 301, 311, 333, 334, 337, 342, 350, 360, 368, 369, 425, 432, 444, 462, 478], "198": 2, "cylindricalgrid1d": [2, 21, 50, 51, 225], "197": 2, "tell": [2, 21, 32, 33, 34, 35, 140, 191, 469], "194": [2, 475], "larg": [2, 7, 9, 12, 17, 18, 22, 82, 136, 138, 165, 166, 347, 377, 395, 418], "valueerror": [2, 9, 11, 221, 222, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 251, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "193": 2, "192": 2, "typeerror": [2, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 342, 381, 390], "small": [2, 9, 32, 33, 82, 140, 146, 163, 164, 176, 177, 183, 381, 390, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "beli": 2, "advanc": [2, 9, 82], "did": [2, 163, 176, 177], "increment": [2, 191], "er": 2, "older": [2, 4, 8, 9], "simul": [2, 7, 12, 15, 18, 20, 32, 33, 34, 35, 91, 139, 140, 141, 146, 163, 168, 169, 176, 177, 194, 225, 226, 339, 418, 475], "entir": [2, 18, 35, 159, 163, 176, 177, 183], "avail": [2, 6, 10, 12, 13, 14, 17, 18, 19, 35, 73, 74, 79, 82, 140, 165, 166, 179, 194, 456, 468, 471, 474, 478], "our": [2, 4, 9, 10, 12, 17, 18, 82, 179, 191, 192, 193, 194], "itself": [2, 18, 191, 192, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "190": 2, "rang": [2, 9, 37, 40, 41, 48, 72, 73, 74, 75, 78, 79, 81, 82, 83, 84, 111, 112, 113, 114, 115, 116, 120, 124, 125, 127, 136, 140, 143, 144, 151, 152, 153, 163, 164, 165, 166, 168, 169, 172, 173, 174, 178, 179, 180, 226, 316, 371, 415, 418, 434, 435, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 468, 472], "182": 2, "binop": [2, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "2_0": [2, 192], "179": [2, 120], "easy_instal": 2, "177": 2, "169": 2, "webpag": 2, "internet": 2, "explor": [2, 12, 22], "156": 2, "153": [2, 15, 475], "math": [2, 4, 164], "direct": [2, 11, 13, 17, 18, 32, 33, 34, 35, 94, 192, 200, 224, 225, 226, 243, 251, 266, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 451, 468, 478], "symmetri": [2, 20, 21, 163, 176, 177, 224], "getcel": [2, 192], "enforc": 2, "both": [2, 8, 9, 12, 14, 18, 19, 22, 50, 51, 52, 60, 61, 79, 82, 116, 120, 136, 141, 165, 166, 191, 192, 256, 316, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468, 472], "clearer": [2, 9, 191, 192], "levelset": [2, 7, 8, 9, 21], "distancefunct": [2, 8, 21, 143, 144], "comparison": [2, 21, 120, 164, 165, 166, 469], "subtl": 2, "unlik": [2, 82, 191, 478], "affect": [2, 9, 18], "veri": [2, 7, 9, 10, 12, 17, 18, 22, 138, 165, 166, 176, 177, 178, 179, 192, 193, 377, 411, 478], "188": 2, "smtpsenderrefus": 2, "553": 2, "trac": [2, 468], "matdl": 2, "osi": 2, "org": [2, 3, 4, 9, 12, 17, 18, 73, 74, 395, 468, 475], "sender": 2, "address": [2, 4, 12, 22], "184": [2, 390], "exportasmesh": 2, "183": 2, "linearjorsolv": [2, 21], "__init__": [2, 11, 111, 112, 113, 114, 116, 117, 163, 176, 177, 479], "rather": [2, 9, 11, 18, 22, 66, 67, 82, 92, 168, 179, 191, 192, 381, 390, 436, 471, 476, 477, 478, 480], "pysparsesolv": [2, 21, 292, 293, 294, 295, 296], "181": 2, "151": [2, 475], "mayavi2": [2, 456], "13": [2, 7, 111, 163, 164, 169, 176, 177, 179, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 390, 475], "176": 2, "win32": 2, "175": [2, 339], "offset": [2, 192, 381, 390, 418, 420, 439], "170": 2, "__invert__": [2, 21, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "154": [2, 15], "update1_0to2_0": [2, 8, 21], "hold": [2, 13, 18, 82, 140, 197, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "rank": [2, 9, 21, 72, 120, 184, 192, 316, 351, 358, 359, 362, 366, 373, 374, 381, 385, 394, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 451, 452, 461, 463, 469, 471], "simpler": [2, 22, 191], "determin": [2, 9, 22, 32, 33, 179, 183, 226, 338, 353, 390, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 443, 444, 446, 447, 448, 449, 451, 452, 471, 472], "diagon": [2, 9, 18, 120, 179, 183, 192, 251, 256, 262], "hand": [2, 9, 22, 32, 33, 69, 82, 115, 192, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "side": [2, 18, 20, 69, 76, 82, 103, 115, 117, 165, 166, 226, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "simplifi": [2, 11, 117, 165, 166, 178, 192, 193], "167": 2, "166": 2, "vectorcel": 2, "vectorfac": 2, "165": 2, "section": [2, 7, 9, 12, 13, 18, 73, 74, 82, 164, 183, 191, 340, 471], "149": 2, "143": 2, "141": 2, "toolset": 2, "140": [2, 475], "136": 2, "135": 2, "127": 2, "fragil": [2, 12], "54": [2, 381, 390], "161": 2, "160": 2, "157": 2, "temp": 2, "widow": 2, "155": 2, "appear": [2, 4, 9, 13, 16, 18, 82, 92, 139, 143, 144, 146, 179, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 471], "150": [2, 475], "pythonxi": 2, "148": 2, "147": 2, "cg": [2, 267, 271, 292, 305, 308, 319, 322], "145": [2, 15, 475], "144": 2, "intermitt": 2, "142": [2, 381, 390], "139": 2, "bitten": 2, "137": [2, 15], "backport": 2, "manuscript": 2, "131": [2, 18], "extens": [2, 9, 12, 17, 140, 168, 194, 391, 407, 411, 468], "126": 2, "125": [2, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "emb": [2, 22], "obsolet": [2, 3, 12, 338], "124": 2, "121": [2, 176, 177], "simpletrenchsystem": [2, 7, 21, 139, 140, 141], "120": [2, 439], "118": [2, 183, 184], "117": 2, "getfacesbottom": [2, 191], "getfacestop": [2, 191], "lack": 2, "descript": [2, 141, 146, 226], "115": 2, "view": [2, 9, 12, 16, 18, 19, 35, 50, 51, 52, 57, 60, 61, 66, 76, 78, 82, 86, 117, 143, 158, 163, 168, 191, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 468], "cahn": [2, 18, 20, 21, 32, 33, 34, 35, 37, 163, 176, 177, 179, 353, 471, 472, 475], "hilliard": [2, 18, 21, 32, 33, 34, 35, 37, 163, 176, 177, 353, 471, 472, 475], "113": [2, 475], "macbook": 2, "pro": [2, 10, 12, 475], "intel": 2, "112": 2, "111": [2, 114], "grid2d": [2, 21, 32, 33, 41, 62, 67, 79, 83, 84, 94, 95, 113, 120, 124, 127, 129, 138, 140, 143, 144, 158, 163, 164, 168, 176, 177, 180, 184, 191, 192, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 351, 358, 359, 361, 362, 366, 373, 374, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 447, 448, 449, 451, 452, 454, 455, 461], "110": 2, "numer": [2, 5, 7, 9, 11, 15, 17, 21, 37, 50, 51, 52, 60, 61, 75, 82, 92, 136, 164, 179, 183, 191, 192, 194, 339, 340, 351, 358, 359, 362, 366, 373, 381, 390, 398, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 437, 439, 440, 453, 457, 464, 468, 469, 470, 471, 475], "dimensionless": [2, 76, 112, 117, 136, 163, 176, 177, 381, 390], "elphf": [2, 21], "109": [2, 475], "doctest": [2, 8, 11, 16, 18, 22, 82, 194, 377], "__array__": [2, 21, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "108": 2, "107": [2, 475], "106": [2, 15], "105": [2, 13], "useless": 2, "102": 2, "dict": [2, 143, 144, 288, 335, 377, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 468], "99": [2, 226, 381, 390], "97": 2, "nan": [2, 73, 74, 461], "correctli": [2, 33, 48, 120, 347, 371], "96": [2, 120], "95": 2, "code": [2, 5, 7, 8, 10, 11, 12, 13, 17, 18, 19, 21, 22, 69, 73, 74, 75, 82, 120, 125, 151, 158, 163, 164, 165, 166, 168, 169, 172, 173, 174, 180, 191, 268, 334, 379, 381, 390, 394, 451, 468, 469], "92": 2, "pygist": 2, "dead": 2, "offici": [2, 10, 12], "84": 2, "83": 2, "zerodivisionerror": 2, "cellterm": [2, 21, 368, 371], "getold": 2, "79": [2, 7, 15, 394], "67": [2, 390], "unstructur": [2, 19, 468, 471, 475], "43": [2, 7, 475], "tsvviewer": [2, 9, 21, 73, 74, 114], "shape": [2, 21, 22, 33, 48, 163, 176, 177, 221, 222, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 251, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "34": [2, 390], "infin": [2, 9, 394], "122": [2, 176, 177], "119": 2, "116": 2, "104": 2, "matplotlibvectorview": [2, 21], "_plot": [2, 163, 176, 177], "101": 2, "autoscal": [2, 143, 144, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "93": 2, "91": [2, 475], "76": [2, 140, 146], "75": [2, 18, 381, 390, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 435, 436, 439, 461], "auto": [2, 443, 444, 446, 447, 448, 449, 451, 452], "docstr": [2, 377, 386], "74": [2, 15], "combin": [2, 3, 9, 12, 16, 18, 22, 116, 183, 194, 381, 390, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 471, 472], "51": [2, 96, 475], "__pos__": 2, "50": [2, 15, 40, 41, 82, 91, 101, 120, 163, 442, 447, 448, 451, 452, 454, 455], "39": [2, 165, 166], "72": [2, 461], "19": [2, 7, 82, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 390, 472, 475], "98": [2, 15], "case": [2, 7, 9, 11, 12, 14, 16, 18, 22, 40, 41, 48, 50, 51, 52, 57, 60, 61, 64, 72, 75, 76, 78, 79, 81, 82, 103, 104, 107, 108, 116, 117, 130, 132, 136, 140, 141, 155, 160, 163, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 183, 185, 189, 191, 192, 193, 225, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 386, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 474, 476, 477, 478, 479, 480], "94": [2, 244], "90": [2, 82, 120, 176, 177, 442, 445, 454, 455], "87": [2, 7, 475], "length": [2, 11, 22, 73, 74, 82, 86, 92, 164, 179, 225, 226, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 451, 452], "convert": [2, 9, 22, 163, 176, 177, 191, 381, 390, 394, 395, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451], "needless": 2, "rebuild": [2, 18], "66": 2, "guid": [2, 7], "variou": [2, 10, 12, 18, 22, 109, 140, 474], "62": [2, 7, 141], "unrecogn": 2, "token": 2, "13c": 2, "55": [2, 114, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "intern": [2, 21, 22, 192, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 469], "52": [2, 15, 475], "facevectorvari": 2, "48": 2, "inherit": [2, 11, 22, 192, 478], "hidden": [2, 22], "42": [2, 18, 165, 166], "model": [2, 5, 7, 8, 10, 12, 15, 16, 17, 20, 21, 22, 32, 33, 40, 41, 109, 116, 139, 140, 141, 143, 144, 146, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 194, 468, 469, 472, 475], "addoverfacesvari": [2, 21], "gross": 2, "41": [2, 461], "iter": [2, 7, 17, 21, 22, 37, 48, 53, 55, 57, 58, 62, 67, 82, 83, 84, 111, 112, 113, 114, 116, 120, 163, 164, 168, 169, 176, 177, 178, 179, 191, 192, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 288, 294, 295, 301, 304, 305, 306, 307, 308, 311, 318, 319, 320, 321, 322, 334, 335, 336, 337, 338, 341, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 418, 468, 469, 471], "norm": [2, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 394, 451], "21": [2, 114, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 390, 472, 475], "dimens": [2, 12, 21, 22, 33, 52, 73, 74, 76, 82, 84, 112, 120, 125, 129, 130, 131, 132, 163, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 192, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 394, 407, 411, 415, 418, 425, 431, 432, 434, 435, 440, 441, 442, 463, 471, 474], "wai": [2, 3, 8, 12, 13, 18, 20, 21, 22, 37, 75, 81, 82, 96, 98, 100, 101, 105, 114, 115, 140, 158, 163, 164, 165, 166, 168, 169, 176, 177, 179, 192, 194, 235, 237, 238, 251, 255, 347, 381, 390, 469, 471, 478], "significantli": [2, 7, 9, 12, 192], "cach": [2, 18, 21, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 440, 469], "intermedi": [2, 7, 9, 17, 32, 33, 120], "uniformgrid": [2, 21, 253, 254, 255, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "geometr": [2, 32, 34, 35, 199, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "fly": [2, 22], "present": [2, 7, 8, 9, 12, 18, 20, 21, 112, 139, 141, 151, 165, 166, 173, 174, 394, 469, 470, 474], "made": [2, 9, 12, 13, 14, 16, 22, 120, 127, 179, 192, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 390, 407, 411, 415, 420, 425, 431, 434, 435, 436, 440], "consider": [2, 4, 18, 191, 194], "construct": [2, 8, 17, 18, 22, 73, 74, 124, 125, 129, 131, 139, 141, 163, 164, 165, 166, 169, 176, 177, 178, 226, 347, 361, 379, 381, 390, 411, 468, 471], "execut": [2, 3, 7, 10, 11, 12, 17, 18, 22, 23, 78, 81, 92, 124, 125, 131, 377, 378, 380], "subclass": [2, 9, 35, 196, 268, 269, 299, 301, 311, 333, 334, 337, 350, 360, 368, 369, 425, 432, 444, 462, 478], "sensibl": [2, 18], "answer": [2, 4, 21, 37, 79, 81, 82, 87, 108, 124, 125, 127, 151, 152, 179, 347, 361, 404, 407, 411, 412, 416, 418, 420, 431, 432, 435, 436, 439, 469], "For": [2, 3, 8, 9, 10, 12, 17, 18, 22, 32, 34, 35, 64, 73, 74, 82, 86, 109, 146, 158, 165, 166, 178, 179, 192, 194, 335, 347, 351, 358, 359, 362, 366, 373, 394, 418, 441, 451, 468, 471, 472, 473, 478], "vectorcellvari": [2, 192], "periodicgrid": 2, "howev": [2, 7, 9, 18, 82, 92, 120, 471, 474], "rewritten": [2, 37, 183], "serv": [2, 8, 22, 226], "tutori": [2, 12, 14, 18, 140, 191, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 475], "sever": [2, 12, 16, 17, 18, 22, 115, 192, 193, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "elabor": [2, 9], "multicompon": [2, 111], "multidimension": 2, "superfil": [2, 15, 139, 140, 141, 146, 475], "better": [2, 4, 9, 18, 19, 22, 48, 164, 165, 166, 178, 179, 191, 193, 411, 468, 472], "fluid": [2, 21, 22, 120, 329, 339, 472, 473, 475], "classic": [2, 165, 166, 178, 183, 280, 328, 330], "lid": [2, 120], "distinct": [2, 21, 22, 32, 33, 192, 469], "linear": [2, 9, 17, 18, 21, 22, 32, 33, 34, 35, 37, 82, 114, 115, 120, 141, 163, 165, 166, 168, 169, 176, 177, 179, 183, 192, 256, 285, 292, 293, 294, 295, 296, 307, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 468, 469, 473], "explan": [2, 9, 18, 140, 146, 377, 386], "concept": [2, 18, 475, 478], "involv": [2, 7, 21, 22, 82, 168, 169, 176, 177, 179, 469, 472, 478], "frequent": [2, 7, 16, 17, 21, 165, 166, 179, 394, 468, 469, 470], "question": [2, 4, 16, 21, 116, 338, 469, 470], "multiview": [2, 21, 140, 163, 176, 177, 442], "group": [2, 4, 5, 9], "togeth": [2, 9, 18, 138, 183, 377, 390, 458], "couldn": 2, "abbrevi": 2, "promis": 2, "actual": [2, 9, 22, 82, 120, 179, 191, 256, 335, 377, 436, 478], "fulli": [2, 18, 22, 82, 179, 183, 473], "qualifi": 2, "cv": [2, 351, 358, 359, 362, 366, 373, 374, 471], "subvers": 2, "sourceforg": [2, 9, 17, 19, 468], "materi": [2, 5, 15, 21, 22, 82, 109, 120, 139, 141, 146, 163, 176, 177, 194, 469, 470, 475], "digit": [2, 394], "pathwai": 2, "pde": [2, 9, 12, 15, 16, 22, 33, 163, 176, 177, 179, 192, 194, 472, 473], "subtract": [2, 7, 21, 115, 169, 191, 381, 390, 431], "job": [2, 11, 48, 120], "suppli": [2, 9, 16, 17, 22, 165, 166, 191, 192, 226, 377, 381, 390, 420, 471, 478, 479], "fipy_view": [2, 18, 441], "them": [2, 4, 9, 11, 12, 14, 18, 22, 33, 75, 82, 97, 113, 115, 168, 191, 192, 193, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 378, 479], "choic": [2, 9, 17, 18, 19, 165, 166, 179, 183, 273], "noisevari": [2, 21, 404, 412, 416, 418, 439], "pyx": 2, "layout": 2, "getlaplacian": 2, "effect": [2, 4, 7, 18, 32, 33, 82, 163, 176, 177, 178, 179, 200, 371, 475], "getfacegrad": [2, 192], "getdiverg": 2, "which": [2, 4, 7, 9, 10, 11, 12, 14, 16, 17, 18, 19, 22, 23, 76, 79, 82, 94, 114, 115, 117, 120, 140, 165, 166, 168, 179, 183, 191, 192, 199, 225, 273, 377, 381, 386, 390, 394, 395, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 451, 468, 471, 473, 478, 479], "deepli": 2, "nest": [2, 9], "find": [2, 9, 10, 12, 17, 18, 82, 92, 165, 166, 192, 193, 394, 441, 442, 463], "situat": 2, "earlier": [2, 3, 12, 73, 74, 165, 166, 191, 394], "update0_1to1_0": [2, 8, 9, 21], "49": [2, 114], "47": [2, 339], "coeff": [2, 9, 18, 32, 33, 34, 35, 37, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 73, 74, 75, 76, 78, 79, 82, 83, 84, 86, 91, 95, 108, 111, 112, 113, 114, 115, 116, 117, 120, 141, 165, 166, 177, 178, 179, 183, 184, 191, 192, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 471], "40": [2, 37, 111, 112, 113, 141, 164, 169], "38": 2, "one": [2, 3, 4, 9, 11, 12, 15, 17, 18, 20, 22, 48, 52, 73, 74, 76, 82, 86, 92, 111, 112, 113, 114, 115, 116, 117, 125, 131, 163, 165, 166, 169, 172, 174, 176, 177, 178, 179, 192, 196, 226, 255, 268, 269, 299, 301, 311, 333, 337, 350, 360, 367, 368, 369, 378, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 444, 445, 451, 461, 462, 468, 471, 476, 477, 478, 479, 480], "37": [2, 7], "electrochem": [2, 5, 7, 9, 15, 16, 21, 22, 109, 194, 475], "35": [2, 116, 120, 461], "33": [2, 165, 166, 179, 475], "32": [2, 18, 23, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 475], "conflict_handl": 2, "31": [2, 179, 390, 475], "notat": [2, 9, 18, 21, 120, 183, 468, 469, 478], "29": [2, 146, 475], "invok": [2, 8, 9, 16, 18, 22, 158, 294, 311, 478, 479], "26": [2, 120, 140, 146, 381, 390, 475], "extract": [2, 73, 74, 82, 164, 168, 169, 172, 173, 174, 226], "distancevari": [2, 21, 124, 125, 127, 129, 131, 140, 143, 144, 151, 152, 153, 435, 436], "reconcil": 2, "crystal": [2, 15, 22, 472, 475], "surfact": [2, 21, 140, 141, 146, 436], "depositionratevar": 2, "extensionveloc": 2, "axisymmetr": 2, "2d": [2, 18, 19, 20, 60, 61, 62, 98, 113, 115, 129, 143, 144, 159, 163, 164, 168, 176, 177, 184, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 411, 436, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 468, 471], "wizard": 2, "xp": 2, "follow": [3, 4, 7, 8, 10, 11, 12, 16, 17, 18, 37, 69, 73, 74, 75, 109, 113, 117, 124, 125, 127, 129, 131, 139, 140, 141, 146, 151, 152, 158, 164, 168, 169, 172, 173, 174, 176, 177, 180, 183, 191, 192, 193, 347, 371, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 472], "download": [3, 10, 12, 21, 469], "popul": [3, 12], "forge_": 3, "channel": [3, 12, 18], "http": [3, 4, 9, 10, 12, 14, 17, 18, 19, 35, 48, 73, 74, 176, 177, 335, 390, 395, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 468, 475], "anaconda": [3, 12], "upgrad": [3, 9, 12], "futur": [3, 7, 10, 12, 18, 164, 168, 169, 172, 173, 174, 191, 468], "probabl": [3, 4, 9, 11, 12, 18, 19, 68, 192, 404, 412, 416, 418, 468, 472, 478], "best": [3, 6, 9, 12, 17, 18, 19, 179, 192, 273, 335], "myfipyenv": [3, 12], "awar": [3, 12, 18], "restrict": [3, 12, 17, 18, 197, 390, 471], "dure": [3, 7, 12, 18, 22, 140, 475], "unpredict": [3, 12], "later": [3, 12, 18, 20, 113, 168, 407], "unfortun": [3, 12, 22, 192, 395], "along": [3, 9, 12, 18, 22, 32, 33, 82, 146, 163, 176, 177, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "other": [3, 4, 5, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 22, 32, 33, 82, 103, 114, 140, 141, 165, 166, 178, 180, 192, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 279, 280, 281, 282, 283, 284, 287, 288, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 378, 379, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468, 472], "interest": [3, 5, 9, 10, 12, 16, 22, 32, 33, 34, 35, 82, 111, 113, 115, 117, 159, 179, 226, 311, 471, 472], "prove": [3, 12, 22], "Then": [3, 12], "mymergedenviron": [3, 12], "lockfil": [3, 12, 21, 469, 470], "pin": [3, 12], "reproduc": [3, 4, 12, 14], "safest": [3, 12], "obviat": [3, 12], "directli": [3, 8, 9, 12, 18, 20, 22, 73, 74, 82, 83, 84, 183, 191, 192, 193, 294, 377, 478, 479], "choos": [3, 9, 12, 17, 18, 72, 82, 165, 166, 179, 446, 447], "desir": [3, 9, 10, 12, 22, 165, 166, 178, 179, 191, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 390, 443, 444, 446, 447, 448, 449, 451, 452], "flexibl": [3, 12, 468], "highest": [3, 12], "risk": [3, 10, 12, 390], "3": [3, 7, 9, 10, 12, 14, 15, 16, 17, 18, 21, 22, 32, 35, 37, 48, 50, 51, 60, 61, 64, 68, 69, 73, 74, 75, 78, 82, 86, 96, 108, 111, 112, 113, 114, 116, 120, 124, 127, 129, 130, 132, 138, 140, 141, 143, 144, 146, 151, 152, 159, 165, 166, 168, 174, 176, 177, 178, 179, 183, 184, 192, 193, 194, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 327, 347, 361, 377, 381, 390, 394, 398, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 445, 454, 455, 461, 468, 469, 471, 472, 474, 475], "mpich": [3, 12], "4": [3, 7, 9, 10, 12, 15, 16, 18, 21, 22, 35, 37, 48, 57, 64, 68, 72, 73, 74, 75, 82, 86, 96, 108, 111, 113, 114, 115, 116, 120, 124, 127, 129, 130, 132, 136, 140, 141, 143, 144, 146, 151, 159, 163, 164, 165, 166, 172, 174, 176, 177, 178, 179, 180, 183, 187, 194, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 361, 377, 381, 390, 394, 398, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 445, 447, 448, 449, 454, 455, 461, 469, 471, 475], "traitsui": [3, 12], "bit": [3, 12, 73, 74, 165, 166, 179], "rot": [3, 12], "One": [3, 12, 18, 82, 91, 111, 113, 158, 165, 166, 179, 183, 191, 451, 471], "consequ": [3, 9, 12, 120], "vtkviewer": [3, 12, 21], "henc": [3, 12, 165, 166, 179], "encourag": 4, "mode": [4, 12, 16, 226, 377, 381, 396], "monitor": 4, "post": [4, 9, 226, 468], "want": [4, 10, 12, 18, 20, 21, 73, 74, 82, 165, 166, 179, 469], "catb": 4, "esr": 4, "smart": 4, "troubl": [4, 17], "abl": [4, 163, 226, 256], "offer": [4, 16, 22], "com": [4, 9, 10, 12, 14, 17, 18, 19, 35, 176, 177, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 468, 475], "suitabl": [4, 18, 82, 191, 329, 330, 381, 390, 468], "open": [4, 11, 12, 15, 18, 21, 120, 164, 168, 169, 172, 173, 174, 226, 381, 396, 468, 469], "convers": [4, 17, 18, 22, 192, 381, 390], "troubleshoot": 4, "off": [4, 9, 120], "highlight": [4, 11, 120], "easi": [4, 17, 19, 32, 34, 35, 82, 468], "submiss": 4, "definit": [4, 11, 33, 192, 296, 330, 479], "back": [4, 10, 12, 18, 20, 22, 103, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 431, 475], "forth": 4, "tend": [4, 22, 32, 33, 82], "delet": [4, 82, 226, 381, 396], "mean": [4, 18, 21, 22, 32, 33, 34, 35, 82, 381, 390, 394, 412, 418, 451, 469], "d": [4, 15, 18, 32, 33, 34, 35, 37, 50, 51, 52, 57, 60, 61, 68, 73, 74, 78, 79, 82, 83, 84, 115, 127, 129, 130, 136, 140, 141, 146, 151, 163, 164, 165, 166, 176, 177, 179, 180, 183, 191, 225, 347, 361, 377, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 471, 475], "expend": 4, "effort": [4, 9, 16, 18], "inferior": 4, "ve": [4, 82, 165, 166], "written": [4, 7, 8, 9, 11, 12, 18, 22, 75, 82, 120, 129, 163, 164, 165, 166, 168, 169, 172, 173, 174, 178, 183, 191, 192, 193, 468, 471], "serious": 4, "subscript": 4, "email": 4, "mailto": 4, "simpli": [4, 9, 12, 17, 18, 82, 111, 112, 113, 165, 166, 183, 191, 478], "To": [4, 8, 9, 11, 12, 14, 18, 82, 92, 120, 139, 140, 141, 146, 158, 163, 165, 166, 176, 177, 179, 183, 192, 471, 474], "unsubscrib": 4, "learn": [4, 10, 12, 18], "chang": [4, 11, 12, 18, 21, 22, 32, 33, 82, 139, 140, 141, 146, 165, 166, 191, 192, 193, 235, 255, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 445, 447, 448, 449, 451, 452, 456, 468, 469, 470], "host": 4, "sent": 4, "store": [4, 33, 140, 158, 168, 226, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 395, 468, 471], "histor": [4, 10, 12, 75], "dir": [4, 381, 396], "comp": [4, 9], "jon": 5, "member": [5, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "research": [5, 15, 22, 475], "staff": 5, "scienc": [5, 15, 18, 22, 82, 194], "engin": [5, 15, 194, 468], "divis": [5, 40, 41, 194, 394], "measur": [5, 7, 22, 82, 165, 166, 194], "laboratori": [5, 21, 194, 469, 470], "nation": [5, 6, 13, 22, 194], "institut": [5, 6, 13, 22, 194], "standard": [5, 6, 12, 13, 16, 17, 22, 73, 74, 109, 178, 183, 194, 251, 347, 379, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468], "technologi": [5, 6, 13, 22, 194], "comput": [5, 9, 12, 15, 17, 18, 20, 22, 97, 141, 146, 191, 194, 468, 474, 475], "orient": [5, 15, 20, 21, 72, 163, 168, 169, 176, 177, 194, 394, 442, 443, 444, 446, 448, 449, 469, 478], "design": [5, 7, 8, 9, 10, 12, 18, 21, 111, 112, 113, 469, 470], "electrochemistri": [5, 475], "daniel": [5, 475], "wheeler": [5, 15, 183, 475], "guest": 5, "finit": [5, 12, 15, 21, 22, 68, 82, 165, 166, 179, 194, 339, 468, 469, 473, 475], "volum": [5, 12, 15, 21, 22, 68, 120, 140, 141, 146, 158, 165, 166, 178, 183, 194, 226, 339, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 452, 469, 473, 475], "techniqu": [5, 9, 22, 164, 169, 172, 173, 174, 473], "treatment": [5, 16, 18, 178, 194], "jim": 5, "leader": 5, "thermodynam": [5, 32, 33, 114, 116, 165, 166, 183], "kinet": [5, 9, 21, 136, 179, 469, 470], "director": 5, "center": [5, 9, 15, 18, 21, 22, 32, 34, 35, 68, 72, 73, 74, 82, 114, 120, 143, 144, 163, 164, 176, 177, 183, 192, 194, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 469, 473], "theoret": [5, 9, 21, 22, 194, 469, 470], "varieti": [5, 9, 10, 12, 18, 22, 165, 166, 194], "solidif": [5, 20, 163, 164, 168, 176, 177, 179, 475], "polycrystallin": [5, 16, 20, 194, 475], "solid": [5, 20, 114, 116, 163, 164, 165, 166, 168, 169, 172, 176, 177, 178], "alex": 5, "mont": 5, "pyxview": [5, 468], "he": [5, 20], "student": 5, "montgomeri": 5, "blair": 5, "school": 5, "kati": 5, "travi": [5, 468], "optim": [5, 18, 22, 82, 165, 166, 179], "she": [5, 20], "surf": 5, "smith": 5, "colleg": 5, "gibianski": 5, "harvei": 5, "mudd": 5, "andrew": 5, "reev": 5, "sabbat": 5, "univers": [5, 15, 20, 472, 475], "main": [5, 10, 12, 18, 21, 22, 168, 169, 176, 177, 380, 456, 471, 476, 477, 478, 480], "olivia": 5, "buzek": 5, "maryland": 5, "stile": 5, "jame": [5, 475], "beirn": 5, "greatli": [5, 7, 12, 17], "deploy": 5, "server": 5, "certain": [6, 8, 22, 226, 478, 479], "commerci": [6, 9, 12, 22], "firm": 6, "trade": 6, "identifi": [6, 18, 22], "procedur": [6, 22, 178], "adequ": [6, 17, 225, 226], "Such": 6, "identif": 6, "intend": [6, 16, 18, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 256], "impli": [6, 13], "recommend": [6, 17, 18, 21, 192, 193, 390, 469, 471, 479], "endors": [6, 12], "nor": [6, 9], "relat": [6, 18, 22, 165, 166, 179, 411], "necessarili": [6, 12], "purpos": [6, 9, 10, 12, 13, 50, 51, 60, 61, 225, 226, 471], "evalu": [7, 18, 22, 120, 165, 166, 168, 169, 176, 177, 179, 183, 347, 394, 401, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "program": [7, 21, 82, 191, 380, 468, 469, 473, 478], "greater": [7, 11, 226, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "intrins": [7, 22, 165, 166, 169], "ineffici": [7, 22], "languag": [7, 12, 21, 178, 194, 468, 469, 478], "hous": 7, "grain": [7, 20, 168, 169, 176, 177], "subsequ": [7, 18, 20, 136, 176, 177], "imping": [7, 8, 9, 20, 21, 176, 177], "mesh20x20": [7, 8, 9, 18, 21], "numberofel": [7, 140, 158, 168], "10000": [7, 48, 53, 55, 57, 58, 62, 79, 111, 113, 116, 140, 163, 164, 178, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "numberofstep": [7, 139, 140, 141, 146, 168], "1000": [7, 32, 34, 35, 37, 53, 55, 57, 58, 64, 66, 67, 86, 112, 129, 178, 191, 263, 264, 265, 267, 268, 273, 274, 285, 294, 307, 311, 318, 319, 320, 322, 334, 336, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 447, 448, 449, 454, 455], "ryo": [7, 164, 168, 169, 172, 173, 174, 179, 475], "kobayashi": [7, 163, 164, 168, 169, 172, 173, 174, 176, 177, 179, 475], "raw": [7, 168], "cpu": [7, 18], "10": [7, 15, 18, 21, 32, 33, 34, 37, 41, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 73, 74, 75, 79, 81, 82, 83, 84, 87, 92, 96, 103, 108, 114, 115, 120, 124, 125, 130, 131, 139, 140, 141, 143, 146, 151, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 183, 184, 191, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 263, 264, 265, 266, 267, 268, 273, 274, 279, 280, 281, 282, 283, 284, 285, 288, 294, 295, 307, 311, 318, 319, 320, 321, 322, 331, 332, 334, 335, 336, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 394, 398, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 445, 447, 448, 449, 451, 452, 454, 455, 461, 469, 474, 475], "tabl": [7, 120, 141, 146, 390], "second": [7, 9, 120, 138, 165, 166, 183, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 454, 455], "kilobyt": 7, "kib": 7, "30": [7, 18, 21, 109, 113, 114, 115, 116, 143, 165, 166, 178, 179, 381, 390, 416, 418, 469, 475], "0009": 7, "39316": 7, "772": 7, "0031": 7, "39664": 7, "1600": 7, "1": [7, 9, 11, 12, 15, 16, 17, 18, 19, 21, 22, 32, 33, 34, 35, 37, 40, 41, 48, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 86, 87, 91, 92, 95, 96, 98, 100, 101, 104, 105, 108, 109, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 130, 131, 132, 136, 139, 140, 141, 143, 144, 146, 151, 152, 153, 158, 159, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 191, 192, 193, 194, 198, 200, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 279, 280, 281, 282, 283, 284, 294, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 379, 380, 381, 390, 394, 396, 398, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 469, 471, 472, 474, 475], "65": 7, "017": 7, "40656": 7, "1044": 7, "6400": 7, "46124": 7, "1880": 7, "25600": 7, "60840": 7, "5188": 7, "102400": 7, "145820": 7, "18436": 7, "plain": [7, 18, 82, 140], "oper": [7, 10, 11, 12, 18, 22, 163, 168, 169, 176, 177, 192, 243, 381, 383, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468, 471], "around": [7, 11, 22, 48, 82, 138, 431, 471], "17": [7, 13, 21, 238, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 469, 473, 475], "slower": [7, 22, 192], "penalti": 7, "hope": [7, 192, 193], "gain": [7, 18], "particular": [7, 8, 9, 10, 12, 13, 18, 22, 76, 82, 87, 191], "analysi": [7, 9, 18, 468, 475], "shown": [7, 8, 9, 20, 109, 165, 166, 179, 191], "As": [7, 8, 9, 11, 18, 22, 73, 74, 75, 82, 146, 165, 166, 178, 183, 191, 192, 194, 381, 390, 396, 479], "record": 7, "each": [7, 8, 9, 18, 22, 32, 34, 35, 50, 51, 52, 60, 61, 73, 74, 79, 81, 82, 94, 97, 111, 112, 113, 141, 165, 166, 168, 178, 180, 191, 192, 235, 251, 255, 316, 371, 377, 381, 385, 390, 394, 407, 415, 425, 431, 432, 434, 451, 461, 471, 473, 476, 477, 480], "approxim": [7, 9, 18, 79, 120, 178, 179, 471, 473], "maximum": [7, 11, 37, 140, 165, 166, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 288, 294, 295, 301, 304, 305, 306, 307, 308, 311, 318, 319, 320, 321, 322, 331, 332, 334, 335, 336, 337, 347, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "spike": 7, "hard": [7, 22, 163, 176, 177, 192, 468], "dynam": [7, 12, 23, 179, 473, 475], "alloc": [7, 22], "rough": [7, 165, 166], "exact": [7, 82, 120, 164, 179, 474], "complex": [7, 17, 18, 22, 139, 146, 165, 166, 381, 390, 468, 472], "largest": [7, 82, 381, 390, 441], "mainli": [7, 22, 48], "below": [7, 9, 12, 18, 120, 139, 146, 163, 176, 177, 191], "per": [7, 12, 18, 82, 165, 166, 179, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 454, 455], "multigrid": [7, 17, 87], "benefici": 7, "overhead": [7, 18], "cost": 7, "perform": [7, 9, 12, 18, 20, 22, 32, 33, 34, 35, 86, 152, 165, 166, 179, 256, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 288, 294, 295, 301, 304, 305, 306, 307, 308, 311, 318, 319, 320, 321, 322, 334, 335, 336, 337, 381, 390, 394, 468], "equival": [7, 16, 18, 22, 82, 194, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 390, 471, 473], "precondit": [7, 17, 282, 293, 296, 304, 305, 306, 308, 468], "enough": [7, 18, 136, 163, 176, 177, 226], "speedup": [7, 18], "specif": [7, 9, 13, 17, 22, 33, 73, 74, 193, 194, 432, 441, 451, 468, 478], "someth": [8, 9, 16, 18, 20, 82, 140, 163, 176, 177, 192, 193, 390, 456, 461, 479], "least": [8, 9, 12, 18, 179, 193, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "four": [8, 18, 20, 114, 168, 178, 180, 251], "demonstr": [8, 18, 22, 24, 48, 68, 73, 74, 83, 84, 109, 112, 124, 125, 129, 131, 139, 140, 141, 146, 158, 159, 168, 169, 471], "applic": [8, 10, 12, 17, 20, 22, 73, 74, 456, 468, 471, 473], "finish": [8, 40, 41, 69, 79, 92, 96, 139, 140, 141, 146, 168, 179, 183, 184], "left": [8, 9, 16, 18, 21, 32, 33, 34, 35, 37, 50, 51, 52, 57, 60, 61, 68, 69, 72, 76, 82, 83, 84, 86, 109, 115, 117, 120, 124, 127, 130, 132, 136, 139, 140, 141, 151, 158, 163, 164, 165, 166, 169, 176, 177, 178, 179, 180, 183, 191, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 353, 361, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 445, 469, 472, 473], "shell": [8, 12, 14, 16, 18, 35, 159, 468], "At": [8, 12, 18, 22, 79, 140, 194], "enter": [8, 16], "queri": [8, 432], "session": [8, 15, 16, 18, 22], "block": [8, 16, 75, 82, 183], "final": [8, 9, 76, 82, 92, 114, 116, 117, 165, 166, 169, 183, 226, 255, 371, 379], "importantli": 8, "emphasi": [8, 11], "comprehens": [8, 22], "framework": [8, 16, 22, 194, 478], "steadyst": [8, 16, 21, 78, 81], "succinct": [8, 9, 12, 14], "prompt": [8, 16, 18, 82, 179, 194], "copy_script": [8, 82, 140], "addit": [8, 18, 21, 75, 82, 141, 381, 386, 390, 394, 400, 468], "those": [8, 9, 10, 12, 18, 22, 82, 87, 139, 140, 141, 146, 165, 166, 191, 468, 478, 479], "dozen": 8, "understand": [8, 9, 18, 141, 192], "illustr": [8, 9, 22, 82, 471], "electrostat": [8, 21, 109, 113, 114, 115, 116, 117], "nthorder": [8, 21], "input4thorder1d": [8, 21], "exponential1d": [8, 21, 55, 57, 58, 62, 63, 66, 67, 191], "exponential1dsourc": [8, 21], "allen": [8, 18, 163, 176, 177, 179], "binarycoupl": [8, 9, 18, 21], "mesh40x1": [8, 9, 21, 168], "polyxtalcoupl": [8, 18, 21], "advect": [8, 21, 68, 140, 151, 153, 165, 166, 347, 361], "spinod": [8, 20, 32, 33, 34, 35], "decomposit": [8, 20, 32, 33, 324, 327, 328, 471], "multi": [8, 468], "evolut": [8, 9, 22, 32, 33, 34, 35, 82, 139, 163, 166, 176, 177, 178, 472, 475], "reactivewet": [8, 21], "liquidvapor1d": [8, 21], "canon": [9, 32, 33, 34, 35, 165, 166, 178, 394], "govern": [9, 13, 75, 82, 115, 136, 139, 140, 141, 146, 151, 152, 163, 164, 165, 166, 176, 177, 183], "underbrac": [9, 109, 178, 472], "frac": [9, 18, 32, 33, 34, 35, 37, 50, 51, 52, 57, 60, 61, 68, 69, 72, 75, 76, 78, 82, 86, 109, 111, 115, 117, 120, 124, 125, 131, 136, 139, 140, 141, 151, 152, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 183, 191, 338, 347, 356, 361, 371, 404, 407, 411, 412, 415, 416, 418, 420, 431, 432, 434, 435, 436, 439, 471, 472, 474], "partial": [9, 15, 17, 18, 21, 32, 33, 34, 35, 37, 68, 69, 72, 75, 78, 82, 86, 109, 111, 115, 124, 125, 131, 140, 151, 163, 164, 165, 166, 169, 172, 173, 174, 176, 177, 178, 179, 183, 194, 295, 342, 347, 361, 371, 468, 469, 472, 473], "rho": [9, 21, 76, 82, 117, 178, 183, 184, 371, 469, 472, 473], "_": [9, 18, 33, 72, 75, 82, 109, 120, 165, 166, 178, 179, 198, 199, 200, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 394, 396, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 472], "vphantom": [9, 109, 178, 472], "nabla": [9, 18, 21, 32, 33, 34, 35, 37, 50, 51, 52, 57, 60, 61, 75, 76, 78, 82, 109, 111, 115, 117, 120, 124, 125, 129, 130, 132, 140, 151, 163, 164, 165, 166, 169, 172, 173, 174, 176, 177, 178, 179, 191, 200, 347, 351, 353, 356, 358, 359, 361, 362, 366, 373, 404, 407, 411, 412, 415, 416, 418, 420, 431, 432, 434, 435, 436, 439, 469, 472, 473], "cdot": [9, 18, 21, 32, 33, 34, 35, 37, 50, 51, 52, 57, 60, 61, 76, 78, 82, 109, 111, 117, 120, 124, 125, 140, 151, 163, 164, 165, 166, 169, 176, 177, 178, 191, 198, 200, 351, 353, 356, 358, 359, 362, 366, 373, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 469, 472, 473], "vec": [9, 18, 21, 50, 51, 52, 53, 55, 57, 58, 60, 61, 82, 120, 124, 125, 151, 165, 166, 179, 184, 191, 198, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 469, 472, 473], "gamma_i": [9, 471, 472], "n": [9, 15, 18, 20, 76, 82, 109, 111, 112, 115, 117, 120, 124, 140, 141, 146, 158, 163, 164, 165, 166, 168, 176, 177, 178, 180, 198, 200, 225, 351, 358, 359, 362, 366, 373, 381, 390, 394, 398, 404, 407, 411, 412, 415, 416, 418, 420, 431, 432, 434, 435, 436, 439, 446, 447, 471, 472, 475], "s_": [9, 179, 471, 472], "discuss": [9, 11, 16, 21, 22, 33, 469, 474], "discret": [9, 18, 21, 48, 82, 120, 163, 168, 169, 176, 177, 183, 225, 226, 342, 356, 358, 359, 362, 366, 373, 469, 473], "pose": [9, 75], "ratio": [9, 72, 141, 146, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 443, 444, 446, 447, 448, 449, 451, 452, 474], "coordin": [9, 73, 74, 92, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 451, 461], "partial_x": 9, "notic": [9, 13, 16, 192, 478], "within": [9, 12, 14, 18, 22, 72, 120, 183, 226, 235, 251, 255, 394, 471, 476, 477, 480], "first": [9, 12, 17, 18, 22, 37, 46, 47, 73, 74, 75, 76, 82, 115, 116, 117, 120, 124, 125, 138, 140, 151, 152, 164, 165, 166, 168, 179, 180, 183, 191, 192, 193, 222, 226, 234, 235, 237, 238, 243, 251, 254, 255, 340, 347, 377, 381, 390, 391, 394, 400, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 441, 442, 463, 471, 479], "higher": [9, 17, 18, 21, 120, 165, 166, 183, 200, 225, 226, 347, 353, 472, 473, 474], "although": [9, 10, 12, 17, 18, 22, 32, 33, 82, 109, 113, 115, 164, 165, 166, 179, 191, 192, 411, 471, 472], "confus": [9, 468], "interpret": [9, 16, 18, 22, 478, 479], "examin": [9, 22, 76, 117, 165, 166, 471], "short": [9, 140], "represent": [9, 21, 82, 139, 143, 144, 179, 211, 230, 231, 232, 233, 234, 235, 251, 252, 253, 254, 255, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "assum": [9, 16, 120, 141, 163, 165, 166, 176, 177, 183, 381, 390, 394, 411, 471], "fourth": [9, 86], "isotrop": [9, 95], "nomin": 9, "anomal": 9, "equiv": [9, 18, 165, 166, 178, 179, 474], "conveni": [9, 380, 381, 390], "appli": [9, 15, 21, 22, 68, 82, 83, 84, 120, 140, 165, 166, 179, 193, 196, 198, 199, 200, 294, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 469, 475], "rotat": [9, 35, 72, 159, 164], "realiz": [9, 191], "even": [9, 11, 18, 21, 22, 32, 34, 35, 95, 115, 166, 178, 191, 200, 347, 361, 377, 469, 472], "though": [9, 95, 115, 166, 179], "superfici": 9, "resembl": [9, 75, 139, 146], "d_1": [9, 353], "d_2": [9, 353], "xi": [9, 109, 113, 114, 115, 116, 164, 178, 338], "third": [9, 12, 20, 138, 381, 390, 468], "d2": [9, 353], "facegrad": [9, 18, 21, 68, 69, 75, 82, 86, 111, 112, 113, 114, 116, 163, 164, 165, 166, 168, 169, 176, 177, 178, 183, 184, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 451, 452, 471], "diverg": [9, 18, 21, 68, 75, 120, 164, 165, 166, 168, 169, 176, 404, 412, 415, 416, 418, 432, 434, 435, 471], "grad": [9, 21, 73, 74, 114, 115, 116, 120, 168, 169, 176, 177, 183, 184, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 451, 452, 461], "arithmeticfacevalu": [9, 21, 32, 34, 35, 37, 120, 165, 166, 168, 169, 176, 177, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "rate": [9, 32, 33, 140, 141, 146, 152, 163, 176, 177, 179, 404, 416], "rho_1": 9, "rho_2": 9, "manner": [9, 18, 22, 168, 169, 178, 183, 471], "rho1": 9, "rho2": 9, "perspect": 9, "might": [9, 20, 22, 165, 166, 471], "mobil": [9, 109, 114, 115, 116, 165, 166, 178, 418], "counter": [9, 109, 178], "eq": [9, 32, 33, 34, 35, 40, 41, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 73, 74, 78, 81, 82, 83, 84, 86, 87, 91, 115, 165, 166, 177, 179, 183, 191, 192, 371], "d1": [9, 353], "With": [9, 22, 82, 163, 165, 166, 176, 177, 192, 451, 478], "advent": 9, "gamma_1": [9, 21, 469, 472, 473], "gamma_0": [9, 136], "diffterm": [9, 191, 192], "gamma0": [9, 18], "converg": [9, 75, 82, 165, 166, 168, 179, 371], "plan": 9, "restart": [9, 168], "stage": [9, 10, 12, 15, 22, 82, 418, 475], "ll": [9, 12, 18, 82, 115, 136, 141, 146, 163, 165, 166, 176, 177, 178, 179, 192, 193], "howtowriteascript": [9, 21], "On": [9, 12, 22, 23, 165, 166, 179, 471], "littl": [9, 22, 165, 166, 192, 478], "anyth": [9, 18, 22, 32, 33, 34, 35, 262, 441], "besid": 9, "anoth": [9, 12, 14, 22, 73, 74, 82, 114, 138, 165, 166, 169, 179, 347, 361, 367, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451, 478], "piec": [9, 18, 22], "softwar": [9, 12, 13, 17, 20, 22, 139, 146, 468], "qualiti": [9, 19, 340, 468], "graph": [9, 97], "multiscal": 9, "ascii": 9, "tab": [9, 12, 73, 74, 461], "separ": [9, 12, 16, 18, 22, 23, 32, 33, 73, 74, 75, 111, 112, 113, 114, 115, 116, 178, 179, 183, 381, 390, 394, 400, 454, 455, 461, 471], "button": 9, "myimag": 9, "ext": [9, 140, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "ep": [9, 168, 169, 176, 177], "jpg": 9, "joint": 9, "photograph": 9, "expert": 9, "png": [9, 18], "portabl": [9, 17, 468], "network": 9, "graphic": [9, 18, 20], "chosen": [9, 18, 22, 114, 116, 446, 447, 452, 474], "yet": [9, 168, 468], "knowledg": [9, 18, 22, 478], "agg": 9, "cairo": 9, "net": [9, 17, 19, 468], "facil": [9, 112, 165, 166, 468], "previou": [9, 18, 33, 82, 163, 165, 166, 176, 177, 179, 191, 381, 390, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 471], "stitch": 9, "free": [9, 13, 19, 20, 22, 32, 33, 37, 109, 165, 166, 178, 179, 183, 184, 192, 193, 468, 475], "sharewar": 9, "adapt": [9, 17, 22, 163, 176, 177, 339, 340, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 468], "utilitarian": [9, 163, 176, 177], "let": [9, 18, 82, 120, 163, 165, 166, 176, 177, 179, 191, 371], "minimum": [9, 12, 18, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 440, 451], "tri": [9, 18, 82, 446, 447, 461], "plotter": 9, "common": [9, 18, 19, 22, 139, 179, 211, 468, 471, 478], "often": [9, 12, 18, 82, 140, 163, 176, 177, 418, 472], "supplement": 9, "underli": [9, 75, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "come": [9, 12, 18, 20, 22, 192, 390], "closest": [9, 394, 411], "overrid": [9, 17, 18, 379, 456], "wan": 9, "heavi": [9, 18], "lift": 9, "custom": [9, 18, 22, 35, 163, 194, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "differenti": [9, 15, 17, 194, 342, 468, 473], "benefit": [9, 18, 22, 32, 34, 35, 50, 51, 52, 60, 61, 179, 191], "repetit": 9, "achiev": [9, 12, 18, 82, 86, 111, 113, 183, 474], "similar": [9, 82, 92], "three": [9, 11, 12, 17, 18, 20, 22, 112, 113, 116, 141, 180, 183, 192, 226, 475], "layer": [9, 138, 139, 140, 141, 146, 222, 226, 232, 234, 237, 243, 251], "lowest": 9, "spend": [9, 194], "think": [9, 11, 18, 22, 165, 166], "practic": [9, 11, 12, 18, 21, 75, 165, 166, 179, 192, 468, 469, 470, 478], "exactli": [9, 16, 18, 68, 165, 166, 179, 381, 390], "thu": [9, 22, 52, 82, 139, 141, 169, 179, 379, 471, 474], "emploi": [9, 12, 17, 18, 179, 473], "until": [9, 18, 22, 82, 338], "satisfactorili": [9, 76], "toler": [9, 10, 12, 17, 18, 37, 48, 55, 57, 58, 62, 67, 82, 92, 111, 112, 114, 165, 166, 168, 178, 183, 184, 191, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 288, 294, 295, 301, 304, 305, 306, 307, 308, 311, 318, 319, 320, 321, 322, 334, 335, 336, 337, 381, 390, 394], "mysolv": 9, "linearpcgsolv": [9, 21, 165, 191, 192, 282, 347], "1234": 9, "5e": [9, 33, 140, 163, 164, 165, 166, 176, 177, 179, 183, 184, 404, 412, 416, 418], "favor": 9, "role": [9, 22], "middl": [9, 165, 166, 226], "concentr": [9, 53, 55, 58, 62, 63, 66, 67, 75, 76, 78, 79, 109, 111, 112, 113, 114, 116, 117, 140, 141, 146, 165, 166, 178, 191, 436, 472], "temperatur": [9, 15, 82, 140, 141, 146, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 183, 184, 418, 472], "thermal": [9, 20, 82, 163, 176, 177, 418], "perfect": 9, "good": [9, 48, 60, 61, 82, 120, 179, 473], "elaps": [9, 32, 33, 34, 35, 114, 176, 177, 179], "despit": [9, 18], "evolv": [9, 11, 172, 173, 174], "quasi": 9, "static": [9, 203, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "steadi": [9, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 66, 67, 73, 74, 76, 82, 83, 84, 86, 92, 95, 108, 115, 179, 191], "distinguish": [9, 18], "cycl": [9, 22, 468], "modifi": [9, 12, 13, 14, 16, 22, 146, 183, 478], "myvar": 9, "updateold": [9, 21, 40, 41, 72, 75, 82, 112, 114, 116, 124, 125, 127, 140, 151, 152, 153, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 183, 184, 371, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "repeatedli": [9, 82, 83, 84, 194, 338], "stabl": [9, 10, 12, 22, 82, 165, 166, 179, 474], "truli": 9, "desiredresidu": 9, "outermost": 9, "goal": [9, 22], "studi": [9, 15, 22, 109, 117], "moreov": [9, 18, 20], "equilibrium": [9, 37, 76, 78, 79, 81, 82, 111, 112, 113, 114, 115, 116, 117, 165, 166, 178, 179, 183, 191], "fundament": [9, 22, 390], "becom": [9, 12, 18, 91, 111, 112, 113, 141, 163, 176, 177, 183, 411, 471, 472], "either": [9, 10, 12, 13, 17, 18, 22, 75, 82, 159, 165, 166, 179, 192, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 411, 418, 441, 471, 478, 479], "unstabl": [9, 91, 163, 176, 177], "inaccur": [9, 87, 471], "stabil": [9, 10, 12, 75, 82, 179, 318, 471], "accuraci": [9, 18, 40, 41, 72, 82, 140, 347, 411], "distinctli": 9, "said": 9, "blow": 9, "radic": 9, "perfectli": [9, 82, 191], "disagre": 9, "smaller": [9, 165, 166], "larger": [9, 82, 179, 418, 435, 471], "interv": 9, "234e": 9, "elapsedtim": 9, "totalelapsedtim": 9, "somefunctionofvariablesandtim": 9, "myvar1": 9, "myvar2": 9, "notabl": 9, "interfaci": [9, 115, 179], "gradual": 9, "down": [9, 18, 32, 33, 82, 179], "describ": [9, 18, 22, 32, 33, 53, 55, 58, 62, 63, 66, 67, 73, 74, 82, 116, 120, 141, 163, 176, 177, 179, 183, 381, 396, 471, 473, 476, 477, 479, 480], "substitut": [9, 18, 109, 111, 112, 113, 114, 115, 116, 117, 120, 178, 183, 441], "undesir": 9, "averag": [9, 82, 91, 120, 165, 166, 178, 183, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 471], "f": [9, 18, 32, 33, 34, 35, 37, 82, 140, 141, 146, 163, 165, 166, 168, 178, 179, 183, 184, 339, 351, 358, 359, 362, 366, 373, 381, 390, 391, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 471], "neq": [9, 109, 111, 178], "smoothli": 9, "dramat": [9, 75, 82], "sharp": [9, 32, 33, 114, 116, 165, 166, 178], "drop": [9, 12, 14, 18, 82, 120, 226], "harmon": [9, 32, 34, 35, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "experi": [9, 15, 17, 18, 140, 475], "excess": [9, 474], "vice": 9, "versa": 9, "ma": [9, 394], "maerror": 9, "locat": [9, 18, 23, 226, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 471, 476, 477, 480], "pm": [9, 176, 177], "infti": [9, 18, 115, 136, 139, 140, 141, 146, 338, 394, 404, 416, 474], "repair": 9, "catalog": 9, "kei": [9, 64, 69, 76, 91, 114, 117], "flag": [9, 12, 17, 21, 163, 164, 176, 177, 377, 469], "mailinglist": 9, "mailman": 9, "fn": [9, 338, 478], "dev": [9, 468], "2005": [9, 15, 21, 339, 469], "june": [9, 15], "003010": 9, "23": [9, 18, 21, 48, 109, 178, 390, 394, 469, 475], "neither": [9, 381, 390], "sloppi": 9, "thread": [9, 21, 469], "scientif": [9, 12, 15, 17, 19, 22, 468, 475], "4349": 9, "experienc": 9, "brows": [10, 12, 18], "through": [10, 12, 18, 20, 73, 74, 82, 165, 166, 168, 179, 191, 296, 335, 418], "Be": [10, 12, 17, 18, 192], "pre": [10, 21, 120, 469], "scm": [10, 12, 475], "latest": [10, 12, 18], "subject": [10, 12, 13, 18, 75, 191, 381, 390, 394], "behav": [10, 12, 82, 200], "degre": [10, 12, 18, 120, 164, 165, 166], "indic": [10, 12, 16, 17, 18, 192, 193, 381, 390, 394, 398, 471], "decid": [10, 12], "track": [10, 12, 22], "clone": [10, 12], "shift": [10, 12, 40, 41, 165, 166, 398], "past": [10, 12], "68": [10, 12, 21, 469], "g1c1afa551": [10, 12, 21, 469], "x_y_z": [10, 12], "retain": [10, 12, 18, 82, 165, 166], "guarante": [10, 12, 390, 474], "kept": [10, 12], "synchron": [10, 12], "altogeth": [10, 12, 82], "who": [10, 12, 22], "wide": [10, 12, 17, 19, 468, 472], "onlin": [10, 12, 18], "book": [10, 12, 475], "cours": [11, 18, 138, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "strai": 11, "peril": 11, "forbidden": 11, "greatest": 11, "extent": [11, 13], "had": [11, 82, 179, 191, 192], "great": [11, 20, 165, 166, 192], "knew": [11, 22], "rectangl": 11, "blob": [11, 12, 14, 176, 177], "def": [11, 111, 112, 113, 114, 115, 116, 117, 129, 130, 132, 163, 165, 166, 168, 176, 177, 178, 179, 183, 184, 192], "width": [11, 176, 177, 451, 471], "height": [11, 48, 127, 165, 166, 179], "black": [11, 191], "red": 11, "strong": 11, "sorri": 11, "lose": 11, "mixedcas": 11, "lowercas": 11, "lower_case_with_underscor": 11, "deviat": [11, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 474], "unsur": 11, "anybodi": 11, "willing": 11, "seen": [11, 82, 165, 166], "unittest": [11, 22, 379, 380], "heavili": [11, 456], "care": [11, 16, 18, 82, 179, 191], "taken": [11, 16, 22, 78, 79, 81, 82, 163, 176, 177, 390, 395], "defin": [11, 22, 48, 50, 51, 52, 57, 60, 61, 68, 73, 74, 82, 114, 139, 140, 163, 165, 166, 168, 169, 176, 177, 183, 191, 226, 236, 394, 404, 407, 411, 412, 415, 416, 418, 425, 431, 432, 434, 439, 451, 471, 474, 478, 479], "parallel_2": 11, "processor_0": [11, 377], "id": [11, 18, 21, 37, 143, 192, 394, 398, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 443, 444, 445, 446, 447, 448, 449, 451, 452, 475], "processor_0_of_2": [11, 377], "processor_1_of_2": [11, 377], "processor_0_of_3": [11, 377], "processor_1_of_3": [11, 377], "processor_2_of_3": [11, 377], "register_skipp": [11, 21, 377], "pertain": 11, "reli": [12, 73, 74, 451, 471, 478], "parti": [12, 20, 468], "begin": [12, 16, 18, 22, 37, 50, 52, 57, 60, 61, 72, 75, 76, 82, 116, 117, 130, 132, 140, 141, 146, 163, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 191, 226, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 474, 479], "By": [12, 18, 120, 179, 377, 411], "select": [12, 21, 22, 225, 226, 339, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 394, 470, 474], "webspac": 12, "infer": 12, "drawn": 12, "referenc": 12, "concur": 12, "fact": [12, 82, 191, 192, 377, 411], "rudimentari": [12, 19, 120, 341], "introduct": [12, 21, 470, 473, 475], "expedi": [12, 22], "manag": [12, 14, 18, 468], "virtual": [12, 21, 469, 470], "keep": [12, 32, 33, 34, 35, 140, 164], "suffici": [12, 165, 166, 192, 193, 381, 391, 396], "privileg": 12, "dai": [12, 22], "micromamba": 12, "batteri": [12, 22], "bare": 12, "quit": [12, 472], "mamba": 12, "speed": [12, 120], "pretti": 12, "visual": [12, 19, 456, 468], "fewer": [12, 179], "amongst": 12, "freeli": [12, 16, 22, 194], "mind": [12, 18], "preserv": [12, 48, 124, 125, 394], "courag": 12, "impati": 12, "quickli": [12, 19, 141, 235, 255, 468], "formal": 12, "confid": [12, 120], "requisit": 12, "alter": [12, 18, 22], "admin": 12, "termin": [12, 18, 82, 92, 139, 140, 141, 146, 179], "15": [12, 15, 21, 37, 55, 57, 58, 62, 67, 68, 82, 114, 116, 165, 166, 168, 176, 177, 178, 179, 191, 238, 271, 272, 275, 304, 305, 306, 308, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 461, 469, 473, 475], "copyright": [12, 13], "credit": 12, "geuz": [12, 468], "creation": [12, 73, 74, 191, 478], "irregular": [12, 73, 74, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442], "analyz": [12, 73, 74], "judici": [12, 18], "compon": [12, 20, 32, 33, 75, 76, 111, 112, 113, 114, 115, 116, 117, 165, 166, 178, 183, 475], "fast": [12, 17, 22, 411, 475], "march": [12, 15, 411, 475], "ktchu": 12, "serendipityresearch": 12, "surfac": [12, 18, 20, 35, 73, 74, 96, 141, 159, 163, 176, 177, 179, 226, 471], "curv": [12, 179], "addition": [12, 20, 120], "pylsmlib": 12, "tree": [12, 441, 442, 463], "violat": 12, "tamper": 12, "util": [12, 21, 164, 168, 169, 172, 173, 174, 226, 338, 341, 381, 398, 468], "stow": 12, "virtualenv": 12, "buildout": 12, "cd": [12, 390], "power": [12, 14, 18, 22, 178, 194, 366, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 474, 478], "unix": [12, 14, 18], "reliabl": [12, 14, 192], "blog": [12, 14], "hpc": [12, 14], "team": [12, 14], "gricad": [12, 14], "tuto": [12, 14], "2017": [12, 14, 21, 469], "07": [12, 14, 390], "04": [12, 14, 21, 152, 469, 475], "my": [12, 14, 18, 21, 192, 469], "md": [12, 14], "pure": [12, 14, 18, 75, 109, 165, 166, 178], "nativebuildinput": [12, 14], "know": [12, 14, 18, 22, 115, 191, 192], "toolz": [12, 14], "persist": [12, 14, 20, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "employe": 13, "agenc": 13, "feder": [13, 22], "pursuant": 13, "protect": 13, "foreign": 13, "permiss": 13, "countri": 13, "deriv": [13, 16, 18, 32, 33, 34, 35, 69, 75, 82, 165, 166, 178, 183, 200, 339, 390, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 471, 472, 473, 474, 478, 479], "fee": 13, "herebi": 13, "grant": [13, 20], "exclus": [13, 18], "basi": [13, 475], "disclaim": 13, "warranti": 13, "THE": 13, "AS": 13, "OF": 13, "kind": 13, "OR": 13, "statutori": 13, "BUT": 13, "NOT": 13, "TO": 13, "THAT": 13, "WILL": 13, "conform": 13, "merchant": 13, "fit": [13, 22, 179], "FOR": 13, "AND": [13, 394], "freedom": 13, "infring": 13, "BE": 13, "IN": 13, "NO": 13, "event": [13, 165, 166, 432], "shall": 13, "liabl": 13, "damag": 13, "indirect": 13, "consequenti": 13, "aris": 13, "connect": [13, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "WITH": 13, "contract": 13, "tort": 13, "otherwis": [13, 91, 143, 144, 163, 176, 177, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "injuri": 13, "sustain": 13, "BY": 13, "person": 13, "loss": [13, 17], "aros": 13, "hereund": 13, "cite": 15, "j": [15, 22, 76, 82, 109, 111, 114, 115, 117, 139, 140, 141, 146, 151, 165, 166, 168, 169, 176, 177, 178, 179, 180, 198, 339, 381, 390, 394, 475], "11": [15, 18, 21, 48, 72, 73, 74, 96, 114, 120, 129, 143, 144, 183, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 390, 394, 469, 475], "pp": [15, 347], "2009": [15, 21, 469, 475], "1109": 15, "mcse": 15, "w": [15, 115, 141, 146, 165, 166, 169, 176, 177, 179, 226, 381, 390, 396, 475], "boetting": [15, 109, 475], "earli": [15, 22, 79, 475], "reactiv": [15, 16, 21, 194, 475], "wet": [15, 16, 21, 168, 169, 194, 475], "82": [15, 183, 184, 475], "051601": [15, 475], "2010": [15, 21, 469, 475], "1103": [15, 475], "physrev": [15, 475], "mohanti": 15, "sohn": 15, "gradient": [15, 21, 32, 33, 40, 83, 84, 109, 115, 120, 163, 165, 166, 168, 169, 176, 177, 179, 183, 263, 264, 292, 296, 318, 347, 361, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 469, 471], "journal": [15, 339, 475], "034912": 15, "1063": [15, 475], "3190607": 15, "pusztai": 15, "l": [15, 18, 37, 40, 41, 52, 53, 55, 57, 58, 62, 63, 64, 66, 67, 69, 76, 79, 82, 83, 84, 86, 108, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 129, 130, 131, 132, 136, 141, 146, 151, 152, 165, 166, 168, 172, 173, 174, 178, 179, 180, 183, 191, 225, 338, 339, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 475], "k": [15, 18, 22, 82, 109, 111, 114, 136, 140, 141, 146, 152, 165, 166, 178, 179, 371, 390, 442, 445, 447, 448, 449, 451, 452, 454, 455, 475], "\u00f6": [15, 472], "rnyei": 15, "gr": 15, "\u00e1": 15, "sy": [15, 377, 394, 404, 412, 416, 418], "approach": [15, 20, 21, 82, 165, 166, 179, 194, 226, 469, 471, 472], "heterogen": 15, "nucleat": [15, 32, 33], "alloi": [15, 32, 33, 165, 166, 475], "014204": 15, "physrevb": 15, "p": [15, 17, 18, 68, 109, 114, 115, 120, 165, 166, 169, 176, 177, 178, 179, 183, 339, 371, 381, 390, 468, 471, 474, 475], "moffat": [15, 475], "kim": [15, 475], "josel": [15, 475], "curvatur": [15, 140, 141, 475], "enhanc": [15, 468, 475], "adsorb": [15, 141, 475], "coverag": [15, 139, 140, 141, 146, 151, 152, 475], "bottom": [15, 83, 84, 120, 176, 177, 180, 191, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "damascen": 15, "electrochimica": 15, "acta": [15, 475], "53": 15, "2007": [15, 21, 469], "1016": [15, 475], "electacta": 15, "03": [15, 21, 73, 79, 445, 454, 455, 469, 475], "025": [15, 95, 96, 115, 116, 163, 176, 177, 179], "campbel": 15, "mcfadden": [15, 109, 475], "kirkendal": [15, 475], "displac": [15, 179, 222, 226, 232, 234, 237, 243, 251, 390], "dimension": [15, 20, 82, 83, 100, 112, 169, 179, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 316, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 475], "proceed": [15, 385], "royal": 15, "societi": [15, 475], "mathemat": [15, 18, 440, 468, 471, 475], "2088": 15, "3347": 15, "3373": 15, "1098": 15, "rspa": 15, "1904": 15, "cickovski": 15, "ara": 15, "swat": 15, "merk": 15, "glimm": 15, "hentschel": 15, "alber": 15, "glazier": 15, "newman": 15, "izaguirr": 15, "gene": 15, "organ": 15, "multicellular": 15, "60": [15, 114, 115, 116, 141, 179, 381, 390], "saylor": [15, 475], "theori": [15, 48], "letter": [15, 475], "035703": 15, "physrevlett": [15, 475], "mazur": 15, "soil": 15, "solar": [15, 475], "radiat": 15, "de": 15, "physiqu": 15, "iv": 15, "franc": 15, "320": 15, "2006": [15, 21, 469, 475], "1051": 15, "jp4": 15, "2006137061": 15, "electrodeposit": [15, 16, 146, 178, 194, 475], "c127": [15, 475], "c132": [15, 475], "1149": [15, 475], "2165580": [15, 475], "gold": [15, 21, 475], "submicromet": [15, 475], "trench": [15, 21, 138, 139, 140, 141, 146, 475], "c11": [15, 475], "c18": [15, 475], "2128765": [15, 475], "were": [15, 18, 22, 377, 394], "honor": 15, "invit": 15, "deliv": 15, "keynot": 15, "confer": 15, "caltech": 15, "august": 15, "talk": 15, "georg": 15, "mason": 15, "depart": 15, "octob": 15, "devic": 15, "radiolog": 15, "health": 15, "food": 15, "drug": [15, 16, 194, 475], "ge": [15, 127, 347], "siam": 15, "tm": [15, 40, 41, 179], "annual": [15, 475], "meet": [15, 140], "februari": 15, "educ": 15, "luncheon": 15, "roundtabl": 15, "transform": [15, 16, 109, 165, 166, 178, 179, 194, 471], "microstructologi": 15, "iii": [15, 226, 475], "birmingham": 15, "al": [15, 168, 169, 176, 177, 183], "2004": [15, 21, 114, 469, 475], "mr": 15, "fall": [15, 120], "novemb": 15, "arbitrari": [16, 18, 20, 111, 112, 113, 192, 194, 273, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 472], "ellipt": [16, 194], "hyperbol": [16, 179, 194, 381, 390], "parabol": [16, 194], "dendrit": [16, 20, 22, 163, 164, 176, 177, 194, 475], "elut": [16, 194, 475], "stent": [16, 194], "photovolta": [16, 194], "redistribut": 16, "bear": 16, "welcom": [16, 22], "collabor": [16, 20], "project": [16, 19, 73, 74, 381, 400, 468], "driven": 16, "editor": 16, "tcsh": 16, "bash": 16, "throughout": [16, 140, 164], "keyboard": 16, "denot": [16, 109, 120, 168, 183, 471], "12": [16, 18, 21, 22, 48, 82, 114, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 390, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 440, 469, 475], "twelv": 16, "primari": [16, 22], "secondari": 16, "remain": [16, 18, 35, 82, 114, 116, 120, 159, 164, 165, 166, 178, 192, 193, 394, 474], "margin": [16, 18], "sensit": 16, "indent": 16, "posix": 16, "seriou": [16, 17, 33, 124, 125], "less": [17, 82, 165, 166, 347, 361, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 471], "popular": [17, 473], "viabl": 17, "defaultsolv": [17, 21, 34, 35, 37, 256], "lineargmressolv": [17, 21, 64], "fipy_solv": [17, 18], "linearlusolv": [17, 21, 32, 37, 64, 112, 114, 166, 191, 361], "regardless": [17, 163, 176, 177, 225], "mc": [17, 165, 166, 468], "anl": [17, 468], "toolkit": [17, 468], "structur": [17, 19, 21, 82, 468, 469, 471, 475], "routin": [17, 179, 194, 468], "scalabl": [17, 468], "precodition": 17, "pctype": 17, "precon": [17, 34, 35, 86, 111, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 288, 292, 293, 295, 296, 298, 300, 301, 304, 305, 306, 307, 308, 311, 318, 319, 320, 321, 322, 334, 336, 337], "declar": [17, 34, 35, 82, 120, 165, 166, 418, 478], "storag": [17, 163, 176, 177, 226, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 468, 471], "precondition": [17, 18, 21, 87, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 288, 292, 293, 295, 296, 301, 304, 305, 306, 307, 308, 311, 318, 319, 320, 322, 334, 335, 336, 337, 468], "factor": [17, 18, 33, 120, 165, 221, 222, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 251, 285, 295, 307, 390, 451, 471], "krylov": [17, 268], "conjunct": [17, 18, 22, 200], "readthedoc": [17, 468], "nvidia": [17, 468], "amgx": [17, 279, 280, 281, 282, 283, 284, 287, 288, 468], "sandia": [17, 335, 468], "difficult": [17, 19, 82, 192, 194, 468], "alongsid": 17, "compil": [17, 18, 22, 468], "suppress": [17, 394], "commonli": [17, 192], "encount": [17, 395], "gen_prolong": 17, "eigen": 17, "aztec": [17, 332, 335], "az_loss": 17, "precis": [17, 381, 390, 394], "difficulti": 17, "usual": [17, 22, 179, 183, 191, 235, 237, 238, 251, 255, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 394], "az_ill_cond": 17, "gmre": [17, 265, 272, 284, 293, 306, 320], "hessenberg": 17, "ill": 17, "accur": [17, 32, 34, 35, 82, 87, 124, 179, 347], "az_breakdown": 17, "breakdown": 17, "reach": [17, 18, 22, 78, 79, 81, 141, 165, 166, 179], "sens": 18, "strongli": [18, 191], "proce": [18, 33, 73, 74, 82, 83, 84, 165, 166, 179, 183], "assumpt": [18, 141, 165, 166], "seri": 18, "familiar": 18, "yourself": [18, 478, 479], "excel": 18, "dive": [18, 475], "Into": [18, 475], "deeper": [18, 411], "insight": 18, "getlogg": 18, "consol": 18, "streamhandl": 18, "setlevel": 18, "info": 18, "addhandl": 18, "verbos": [18, 377, 379, 380], "save": [18, 21, 140, 143, 144, 168, 391, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 468, 469], "logfil": 18, "filehandl": 18, "filter": [18, 192, 311], "addfilt": 18, "fipy_log_config": 18, "mpilog": 18, "mpiscatteredfilehandl": 18, "filepattern": 18, "mpirank": 18, "d_of_": 18, "mpisiz": 18, "uniqu": [18, 22], "egg_info": 18, "investig": [18, 97], "tracker": 18, "dashboard": 18, "core": [18, 22], "behavior": [18, 21, 22, 141, 193, 394, 469, 478, 479], "insensit": 18, "myfipyscript": 18, "someflag": 18, "lazili": [18, 440], "recalcul": [18, 131, 183, 184, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 440], "skfmm": 18, "compos": [18, 22, 165, 166, 478], "fipy_inlin": 18, "fipy_inline_com": 18, "context": [18, 211, 226, 230, 256, 311, 342, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441], "json": [18, 468], "config": [18, 379], "dictconfig": 18, "fipy_verbose_solv": 18, "lineargeneralsolv": [18, 21], "fipy_include_numerix_al": [18, 193], "fipy_cach": 18, "petsc_opt": 18, "tri2d": [18, 21, 79, 92, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 252, 253, 254, 255, 442, 449, 451, 452, 454, 455], "skewedgrid2d": [18, 21, 94, 97], "advis": 18, "myscript": [18, 140, 311], "slurm": 18, "task": [18, 22], "manufactur": 18, "hire": 18, "bigger": 18, "versu": 18, "style": [18, 451], "observ": [18, 164], "exhibit": [18, 109, 418, 472], "law": [18, 22, 165, 166, 183, 366, 474], "slab": 18, "compact": 18, "carri": 18, "fairli": [18, 163, 168, 169, 176, 177], "lag": 18, "wors": 18, "discrep": 18, "obviou": [18, 165, 179], "endeavor": 18, "20": [18, 21, 22, 32, 33, 48, 72, 83, 84, 95, 96, 105, 113, 114, 146, 163, 164, 166, 176, 177, 180, 183, 184, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 390, 411, 440, 469, 472, 475], "modest": 18, "caveat": 18, "architectur": [18, 468], "easiest": 18, "confirm": [18, 82, 114, 116, 168, 178, 256], "half": [18, 168, 193], "look": [18, 21, 82, 165, 166, 469], "69815": 18, "freed": 18, "69814": 18, "69813": 18, "essenti": [18, 50, 51, 52, 60, 61, 82, 140, 165, 166, 191, 381, 390, 394, 471, 473], "sub": [18, 251, 471, 476, 477, 480], "somewhat": [18, 22, 32, 34, 35, 347, 361], "xterm": 18, "ipdb": 18, "spawn": 18, "intent": 18, "node": [18, 226, 381, 400], "cluster": 18, "child": [18, 381, 400], "compet": [18, 32, 33, 165, 166], "ghost": [18, 226], "exchang": [18, 140, 141, 146], "gil": 18, "bind": [18, 458, 468, 478], "parent": 18, "suffer": 18, "launch": [18, 82], "minut": [18, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "unrestrict": [18, 22], "degrad": 18, "conceiv": 18, "unfett": 18, "slot": 18, "msg03393": 18, "notfun": 18, "polygon": 18, "wrapper": [18, 226, 259, 260, 285, 292, 293, 295, 296, 298, 300, 307, 315, 316, 383, 391, 395, 468], "gmsh3d": [18, 21, 193, 226], "geometri": [18, 22, 73, 74, 139, 140, 141, 146, 159, 191, 199, 210, 226, 236, 252, 253, 407, 411, 415, 425, 431, 432, 434], "geo": [18, 226], "msh": [18, 72, 226], "occur": [18, 35, 168, 179, 183, 191, 381, 390, 411], "whenev": [18, 311, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "compromis": [18, 82], "highli": [18, 22, 329], "orthogon": [18, 22, 94, 96, 97, 251, 471], "tighter": 18, "tempor": 18, "eqn0": [18, 75], "eqn1": [18, 75], "coupledeqn": [18, 183, 184], "quadrant": [18, 180], "act": [18, 22], "term00": 18, "term01": 18, "source0": 18, "term10": 18, "term11": 18, "source1": 18, "ttfamili": 18, "hline": [18, 141, 146], "decis": 18, "regard": 18, "column": [18, 73, 74], "upper": [18, 441, 445], "revers": [18, 53, 58, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "decompos": [18, 32, 34, 35, 75], "2nd": [18, 33, 340, 353, 475], "pair": [18, 75, 109, 394], "4th": [18, 87, 353], "phi": [18, 21, 22, 32, 33, 34, 35, 37, 50, 51, 52, 57, 60, 61, 69, 72, 73, 74, 76, 78, 79, 82, 83, 84, 86, 109, 113, 114, 115, 116, 117, 124, 125, 127, 129, 130, 131, 132, 140, 151, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 180, 191, 192, 199, 200, 347, 351, 353, 356, 358, 359, 361, 362, 364, 366, 371, 373, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 469, 472, 473], "kappa_c": [18, 165, 166], "kappa_": [18, 109, 115, 165, 166, 178, 179], "mu": [18, 120, 168, 169, 176, 177, 178, 183, 184, 390, 412, 418], "hat": [18, 52, 82, 140, 198, 200, 415, 434, 435, 471], "qquad": [18, 37, 68, 109, 115, 132, 136, 165, 166, 172, 173, 174, 178, 347], "facestop": [18, 21, 53, 58, 83, 84, 120, 140, 184, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "fixedvalu": [18, 21, 191, 192, 193, 200], "facenorm": [18, 236, 237, 238], "exterior": [18, 69, 73, 74, 82, 158, 226], "firstli": [18, 73, 74, 124, 125, 129, 131, 158, 183, 411], "diffcoeff": [18, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 108, 191, 192], "convcoeff": [18, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 191, 192], "extra": [18, 377], "eqn": [18, 40, 41, 72, 75, 79], "diffusioncoeff": [18, 37, 40, 41, 68, 78, 140, 168, 169, 191], "exteriorflux": 18, "fixedflux": [18, 21, 191, 193, 200], "unless": [18, 20, 32, 33, 34, 35, 225, 381, 396], "xy": [18, 235, 255, 347], "quad": [18, 86, 179], "elsewher": 18, "repres": [18, 21, 22, 32, 33, 50, 51, 60, 61, 69, 75, 78, 82, 111, 113, 114, 115, 116, 131, 140, 141, 152, 163, 164, 176, 177, 179, 191, 199, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 351, 353, 364, 371, 390, 404, 407, 412, 416, 418, 439, 445, 449, 469, 471, 472], "portion": [18, 22], "s_r": 18, "int_v": [18, 351, 356, 358, 359, 362, 364, 366, 371, 373, 471], "dv": [18, 165, 166, 183, 351, 356, 358, 359, 362, 364, 366, 371, 373, 471], "int_": [18, 165, 166, 471], "notin": 18, "setvalu": [18, 21, 22, 32, 34, 35, 68, 73, 74, 76, 82, 86, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 131, 140, 143, 144, 152, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 445, 447, 448, 449, 451, 452, 454, 455], "powerlawconvectionterm": [18, 21, 50, 51, 52, 60, 61, 64, 66, 67, 68, 69, 111, 112, 113, 114, 116, 165, 177, 178, 191, 192, 347, 350, 351, 358, 359, 360, 361, 362, 364, 367, 368, 371, 373, 374, 471], "onto": [18, 32, 34, 35, 136, 192], "natur": [18, 75, 141, 192, 381, 390, 471], "interven": [18, 82], "neighbor": [18, 347, 411, 471, 474], "phi_f": [18, 351, 358, 359, 362, 366, 373, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 471], "approx": [18, 165, 166, 179, 415, 434, 435], "phi_p": [18, 347, 351, 356, 358, 359, 361, 362, 364, 366, 371, 373, 471, 474], "pf": [18, 114], "_f": [18, 120, 183, 351, 358, 359, 362, 366, 373, 415, 434, 435, 471], "adjoin": 18, "g_f": 18, "b_f": 18, "turn": [18, 191], "gamma": [18, 72, 136, 146, 168, 169, 176, 177, 192, 356, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 471, 472], "sum_f": [18, 120, 356, 404, 407, 411, 412, 415, 416, 418, 420, 431, 432, 434, 435, 436, 439, 471], "gamma_f": [18, 356, 471], "a_f": [18, 120, 183, 184, 351, 356, 358, 359, 362, 366, 373, 404, 407, 411, 412, 415, 416, 418, 420, 431, 432, 434, 435, 436, 439, 471], "sum_": [18, 76, 109, 111, 115, 117, 141, 178, 351, 358, 359, 362, 366, 373, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 471], "modif": 18, "dpf": 18, "celldistancevector": 18, "robincoeff": 18, "similarli": [18, 141], "heat": [18, 82, 163, 165, 166, 176, 177, 179, 475], "t_": 18, "posit": [18, 73, 74, 82, 127, 131, 140, 152, 153, 192, 296, 330, 420, 445, 446, 447, 474], "largevalu": 18, "paramet": [18, 21, 22, 32, 33, 40, 41, 73, 74, 79, 81, 82, 114, 116, 120, 124, 125, 129, 131, 136, 139, 140, 141, 143, 144, 146, 164, 165, 166, 168, 169, 179, 183, 191, 196, 198, 199, 200, 222, 225, 226, 232, 234, 237, 243, 251, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 287, 288, 292, 293, 294, 295, 296, 301, 304, 305, 306, 307, 308, 311, 318, 319, 320, 321, 322, 334, 335, 336, 337, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 379, 381, 386, 390, 391, 394, 395, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467, 472, 474, 478, 479], "domin": 18, "rh": [18, 37, 120, 199, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "typic": [18, 120, 165, 166, 353], "boolean": [18, 179, 381, 390], "noth": [18, 111, 112, 113, 159, 377], "believ": [18, 191], "intuit": 18, "pathologi": 18, "attent": [18, 226], "implicitli": [18, 92, 179, 183], "nx": [18, 32, 33, 34, 37, 40, 41, 48, 52, 53, 55, 57, 58, 62, 63, 64, 66, 67, 68, 69, 75, 76, 78, 79, 81, 82, 83, 84, 86, 91, 92, 95, 98, 100, 101, 105, 108, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 131, 140, 143, 144, 158, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 183, 184, 191, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 391, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 445, 447, 448, 449, 451, 452, 454, 455, 461], "rvert_": [18, 82, 179], "facesright": [18, 21, 37, 50, 51, 52, 55, 57, 60, 61, 62, 63, 64, 66, 67, 68, 69, 75, 79, 82, 83, 84, 86, 95, 96, 114, 120, 184, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "1e": [18, 34, 35, 37, 40, 41, 48, 50, 51, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 75, 81, 82, 83, 84, 86, 91, 92, 98, 100, 101, 108, 111, 112, 113, 114, 115, 116, 127, 130, 136, 140, 151, 152, 165, 166, 168, 169, 176, 177, 178, 179, 180, 183, 184, 191, 192, 263, 264, 265, 266, 267, 268, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 288, 294, 295, 304, 305, 306, 307, 308, 311, 318, 319, 320, 321, 322, 334, 335, 336, 347, 361, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "unexpect": [18, 377], "everywher": [18, 113, 115, 140, 168, 169, 179], "januari": [18, 114], "2020": [18, 21, 469], "pledg": 18, "priorit": 18, "rapidli": [18, 22], "impract": 18, "hopefulli": 18, "latexpdf": 18, "plu": [18, 82, 471], "v7": 18, "bibliograph": 18, "numpydoc": 18, "embed": [18, 20, 22, 159], "imagemagick": 18, "siunit": 18, "sty": 18, "texliv": 18, "pyspel": 18, "hunspel": 18, "libreoffic": 18, "wget": 18, "aff": 18, "cgit": 18, "freedesktop": 18, "en": [18, 468], "a4473e06b56bfe35187e302754f6baaa8d75e54f": 18, "dic": 18, "far": [19, 82, 114, 116, 140, 141, 146, 178, 411], "vkml": 20, "aspect": [20, 120, 141, 146, 169, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 443, 444, 446, 447, 448, 449, 451, 452], "semin": 20, "michael": 20, "water": 20, "prof": 20, "edwin": 20, "garcia": 20, "purdu": 20, "coarsen": 20, "random": [20, 32, 33, 34, 35, 94, 163, 176, 177, 183, 184, 243, 404, 412, 416, 418, 432, 439], "crystallograph": 20, "nuclei": [20, 176, 177], "radiu": [20, 35, 73, 74, 124, 152, 159, 163, 164, 176, 177, 226], "size": [20, 21, 33, 79, 81, 101, 114, 140, 141, 146, 183, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 396, 420, 451, 471], "homogen": [20, 32, 33], "dispers": 20, "wall": [20, 120], "seed": [20, 163, 164, 176, 177, 183, 184, 404, 412, 416, 418, 432], "fold": 20, "undercool": [20, 163, 176, 177, 179], "liquid": [20, 114, 116, 163, 164, 165, 166, 168, 176, 177, 178, 183], "strength": [20, 471, 474], "tension": 20, "segreg": [20, 32, 33, 76, 114, 116, 117, 178], "chemic": [20, 109, 165, 166, 178, 183, 472, 475], "john": [20, 475], "browser": 20, "assess": 20, "potenti": [20, 76, 109, 113, 114, 115, 116, 117, 165, 166, 178, 183, 184, 472], "word": [20, 92, 139, 140, 141, 146, 179], "michigan": 20, "boston": 20, "japan": 20, "england": 20, "wherev": 20, "cowork": 20, "planet": 20, "him": 20, "temporari": [20, 381, 391, 396, 398], "travel": 20, "privat": [20, 377], "publicli": 20, "peopl": 20, "world": 20, "regist": 20, "registr": 20, "nanohub": 20, "overview": [21, 22, 377, 469, 470], "client": [21, 469], "submit": [21, 469], "feedstock": [21, 469], "announc": [21, 469], "openmp": [21, 468, 469], "v": [21, 35, 75, 120, 139, 140, 141, 143, 146, 151, 165, 166, 178, 179, 183, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 445, 461, 469, 475], "dirichlet": [21, 83, 84, 199, 469], "outlet": [21, 469], "inlet": [21, 469], "partial_i": [21, 72, 183, 469], "gamma_": [21, 72, 469], "ij": [21, 72, 469], "partial_j": [21, 72, 183, 469], "imag": [21, 139, 141, 143, 144, 146, 176, 177, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467, 469], "screen": [21, 139, 141, 146, 394], "movi": [21, 469], "oh": [21, 192, 469], "anymor": [21, 469], "here": [21, 22, 40, 41, 53, 58, 82, 92, 120, 130, 132, 136, 139, 141, 164, 168, 169, 172, 173, 174, 192, 193, 226, 347, 361, 394, 411, 469, 474], "fvm": [21, 22, 469, 473], "cc": [21, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 129, 130, 132, 191, 469, 473], "vc": [21, 469, 473], "scheme": [21, 46, 47, 50, 51, 52, 60, 61, 82, 124, 125, 176, 177, 179, 183, 351, 358, 359, 362, 366, 373, 411, 469, 471, 473], "2022": [21, 469], "06": [21, 390, 469], "08": [21, 72, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 469], "01": [21, 32, 33, 34, 35, 75, 76, 79, 111, 114, 115, 116, 117, 127, 168, 169, 176, 177, 178, 183, 184, 226, 339, 381, 390, 404, 439, 442, 447, 448, 451, 452, 454, 455, 469], "02": [21, 81, 152, 163, 164, 168, 169, 176, 177, 226, 469, 475], "14": [21, 183, 184, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 461, 469, 471, 473, 475], "2019": [21, 469], "28": [21, 40, 141, 165, 166, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 390, 469, 475], "22": [21, 109, 178, 469, 475], "2016": [21, 469], "24": [21, 82, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 390, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 469, 475], "2015": [21, 469], "2013": [21, 469], "09": [21, 390, 469, 475], "2012": [21, 184, 469], "16": [21, 183, 184, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 340, 469, 473, 475], "2011": [21, 183, 469, 475], "05": [21, 73, 74, 114, 163, 176, 177, 183, 184, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 461, 469], "2008": [21, 469], "glossari": [21, 469, 470], "subpackag": [21, 476, 480], "method1": [21, 478, 479], "method2": [21, 478, 479], "doctest_raw_input": [21, 194], "boundarycondit": [21, 22, 37, 86, 87, 191, 192, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 415, 425, 435, 440], "nthorderboundarycondit": [21, 37, 86], "offsetsparsematrix": 21, "petscmatrix": 21, "pysparsematrix": 21, "scipymatrix": 21, "sparsematrix": [21, 203, 347, 361], "trilinosmatrix": 21, "abstractmesh": [21, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "vtkcelldataset": [21, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "vtkfacedataset": [21, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "__div__": [21, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 390], "__getstate__": [21, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 259, 260, 261, 315, 316, 317, 383, 384, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__radd__": [21, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 390], "__sub__": [21, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 390], "__truediv__": [21, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 390], "aspect2d": [21, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "cellfaceid": [21, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "facesback": [21, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "facesbottom": [21, 53, 58, 83, 84, 120, 184, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "facesdown": [21, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "facesfront": [21, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "facesleft": [21, 37, 50, 51, 52, 55, 57, 60, 61, 62, 63, 64, 66, 67, 68, 69, 75, 76, 78, 79, 82, 83, 84, 86, 95, 96, 114, 117, 120, 158, 184, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "facesup": [21, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "meshadditionerror": [21, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "__cause__": [21, 211, 226, 230, 256, 311, 342, 441], "__context__": [21, 211, 226, 230, 256, 311, 342, 441], "__delattr__": [21, 211, 226, 230, 256, 311, 342, 441], "__getattribute__": [21, 211, 226, 230, 256, 311, 342, 441], "__reduce__": [21, 211, 226, 230, 256, 311, 342, 441], "__setattr__": [21, 211, 226, 230, 256, 311, 342, 441], "__str__": [21, 211, 226, 230, 256, 311, 342, 381, 390, 400, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441], "add_not": [21, 211, 226, 230, 256, 311, 342, 441], "with_traceback": [21, 211, 226, 230, 256, 311, 342, 441], "builder": [21, 233], "abstractgridbuild": 21, "grid1dbuild": [21, 233], "grid2dbuild": 21, "grid3dbuild": 21, "periodicgrid1dbuild": 21, "utilityclass": 21, "cylindricalgrid2d": [21, 60, 61, 225], "cylindricalnonuniformgrid1d": [21, 225], "__mul__": [21, 221, 222, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 251, 347, 350, 351, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374, 381, 390], "__rmul__": [21, 221, 222, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 251, 347, 350, 351, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374, 381, 390], "extrud": [21, 35, 159, 222, 226, 232, 234, 237, 243, 251], "cylindricaluniformgrid1d": [21, 225], "cylindricaluniformgrid2d": [21, 225], "sphericalgrid1d": [21, 225], "gmsh2din3dspac": [21, 35, 159, 193, 226], "gmshexcept": [21, 226], "gmshfile": [21, 226], "gmshgrid2d": [21, 226], "gmshgrid3d": [21, 105, 226], "mshfile": [21, 226], "makemapvari": [21, 226], "meshexporterror": [21, 226], "posfil": [21, 226], "gmshversion": [21, 226], "openmshfil": [21, 226], "openposfil": [21, 226], "nonuniformgrid2d": [21, 222, 225, 226, 232, 237, 243, 251], "nonuniformgrid3d": [21, 225], "periodicgrid1d": [21, 91], "periodicgrid2d": 21, "periodicgrid2dleftright": [21, 237], "periodicgrid2dtopbottom": [21, 237], "periodicgrid3dfrontback": [21, 238], "periodicgrid3dleftright": [21, 238], "periodicgrid3dleftrightfrontback": [21, 238], "periodicgrid3dleftrighttopbottom": [21, 238], "periodicgrid3dtopbottom": [21, 238], "periodicgrid3dtopbottomfrontback": [21, 238], "abstractrepresent": [21, 211, 252], "gridrepresent": [21, 233, 234, 235, 251, 253, 254, 255], "meshrepresent": [21, 230, 231, 232], "physicalshap": [21, 243, 251], "sphericalnonuniformgrid1d": [21, 225], "sphericaluniformgrid1d": [21, 225], "topologi": [21, 210, 211, 230, 231, 232, 233, 234, 235, 251, 252, 253, 254, 255, 471, 475], "abstracttopologi": [21, 211, 252], "gridtopologi": [21, 233, 234, 235, 253, 254, 255], "meshtopologi": [21, 230, 231, 232, 251], "uniformgrid1d": [21, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 254, 255, 351, 358, 359, 362, 366, 373, 374], "uniformgrid2d": [21, 224, 225, 351, 358, 359, 362, 366, 373, 374], "defaultasymmetricsolv": [21, 48, 53, 55, 57, 58, 62, 67, 111, 165, 178, 256], "dummysolv": [21, 179, 256, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "generalsolv": [21, 86, 140, 168, 169, 256], "serialsolvererror": [21, 256], "comm": 21, "parallelpetsccommwrapp": 21, "petsccommwrapp": [21, 259, 261], "serialpetsccommwrapp": 21, "linearbicgsolv": 21, "linearcgssolv": [21, 64], "petsckrylovsolv": [21, 263, 264, 265, 267], "petscsolv": [21, 262, 266, 268], "smoothedaggregationprecondition": [21, 271, 272, 275], "aggregationamgsolv": 21, "classicalamgsolv": 21, "linearcgsolv": 21, "linearfgmressolv": 21, "__call__": [21, 287, 290, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "pyamgxsolv": [21, 279, 280, 281, 282, 283, 284], "smoother": [21, 279, 280, 288, 332, 335], "jacobiprecondition": [21, 293, 318, 334], "ssorprecondition": [21, 296], "pysparsematrixsolv": 21, "scipykrylovsolv": 21, "scipysolv": 21, "illconditionedpreconditionerwarn": [21, 311], "matrixillconditionedwarn": [21, 311], "maximumiterationwarn": [21, 311], "preconditionernotpositivedefinitewarn": [21, 311], "preconditionerwarn": [21, 311], "scalarquantityoutofrangewarn": [21, 311], "solverconvergencewarn": [21, 311], "stagnatedsolverwarn": [21, 311], "epetracommwrapp": [21, 316, 317], "parallelepetracommwrapp": 21, "maxal": [21, 316], "minal": [21, 316], "serialepetracommwrapp": 21, "domdecompprecondition": 21, "icprecondition": 21, "multilevelddmlprecondition": 21, "multilevelddprecondition": [21, 319, 320, 322], "multilevelnssaprecondition": 21, "multilevelsaprecondition": 21, "multilevelsgsprecondition": [21, 319, 322], "multilevelsolversmootherprecondition": 21, "trilinosaztecoosolv": [21, 318, 319, 320, 322], "trilinosmltest": 21, "trilinosnonlinearsolv": 21, "trilinossolv": [21, 321, 334, 335, 336], "stepper": 21, "l1error": [21, 338], "l2error": [21, 338], "linferror": [21, 338], "sweepmonoton": [21, 338], "pidstepp": 21, "pseudorkqsstepp": 21, "abstractbaseclasserror": [21, 342], "explicitvariableerror": [21, 342], "incorrectsolutionvari": [21, 342], "solutionvariablenumbererror": [21, 342], "solutionvariablerequirederror": [21, 342], "termmultiplyerror": [21, 342], "transienttermerror": [21, 342, 351, 358, 359, 362, 366, 373, 374], "vectorcoefferror": [21, 342, 351, 358, 359, 362, 366, 373, 374], "abstractbinaryterm": 21, "abstractconvectionterm": 21, "abstractdiffusionterm": 21, "abstractupwindconvectionterm": 21, "advectionterm": [21, 124, 125, 127, 129, 131, 140], "rhsvector": [21, 120, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "__eq__": [21, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__hash__": [21, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__neg__": [21, 347, 350, 351, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374, 381, 390], "cachematrix": [21, 120, 183, 184, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "cacherhsvector": [21, 120, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "justresidualvector": [21, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "residualvectorandnorm": [21, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "asymmetricconvectionterm": 21, "binaryterm": 21, "centraldiffconvectionterm": 21, "centraldifferenceconvectionterm": [21, 183, 184, 351, 471], "coupledbinaryterm": 21, "diffusiontermcorrect": [21, 72], "explicitdiffusionterm": [21, 78, 79, 82, 164, 168, 169, 471], "explicitsourceterm": 21, "explicitupwindconvectionterm": [21, 351, 359, 362, 366, 373, 374, 471], "exponentialconvectionterm": [21, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 66, 67, 191, 471], "faceterm": 21, "firstorderadvectionterm": [21, 124, 125, 127, 129, 131, 347], "hybridconvectionterm": [21, 471], "nondiffusionterm": 21, "residualterm": 21, "sourceterm": [21, 364, 367], "unaryterm": 21, "upwindconvectionterm": [21, 471], "testfipi": 21, "doctestplu": 21, "execbutnotest": [21, 377], "report_skip": [21, 377], "testmod": [21, 377], "lateimporttest": 21, "deprecationerroringtestprogram": [21, 379], "finalize_opt": [21, 379], "initialize_opt": [21, 379], "testprogram": [21, 379], "serialcomm": [21, 72, 125, 127, 129, 131, 140, 225, 226, 381, 411], "parallelcomm": [21, 225, 226, 381, 396], "__abs__": [21, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__array_wrap__": [21, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__bool__": [21, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__float__": [21, 381, 390], "__ge__": [21, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__getitem__": [21, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__gt__": [21, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__le__": [21, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__lt__": [21, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__mod__": [21, 381, 390], "__ne__": [21, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__nonzero__": [21, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__pow__": [21, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__setitem__": [21, 381, 390], "allclos": [21, 33, 37, 40, 41, 48, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 73, 74, 76, 78, 79, 81, 82, 83, 84, 86, 87, 91, 92, 95, 96, 98, 100, 101, 104, 105, 108, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 130, 131, 132, 136, 140, 151, 152, 153, 158, 164, 165, 166, 168, 169, 172, 173, 174, 178, 179, 180, 183, 191, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 361, 371, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "allequ": [21, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "arcco": [21, 381, 390], "arccosh": [21, 381, 390], "arcsin": [21, 73, 74, 381, 390], "arctan": [21, 163, 164, 176, 177, 381, 390], "arctan2": [21, 163, 164, 176, 177, 381, 390], "arctanh": [21, 381, 390], "ceil": [21, 381, 390], "conjug": [21, 83, 84, 264, 292, 296, 381, 390, 471], "converttounit": [21, 381, 390], "co": [21, 40, 72, 73, 74, 143, 381, 390, 442, 445, 454, 455], "cosh": [21, 114, 381, 390], "floor": [21, 381, 390], "getsctyp": [21, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "inbaseunit": [21, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "indimensionless": [21, 381, 390], "inradian": [21, 381, 390], "insiunit": [21, 381, 390], "inunitsof": [21, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "itemset": [21, 381, 390], "log10": [21, 381, 390], "numericvalu": [21, 381, 390], "sin": [21, 72, 82, 143, 192, 381, 390, 442, 445, 447, 448, 449, 451, 452, 454, 455, 471], "sinh": [21, 381, 390], "sqrt": [21, 37, 41, 68, 72, 73, 74, 78, 79, 82, 115, 124, 127, 129, 130, 132, 140, 151, 152, 158, 159, 168, 179, 226, 347, 361, 371, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "sum": [21, 72, 151, 152, 153, 225, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "tan": [21, 163, 164, 176, 177, 381, 390, 394], "tanh": [21, 115, 179, 381, 390], "tostr": [21, 381, 390, 394], "vital": [21, 381], "appendinfo": [21, 381, 400], "documentel": [21, 381, 400], "firstchild": [21, 381, 400], "lastchild": [21, 381, 400], "localnam": [21, 381, 400], "commwrapp": [21, 225, 226, 260, 315, 381, 384, 391, 396], "dummycomm": [21, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 237, 238, 244, 245, 253, 254, 255, 381, 391, 396], "decor": 21, "dictwithdefault": 21, "numberdict": 21, "physicalunit": [21, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__rdiv__": [21, 390], "__rtruediv__": [21, 390], "conversionfactorto": [21, 390], "conversiontupleto": [21, 390], "isangl": [21, 390], "iscompat": [21, 390], "isdimensionless": [21, 390], "isdimensionlessorangl": [21, 390], "isinverseangl": [21, 390], "setnam": [21, 390], "package_info": [21, 393], "l1norm": [21, 338, 394], "l2norm": [21, 394], "linfnorm": [21, 394], "getshap": [21, 394], "getunit": [21, 394], "isclos": [21, 394], "nearest": [21, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "sqrtdot": [21, 394], "parser": [21, 140, 158, 168], "pars": [21, 140, 158, 168, 226, 395, 456], "sharedtempfil": 21, "prune": [21, 398], "putadd": [21, 398], "arithmeticcelltofacevari": 21, "betanoisevari": 21, "__and__": [21, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__new__": [21, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__or__": [21, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__setstate__": [21, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "cellvolumeaverag": [21, 40, 41, 72, 165, 166, 183, 184, 226, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "constraintmask": [21, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "gaussgrad": [21, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "harmonicfacevalu": [21, 111, 112, 113, 114, 116, 165, 166, 178, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "leastsquaresgrad": [21, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "minmodfacevalu": [21, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "rdot": [21, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "scrambl": [21, 404, 412, 416, 418, 432, 439], "std": [21, 226, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "binaryoperatorvari": [21, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "celltofacevari": 21, "constant": [21, 32, 33, 51, 57, 58, 61, 69, 82, 113, 140, 141, 146, 165, 166, 178, 192, 224, 254, 377, 390, 394, 471], "coupledcellvari": 21, "calcdistancefunct": [21, 125, 127, 129, 130, 131, 132, 140, 143, 144, 153, 411], "cellinterfacearea": [21, 151, 411], "extendvari": [21, 140, 152, 411], "exponentialnoisevari": 21, "facegradcontributionsvari": 21, "facegradvari": [21, 120], "gammanoisevari": 21, "gausscellgradvari": 21, "gaussiannoisevari": [21, 32, 33, 34, 35], "harmoniccelltofacevari": 21, "histogramvari": [21, 404, 412, 416, 418, 439], "interfaceareavari": 21, "interfaceflagvari": 21, "leastsquarescellgradvari": 21, "levelsetdiffusionvari": 21, "meshvari": [21, 192, 226, 394, 404, 407, 411, 412, 415, 416, 418, 420, 431, 432, 434, 435, 436, 439, 443, 451, 452, 461, 463, 465, 466, 467], "minmodcelltofacevari": 21, "modcellgradvari": 21, "modcelltofacevari": 21, "modfacegradvari": 21, "modphysicalfield": 21, "modularvari": [21, 168, 169, 176, 177], "facegradnomod": [21, 168, 169, 176, 177, 431], "operatorvari": 21, "scharfettergummelfacevari": 21, "surfactantconvectionvari": 21, "surfactantvari": [21, 140, 151, 152, 153], "interfacevar": [21, 136, 140, 152, 436], "unaryoperatorvari": [21, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "uniformnoisevari": 21, "dummyview": [21, 441], "plotmesh": [21, 73, 74, 143, 144, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "setlimit": [21, 143, 144, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "meshdimensionerror": [21, 441], "abstractmatplotlib2dview": [21, 446, 447, 448, 449, 451, 452], "cmap": [21, 143, 163, 176, 177, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452], "fig": [21, 143, 176, 177, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452], "abstractmatplotlibview": [21, 143, 443, 445], "matplotlib1dview": 21, "matplotlib2dcontourview": 21, "matplotlib2dgridcontourview": 21, "matplotlibsparsematrixview": 21, "matplotlibstreamview": 21, "kwarg": [21, 221, 222, 223, 224, 236, 237, 238, 243, 244, 245, 262, 269, 279, 280, 281, 282, 283, 284, 287, 288, 290, 292, 293, 296, 301, 337, 338, 381, 386, 400, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 451, 456], "mayaviview": 21, "fp": [21, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 445, 447, 448, 449, 451, 452, 454, 455], "mayavidaemon": [21, 35, 454, 455], "parse_command_lin": [21, 456], "setup_sourc": [21, 456], "update_pipelin": [21, 456], "view_data": [21, 456], "testinteract": 21, "abstractview": [21, 144, 441, 444, 454, 455, 458, 461, 462, 467], "vtkcellview": [21, 463], "vtkfaceview": [21, 463], "tanh1d": 21, "explicitupwind": 21, "implicitupwind": 21, "vanleerupwind": 21, "cylindricalmesh1d": 21, "cylindricalmesh1dnonuniform": 21, "exponential1dback": 21, "exponential2d": 21, "cylindricalmesh2d": 21, "cylindricalmesh2dnonuniform": 21, "peclet": 21, "powerlaw1d": 21, "mesh20x20coupl": 21, "input4thorder_lin": 21, "inputperiod": 21, "tri2dinput": 21, "gmshinput": 21, "isotropi": 21, "modifiedmeshinput": 21, "orthoerror": 21, "mesh50x50": 21, "othermesh": 21, "cubicalproblem": 21, "grid3dinput": 21, "prism": [21, 235, 255], "mesh1ddimension": 21, "phasediffus": 21, "poisson": [21, 76, 109, 114], "interior": [21, 94, 164], "squar": [21, 46, 47, 48, 79, 83, 120, 179, 180, 226, 264, 292, 381, 390, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "adsorbingsurfactantequ": [21, 140], "adsorpt": [21, 140, 141], "gapfilldistancevari": 21, "gapfillmesh": 21, "matplotlibsurfactantview": [21, 140], "mayavisurfactantview": [21, 140], "metaliondiffusionequ": [21, 140], "surfactantbulkdiffusionequ": [21, 140], "trenchmesh": 21, "expandingcircl": 21, "gmshrefin": 21, "inputgrid2d": 21, "anisotropyold": 21, "missorient": 21, "modcircl": 21, "riemann": 21, "acoust": 21, "customiz": 22, "poli": 22, "deposit": [22, 140, 141, 146], "unusu": 22, "philosophi": 22, "algorithm": [22, 120, 180, 340, 475], "deform": 22, "tractabl": 22, "li": [22, 475], "encapsul": [22, 146, 211, 259, 260, 315, 316, 383, 471, 478], "tight": 22, "extend": [22, 165, 166, 411, 475], "reus": [22, 168], "overridden": [22, 379], "categori": [22, 251], "lower": [22, 165, 166, 415, 434, 435, 441], "aim": [22, 471], "tier": 22, "reassur": 22, "breakag": 22, "aid": 22, "dissemin": 22, "year": [22, 192, 193, 339], "movement": [22, 179], "matter": [22, 32, 33], "furthermor": 22, "broadli": 22, "lump": 22, "human": [22, 381, 390], "readabl": [22, 193, 381, 390, 407, 415, 425, 431, 432, 434, 440], "provok": 22, "happen": [22, 48, 82], "real": [22, 163, 176, 177, 394], "low": [22, 471, 474], "closer": 22, "programm": 22, "awai": [22, 120, 411], "extern": 22, "acol": 22, "brow": 22, "malloc": 22, "sizeof": 22, "bcol": 22, "arow": 22, "worri": [22, 192], "needn": 22, "paramount": 22, "concern": [22, 311], "scenario": 22, "draft": 22, "hundr": 22, "recompil": 22, "relink": 22, "eventu": [22, 139, 146, 164], "imposs": 22, "rememb": [22, 418], "scientist": [22, 194, 468], "begun": 22, "expertis": 22, "spent": 22, "contrast": [22, 32, 33], "tcl": 22, "java": 22, "rubi": 22, "vener": 22, "immedi": [22, 141], "someon": 22, "fledg": 22, "ground": 22, "runtim": 22, "unquestion": 22, "proport": [22, 140, 163, 176, 177, 339], "month": 22, "diagnos": 22, "critic": [22, 32, 33], "palat": 22, "acknowledg": 22, "remark": [22, 472], "usabl": 22, "mathematician": 22, "scientificpython": [22, 390, 468], "easili": [22, 82, 116, 178, 468], "blitz": 22, "pyrex": [22, 468], "brief": [22, 377], "terminologi": 22, "quantiti": [22, 73, 74, 109, 112, 139, 179, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 472], "relationship": [22, 97, 179], "assign": [22, 82, 379, 381, 390, 479], "lazi": [22, 401], "elimin": [22, 75, 82, 183], "entiti": 22, "beyond": 22, "bound": [22, 192], "vertic": [22, 73, 74, 120, 222, 225, 230, 231, 232, 234, 235, 237, 238, 243, 251, 254, 255, 394, 442, 446, 447, 448, 449, 471], "_sparsematrix": [22, 338, 450], "invert": 22, "fashion": 22, "footnot": [22, 165, 166], "neglect": [22, 165, 166], "byte": 22, "prefix": [23, 82, 381, 390, 396], "ld_library_path": 23, "colon": 23, "search": [23, 192, 441, 442, 463], "elf": 23, "dyld_library_path": 23, "linker": 23, "phenomenon": [32, 33, 35], "spontan": [32, 33, 179], "mixtur": [32, 33, 82], "region": [32, 33, 130, 131, 138, 140, 153, 163, 164, 168, 176, 177, 179, 180, 446, 447], "spin": [32, 33], "barrierless": [32, 33], "fluctuat": [32, 33, 34, 35, 163, 176, 177], "grow": [32, 33, 163, 176, 177], "exce": [32, 33], "surviv": [32, 33], "ginsberg": [32, 33, 163, 176, 177], "landau": [32, 33, 163, 176, 177], "hohenberg": [32, 33, 163, 176, 177], "halperin": [32, 33, 163, 176, 177], "epsilon": [32, 33, 34, 35, 37, 76, 109, 115, 117, 168, 169, 172, 173, 174, 176, 177, 183, 184], "possibli": [32, 33, 381, 383, 400, 441], "composit": [32, 33, 138, 165, 166], "doubl": [32, 33, 109, 178, 179], "energi": [32, 33, 37, 109, 115, 165, 166, 178, 179, 183, 184, 329, 475], "penal": [32, 33], "abrupt": [32, 33], "smooth": [32, 33, 140, 143, 144, 163, 176, 177, 328, 329, 330, 331], "transit": [32, 33, 138, 475], "weight": [32, 33, 165, 166, 168, 198, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 452, 471, 473], "augment": [32, 33, 394], "__name__": [32, 33, 34, 35, 37, 40, 41, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 76, 78, 79, 82, 83, 84, 86, 91, 95, 96, 108, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 131, 140, 158, 159, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 183, 184, 191, 377, 404, 412, 416, 418, 439], "__main__": [32, 33, 34, 35, 37, 40, 41, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 76, 78, 79, 82, 83, 84, 86, 91, 95, 96, 108, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 129, 131, 140, 158, 159, 163, 164, 165, 166, 168, 169, 176, 177, 178, 179, 180, 183, 184, 191, 377, 379, 380, 404, 412, 416, 418, 439], "ny": [32, 33, 34, 41, 53, 58, 62, 63, 79, 81, 83, 84, 95, 101, 105, 113, 120, 124, 127, 129, 140, 143, 144, 158, 163, 164, 168, 176, 177, 180, 184, 191, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 351, 358, 359, 361, 362, 366, 373, 374, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 447, 448, 449, 451, 452, 454, 455, 461], "els": [32, 33, 34, 35, 37, 40, 41, 68, 79, 86, 113, 114, 120, 140, 163, 165, 166, 176, 177, 179, 183, 184, 377, 456], "dy": [32, 33, 34, 41, 53, 58, 79, 81, 83, 84, 105, 113, 120, 124, 127, 129, 130, 132, 140, 143, 144, 158, 163, 164, 168, 176, 177, 180, 184, 192, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 351, 358, 359, 361, 362, 366, 373, 374, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 442, 447, 448, 449, 451, 452, 454, 455, 461], "varianc": [32, 33, 34, 35, 418], "microstructur": [32, 33, 34, 35, 475], "exponenti": [32, 33, 34, 35, 139, 359, 390, 412, 474], "dexp": [32, 33, 34, 35, 37], "durat": [32, 33, 34, 35], "exp": [32, 33, 34, 35, 37, 50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 140, 141, 165, 166, 168, 169, 176, 177, 191, 192, 193, 412, 416, 418, 474], "elif": 32, "formul": [33, 75, 474], "trivial": [33, 347, 361], "enorm": [33, 82], "amount": [33, 243], "psi": [33, 76, 117, 163, 164, 176, 177, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "nois": [33, 163, 176, 177, 183, 404, 412, 416, 418, 432, 439], "taylor": [33, 179, 475], "expans": [33, 152, 179], "phi_": [33, 179, 347, 371, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 471], "dfdphi": 33, "dfdphi_": 33, "d2fdphi2": 33, "eq1": [33, 48, 75], "eq2": [33, 48], "eq3": 33, "press": [33, 64, 69, 73, 74, 76, 82, 83, 84, 91, 114, 117, 165, 166, 179, 183, 475], "elementshap": [33, 75, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "v0": [33, 75, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "impcoeff": 33, "cube": 34, "nz": [34, 60, 61, 105, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 454, 455, 468], "dz": [34, 60, 61, 105, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 454, 455], "vesicl": 35, "youtub": 35, "watch": 35, "kdsfp67_zse": 35, "cellsiz": [35, 73, 74, 96, 140, 141, 146, 159, 226], "inner": [35, 82, 159, 226], "t1": [35, 159], "pi": [35, 40, 72, 159, 163, 164, 168, 169, 174, 176, 177, 381, 390, 411, 418, 431, 442, 445, 454, 455], "duplicata": [35, 159], "t2": [35, 159], "t3": [35, 159], "t4": [35, 159], "t5": [35, 159], "t6": [35, 159], "t7": [35, 159], "outer": [35, 159, 165, 166, 226], "overlap": [35, 211, 221, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 471], "extrudefunc": [35, 159, 222, 226, 232, 234, 237, 243, 251], "lambda": [35, 159, 222, 226, 232, 234, 237, 243, 251], "daemon_fil": [35, 454, 455], "xmin": [35, 120, 143, 144, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "zmax": [35, 143, 144, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "asq": 37, "facevar": 37, "freeenergydoublederiv": 37, "diffterm2": 37, "diffterm4": 37, "eqch": 37, "solver_suit": [37, 86], "progress": [37, 418], "builtin": [37, 40, 41, 48, 64, 72, 73, 74, 75, 78, 79, 81, 82, 83, 84, 111, 112, 113, 114, 115, 116, 120, 124, 125, 127, 136, 140, 143, 151, 152, 153, 163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177, 178, 179, 180, 226, 316, 371, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 447, 448, 449, 451, 452, 454, 455], "maxarg": 37, "argmax": 37, "atol": [37, 40, 41, 48, 50, 51, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 73, 74, 76, 78, 79, 82, 83, 84, 87, 95, 96, 101, 105, 108, 111, 112, 113, 114, 115, 116, 117, 124, 127, 130, 165, 166, 168, 178, 179, 180, 191, 347, 361, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__future__": [40, 41], "param": [40, 41], "kmvar": [40, 41], "km": [40, 41, 381, 390], "kcvar": [40, 41], "kc": [40, 41], "tmvar": [40, 41], "tcvar": [40, 41], "tc": [40, 41], "p3var": [40, 41], "p3": [40, 41], "p2var": [40, 41], "p2": [40, 41], "rvar": [40, 41], "pn": [40, 41], "kmsccoeff": [40, 41], "chik": [40, 41], "kmspcoeff": [40, 41], "lambdak": [40, 41], "kappak": [40, 41], "kmeq": [40, 41], "tmsccoeff": [40, 41], "chit": [40, 41], "tmspcoeff": [40, 41], "lambdat": [40, 41], "zetat": [40, 41], "tmeq": [40, 41], "tcsccoeff": [40, 41], "tcspcoeff": [40, 41], "lambdatstar": [40, 41], "tceq": [40, 41], "pip2pitp": [40, 41], "kappam": [40, 41], "kappac": [40, 41], "zetapitp": [40, 41], "p3spcoeff": [40, 41], "lambda3": [40, 41], "zeta3t": [40, 41], "p3sccoeff": [40, 41], "chi3": [40, 41], "kappa3": [40, 41], "zeta3pitp": [40, 41], "zeta3": [40, 41], "p3eq": [40, 41], "p2sccoeff": [40, 41], "sccoeff": [40, 41], "chi2": [40, 41], "p2spcoeff": [40, 41], "lambda2": [40, 41], "zeta2t": [40, 41], "p2eq": [40, 41], "kcsccoeff": [40, 41], "alphakstar": [40, 41], "kcspcoeff": [40, 41], "lambdakstar": [40, 41], "kappakstar": [40, 41], "kceq": [40, 41], "pnview": [40, 41], "kmview": [40, 41], "tmview": [40, 41], "naem": [40, 41], "kmviewer": [40, 41], "stimulu": 40, "pnviewer": 41, "tmviewer": 41, "puls": [46, 47], "gre": [48, 475], "ac": [48, 468, 475], "uk": [48, 475], "physica": 48, "phy2": 48, "node173": 48, "htm": 48, "wave": [48, 75], "van": [48, 183, 475], "leer": 48, "twice": 48, "wrap": [48, 252, 431], "var2": [48, 104, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 461], "lost": 48, "annulu": [50, 51, 60, 61], "r0": [50, 51, 60, 61], "r1": [50, 51, 60, 61, 127], "nr": [50, 51, 60, 61, 225], "dr": [50, 51, 60, 61, 225], "valueleft": [50, 51, 52, 55, 57, 60, 61, 62, 63, 64, 66, 67, 78, 79, 81, 82, 91, 92, 95, 96, 98, 100, 101, 105, 191], "valueright": [50, 51, 52, 55, 57, 60, 61, 62, 63, 64, 66, 67, 79, 81, 82, 91, 92, 95, 96, 98, 100, 101, 105, 191], "impos": [50, 51, 52, 57, 60, 61, 86, 124, 151, 191, 196, 198, 199, 200, 347], "r_0": [50, 51, 60, 61, 152], "r_1": [50, 51, 60, 61], "drawback": [50, 51, 52, 60, 61, 191], "ei": [50, 51, 60, 61], "expi": [50, 51, 60, 61], "aa": [50, 51, 57, 58, 60, 61, 129, 130, 132, 347], "bb": [50, 51, 57, 58, 60, 61, 129, 130, 132], "analyticalarrai": [50, 51, 52, 53, 55, 57, 58, 60, 61, 62, 63, 64, 66, 67, 78, 92, 95, 96, 98, 100, 101, 105, 115, 117, 179, 191], "rratio": [51, 61], "arang": [51, 61, 114, 127, 176, 177, 347, 361, 398, 404, 411, 412, 416, 418, 445, 451, 452, 454, 455], "imath": 52, "u_x": [52, 57, 184, 191], "dd": [52, 53, 55, 57, 58, 62, 63, 64, 66, 67, 191], "valuebottom": [53, 58], "valuetop": [53, 58], "rtol": [53, 55, 57, 62, 63, 64, 66, 67, 68, 76, 81, 82, 86, 91, 98, 100, 108, 111, 112, 113, 114, 115, 116, 117, 136, 140, 168, 178, 179, 191, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "s_0": [57, 179, 471], "sourcecoeff": [57, 58, 168, 169], "s_c": 58, "pseudo": [60, 61], "allcloselist": 64, "str": [64, 114, 143, 144, 211, 226, 230, 256, 311, 342, 377, 381, 386, 390, 391, 394, 395, 396, 400, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 458, 461, 462, 463, 465, 466, 467], "1e4": 64, "arg0": 64, "arg1": [64, 478, 479], "append": [64, 194, 226, 381, 391, 395, 400], "2000": [67, 168, 191, 271, 272, 275, 279, 280, 281, 282, 283, 284, 288, 304, 305, 306, 308], "4d": 68, "precaut": 68, "convectioncoeff": [68, 111, 112, 113, 114, 116, 178, 191], "canalyt": 68, "c_": [68, 76, 109, 115, 117, 136, 140, 146, 165, 166, 178], "restol": 68, "anstol": 68, "alpha": [69, 82, 140, 146, 163, 164, 168, 169, 172, 173, 174, 176, 177, 192, 404, 416], "outflow": 69, "artifici": 69, "unitari": 69, "5000": [69, 452], "phi0": [69, 371], "fake": 69, "circular": [72, 73, 74, 124, 151, 152, 163, 164, 168, 176, 177, 347], "pmatrix": 72, "theta": [72, 136, 139, 140, 146, 151, 152, 163, 164, 168, 169, 172, 173, 174, 176, 177, 471], "q": [72, 141, 176, 177, 180, 187, 475], "00": 72, "mass": [72, 120, 165, 166, 183], "previous": [72, 139, 141, 146, 183, 226, 411], "splitext": [72, 164, 168, 169, 172, 173, 174], "__file__": [72, 140, 164, 168, 169, 172, 173, 174], "argmin": [72, 127], "rotationmatrix": 72, "gamma_prim": 72, "001": [72, 114, 390], "cellvolum": [72, 120, 151, 152, 158, 221, 226, 244, 418], "00025": 72, "triangl": [73, 251], "edg": [73, 74, 120], "plane": [73, 74, 96, 226], "timestepdur": [73, 74, 78, 79, 81, 82, 83, 84, 124, 125, 127, 151, 152, 153, 164, 168, 169, 172, 173, 174], "mytsv": [73, 74], "tsv": [73, 74, 114, 441], "variable_grad_x": [73, 74], "variable_grad_i": [73, 74], "975559734792414": [73, 74], "0755414402612554": [73, 74], "964844363287199": [73, 74], "229687917881182": [73, 74], "00757854476106331": [73, 74], "0442864953037566": [73, 74], "79191893162384": [73, 74], "0375859836421991": [73, 74], "773936613923853": [73, 74], "205560697612547": [73, 74], "0246775505084069": [73, 74], "771959648896982": [73, 74], "020853932412869": [73, 74], "723540342405813": [73, 74], "182589694334729": [73, 74], "223345558247991": [73, 74], "807931073108895": [73, 74], "203035857140125": [73, 74], "777466238738658": [73, 74], "0401235242511506": [73, 74], "00726763301939488": [73, 74], "775978916110686": [73, 74], "00412895434496877": [73, 74], "650055516507232": [73, 74], "183112882869288": [73, 74], "0220279064527904": [73, 74], "187563765977912": [73, 74], "012771874945585": [73, 74], "35707168379437": [73, 74], "056072788439713": [73, 74], "111223320911545": [73, 74], "679586798311355": [73, 74], "0911595298310758": [73, 74], "613455176718145": [73, 74], "0256182541329463": [73, 74], "78996770899909": [73, 74], "0173672729866294": [73, 74], "693887874335319": [73, 74], "00671109050419": [73, 74], "127611490372511": [73, 74], "703545986179876": [73, 74], "435813500559859": [73, 74], "635004192597412": [73, 74], "896203033957194": [73, 74], "00855563518923689": [73, 74], "888641841567831": [73, 74], "408558914368324": [73, 74], "877939107374768": [73, 74], "32195762184087": [73, 74], "22696791637322": [73, 74], "38212257821916": [73, 74], "51732949653553": [73, 74], "292889724306196": [73, 74], "854466141879776": [73, 74], "199715815696975": [73, 74], "359068256998365": [73, 74], "757882581524374": [73, 74], "323541041763627": [73, 74], "870534227755687": [73, 74], "0792631912863636": [73, 74], "459673905457569": [73, 74], "701526587772079": [73, 74], "417577664032421": [73, 74], "725460726303266": [73, 74], "119132299176163": [73, 74], "338256179134518": [73, 74], "523565732643067": [73, 74], "254030052182524": [73, 74], "923505840608445": [73, 74], "192224240688976": [73, 74], "87498754712638": [73, 74], "174119064688993": [73, 74], "836057900916614": [73, 74], "11590500805745": [73, 74], "211010116496191": [73, 74], "484106960369249": [73, 74], "0705987421869745": [73, 74], "319827850867342": [73, 74], "867894407968447": [73, 74], "051246727010685": [73, 74], "0221203060940465": [73, 74], "216026820080053": [73, 74], "0152729438559779": [73, 74], "341246696530392": [73, 74], "0538476142281317": [73, 74], "complic": [73, 74, 146], "horizont": [73, 74, 222, 225, 234, 237, 238, 243, 251, 254, 394], "phianalyt": [73, 74, 82], "x0": [73, 74, 165, 166], "erf": [73, 74, 78, 79, 82], "ticket": [73, 74, 347, 350, 351, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374, 391], "325": [73, 74], "7e": [73, 74, 82, 124, 165, 166, 179], "equal": [73, 74, 158, 165, 166, 178, 183, 251, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 471, 473], "quadrangl": 74, "recombin": 74, "035": 74, "biharmon": 75, "v_0": 75, "v_1": 75, "cross": [75, 411], "v1": [75, 129, 130, 132, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "eq0": 75, "vi": 75, "res0": 75, "res1": 75, "1e100": 75, "uncoupl": 75, "advantag": [75, 165, 166, 178, 192, 194, 471, 478], "simultan": [75, 163, 166, 176, 177, 458], "dictat": 75, "speci": [75, 109, 111, 114, 115, 116, 117, 140, 165, 166, 178, 472], "obvious": 75, "permitt": [76, 114, 117], "c_j": [76, 109, 111, 115, 117, 178], "th": [76, 111, 117], "valenc": [76, 109, 111, 112, 113, 114, 116, 117], "z_j": [76, 109, 117], "z_": [76, 109, 117], "electron": [76, 109, 114, 117, 178], "charg": [76, 109, 114, 117, 140, 141, 146], "densiti": [76, 82, 117, 139, 140, 141, 146, 165, 166, 178, 183, 184, 226, 436, 451, 475], "admit": [76, 117], "2x": [76, 117], "2e": [76, 78, 82, 111, 116, 117, 165, 166, 179], "next": [76, 82, 114, 117, 152, 394], "le": [76, 82, 116, 117, 127, 130, 132, 140, 169, 172, 173, 174, 176, 177, 178, 179, 180, 347, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "verifi": [76, 111, 112, 113, 115, 117, 165, 166, 183, 371], "attain": [76, 115, 117, 183], "initialvalu": 78, "epsi": 78, "triangular": [79, 96, 98, 105, 251], "gridmesh": 79, "trimesh": [79, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "othergridmesh": 79, "bigmesh": 79, "semi": [79, 82, 168, 169, 178, 179, 226], "late": [79, 379], "straight": [79, 82], "varanalyt": 79, "explicitdiffusionequ": 81, "assembl": [82, 179, 191], "uniti": [82, 473], "somefac": 82, "ever": [82, 192, 479], "differenc": [82, 351, 404, 407, 411, 412, 416, 418, 420, 432, 436, 439, 474], "phi_new": 82, "phi_old": 82, "eqx": 82, "delta": [82, 109, 115, 141, 146, 163, 165, 166, 176, 177, 179, 183, 371, 418, 471], "accomplish": 82, "tester": 82, "eqi": 82, "rerun": [82, 113], "crank": [82, 471], "nicholson": 82, "eqcn": 82, "drive": 82, "3e": [82, 114, 116, 140, 163, 164, 176, 177, 178, 183, 184], "omit": [82, 141, 179, 479], "del": [82, 143, 144, 415, 425, 434, 435, 440], "faceconstraint": 82, "lie": [82, 461, 471], "n_i": 82, "satisfi": [82, 120, 411, 473, 474], "satisfactori": 82, "fluxright": 82, "9l": 82, "And": [82, 114, 120, 381, 390], "transfer": [82, 140, 141, 146, 475], "_p": [82, 120, 347, 361, 471], "capac": 82, "phit": 82, "phif": 82, "relev": [82, 226], "alpha_fals": 82, "eqf": 82, "eqt": 82, "forward": 82, "told": [82, 191], "d_0": 82, "d0": 82, "exit": [82, 379, 380], "criteria": 82, "balanc": 82, "art": [82, 475], "pitfal": 82, "dissip": [82, 183], "stead": 82, "uniformli": 82, "vmatrix": 82, "1em": 82, "ddot": 82, "vdot": 82, "legitim": 82, "1e6": [82, 140], "myexampl": 82, "valuetopleft": [83, 84], "valuebottomright": [83, 84], "top": [83, 84, 140, 143, 144, 191, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 400, 411, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "corner": [83, 84, 113, 120, 168, 226, 251], "facestopleft": [83, 84], "facesbottomright": [83, 84], "500": [86, 114, 163, 164, 452], "alpha_1": 86, "alpha_2": 86, "alpha_3": 86, "alpha_4": 86, "alpha1": 86, "alpha2": 86, "alpha3": 86, "alpha4": 86, "total": [87, 109, 178, 251, 381, 390, 394], "initialarrai": [91, 124, 192], "gather": 92, "errorvar": 96, "nonorthovar": 96, "_nonorthogon": 96, "errorview": 96, "noview": 96, "rm": 97, "ravel": [104, 127], "xface": 105, "000000000000001": 105, "027": 105, "mesh2x1": 108, "paper": 109, "m_": [109, 115, 165, 166, 178, 179], "overbrac": [109, 178], "mu_j": [109, 178], "circ": [109, 115, 178], "w_j": [109, 178], "dielectr": 109, "ldot": [109, 178, 471], "d_": [109, 111, 120, 140, 146, 165, 166, 178, 347, 356, 361, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 471], "substack": [109, 111, 178], "c_k": [109, 111, 178], "c_i": [109, 111, 141, 178], "c_n": [109, 178], "mu_": [109, 115], "jn": [109, 115], "w_": [109, 115], "electromigr": [109, 113, 114, 116], "electrod": [109, 115, 140], "electrolyt": [109, 115, 139, 140, 141], "barrier": [109, 111, 112, 113, 114, 115, 116, 117, 165, 166, 178, 179, 381, 396], "solvent": [109, 111, 112, 113, 114, 115, 116, 178], "unresolv": 109, "stiff": 109, "intract": 109, "jj": 111, "summat": [111, 471], "exclud": [111, 163], "ternari": [111, 112, 113, 116], "componentvari": [111, 112, 113, 114, 115, 116, 117], "standardpotenti": [111, 112, 113, 114, 115, 116, 117, 178], "__class__": [111, 112, 113, 114, 115, 116, 117], "cn": [111, 112, 113, 115, 116, 178], "c1": [111, 112, 113, 116, 178, 415, 425, 434, 435, 440], "c2": [111, 112, 113, 116, 178], "interstiti": [111, 112, 113, 114, 115, 116, 117, 178], "regim": [111, 112, 113, 115, 136], "cj": [111, 112, 113, 114, 116, 117, 178], "cksum": [111, 112, 113, 114, 116, 178], "ckfacesum": [111, 112, 113, 114, 116], "ck": [111, 112, 113, 114, 116, 178], "3200": 111, "h82b89f7_0": 111, "ceas": 111, "ok": [111, 340], "tsupport": 112, "incomplet": [112, 325], "tit": 112, "mm": [112, 129, 130, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "mol": [112, 114, 141, 146, 165, 166, 178, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "pprime": [113, 114, 116, 165, 166, 178], "gprime": [113, 114, 116, 165, 166, 178], "counterdiffus": [113, 114, 116, 178], "phasetransform": [113, 114, 116, 178], "tol": 113, "input1dphasebinari": 114, "elphf0214": 114, "rt": 114, "nav": [114, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "kb": [114, 390], "molarvolum": [114, 140, 141, 146], "80000006366754e": 114, "faradai": [114, 140, 141, 146], "nm": 114, "1200": 114, "gradientenergi": [114, 115, 116, 178], "6e": [114, 140], "h2o": 114, "cnstandardpotenti": 114, "34139": 114, "7265625": 114, "cnbarrier": 114, "6e5": 114, "cnvalenc": 114, "so4": 114, "24276": 114, "6640625": 114, "000010414586295976": 114, "cu": 114, "7231": 114, "81396484375": 114, "5553718417909": 114, "33225": 114, "9453125": 114, "110723815414": 114, "78": 114, "eps0": [114, 390], "permittivityprim": [114, 115, 116], "rich": [114, 116, 178], "000111111503177394": 114, "249944439430068": 114, "249999982581341": 114, "input1d": 114, "setscal": 114, "enthalpi": [114, 115, 116, 165, 166, 178, 179], "mxi": [114, 115, 116, 192], "dmxidxi": [114, 115, 116], "s1": [114, 115, 116, 165, 166, 178, 179, 192], "s0": [114, 115, 116, 165, 166, 178, 179, 192], "phaseview": [114, 164, 168, 169], "concview": 114, "ylog": [114, 445], "potentialview": 114, "residualview": 114, "maxerror": 114, "safeti": [114, 340], "errcon": [114, 340], "89e": 114, "desiredtimestep": 114, "thistimestep": 114, "raw_input": [114, 194], "succeed": 114, "floatingpointerror": 114, "underflow": 114, "rearrang": [115, 192], "mu_n": [115, 178], "w_n": [115, 178], "inf": 115, "equilibr": [115, 179], "thick": [115, 179], "2w_n": 115, "makeequ": 116, "c_1": 116, "recreat": 116, "c3": 116, "reiniti": [116, 140], "c_2": 116, "c_3": 116, "malengi": 120, "bm": 120, "cage": 120, "ugent": 120, "rework": 120, "colloc": 120, "pressur": [120, 183, 475], "viscos": [120, 183, 184], "momentum": [120, 183], "ferzig": [120, 475], "peric": 120, "rossow": [120, 475], "extrapol": 120, "dolfyn": 120, "frequenc": 120, "band": [120, 471], "ident": [120, 164, 165, 166, 390, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "dl": [120, 124, 165, 166, 168, 390], "relax": [120, 179, 183, 184, 294, 296, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "pressurerelax": 120, "velocityrelax": 120, "pressurecorrect": 120, "xveloc": 120, "yveloc": 120, "decoupl": [120, 183], "xvelocityeq": 120, "yvelocityeq": 120, "guess": 120, "ast": 120, "That": 120, "a_p": [120, 471], "a_a": [120, 474], "_a": [120, 471], "v_p": [120, 364, 371, 404, 407, 411, 412, 415, 416, 418, 420, 431, 432, 434, 435, 436, 439, 471], "somehow": 120, "ap": [120, 347, 356, 361, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 471], "_facearea": [120, 183, 184], "_celldist": [120, 183, 184, 236, 237, 238], "pressurecorrectioneq": 120, "stagger": 120, "coloc": 120, "oscil": 120, "diamond": 120, "_l": 120, "_r": 120, "mathrm": 120, "avg": 120, "adjac": [120, 183, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439, 471], "expand": [120, 152, 165, 166], "arriv": 120, "formula": [120, 347, 361, 381, 390], "unphys": 120, "_facegradvari": 120, "contrvolum": 120, "slip": 120, "xmax": [120, 143, 144, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "ymin": [120, 143, 144, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "ymax": [120, 143, 144, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "underrelax": [120, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "star": 120, "xre": 120, "xmat": 120, "yre": 120, "asarrai": [120, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "takediagon": [120, 183, 184], "presgrad": 120, "facepresgrad": 120, "790867927": 120, "265072740929": 120, "150290488304": 120, "cfl": [124, 127, 140, 152, 165, 166, 183, 184], "distancetotravel": [124, 151], "adveqn": [124, 125, 127], "distancetravel": [124, 125], "1001": 124, "02e": 124, "interfaceposit": 125, "advectionequ": [125, 140, 151, 152, 153], "l_y": 127, "l_x": [127, 169], "r2": 127, "len": [127, 143, 144, 158, 221, 233, 244, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "logical_and": 127, "distancemov": 127, "m1": [129, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "evalcel": [129, 130, 132], "phix": [129, 130, 132], "phii": [129, 130, 132], "sqr": [129, 130, 132, 140], "v2": [129, 130, 132, 394, 411, 431], "v3": [129, 132, 394], "v4": [129, 132], "v5": 129, "trialvalu": 129, "succinctli": 131, "neg": [131, 140, 179, 381, 390, 394, 435, 471], "val": 132, "arr": [132, 381, 390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "deplet": 136, "c_t": 136, "xx": 136, "c_x": 136, "intertext": 136, "gg": 136, "cinf": 136, "ln": [136, 165, 166, 178, 183], "rateconst": [136, 140], "currenttim": 136, "totaltimestep": 136, "surfeqn": 136, "surfactantvar": [136, 140, 143, 144], "bulkeqn": 136, "bulkvar": [136, 140], "currenttimefunc": 136, "concentrationfunc": 136, "glue": 138, "fine": 138, "area": [138, 151, 183, 198, 436, 452, 471, 473], "ceac": [139, 146], "roughli": [139, 141, 146, 183], "publish": [139, 141, 146], "27": [139, 390, 475], "rungold": 139, "displayview": [139, 141, 146], "fals": [139, 141, 143, 144, 146, 179, 226, 335, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 379, 380, 381, 390, 391, 394, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 443, 444, 445, 451, 452, 474], "realist": [139, 146, 474], "depth": [139, 140, 141, 146, 225], "metal": [139, 140, 146], "ion": [139, 140, 141, 146, 176, 177, 442], "catalyst": [139, 140, 141, 146], "c_m": [139, 140, 141, 146, 178], "b_0": [139, 140, 146], "b_1": [139, 140, 146], "buri": 139, "k_c": 139, "consumptionrateconst": 139, "slight": 139, "taper": 139, "taperangl": 139, "Their": 140, "faradaysconst": [140, 141, 146], "6e4": 140, "gasconst": [140, 141, 146, 183, 184], "314": [140, 141, 146, 165, 166, 178, 183, 184], "transfercoeffici": [140, 146], "rateconstant0": [140, 146], "rateconstant3": [140, 146], "245e": 140, "catalystdiffus": [140, 141, 146], "sitedens": [140, 141, 146], "8e": 140, "cupric": 140, "metaldiffusioncoeffici": 140, "overpotenti": [140, 141, 146], "bulkmetalconcentr": 140, "catalystconcentr": [140, 146], "catalystcoverag": [140, 146], "flat": [140, 168, 381, 390], "copper": [140, 141], "currentdensity0": [140, 146], "currentdensity1": [140, 146], "cflnumber": 140, "numberofcellsinnarrowband": 140, "cellsbelowtrench": 140, "trenchdepth": [140, 141, 146], "aspectratio": [140, 141, 146], "trenchspac": [140, 141, 146], "boundarylayerdepth": [140, 141, 146], "hydrodynam": 140, "intention": [140, 146], "po": [140, 226], "ycell": 140, "xcell": 140, "buildmetaliondiffusionequ": 140, "narrowbandwidth": 140, "distancevar": [140, 143, 144, 435, 436], "bottomheight": 140, "trenchheight": 140, "trenchwidth": 140, "sidewidth": 140, "mark": [140, 475], "influenc": 140, "catalystvar": 140, "bulkcatalystvar": 140, "metalvar": 140, "depositionratevari": 140, "omega": [140, 141, 146], "molar": [140, 141, 146, 165, 166, 178], "i_0": [140, 141, 146], "eta": [140, 141, 146, 418], "ga": [140, 141, 146, 165, 166, 178], "empir": 140, "expoconst": 140, "tmp": [140, 381, 396, 411], "exchangecurrentdens": 140, "expo": [140, 168, 169, 176, 177], "currentdens": 140, "v_": [140, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "extensionequ": 140, "spread": [140, 179], "extensionvelocityvari": 140, "k_0": [140, 146], "k_3": [140, 146], "surfactantequ": [140, 151, 152, 153], "d_m": [140, 146], "metalequ": 140, "ionvar": 140, "depositionr": 140, "metalionmolarvolum": 140, "jump": 140, "langmuir": 140, "abil": 140, "buildsurfactantbulkdiffusionequ": 140, "bulkcatalystequ": 140, "zoomfactor": [140, 143, 144], "levelsetupdatefrequ": 140, "distanceequ": 140, "whole": [140, 381, 390], "filepath": 140, "join": [140, 471], "split": 140, "savetxt": 140, "loadtxt": [140, 164, 168, 169, 172, 173, 174], "acceler": [141, 475], "runlevel": 141, "25e": 141, "suppressor": 141, "absorb": 141, "unoccupi": 141, "cover": 141, "affin": 141, "preferenti": 141, "i_j": 141, "theta_j": 141, "alpha_j": 141, "vacant": 141, "substrat": 141, "theta_": 141, "kappa": [141, 165, 166, 179, 471], "theta_l": 141, "k_l": 141, "c_l": [141, 165, 166], "theta_a": 141, "k_a": 141, "c_a": 141, "theta_v": 141, "i_l": 141, "i_": 141, "rise": 141, "k_": 141, "a0": 141, "alpha_k": 141, "b_d": 141, "b_a": 141, "v_d": 141, "b_b": 141, "symbol": [141, 146], "mbox": [141, 146], "tabular": [141, 146], "rllr": [141, 146], "multicolumn": [141, 146], "i_a": 141, "texttt": [141, 146], "i0acceler": 141, "i0level": 141, "alpha_a": 141, "alphaacceler": 141, "alpha_": 141, "alphalevel": 141, "ionconcentr": 141, "d_i": 141, "iondiffus": 141, "acceleratorcoverag": 141, "acceleratorconcentr": 141, "d_a": 141, "gamma_a": 141, "kaccelerator0": 141, "alphaadsorpt": 141, "bd": 141, "levelsetvalu": [143, 144], "kwlimit": [143, 144, 163, 176, 177, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "_promptforopinion": [143, 144, 442, 445, 447, 448, 449, 451, 452, 454, 455], "bool": [143, 144, 196, 198, 199, 200, 226, 335, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 377, 381, 391, 394, 396, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452], "zmin": [143, 144, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 458, 461, 462, 463, 465, 466, 467], "colormap": [143, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452], "logarithm": [143, 381, 390, 443, 444, 445, 446, 447, 448, 449, 451, 452], "runsimpletrenchsystem": 146, "schemat": 146, "metalconcentr": 146, "metaldiffus": 146, "surfactantbefor": [151, 152], "surfactantaft": [151, 152], "initialsurfactantvalu": [151, 152], "initialradiu": [151, 152], "00813776069241": 151, "theta_0": 152, "totaltim": 152, "finalradiu": 152, "outward": 153, "initialsurfact": 153, "getcellvolum": 158, "vol": [158, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "numberofcel": [158, 164, 183, 184, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 391], "insid": [159, 226], "cool": [163, 176, 177], "melt": [163, 165, 166, 176, 177, 179], "supercool": [163, 176, 177], "circumst": [163, 176, 177, 183, 479], "pattern": [163, 176, 177], "lobkovski": [163, 164, 169, 176, 177, 475], "carter": [163, 164, 169, 176, 177, 475], "crystallin": [163, 176, 177], "regular": [163, 165, 166, 176, 177], "latent": [163, 165, 166, 176, 177, 179], "d_t": [163, 164, 176, 177], "heateq": [163, 176, 177], "tau_": [163, 164, 169, 172, 173, 174, 176, 177], "mathsf": [163, 176, 177, 179, 338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "kappa_1": [163, 164, 176, 177], "kappa_2": [163, 164, 176, 177], "beta": [163, 164, 168, 169, 176, 177, 179, 192, 404, 416], "015": [163, 164, 168, 169, 176, 177], "phisq": [163, 164, 176, 177], "dbetadpsi": [163, 176, 177], "ddia": [163, 176, 177], "doff": [163, 176, 177], "i0": [163, 176, 177], "i1": [163, 176, 177], "tau": [163, 164], "kappa1": [163, 164, 176, 177], "kappa2": [163, 164, 176, 177], "phaseeq": [163, 164, 165, 166, 168, 169, 172, 173, 174, 176, 177], "solidifi": [163, 164, 165, 166, 176, 177], "quench": [163, 165, 166, 176, 177, 179], "induc": [163, 165, 166, 176, 177], "granular": [163, 176, 177], "strive": [163, 176, 177, 191], "pylab": 163, "cm": [163, 165, 166, 176, 177, 179, 381, 390, 442, 443, 444, 446, 447, 448, 449], "hot": [163, 176, 177], "arm": [163, 176, 177], "fastest": [163, 176, 177], "steepest": [163, 176, 177], "lucid": 163, "seedcent": 164, "initialtemperatur": 164, "beta_": 164, "phi_i": [164, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "phi_x": [164, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "xi_x": 164, "xi_i": 164, "tempdiffusioncoeff": 164, "mvar": 164, "phasei": 164, "phasex": 164, "betapsi": 164, "dxi": 164, "nineti": 164, "anisotropysourc": 164, "temperatureeq": 164, "temperatureview": 164, "text_to_native_str": [164, 168, 169, 172, 173, 174], "testdata": [164, 168, 169, 172, 173, 174], "straightforward": [165, 166], "helmholtz": [165, 166, 179], "mathcal": [165, 166], "m_c": [165, 166], "f_a": [165, 166], "w_a": [165, 166], "f_b": [165, 166], "omega_": [165, 166], "omega_l": [165, 166], "calphad": [165, 166], "w_b": [165, 166], "yield": [165, 166, 183], "ideal": [165, 166], "l_a": [165, 166, 347], "t_m": [165, 166, 179], "likewis": [165, 166, 381, 390], "la": [165, 166], "2350": [165, 166, 179], "lb": [165, 166, 381, 390], "1728": [165, 166, 179], "tma": [165, 166], "tmb": [165, 166], "1358": [165, 166], "enthalpya": [165, 166], "enthalpyb": [165, 166], "nonumb": [165, 166, 178, 471], "l_b": [165, 166], "v_m": [165, 166], "mu_b": [165, 166], "mu_a": [165, 166], "vm": [165, 166], "deltaa": [165, 166], "deltab": [165, 166], "sigmaa": [165, 166], "sigmab": [165, 166], "9e": [165, 166], "betaa": [165, 166], "betab": [165, 166], "kappaa": [165, 166], "kappab": [165, 166], "wb": [165, 166, 390], "mphi": [165, 166, 178, 179], "dmphidphi": [165, 166, 178, 179], "deltachempot": [165, 166], "chempota": [165, 166], "chempotb": [165, 166], "fick": [165, 166], "phasetransformationveloc": [165, 166], "diffusioneq": [165, 166], "deduc": [165, 166], "liquidu": [165, 166, 178], "solidu": [165, 166, 178], "cl": [165, 166, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "fraction": [165, 166, 176, 177, 294], "lever": [165, 166], "cavg": [165, 166], "algebra": [165, 166, 179, 327, 468, 475], "reveal": [165, 166], "unchang": [165, 166, 191, 381, 390], "root": [165, 166, 381, 390, 394, 404, 412, 416, 418], "luck": [165, 166, 411], "jacobian": [165, 166, 336], "equilibriumjacobian": [165, 166], "fsolv": [165, 166], "csroot": [165, 166], "clroot": [165, 166], "func": [165, 166, 386], "fprime": [165, 166], "uncondition": [165, 166], "e5": [165, 166], "asymmetr": [165, 256], "therefor": [165, 474], "phaser": 165, "diffr": 165, "stationari": [165, 166], "overal": [165, 166], "ten": [165, 166], "idea": [165, 166, 478], "neglig": [165, 166], "centi": [165, 166], "meter": [165, 166], "d_c": 166, "dc": 166, "dphi": 166, "initialr": 166, "principl": 166, "phasetransientcoeff": [168, 169], "thetasmallvalu": [168, 169, 176, 177], "1e5": [168, 169, 176, 177], "1e3": [168, 169, 176, 177], "thetatransientcoeff": [168, 169], "008": [168, 169, 176, 177], "held": [168, 169, 183, 436], "isotherm": [168, 169, 475], "randomli": [168, 452], "0001": [168, 176, 177], "thetavalu": 168, "segment": [168, 251], "buildphaseequ": 168, "mphivar": [168, 169], "thetamag": [168, 169, 176, 177], "implicitsourc": [168, 169], "et": [168, 169, 176, 177, 183, 475], "modular": [168, 169, 176, 177, 431], "buildthetaequ": 168, "phasemod": [168, 169, 176, 177], "phasemodsq": [168, 169], "pfunc": [168, 169, 176, 177], "phasefac": [168, 169], "phasesq": [168, 169], "gradmag": [168, 169], "igamma": [168, 169, 176, 177], "thetagraddiff": [168, 169], "thetaeq": [168, 169, 176, 177], "meaning": [168, 192], "thetaprod": 168, "thetaproductview": [168, 169], "disk": [168, 407], "recal": 168, "newphas": 168, "newtheta": 168, "newthetaeq": 168, "newphaseeq": 168, "m_1": [169, 172, 173, 174], "confin": 169, "angl": [169, 381, 390], "halv": 169, "misorient": [172, 173, 174], "foral": [172, 174, 347], "t_0": [176, 177], "tau_phas": [176, 177], "tau_theta": [176, 177], "beta_theta": [176, 177], "gradmagtheta": [176, 177], "v_theta": [176, 177], "d_theta": [176, 177], "numse": [176, 177], "12345": [176, 177, 394], "cx": [176, 177], "cy": [176, 177], "orientationview": [176, 177], "room": [176, 177], "stolen": [176, 177], "make_ax": [176, 177], "ec1cd2567521c105a451ce15e06de10715f8b54d": [176, 177], "lib": [176, 177], "l838": [176, 177], "pb": [176, 177], "get_posit": [176, 177], "frozen": [176, 177], "pad": [176, 177], "x1": [176, 177], "pb1": [176, 177], "pbx": [176, 177], "pbcb": [176, 177], "splitx": [176, 177], "panchor": [176, 177], "set_posit": [176, 177], "set_anchor": [176, 177], "gnomon": [176, 177], "get_figur": [176, 177], "add_ax": [176, 177], "85": [176, 177], "polar": [176, 177], "set_thetagrid": [176, 177], "set_theta_zero_loc": [176, 177], "set_theta_direct": [176, 177], "set_rgrid": [176, 177], "radii": [176, 177], "_orientation_and_phase_to_rgb": [176, 177], "set_facecolor": [176, 177], "set_edgecolor": [176, 177], "_reshap": [176, 177], "staticmethod": [176, 177], "hsv": [176, 177], "hsv_to_rgb": [176, 177], "_data": [176, 177], "rgb": [176, 177], "hue": [176, 177], "set_data": [176, 177], "pyplot": [176, 177, 442], "figaspect": [176, 177, 443, 444, 446, 447, 448, 449, 451, 452], "figsiz": [176, 177], "timer": [176, 177], "3f": [176, 177], "fontsiz": [176, 177], "add_subplot": [176, 177], "total_tim": [176, 177], "save_interv": [176, 177], "002": [176, 177, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "save_at": [176, 177], "set_text": [176, 177], "c_0": 178, "c0": [178, 434], "circ_j": 178, "tilt": 178, "_0": 178, "f_j": 178, "sl": 178, "circ_n": 178, "cook": 178, "rhol": 178, "arrang": [178, 183, 184, 255], "d_j": 178, "l_v": 179, "0025": 179, "lv": 179, "atom": 179, "simplest": 179, "surpris": 179, "inspect": 179, "uninterest": 179, "resolut": 179, "reintroduc": 179, "exploit": [179, 468], "s_1": [179, 471], "advic": 179, "tangent": [179, 381, 390, 394], "appreci": [179, 192, 193], "focus": 179, "recast": 179, "redeclar": 179, "nickel": 179, "sigma": [179, 418], "viewer2": [179, 442], "redefin": 179, "quintic": 179, "polynomi": 179, "chose": 179, "agreement": 179, "tanhresidu": 179, "leastsq": 179, "v_fit": 179, "d_fit": 179, "msg": 179, "symmetr": [180, 256, 292, 293, 294, 295, 296, 329, 330, 331], "quadrilater": 180, "mirror": 180, "testresult": 180, "bottomright": 180, "topleft": 180, "topright": 180, "vapor": 183, "der": 183, "waal": 183, "molarweight": [183, 184], "ee": [183, 184], "455971": [183, 184], "650": [183, 184], "vbar": [183, 184], "liquiddens": [183, 184], "7354": [183, 184], "3402662299995": [183, 184], "vapordens": [183, 184], "855803327810008": [183, 184], "u_j": 183, "u_i": [183, 184], "u_iu_j": 183, "nu": 183, "nc": [183, 184], "densityprevi": [183, 184], "velocityprevi": 183, "potentialnc": [183, 184], "freeenergi": [183, 184], "u_": 183, "d_f": [183, 471, 474], "overlin": 183, "partial_": 183, "overbar": 183, "matrixdiagon": [183, 184], "correctioncoeff": [183, 184], "masseqn": [183, 184], "lh": 183, "momentumeqn": 183, "superscript": [183, 471], "potentialderiv": [183, 184], "potentialnceqn": [183, 184], "quirk": 183, "amplitud": [183, 418], "totalstep": [183, 184], "1e10": 183, "elegantli": 183, "initialresidu": [183, 184], "previousresidu": [183, 184], "5e9": 183, "velocityx": 184, "velocityi": 184, "velocityvector": 184, "velocityxprevi": 184, "velocityyprevi": 184, "matxx": 184, "matyi": 184, "matxi": 184, "matyx": 184, "momentumxeqn": 184, "momentumyeqn": 184, "totalsweep": 184, "stress": [191, 472], "slightli": [191, 411], "inconveni": [191, 192, 193], "walk": 191, "getfacesleft": 191, "getfacesright": 191, "steadyconvectiondiffusionscequ": 191, "stdyconvdiffscequ": 191, "traceback": [191, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 351, 358, 359, 362, 366, 373, 374, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "convectionschem": 191, "nameerror": 191, "getcellcent": [191, 192, 193], "grid2dgistview": 191, "thrown": 191, "biggest": 191, "assembli": 191, "took": 191, "gistview": 191, "gist1dview": 191, "hesit": [191, 192, 193], "agre": [192, 193], "assur": [192, 193], "casual": [192, 193], "superced": [192, 193], "1_2": 192, "summar": [192, 193], "tip": [192, 193], "seemingli": [192, 411], "almost": [192, 471], "blindli": 192, "worth": 192, "reorient": 192, "deltax": 192, "deltai": 192, "vectorfacevari": 192, "vectorfield": 192, "hackish": 192, "_take": 192, "quietli": 192, "getexteriorfac": 192, "getcent": 192, "getarithmeticfacevalu": 192, "convolut": 192, "cellfilt": 192, "positivecel": 192, "getfac": 192, "deprecationwarn": [192, 193, 379, 386], "indefinit": [192, 193], "breviti": 192, "feel": [192, 193], "whichev": [192, 193], "comfort": [192, 193], "clariti": 192, "trump": 192, "orthodoxi": 192, "temptat": 192, "2_1": 193, "3_0": 193, "reconsid": 193, "gmshimporter2d": 193, "gmshimporter3d": 193, "gmshimporter2din3dspac": 193, "fv": [194, 351, 358, 359, 362, 366, 373, 374, 473], "msed": 194, "mml": 194, "ubiquit": 194, "proprietari": 194, "expens": 194, "savvi": 194, "repr": [196, 197, 198, 199, 200, 211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 288, 292, 293, 294, 295, 296, 301, 304, 305, 306, 307, 308, 311, 315, 316, 317, 318, 319, 320, 321, 322, 334, 335, 336, 337, 342, 369, 383, 384, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441], "mathtt": [199, 338, 394], "g_": 199, "odd": 200, "numberofvari": 203, "numberofequ": 203, "equationindex": 203, "varindex": 203, "_representationclass": [211, 230, 231, 232, 233, 234, 235, 251, 252, 253, 254, 255], "_abstractrepresent": [211, 252], "_topologyclass": [211, 230, 231, 232, 233, 234, 235, 251, 252, 253, 254, 255], "_abstracttopologi": [211, 252], "among": 211, "dataset": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 441], "basemesh": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "translatedmesh": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "addedmesh": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "provis": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "consolid": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "triaddedmesh": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "83333333": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "16666667": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "66666667": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "33333333": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "threedbasemesh": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "threedsecondmesh": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "threedaddedmesh": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "invalidmesh": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "match": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 394], "helper": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 256, 259, 260, 261, 311, 315, 316, 317, 342, 383, 384, 441, 456], "unsupport": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "operand": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 381, 390], "nonzero": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255], "attribut": [211, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 251, 252, 253, 254, 255, 256, 381, 391, 396], "delattr": [211, 226, 230, 256, 311, 342, 441], "getattr": [211, 226, 230, 256, 311, 342, 441], "setattr": [211, 226, 230, 256, 311, 342, 441], "tb": [211, 226, 230, 256, 311, 342, 441], "__traceback__": [211, 226, 230, 256, 311, 342, 441], "indexerror": [221, 233, 244, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 441], "dilat": [221, 222, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 251], "dilatedmesh": [221, 222, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 251], "mismatch": [221, 222, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 251, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "broadcast": [221, 222, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 251, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "rectangular": [222, 224, 234, 235, 237, 238, 254, 255], "radial": [224, 225], "axial": 224, "lr": 225, "count": [225, 377, 394, 395], "coorddimens": 226, "nproc": [226, 381, 391, 396], "squaredcircl": 226, "compass": 226, "label": [226, 385], "north": 226, "west": 226, "nw": 226, "parametr": 226, "physicalcel": 226, "physicalfac": 226, "bkg": 226, "monoton": 226, "trisquar": 226, "std1": 226, "std2": 226, "ii": [226, 475], "characterist": [226, 473], "topolog": 226, "fileistemporari": 226, "gmshoutput": 226, "respons": 226, "constructor": 226, "multilin": 226, "todo": 226, "truncat": [226, 441], "cellstovertic": 226, "recov": 226, "vertexcoord": [226, 230, 231, 232], "cellstovertid": 226, "cellstofac": 226, "isol": 226, "nodespath": 226, "elemspath": 226, "namesfil": 226, "physicalnam": 226, "facestovertexid": 226, "cellstofaceid": 226, "cellglobalidmap": 226, "ghostcellglobalidmap": 226, "trust": [226, 478], "retriev": [226, 478], "facevertexid": [230, 231, 232], "_meshrepresent": [230, 231, 232], "_meshtopologi": 230, "_mesh1dtopologi": 231, "_mesh2dtopologi": [232, 251], "_builderclass": 233, "_nonuniformgrid1dbuild": 233, "_grid1drepresent": [233, 253], "_grid1dtopologi": [233, 253], "_grid2drepresent": [234, 251, 254], "_grid2dtopologi": [234, 254], "_grid3drepresent": [235, 255], "_grid3dtopologi": [235, 255], "xz": [235, 255], "yz": [235, 255], "subcategori": [235, 255], "facecellid": [236, 237, 238], "fill": [236, 237, 238], "999": 236, "_celltocelldist": [236, 237, 238], "_cellvertexid": [236, 237, 238], "_baseperiodicgrid2d": 237, "_baseperiodicgrid3d": 238, "rand": 243, "skew": 243, "hereaft": 251, "calc": 253, "machineri": 256, "petsc4py_comm": 260, "comm_world": 260, "intoler": 262, "Not": [262, 269, 273, 274, 285, 301, 307, 311, 336, 337, 340, 381, 390, 431], "biconjug": [263, 292, 318], "_scipysolv": [273, 285, 307], "pcg": [275, 282, 296], "smoothed_aggregation_solv": 277, "max_it": [279, 280, 281, 282, 283, 284], "block_jacobi": [279, 280, 281, 282, 283, 284], "aggreg": [279, 328, 329, 330], "amg": [279, 280], "jacobi": [279, 280, 281, 283, 284, 293, 294, 296, 298, 300, 326], "pbicgstab": 281, "alia": [282, 363, 380], "fgmre": 283, "preconditioner_typ": 287, "config_dict": 288, "smoother_typ": 290, "variant": 292, "bicg": 292, "itsolv": [292, 293, 296], "maxiter": [295, 321], "pivot": 295, "superlu": 295, "ssor": [296, 300], "_pysparsematrixsolv": 301, "_scipykrylovsolv": [304, 305, 306, 308], "bicgstab": 304, "unsatisfactori": 311, "wignor": 311, "abort": 311, "werror": 311, "relr": 311, "linearxsolv": 311, "obj": [316, 479], "m4count": 316, "mpi4py_comm": 316, "get_rank": 316, "get_siz": 316, "assert": 316, "ameso": 321, "klu": 321, "choleski": 325, "ifpack": 325, "multilevel": [327, 328, 330, 331, 332], "nearli": 330, "gauss": [331, 418], "seidel": 331, "aztecoo": 334, "mloption": 335, "testunsupport": 335, "ml": [335, 390], "setparameterlist": 335, "printingopt": 336, "solveropt": 336, "linearsolveropt": 336, "linesearchopt": 336, "directionopt": 336, "newtonopt": 336, "steppyngstoun": [338, 341], "_1": [338, 394], "_2": [338, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 394], "prior": 338, "decreas": 338, "vardata": [339, 340, 341], "075": 339, "pid": 339, "articl": 339, "pidpap": 339, "author": 339, "valli": 339, "carei": 339, "coutinho": 339, "strategi": 339, "incompress": [339, 475], "reaction": 339, "meth": [339, 478], "pgrow": 340, "pshrink": 340, "000189": 340, "rkq": 340, "rung": 340, "kutta": 340, "incorpor": 347, "u_p": [347, 361], "sum_a": [347, 361], "phi_a": [347, 351, 356, 358, 359, 361, 362, 366, 373, 471], "l_p": 347, "_matrixclass": [347, 361], "_buildmatrix": [347, 361], "stand": [347, 361], "harpsichord": [347, 361], "sing": [347, 361], "vel": [347, 361], "quadrat": 347, "__advectionterm": 347, "spot": 347, "123105625618": 347, "0201715476598": 347, "hash": [347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "__nondiffusionterm": [347, 350, 351, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374], "negat": [347, 350, 351, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374], "__unaryterm": [347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374], "getrhsvector": [347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "residualfn": [347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "sovler": [347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "l2": [347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "cacheresidu": [347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "cacheerror": [347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "residualvector": [347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "errorvector": [347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374], "_nondiffusionterm": [350, 360, 361], "_abstractconvectionterm": [351, 358, 359, 362, 366, 373, 374], "simeq": [351, 356, 358, 359, 362, 364, 366, 371, 373, 471], "alpha_f": [351, 358, 359, 362, 366, 373, 471, 474], "central": [351, 474], "vcv": [351, 358, 359, 362, 366, 373, 374], "vfv": [351, 358, 359, 362, 366, 373, 374], "__convectionterm": [351, 358, 359, 362, 366, 373, 374], "_arithmeticcelltofacevari": [351, 358, 359, 362, 366, 373, 374], "m2": [351, 358, 359, 362, 366, 373, 374], "cv2": [351, 358, 359, 362, 366, 373, 374], "vcv2": [351, 358, 359, 362, 366, 373, 374], "vfv2": [351, 358, 359, 362, 366, 373, 374], "_abstractdiffusionterm": [354, 355, 356], "_abstractupwindconvectionterm": [358, 373], "_asymmetricconvectionterm": [359, 362, 366], "hybrid": [362, 474], "s_p": 364, "_explicitsourceterm": 367, "newton": 367, "rho_": [371, 471], "phi_0": 371, "relaxationfactor": 371, "skipwarn": 377, "glob": 377, "optionflag": 377, "extraglob": 377, "raise_on_error": 377, "exclude_empti": 377, "_selectivedoctestpars": 377, "reachabl": 377, "__doc__": 377, "__test__": 377, "__dict__": 377, "slate": 377, "stuff": 377, "iff": 377, "argv": [377, 379, 380, 456], "summari": 377, "dont_accept_true_for_1": 377, "dont_accept_blanklin": 377, "normalize_whitespac": 377, "ellipsi": 377, "ignore_exception_detail": 377, "report_udiff": 377, "report_cdiff": 377, "report_ndiff": 377, "report_only_first_failur": 377, "postmortem": 377, "defaulttest": [379, 380], "testrunn": [379, 380], "testload": [379, 380], "loader": [379, 380], "failfast": [379, 380], "catchbreak": [379, 380], "buffer": [379, 380, 381, 396], "tb_local": [379, 380], "inabl": 379, "kw": 379, "ie": 379, "foo": 379, "bunch": 379, "konrad": [381, 390], "hinsen": [381, 390], "physicalquant": [381, 390], "angular": [381, 390], "radian": [381, 390], "deg": [381, 390], "03490659": [381, 390], "05235988": [381, 390], "06981317": [381, 390], "08726646": [381, 390], "003": [381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "004": [381, 390], "005": [381, 390], "isinst": [381, 390, 394], "facilit": [381, 390], "inch": [381, 390], "round": [381, 390], "034907": [381, 390], "ft": [381, 390], "remaind": [381, 390], "hz": [381, 390], "ev": [381, 390], "8288": [381, 390], "cosin": [381, 390], "57079632679": [381, 390], "rad": [381, 390, 411], "31695789692": [381, 390], "sine": [381, 390], "arctang": [381, 390], "785398": [381, 390], "380506": [381, 390], "549306144334": [381, 390], "smallest": [381, 390], "3j": [381, 390], "ohm": [381, 390], "adjust": [381, 390, 431], "hartre": [381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "kcal": [381, 390], "1694": [381, 390], "27557621": [381, 390], "sctype": [381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "obj2sctyp": [381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "si": [381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "7088849": [381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "01085": [381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "kg": [381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "degc": [381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "degf": [381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "314159": [381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "59": [381, 390, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "302585": [381, 390], "0254": [381, 390], "opposit": [381, 390, 394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "typecod": [381, 390], "0762": [381, 390], "0508": [381, 390], "illeg": [381, 390], "expon": [381, 390, 472], "761594155956": [381, 390], "max_line_width": [381, 390, 394], "suppress_smal": [381, 390, 394], "14159": [381, 390], "encod": [381, 396], "newlin": [381, 396], "suffix": [381, 396], "namedtemporaryfil": [381, 396], "tmpfile": [381, 396], "procid": [381, 391, 396], "seek": [381, 396], "mkstemp": [381, 396], "duck": [381, 391, 396], "tempfil": [381, 391, 396], "xml": [381, 400], "svnpath": [381, 400], "svn": [381, 400], "stall": 385, "old_nam": 386, "new_nam": 386, "old_func": 386, "dirac": [390, 468], "cnr": [390, 468], "orlean": [390, 468], "fr": [390, 468], "2002": [390, 475], "codata": 390, "british": 390, "appendix": 390, "sr": 390, "da": 390, "bq": 390, "gy": 390, "lm": 390, "pa": 390, "sv": 390, "60217653e": 390, "acr": 390, "4046": 390, "8564224": 390, "amu": 390, "6605402e": 390, "ang": 390, "atm": 390, "101325": 390, "100000": 390, "bohr": 390, "291772081145378e": 390, "btui": 390, "1055": 390, "05585262": 390, "299792458": 390, "cal": 390, "cali": 390, "1868": 390, "0000000000000003e": 390, "cup": 390, "00023658825600000004": 390, "86400": 390, "017453292519943295": 390, "5555555555555556": 390, "degr": 390, "00010000000000000003": 390, "dyn": 390, "85418781762039e": 390, "erg": 390, "floz": 390, "9573532000000005e": 390, "3048": 390, "galuk": 390, "004546090000000002": 390, "galu": 390, "0037854120960000006": 390, "gn": 390, "80665": 390, "grav": 390, "6742e": 390, "3600": 390, "35974417680088e": 390, "hbar": 390, "0545716823644548e": 390, "hpel": 390, "746": 390, "hplanck": 390, "6260693e": 390, "hpuk": 390, "745": 390, "025400000000000002": 390, "invcm": 390, "9864456023253395e": 390, "3806505e": 390, "4184": 390, "kcali": 390, "4186": 390, "ken": 390, "0010000000000000002": 390, "45359237": 390, "lyr": 390, "9460730472580800": 390, "me": 390, "1093826e": 390, "mi": 390, "1609": 390, "344": 390, "0000000000000002e": 390, "mp": 390, "67262171e": 390, "mu0": 390, "2566370614359173e": 390, "0221415e": 390, "nmi": 390, "1852": 390, "oz": 390, "028349523125": 390, "6894": 390, "75729316836": 390, "pt": 390, "0004731765120000001": 390, "0009463530240000002": 390, "tbsp": 390, "4786766000000002e": 390, "ton": 390, "907": 390, "18474": 390, "torr": 390, "133": [390, 475], "32236842105263": 390, "tsp": 390, "9289220000000005e": 390, "wk": 390, "604800": 390, "yd": 390, "9144000000000001": 390, "yr": 390, "31536000": 390, "yrjul": 390, "31557600": 390, "yrsid": 390, "31558152": 390, "959999997": 390, "array_lik": [390, 394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 446, 447, 451], "nine": 390, "_findunit": 390, "555556": 390, "meterpersecond": 390, "fileobject": 391, "mesh_unmangl": 391, "cpickl": 391, "decompress": 391, "improp": 391, "taxicab": 394, "manhattan": 394, "_j": 394, "euclidean": 394, "underset": 394, "logic": [394, 404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "flatten": 394, "a1": 394, "a2": 394, "_variableclass": 394, "max_mem": 394, "100000000": 394, "m0": [394, 404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "maskvalu": 394, "999999": 394, "masked_valu": 394, "mayb": 394, "3x3": 394, "fill_valu": 394, "array_output": 394, "textual": 394, "bracket": 394, "subset": [394, 473], "rightmost": 394, "estat": 394, "2345": 394, "23345": 394, "123456": 394, "charact": 394, "output_line_width": 394, "decim": 394, "float_output_precis": 394, "float_output_suppress_smal": 394, "unus": 394, "optpars": 395, "store_tru": 395, "store_fals": 395, "store_const": 395, "callback": 395, "argpars": 395, "absent": [395, 398], "fear": 396, "inexplic": 398, "additionvector": 398, "thought": [398, 473], "shim": 399, "kwd": [404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "int_0": [404, 416], "sake": [404, 412, 416, 418], "determinist": [404, 412, 416, 418], "histogram": [404, 412, 416, 418, 420, 439], "gaussian": [404, 412, 416, 418], "betadist": 404, "histoplot": [404, 412, 416, 418, 439], "stderr": [404, 412, 416], "fab": [404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "weird": [404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "truth": [404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "ambigu": [404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "nearestcellid": [404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "ncell": [404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "npoint": [404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "whose": [404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440, 479], "sliceabl": [404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "1000000000000000000": [404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "phi_1": [404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "phi_2": [404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "f2": [404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "interiorfac": [404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "opshap": [404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "operatorclass": [404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "otim": [404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "461538461538": [404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "phi1": [404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "phi2": [404, 407, 411, 412, 416, 418, 420, 431, 432, 436, 439], "mpitutori": [404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "allreduc": [404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439], "assertionerror": [404, 407, 411, 412, 416, 418, 420, 432, 436, 439], "longhand": [404, 407, 411, 412, 415, 416, 418, 420, 425, 431, 432, 434, 435, 436, 439, 440], "unpickledvar": 407, "dim": [407, 415, 425, 431, 432, 434], "_calctrialvalu": 411, "patholog": 411, "vbl": 411, "vbr": 411, "vml": 411, "crossprod": 411, "dsq": 411, "vmr": 411, "extensionvari": 411, "extensionvar": 411, "tmp1": 411, "tmp2": 411, "9544": 411, "5456": 411, "perpendicular": 411, "30473785": 411, "49923009": 411, "35355339": 411, "45118446": 411, "97140452": 411, "76215286": 411, "33721352": 411, "trial": 411, "didn": 411, "58578644": 411, "08578644": 411, "85136395": 411, "29289322": 411, "54389939": 411, "49547948": 411, "3rd": 411, "7th": 411, "15th": 411, "chanc": 411, "circumfer": 411, "57984690073": 411, "expdist": 412, "gammadist": 416, "langl": 418, "rangl": 418, "uncorrel": 418, "k_b": 418, "sigmasqrd": 418, "kboltzmann": 418, "sampl": 420, "bin": 420, "get_se": 432, "_celltofacevari": 434, "conservativesurfactantequ": 435, "numberoffac": 435, "volumetr": 436, "mole": 436, "941": 436, "_interfacesurfactantvari": 436, "some1dvar": 441, "plt": 442, "ax1": 442, "subplot": 442, "ax2": 442, "ax3": 442, "mesh1": 442, "xvar": [442, 445, 454, 455], "viewer1": 442, "mesh2": 442, "xyvar": [442, 447, 448, 449, 451, 452, 454, 455], "mesh3": 442, "viewer3": 442, "orrd": 442, "kval": [442, 445, 447, 448, 449, 451, 452, 454, 455], "jet": [442, 443, 444, 446, 447, 448, 449], "xlog": 445, "ocean": [445, 447, 448, 449, 451, 452], "synonym": [445, 471], "line2d": 445, "draw": [446, 447], "1002": [447, 448, 449, 454, 455], "polycollect": 449, "sparsiti": [450, 452], "linewidth": 451, "arrows": 451, "arrowstyl": 451, "minlength": 451, "stream": 451, "griddata": 451, "convex": 451, "hull": 451, "concav": 451, "cla": 451, "overlaid": 451, "arrow": [451, 452], "goe": [451, 452], "streamlin": 451, "30x30": 451, "linearli": [451, 471], "travers": 451, "density_x": 451, "density_i": 451, "lumin": 451, "stretch": 451, "fancyarrowpatch": 451, "quiver": 452, "xyzvar": [454, 455], "poll": 456, "poll_fil": 456, "Or": 456, "reader": 456, "fname": 456, "subview": 458, "866": 461, "stdout": 461, "var_gauss_grad_x": 461, "var_gauss_grad_i": 461, "33333333333333": 461, "wikipedia": 468, "wiki": 468, "continuous_integr": 468, "eponym": 468, "cad": 468, "javascript": 468, "appl": 468, "predecessor": 468, "ye": 468, "forum": 468, "archaic": 468, "pydata": 468, "cosc": 468, "canterburi": 468, "greg": [468, 475], "ew": 468, "slowli": 468, "3000": 468, "plone": 468, "pocoo": 468, "microsoft": 468, "polyhedr": 471, "surround": 471, "conjunction": 471, "omega_a": 471, "omega_1": 471, "omega_2": 471, "omega_3": 471, "omega_4": 471, "theorem": 471, "specificconvectionterm": 471, "estim": 471, "increasingli": 471, "gamma1": 471, "nicolson": 471, "reinforc": 471, "gamma_2": [471, 472], "gamma2": 471, "a_": 471, "b_p": 471, "rho_p": 471, "f_f": [471, 474], "biolog": 472, "inde": 472, "proven": 472, "variat": 472, "ph": 472, "lambda_i": 472, "react": [472, 475], "divers": 472, "electr": 472, "heart": 472, "tissu": 472, "schr": 472, "dinger": 472, "unknown": 472, "fickian": 472, "gamma_3": 472, "spectral": 472, "chapter": [473, 476, 477, 480], "phd": [473, 475], "patankar": [473, 475], "versteeg": [473, 475], "malalasekera": [473, 475], "fem": 473, "fdm": 473, "analog": 473, "\u00e9": 474, "clet": 474, "p_f": 474, "smear": 474, "rightarrow": 474, "overcom": 474, "inaccuraci": 474, "beckermann": 475, "karma": 475, "1146": 475, "annurev": 475, "matsci": 475, "101901": 475, "155803": 475, "chen": 475, "mdoel": 475, "112001": 475, "132041": 475, "contemporari": 475, "david": 475, "jonathan": 475, "coat": 475, "biomaterialia": 475, "604": 475, "jan": 475, "actbio": 475, "019": 475, "william": 475, "nov": 475, "hangart": 475, "hamadani": 475, "xu": 475, "interdigit": 475, "thin": 475, "film": 475, "heterojunct": 475, "073514": 475, "3561487": 475, "huber": 475, "superconform": 475, "submicron": 475, "016102": 475, "2001": 475, "sethian": 475, "cambridg": 475, "1996": 475, "scott": 475, "chacon": 475, "apress": 475, "guido": 475, "rossum": 475, "tut": 475, "pilgrim": 475, "isbn": 475, "1590593561": 475, "diveintopython": 475, "ref": 475, "alexand": 475, "craig": 475, "materialia": 475, "6035": 475, "6058": 475, "2003": 475, "s1359": 475, "6454": 475, "00388": 475, "swirl": 475, "turbul": 475, "greenwich": 475, "1998": 475, "gala": 475, "eprint": 475, "6371": 475, "franci": 475, "1980": 475, "longman": 475, "technic": 475, "1995": 475, "mattiussi": 475, "309": 475, "1997": 475, "epfl": 475, "ch": 475, "jcp1997": 475, "nterfaci": 475, "1958": 475, "hermodynam": 475, "1121": 475, "1124": 475, "1959": 475, "ucleat": 475, "elder": 475, "thornton": 475, "hoyt": 475, "philosoph": 475, "magagazin": 475, "164": 475, "1080": 475, "14786435": 475, "506427": 475, "quilibrium": 475, "69": 475, "021603": 475, "arxiv": 475, "cond": 475, "mat": 475, "0308173": 475, "inet": 475, "021604": 475, "0308179": 475, "saul": 475, "teukolski": 475, "vetterl": 475, "brian": 475, "flanneri": 475, "1999": 475, "peri": 475, "\u0107": 475, "springer": 475, "blend": 475, "185": 475, "s0021": 475, "9991": 475, "00059": 475, "c302": 475, "c310": 475, "1562598": 475, "mcf": 475, "adden": 475, "7424": 475, "7439": 475, "1992": 475, "microsegreg": 475, "metallurgica": 475, "689": 475, "ward": 475, "inst": 475, "winter2004": 475, "if12": 475, "pg46": 475, "capit": 478, "resid": 478, "oop": 478, "arg2": [478, 479], "unfamiliar": 478, "reorder": 478, "latter": 478, "famili": 478, "descend": 478, "myobjectderivedfrombas": [478, 479], "arg3": 479, "__": 479, "somethingels": 479, "val1": 479, "val2": 479, "wherea": 479}, "objects": {"": [[24, 0, 0, "-", "examples"], [194, 0, 0, "-", "fipy"], [476, 0, 0, "-", "package"], [18, 7, 1, "cmdoption-cache", "--cache"], [23, 7, 1, "cmdoption-home", "--home"], [18, 7, 1, "cmdoption-inline", "--inline"], [18, 7, 1, "cmdoption-lsmlib", "--lsmlib"], [18, 7, 1, "cmdoption-no-cache", "--no-cache"], [18, 7, 1, "cmdoption-no-pysparse", "--no-pysparse"], [23, 7, 1, "cmdoption-prefix", "--prefix"], [18, 7, 1, "cmdoption-pyamg", "--pyamg"], [18, 7, 1, "cmdoption-pyamgx", "--pyamgx"], [18, 7, 1, "cmdoption-pysparse", "--pysparse"], [18, 7, 1, "cmdoption-scipy", "--scipy"], [18, 7, 1, "cmdoption-skfmm", "--skfmm"], [18, 7, 1, "cmdoption-trilinos", "--trilinos"], [23, 8, 1, "-", "DYLD_LIBRARY_PATH"], [18, 8, 1, "-", "FIPY_CACHE"], [18, 8, 1, "-", "FIPY_DISPLAY_MATRIX"], [18, 8, 1, "-", "FIPY_INCLUDE_NUMERIX_ALL"], [18, 8, 1, "-", "FIPY_INLINE"], [18, 8, 1, "-", "FIPY_INLINE_COMMENT"], [18, 8, 1, "-", "FIPY_LOG_CONFIG"], [18, 8, 1, "-", "FIPY_SOLVERS"], [18, 8, 1, "-", "FIPY_VERBOSE_SOLVER"], [18, 8, 1, "-", "FIPY_VIEWER"], [23, 8, 1, "-", "LD_LIBRARY_PATH"], [18, 8, 1, "-", "PETSC_OPTIONS"]], "examples": [[25, 0, 0, "-", "benchmarking"], [31, 0, 0, "-", "cahnHilliard"], [39, 0, 0, "-", "chemotaxis"], [44, 0, 0, "-", "convection"], [71, 0, 0, "-", "diffusion"], [109, 0, 0, "-", "elphf"], [119, 0, 0, "-", "flow"], [122, 0, 0, "-", "levelSet"], [156, 0, 0, "-", "meshing"], [161, 0, 0, "-", "parallel"], [162, 0, 0, "-", "phase"], [182, 0, 0, "-", "reactiveWetting"], [186, 0, 0, "-", "riemann"], [189, 0, 0, "-", "test"], [190, 0, 0, "-", "updating"]], "examples.benchmarking": [[26, 0, 0, "-", "benchmarker"], [27, 0, 0, "-", "size"], [28, 0, 0, "-", "steps"], [29, 0, 0, "-", "utils"], [30, 0, 0, "-", "versions"]], "examples.cahnHilliard": [[32, 0, 0, "-", "mesh2D"], [33, 0, 0, "-", "mesh2DCoupled"], [34, 0, 0, "-", "mesh3D"], [35, 0, 0, "-", "sphere"], [36, 0, 0, "-", "sphereDaemon"], [37, 0, 0, "-", "tanh1D"], [38, 0, 0, "-", "test"]], "examples.chemotaxis": [[40, 0, 0, "-", "input"], [41, 0, 0, "-", "input2D"], [42, 0, 0, "-", "parameters"], [43, 0, 0, "-", "test"]], "examples.convection": [[45, 0, 0, "-", "advection"], [49, 0, 0, "-", "exponential1D"], [54, 0, 0, "-", "exponential1DBack"], [56, 0, 0, "-", "exponential1DSource"], [59, 0, 0, "-", "exponential2D"], [64, 0, 0, "-", "peclet"], [65, 0, 0, "-", "powerLaw1D"], [68, 0, 0, "-", "robin"], [69, 0, 0, "-", "source"], [70, 0, 0, "-", "test"]], "examples.convection.advection": [[46, 0, 0, "-", "explicitUpwind"], [47, 0, 0, "-", "implicitUpwind"], [48, 0, 0, "-", "vanLeerUpwind"]], "examples.convection.exponential1D": [[50, 0, 0, "-", "cylindricalMesh1D"], [51, 0, 0, "-", "cylindricalMesh1DNonUniform"], [52, 0, 0, "-", "mesh1D"], [53, 0, 0, "-", "tri2D"]], "examples.convection.exponential1DBack": [[55, 0, 0, "-", "mesh1D"]], "examples.convection.exponential1DSource": [[57, 0, 0, "-", "mesh1D"], [58, 0, 0, "-", "tri2D"]], "examples.convection.exponential2D": [[60, 0, 0, "-", "cylindricalMesh2D"], [61, 0, 0, "-", "cylindricalMesh2DNonUniform"], [62, 0, 0, "-", "mesh2D"], [63, 0, 0, "-", "tri2D"]], "examples.convection.powerLaw1D": [[66, 0, 0, "-", "mesh1D"], [67, 0, 0, "-", "tri2D"]], "examples.diffusion": [[72, 0, 0, "-", "anisotropy"], [73, 0, 0, "-", "circle"], [74, 0, 0, "-", "circleQuad"], [75, 0, 0, "-", "coupled"], [76, 0, 0, "-", "electrostatics"], [77, 0, 0, "-", "explicit"], [82, 0, 0, "-", "mesh1D"], [83, 0, 0, "-", "mesh20x20"], [84, 0, 0, "-", "mesh20x20Coupled"], [85, 0, 0, "-", "nthOrder"], [89, 0, 0, "-", "steadyState"], [107, 0, 0, "-", "test"], [108, 0, 0, "-", "variable"]], "examples.diffusion.explicit": [[78, 0, 0, "-", "mesh1D"], [79, 0, 0, "-", "mixedelement"], [80, 0, 0, "-", "test"], [81, 0, 0, "-", "tri2D"]], "examples.diffusion.nthOrder": [[86, 0, 0, "-", "input4thOrder1D"], [87, 0, 0, "-", "input4thOrder_line"], [88, 0, 0, "-", "test"]], "examples.diffusion.steadyState": [[90, 0, 0, "-", "mesh1D"], [93, 0, 0, "-", "mesh20x20"], [99, 0, 0, "-", "mesh50x50"], [102, 0, 0, "-", "otherMeshes"], [106, 0, 0, "-", "test"]], "examples.diffusion.steadyState.mesh1D": [[91, 0, 0, "-", "inputPeriodic"], [92, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.mesh20x20": [[94, 0, 0, "-", "gmshinput"], [95, 0, 0, "-", "isotropy"], [96, 0, 0, "-", "modifiedMeshInput"], [97, 0, 0, "-", "orthoerror"], [98, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.mesh50x50": [[100, 0, 0, "-", "input"], [101, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.otherMeshes": [[103, 0, 0, "-", "cubicalProblem"], [104, 0, 0, "-", "grid3Dinput"], [105, 0, 0, "-", "prism"]], "examples.elphf": [[110, 0, 0, "-", "diffusion"], [114, 0, 0, "-", "input"], [115, 0, 0, "-", "phase"], [116, 0, 0, "-", "phaseDiffusion"], [117, 0, 0, "-", "poisson"], [118, 0, 0, "-", "test"]], "examples.elphf.diffusion": [[111, 0, 0, "-", "mesh1D"], [112, 0, 0, "-", "mesh1Ddimensional"], [113, 0, 0, "-", "mesh2D"]], "examples.flow": [[120, 0, 0, "-", "stokesCavity"], [121, 0, 0, "-", "test"]], "examples.levelSet": [[123, 0, 0, "-", "advection"], [128, 0, 0, "-", "distanceFunction"], [134, 0, 0, "-", "electroChem"], [150, 0, 0, "-", "surfactant"], [155, 0, 0, "-", "test"]], "examples.levelSet.advection": [[124, 0, 0, "-", "circle"], [125, 0, 0, "-", "mesh1D"], [126, 0, 0, "-", "test"], [127, 0, 0, "-", "trench"]], "examples.levelSet.distanceFunction": [[129, 0, 0, "-", "circle"], [130, 0, 0, "-", "interior"], [131, 0, 0, "-", "mesh1D"], [132, 0, 0, "-", "square"], [133, 0, 0, "-", "test"]], "examples.levelSet.electroChem": [[135, 0, 0, "-", "adsorbingSurfactantEquation"], [136, 0, 0, "-", "adsorption"], [137, 0, 0, "-", "gapFillDistanceVariable"], [138, 0, 0, "-", "gapFillMesh"], [139, 0, 0, "-", "gold"], [140, 0, 0, "-", "howToWriteAScript"], [141, 0, 0, "-", "leveler"], [142, 0, 0, "-", "lines"], [143, 0, 0, "-", "matplotlibSurfactantViewer"], [144, 0, 0, "-", "mayaviSurfactantViewer"], [145, 0, 0, "-", "metalIonDiffusionEquation"], [146, 0, 0, "-", "simpleTrenchSystem"], [147, 0, 0, "-", "surfactantBulkDiffusionEquation"], [148, 0, 0, "-", "test"], [149, 0, 0, "-", "trenchMesh"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer": [[143, 1, 1, "", "MatplotlibSurfactantViewer"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer": [[143, 2, 1, "", "axes"], [143, 2, 1, "", "cmap"], [143, 2, 1, "", "colorbar"], [143, 2, 1, "", "fig"], [143, 2, 1, "", "id"], [143, 2, 1, "", "log"], [143, 3, 1, "", "plot"], [143, 3, 1, "", "plotMesh"], [143, 3, 1, "", "setLimits"], [143, 2, 1, "", "title"], [143, 2, 1, "", "vars"]], "examples.levelSet.electroChem.mayaviSurfactantViewer": [[144, 1, 1, "", "MayaviSurfactantViewer"]], "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer": [[144, 3, 1, "", "plotMesh"], [144, 3, 1, "", "setLimits"], [144, 2, 1, "", "title"], [144, 2, 1, "", "vars"]], "examples.levelSet.surfactant": [[151, 0, 0, "-", "circle"], [152, 0, 0, "-", "expandingCircle"], [153, 0, 0, "-", "square"], [154, 0, 0, "-", "test"]], "examples.meshing": [[157, 0, 0, "-", "gmshRefinement"], [158, 0, 0, "-", "inputGrid2D"], [159, 0, 0, "-", "sphere"], [160, 0, 0, "-", "test"]], "examples.phase": [[163, 0, 0, "-", "anisotropy"], [164, 0, 0, "-", "anisotropyOLD"], [165, 0, 0, "-", "binary"], [166, 0, 0, "-", "binaryCoupled"], [167, 0, 0, "-", "impingement"], [171, 0, 0, "-", "missOrientation"], [176, 0, 0, "-", "polyxtal"], [177, 0, 0, "-", "polyxtalCoupled"], [178, 0, 0, "-", "quaternary"], [179, 0, 0, "-", "simple"], [180, 0, 0, "-", "symmetry"], [181, 0, 0, "-", "test"]], "examples.phase.impingement": [[168, 0, 0, "-", "mesh20x20"], [169, 0, 0, "-", "mesh40x1"], [170, 0, 0, "-", "test"]], "examples.phase.missOrientation": [[172, 0, 0, "-", "circle"], [173, 0, 0, "-", "mesh1D"], [174, 0, 0, "-", "modCircle"], [175, 0, 0, "-", "test"]], "examples.reactiveWetting": [[183, 0, 0, "-", "liquidVapor1D"], [184, 0, 0, "-", "liquidVapor2D"], [185, 0, 0, "-", "test"]], "examples.riemann": [[187, 0, 0, "-", "acoustics"], [188, 0, 0, "-", "test"]], "examples.updating": [[191, 0, 0, "-", "update0_1to1_0"], [192, 0, 0, "-", "update1_0to2_0"], [193, 0, 0, "-", "update2_0to3_0"]], "fipy": [[195, 0, 0, "-", "boundaryConditions"], [194, 4, 1, "", "doctest_raw_input"], [202, 0, 0, "-", "matrices"], [210, 0, 0, "-", "meshes"], [256, 0, 0, "-", "solvers"], [338, 0, 0, "-", "steppers"], [342, 0, 0, "-", "terms"], [194, 4, 1, "", "test"], [375, 0, 0, "-", "testFiPy"], [376, 0, 0, "-", "tests"], [381, 0, 0, "-", "tools"], [401, 0, 0, "-", "variables"], [441, 0, 0, "-", "viewers"]], "fipy.boundaryConditions": [[196, 0, 0, "-", "boundaryCondition"], [197, 0, 0, "-", "constraint"], [198, 0, 0, "-", "fixedFlux"], [199, 0, 0, "-", "fixedValue"], [200, 0, 0, "-", "nthOrderBoundaryCondition"], [201, 0, 0, "-", "test"]], "fipy.boundaryConditions.boundaryCondition": [[196, 1, 1, "", "BoundaryCondition"]], "fipy.boundaryConditions.boundaryCondition.BoundaryCondition": [[196, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.constraint": [[197, 1, 1, "", "Constraint"]], "fipy.boundaryConditions.constraint.Constraint": [[197, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.fixedFlux": [[198, 1, 1, "", "FixedFlux"]], "fipy.boundaryConditions.fixedFlux.FixedFlux": [[198, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.fixedValue": [[199, 1, 1, "", "FixedValue"]], "fipy.boundaryConditions.fixedValue.FixedValue": [[199, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.nthOrderBoundaryCondition": [[200, 1, 1, "", "NthOrderBoundaryCondition"]], "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition": [[200, 3, 1, "", "__repr__"]], "fipy.matrices": [[203, 0, 0, "-", "offsetSparseMatrix"], [204, 0, 0, "-", "petscMatrix"], [205, 0, 0, "-", "pysparseMatrix"], [206, 0, 0, "-", "scipyMatrix"], [207, 0, 0, "-", "sparseMatrix"], [208, 0, 0, "-", "test"], [209, 0, 0, "-", "trilinosMatrix"]], "fipy.matrices.offsetSparseMatrix": [[203, 4, 1, "", "OffsetSparseMatrix"]], "fipy.meshes": [[211, 0, 0, "-", "abstractMesh"], [212, 0, 0, "-", "builders"], [219, 0, 0, "-", "cylindricalGrid1D"], [220, 0, 0, "-", "cylindricalGrid2D"], [221, 0, 0, "-", "cylindricalNonUniformGrid1D"], [222, 0, 0, "-", "cylindricalNonUniformGrid2D"], [223, 0, 0, "-", "cylindricalUniformGrid1D"], [224, 0, 0, "-", "cylindricalUniformGrid2D"], [225, 0, 0, "-", "factoryMeshes"], [226, 0, 0, "-", "gmshMesh"], [227, 0, 0, "-", "grid1D"], [228, 0, 0, "-", "grid2D"], [229, 0, 0, "-", "grid3D"], [230, 0, 0, "-", "mesh"], [231, 0, 0, "-", "mesh1D"], [232, 0, 0, "-", "mesh2D"], [233, 0, 0, "-", "nonUniformGrid1D"], [234, 0, 0, "-", "nonUniformGrid2D"], [235, 0, 0, "-", "nonUniformGrid3D"], [236, 0, 0, "-", "periodicGrid1D"], [237, 0, 0, "-", "periodicGrid2D"], [238, 0, 0, "-", "periodicGrid3D"], [239, 0, 0, "-", "representations"], [243, 0, 0, "-", "skewedGrid2D"], [244, 0, 0, "-", "sphericalNonUniformGrid1D"], [245, 0, 0, "-", "sphericalUniformGrid1D"], [246, 0, 0, "-", "test"], [247, 0, 0, "-", "topologies"], [251, 0, 0, "-", "tri2D"], [252, 0, 0, "-", "uniformGrid"], [253, 0, 0, "-", "uniformGrid1D"], [254, 0, 0, "-", "uniformGrid2D"], [255, 0, 0, "-", "uniformGrid3D"]], "fipy.meshes.abstractMesh": [[211, 1, 1, "", "AbstractMesh"], [211, 5, 1, "", "MeshAdditionError"]], "fipy.meshes.abstractMesh.AbstractMesh": [[211, 2, 1, "", "VTKCellDataSet"], [211, 2, 1, "", "VTKFaceDataSet"], [211, 3, 1, "", "__add__"], [211, 3, 1, "", "__div__"], [211, 3, 1, "", "__getstate__"], [211, 3, 1, "", "__radd__"], [211, 3, 1, "", "__repr__"], [211, 3, 1, "", "__sub__"], [211, 3, 1, "", "__truediv__"], [211, 2, 1, "", "aspect2D"], [211, 2, 1, "", "cellCenters"], [211, 2, 1, "", "cellFaceIDs"], [211, 2, 1, "", "facesBack"], [211, 2, 1, "", "facesBottom"], [211, 2, 1, "", "facesDown"], [211, 2, 1, "", "facesFront"], [211, 2, 1, "", "facesLeft"], [211, 2, 1, "", "facesRight"], [211, 2, 1, "", "facesTop"], [211, 2, 1, "", "facesUp"], [211, 2, 1, "", "x"], [211, 2, 1, "", "y"], [211, 2, 1, "", "z"]], "fipy.meshes.abstractMesh.MeshAdditionError": [[211, 6, 1, "", "__cause__"], [211, 6, 1, "", "__context__"], [211, 3, 1, "", "__delattr__"], [211, 3, 1, "", "__getattribute__"], [211, 3, 1, "", "__reduce__"], [211, 3, 1, "", "__repr__"], [211, 3, 1, "", "__setattr__"], [211, 3, 1, "", "__str__"], [211, 3, 1, "", "add_note"], [211, 3, 1, "", "with_traceback"]], "fipy.meshes.builders": [[213, 0, 0, "-", "abstractGridBuilder"], [214, 0, 0, "-", "grid1DBuilder"], [215, 0, 0, "-", "grid2DBuilder"], [216, 0, 0, "-", "grid3DBuilder"], [217, 0, 0, "-", "periodicGrid1DBuilder"], [218, 0, 0, "-", "utilityClasses"]], "fipy.meshes.cylindricalNonUniformGrid1D": [[221, 1, 1, "", "CylindricalNonUniformGrid1D"]], "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D": [[221, 2, 1, "", "VTKCellDataSet"], [221, 2, 1, "", "VTKFaceDataSet"], [221, 3, 1, "", "__add__"], [221, 3, 1, "", "__div__"], [221, 3, 1, "", "__getstate__"], [221, 3, 1, "", "__mul__"], [221, 3, 1, "", "__radd__"], [221, 3, 1, "", "__repr__"], [221, 3, 1, "", "__rmul__"], [221, 3, 1, "", "__sub__"], [221, 3, 1, "", "__truediv__"], [221, 2, 1, "", "aspect2D"], [221, 2, 1, "", "cellCenters"], [221, 2, 1, "", "cellFaceIDs"], [221, 2, 1, "", "facesBack"], [221, 2, 1, "", "facesBottom"], [221, 2, 1, "", "facesDown"], [221, 2, 1, "", "facesFront"], [221, 2, 1, "", "facesLeft"], [221, 2, 1, "", "facesRight"], [221, 2, 1, "", "facesTop"], [221, 2, 1, "", "facesUp"], [221, 2, 1, "", "x"], [221, 2, 1, "", "y"], [221, 2, 1, "", "z"]], "fipy.meshes.cylindricalNonUniformGrid2D": [[222, 1, 1, "", "CylindricalNonUniformGrid2D"]], "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D": [[222, 2, 1, "", "VTKCellDataSet"], [222, 2, 1, "", "VTKFaceDataSet"], [222, 3, 1, "", "__add__"], [222, 3, 1, "", "__div__"], [222, 3, 1, "", "__getstate__"], [222, 3, 1, "", "__mul__"], [222, 3, 1, "", "__radd__"], [222, 3, 1, "", "__repr__"], [222, 3, 1, "", "__rmul__"], [222, 3, 1, "", "__sub__"], [222, 3, 1, "", "__truediv__"], [222, 2, 1, "", "aspect2D"], [222, 2, 1, "", "cellCenters"], [222, 2, 1, "", "cellFaceIDs"], [222, 3, 1, "", "extrude"], [222, 2, 1, "", "facesBack"], [222, 2, 1, "", "facesBottom"], [222, 2, 1, "", "facesDown"], [222, 2, 1, "", "facesFront"], [222, 2, 1, "", "facesLeft"], [222, 2, 1, "", "facesRight"], [222, 2, 1, "", "facesTop"], [222, 2, 1, "", "facesUp"], [222, 2, 1, "", "x"], [222, 2, 1, "", "y"], [222, 2, 1, "", "z"]], "fipy.meshes.cylindricalUniformGrid1D": [[223, 1, 1, "", "CylindricalUniformGrid1D"]], "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D": [[223, 2, 1, "", "VTKCellDataSet"], [223, 2, 1, "", "VTKFaceDataSet"], [223, 3, 1, "", "__add__"], [223, 3, 1, "", "__div__"], [223, 3, 1, "", "__getstate__"], [223, 3, 1, "", "__radd__"], [223, 3, 1, "", "__repr__"], [223, 3, 1, "", "__sub__"], [223, 3, 1, "", "__truediv__"], [223, 2, 1, "", "aspect2D"], [223, 2, 1, "", "cellCenters"], [223, 2, 1, "", "cellFaceIDs"], [223, 2, 1, "", "exteriorFaces"], [223, 2, 1, "", "facesBack"], [223, 2, 1, "", "facesBottom"], [223, 2, 1, "", "facesDown"], [223, 2, 1, "", "facesFront"], [223, 2, 1, "", "facesLeft"], [223, 2, 1, "", "facesRight"], [223, 2, 1, "", "facesTop"], [223, 2, 1, "", "facesUp"], [223, 2, 1, "", "x"], [223, 2, 1, "", "y"], [223, 2, 1, "", "z"]], "fipy.meshes.cylindricalUniformGrid2D": [[224, 1, 1, "", "CylindricalUniformGrid2D"]], "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D": [[224, 2, 1, "", "VTKCellDataSet"], [224, 2, 1, "", "VTKFaceDataSet"], [224, 3, 1, "", "__add__"], [224, 3, 1, "", "__div__"], [224, 3, 1, "", "__getstate__"], [224, 3, 1, "", "__radd__"], [224, 3, 1, "", "__repr__"], [224, 3, 1, "", "__sub__"], [224, 3, 1, "", "__truediv__"], [224, 2, 1, "", "aspect2D"], [224, 2, 1, "", "cellCenters"], [224, 2, 1, "", "cellFaceIDs"], [224, 2, 1, "", "facesBack"], [224, 2, 1, "", "facesBottom"], [224, 2, 1, "", "facesDown"], [224, 2, 1, "", "facesFront"], [224, 2, 1, "", "facesLeft"], [224, 2, 1, "", "facesRight"], [224, 2, 1, "", "facesTop"], [224, 2, 1, "", "facesUp"], [224, 2, 1, "", "x"], [224, 2, 1, "", "y"], [224, 2, 1, "", "z"]], "fipy.meshes.factoryMeshes": [[225, 4, 1, "", "CylindricalGrid1D"], [225, 4, 1, "", "CylindricalGrid2D"], [225, 4, 1, "", "Grid1D"], [225, 4, 1, "", "Grid2D"], [225, 4, 1, "", "Grid3D"], [225, 4, 1, "", "SphericalGrid1D"]], "fipy.meshes.gmshMesh": [[226, 1, 1, "", "Gmsh2D"], [226, 1, 1, "", "Gmsh2DIn3DSpace"], [226, 1, 1, "", "Gmsh3D"], [226, 5, 1, "", "GmshException"], [226, 1, 1, "", "GmshFile"], [226, 1, 1, "", "GmshGrid2D"], [226, 1, 1, "", "GmshGrid3D"], [226, 1, 1, "", "MSHFile"], [226, 5, 1, "", "MeshExportError"], [226, 1, 1, "", "POSFile"], [226, 4, 1, "", "gmshVersion"], [226, 4, 1, "", "openMSHFile"], [226, 4, 1, "", "openPOSFile"]], "fipy.meshes.gmshMesh.Gmsh2D": [[226, 2, 1, "", "VTKCellDataSet"], [226, 2, 1, "", "VTKFaceDataSet"], [226, 3, 1, "", "__add__"], [226, 3, 1, "", "__div__"], [226, 3, 1, "", "__getstate__"], [226, 3, 1, "", "__mul__"], [226, 3, 1, "", "__radd__"], [226, 3, 1, "", "__repr__"], [226, 3, 1, "", "__rmul__"], [226, 3, 1, "", "__sub__"], [226, 3, 1, "", "__truediv__"], [226, 2, 1, "", "aspect2D"], [226, 2, 1, "", "cellCenters"], [226, 2, 1, "", "cellFaceIDs"], [226, 3, 1, "", "extrude"], [226, 2, 1, "", "facesBack"], [226, 2, 1, "", "facesBottom"], [226, 2, 1, "", "facesDown"], [226, 2, 1, "", "facesFront"], [226, 2, 1, "", "facesLeft"], [226, 2, 1, "", "facesRight"], [226, 2, 1, "", "facesTop"], [226, 2, 1, "", "facesUp"], [226, 2, 1, "", "x"], [226, 2, 1, "", "y"], [226, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace": [[226, 2, 1, "", "VTKCellDataSet"], [226, 2, 1, "", "VTKFaceDataSet"], [226, 3, 1, "", "__add__"], [226, 3, 1, "", "__div__"], [226, 3, 1, "", "__getstate__"], [226, 3, 1, "", "__mul__"], [226, 3, 1, "", "__radd__"], [226, 3, 1, "", "__repr__"], [226, 3, 1, "", "__rmul__"], [226, 3, 1, "", "__sub__"], [226, 3, 1, "", "__truediv__"], [226, 2, 1, "", "aspect2D"], [226, 2, 1, "", "cellCenters"], [226, 2, 1, "", "cellFaceIDs"], [226, 3, 1, "", "extrude"], [226, 2, 1, "", "facesBack"], [226, 2, 1, "", "facesBottom"], [226, 2, 1, "", "facesDown"], [226, 2, 1, "", "facesFront"], [226, 2, 1, "", "facesLeft"], [226, 2, 1, "", "facesRight"], [226, 2, 1, "", "facesTop"], [226, 2, 1, "", "facesUp"], [226, 2, 1, "", "x"], [226, 2, 1, "", "y"], [226, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.Gmsh3D": [[226, 2, 1, "", "VTKCellDataSet"], [226, 2, 1, "", "VTKFaceDataSet"], [226, 3, 1, "", "__add__"], [226, 3, 1, "", "__div__"], [226, 3, 1, "", "__getstate__"], [226, 3, 1, "", "__mul__"], [226, 3, 1, "", "__radd__"], [226, 3, 1, "", "__repr__"], [226, 3, 1, "", "__rmul__"], [226, 3, 1, "", "__sub__"], [226, 3, 1, "", "__truediv__"], [226, 2, 1, "", "aspect2D"], [226, 2, 1, "", "cellCenters"], [226, 2, 1, "", "cellFaceIDs"], [226, 2, 1, "", "facesBack"], [226, 2, 1, "", "facesBottom"], [226, 2, 1, "", "facesDown"], [226, 2, 1, "", "facesFront"], [226, 2, 1, "", "facesLeft"], [226, 2, 1, "", "facesRight"], [226, 2, 1, "", "facesTop"], [226, 2, 1, "", "facesUp"], [226, 2, 1, "", "x"], [226, 2, 1, "", "y"], [226, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.GmshException": [[226, 6, 1, "", "__cause__"], [226, 6, 1, "", "__context__"], [226, 3, 1, "", "__delattr__"], [226, 3, 1, "", "__getattribute__"], [226, 3, 1, "", "__reduce__"], [226, 3, 1, "", "__repr__"], [226, 3, 1, "", "__setattr__"], [226, 3, 1, "", "__str__"], [226, 3, 1, "", "add_note"], [226, 3, 1, "", "with_traceback"]], "fipy.meshes.gmshMesh.GmshGrid2D": [[226, 2, 1, "", "VTKCellDataSet"], [226, 2, 1, "", "VTKFaceDataSet"], [226, 3, 1, "", "__add__"], [226, 3, 1, "", "__div__"], [226, 3, 1, "", "__getstate__"], [226, 3, 1, "", "__mul__"], [226, 3, 1, "", "__radd__"], [226, 3, 1, "", "__repr__"], [226, 3, 1, "", "__rmul__"], [226, 3, 1, "", "__sub__"], [226, 3, 1, "", "__truediv__"], [226, 2, 1, "", "aspect2D"], [226, 2, 1, "", "cellCenters"], [226, 2, 1, "", "cellFaceIDs"], [226, 3, 1, "", "extrude"], [226, 2, 1, "", "facesBack"], [226, 2, 1, "", "facesBottom"], [226, 2, 1, "", "facesDown"], [226, 2, 1, "", "facesFront"], [226, 2, 1, "", "facesLeft"], [226, 2, 1, "", "facesRight"], [226, 2, 1, "", "facesTop"], [226, 2, 1, "", "facesUp"], [226, 2, 1, "", "x"], [226, 2, 1, "", "y"], [226, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.GmshGrid3D": [[226, 2, 1, "", "VTKCellDataSet"], [226, 2, 1, "", "VTKFaceDataSet"], [226, 3, 1, "", "__add__"], [226, 3, 1, "", "__div__"], [226, 3, 1, "", "__getstate__"], [226, 3, 1, "", "__mul__"], [226, 3, 1, "", "__radd__"], [226, 3, 1, "", "__repr__"], [226, 3, 1, "", "__rmul__"], [226, 3, 1, "", "__sub__"], [226, 3, 1, "", "__truediv__"], [226, 2, 1, "", "aspect2D"], [226, 2, 1, "", "cellCenters"], [226, 2, 1, "", "cellFaceIDs"], [226, 2, 1, "", "facesBack"], [226, 2, 1, "", "facesBottom"], [226, 2, 1, "", "facesDown"], [226, 2, 1, "", "facesFront"], [226, 2, 1, "", "facesLeft"], [226, 2, 1, "", "facesRight"], [226, 2, 1, "", "facesTop"], [226, 2, 1, "", "facesUp"], [226, 2, 1, "", "x"], [226, 2, 1, "", "y"], [226, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.MSHFile": [[226, 3, 1, "", "makeMapVariables"], [226, 3, 1, "", "read"]], "fipy.meshes.gmshMesh.MeshExportError": [[226, 6, 1, "", "__cause__"], [226, 6, 1, "", "__context__"], [226, 3, 1, "", "__delattr__"], [226, 3, 1, "", "__getattribute__"], [226, 3, 1, "", "__reduce__"], [226, 3, 1, "", "__repr__"], [226, 3, 1, "", "__setattr__"], [226, 3, 1, "", "__str__"], [226, 3, 1, "", "add_note"], [226, 3, 1, "", "with_traceback"]], "fipy.meshes.mesh": [[230, 1, 1, "", "Mesh"], [230, 5, 1, "", "MeshAdditionError"]], "fipy.meshes.mesh.Mesh": [[230, 2, 1, "", "VTKCellDataSet"], [230, 2, 1, "", "VTKFaceDataSet"], [230, 3, 1, "", "__add__"], [230, 3, 1, "", "__div__"], [230, 3, 1, "", "__getstate__"], [230, 3, 1, "", "__mul__"], [230, 3, 1, "", "__radd__"], [230, 3, 1, "", "__repr__"], [230, 3, 1, "", "__rmul__"], [230, 3, 1, "", "__sub__"], [230, 3, 1, "", "__truediv__"], [230, 2, 1, "", "aspect2D"], [230, 2, 1, "", "cellCenters"], [230, 2, 1, "", "cellFaceIDs"], [230, 2, 1, "", "facesBack"], [230, 2, 1, "", "facesBottom"], [230, 2, 1, "", "facesDown"], [230, 2, 1, "", "facesFront"], [230, 2, 1, "", "facesLeft"], [230, 2, 1, "", "facesRight"], [230, 2, 1, "", "facesTop"], [230, 2, 1, "", "facesUp"], [230, 2, 1, "", "x"], [230, 2, 1, "", "y"], [230, 2, 1, "", "z"]], "fipy.meshes.mesh.MeshAdditionError": [[230, 6, 1, "", "__cause__"], [230, 6, 1, "", "__context__"], [230, 3, 1, "", "__delattr__"], [230, 3, 1, "", "__getattribute__"], [230, 3, 1, "", "__reduce__"], [230, 3, 1, "", "__repr__"], [230, 3, 1, "", "__setattr__"], [230, 3, 1, "", "__str__"], [230, 3, 1, "", "add_note"], [230, 3, 1, "", "with_traceback"]], "fipy.meshes.mesh1D": [[231, 1, 1, "", "Mesh1D"]], "fipy.meshes.mesh1D.Mesh1D": [[231, 2, 1, "", "VTKCellDataSet"], [231, 2, 1, "", "VTKFaceDataSet"], [231, 3, 1, "", "__add__"], [231, 3, 1, "", "__div__"], [231, 3, 1, "", "__getstate__"], [231, 3, 1, "", "__mul__"], [231, 3, 1, "", "__radd__"], [231, 3, 1, "", "__repr__"], [231, 3, 1, "", "__rmul__"], [231, 3, 1, "", "__sub__"], [231, 3, 1, "", "__truediv__"], [231, 2, 1, "", "aspect2D"], [231, 2, 1, "", "cellCenters"], [231, 2, 1, "", "cellFaceIDs"], [231, 2, 1, "", "facesBack"], [231, 2, 1, "", "facesBottom"], [231, 2, 1, "", "facesDown"], [231, 2, 1, "", "facesFront"], [231, 2, 1, "", "facesLeft"], [231, 2, 1, "", "facesRight"], [231, 2, 1, "", "facesTop"], [231, 2, 1, "", "facesUp"], [231, 2, 1, "", "x"], [231, 2, 1, "", "y"], [231, 2, 1, "", "z"]], "fipy.meshes.mesh2D": [[232, 1, 1, "", "Mesh2D"]], "fipy.meshes.mesh2D.Mesh2D": [[232, 2, 1, "", "VTKCellDataSet"], [232, 2, 1, "", "VTKFaceDataSet"], [232, 3, 1, "", "__add__"], [232, 3, 1, "", "__div__"], [232, 3, 1, "", "__getstate__"], [232, 3, 1, "", "__mul__"], [232, 3, 1, "", "__radd__"], [232, 3, 1, "", "__repr__"], [232, 3, 1, "", "__rmul__"], [232, 3, 1, "", "__sub__"], [232, 3, 1, "", "__truediv__"], [232, 2, 1, "", "aspect2D"], [232, 2, 1, "", "cellCenters"], [232, 2, 1, "", "cellFaceIDs"], [232, 3, 1, "", "extrude"], [232, 2, 1, "", "facesBack"], [232, 2, 1, "", "facesBottom"], [232, 2, 1, "", "facesDown"], [232, 2, 1, "", "facesFront"], [232, 2, 1, "", "facesLeft"], [232, 2, 1, "", "facesRight"], [232, 2, 1, "", "facesTop"], [232, 2, 1, "", "facesUp"], [232, 2, 1, "", "x"], [232, 2, 1, "", "y"], [232, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid1D": [[233, 1, 1, "", "NonUniformGrid1D"]], "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D": [[233, 2, 1, "", "VTKCellDataSet"], [233, 2, 1, "", "VTKFaceDataSet"], [233, 3, 1, "", "__add__"], [233, 3, 1, "", "__div__"], [233, 3, 1, "", "__getstate__"], [233, 3, 1, "", "__mul__"], [233, 3, 1, "", "__radd__"], [233, 3, 1, "", "__repr__"], [233, 3, 1, "", "__rmul__"], [233, 3, 1, "", "__sub__"], [233, 3, 1, "", "__truediv__"], [233, 2, 1, "", "aspect2D"], [233, 2, 1, "", "cellCenters"], [233, 2, 1, "", "cellFaceIDs"], [233, 2, 1, "", "facesBack"], [233, 2, 1, "", "facesBottom"], [233, 2, 1, "", "facesDown"], [233, 2, 1, "", "facesFront"], [233, 2, 1, "", "facesLeft"], [233, 2, 1, "", "facesRight"], [233, 2, 1, "", "facesTop"], [233, 2, 1, "", "facesUp"], [233, 2, 1, "", "x"], [233, 2, 1, "", "y"], [233, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid2D": [[234, 1, 1, "", "NonUniformGrid2D"]], "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D": [[234, 2, 1, "", "VTKCellDataSet"], [234, 2, 1, "", "VTKFaceDataSet"], [234, 3, 1, "", "__add__"], [234, 3, 1, "", "__div__"], [234, 3, 1, "", "__getstate__"], [234, 3, 1, "", "__mul__"], [234, 3, 1, "", "__radd__"], [234, 3, 1, "", "__repr__"], [234, 3, 1, "", "__rmul__"], [234, 3, 1, "", "__sub__"], [234, 3, 1, "", "__truediv__"], [234, 2, 1, "", "aspect2D"], [234, 2, 1, "", "cellCenters"], [234, 2, 1, "", "cellFaceIDs"], [234, 3, 1, "", "extrude"], [234, 2, 1, "", "facesBack"], [234, 2, 1, "", "facesBottom"], [234, 2, 1, "", "facesDown"], [234, 2, 1, "", "facesFront"], [234, 2, 1, "", "facesLeft"], [234, 2, 1, "", "facesRight"], [234, 2, 1, "", "facesTop"], [234, 2, 1, "", "facesUp"], [234, 2, 1, "", "x"], [234, 2, 1, "", "y"], [234, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid3D": [[235, 1, 1, "", "NonUniformGrid3D"]], "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D": [[235, 2, 1, "", "VTKCellDataSet"], [235, 2, 1, "", "VTKFaceDataSet"], [235, 3, 1, "", "__add__"], [235, 3, 1, "", "__div__"], [235, 3, 1, "", "__getstate__"], [235, 3, 1, "", "__mul__"], [235, 3, 1, "", "__radd__"], [235, 3, 1, "", "__repr__"], [235, 3, 1, "", "__rmul__"], [235, 3, 1, "", "__sub__"], [235, 3, 1, "", "__truediv__"], [235, 2, 1, "", "aspect2D"], [235, 2, 1, "", "cellCenters"], [235, 2, 1, "", "cellFaceIDs"], [235, 2, 1, "", "facesBack"], [235, 2, 1, "", "facesBottom"], [235, 2, 1, "", "facesDown"], [235, 2, 1, "", "facesFront"], [235, 2, 1, "", "facesLeft"], [235, 2, 1, "", "facesRight"], [235, 2, 1, "", "facesTop"], [235, 2, 1, "", "facesUp"], [235, 2, 1, "", "x"], [235, 2, 1, "", "y"], [235, 2, 1, "", "z"]], "fipy.meshes.periodicGrid1D": [[236, 1, 1, "", "PeriodicGrid1D"]], "fipy.meshes.periodicGrid1D.PeriodicGrid1D": [[236, 2, 1, "", "VTKCellDataSet"], [236, 2, 1, "", "VTKFaceDataSet"], [236, 3, 1, "", "__add__"], [236, 3, 1, "", "__div__"], [236, 3, 1, "", "__getstate__"], [236, 3, 1, "", "__mul__"], [236, 3, 1, "", "__radd__"], [236, 3, 1, "", "__repr__"], [236, 3, 1, "", "__rmul__"], [236, 3, 1, "", "__sub__"], [236, 3, 1, "", "__truediv__"], [236, 2, 1, "", "aspect2D"], [236, 2, 1, "", "cellCenters"], [236, 2, 1, "", "cellFaceIDs"], [236, 2, 1, "", "facesBack"], [236, 2, 1, "", "facesBottom"], [236, 2, 1, "", "facesDown"], [236, 2, 1, "", "facesFront"], [236, 2, 1, "", "facesLeft"], [236, 2, 1, "", "facesRight"], [236, 2, 1, "", "facesTop"], [236, 2, 1, "", "facesUp"], [236, 2, 1, "", "x"], [236, 2, 1, "", "y"], [236, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D": [[237, 1, 1, "", "PeriodicGrid2D"], [237, 1, 1, "", "PeriodicGrid2DLeftRight"], [237, 1, 1, "", "PeriodicGrid2DTopBottom"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2D": [[237, 2, 1, "", "VTKCellDataSet"], [237, 2, 1, "", "VTKFaceDataSet"], [237, 3, 1, "", "__add__"], [237, 3, 1, "", "__div__"], [237, 3, 1, "", "__getstate__"], [237, 3, 1, "", "__mul__"], [237, 3, 1, "", "__radd__"], [237, 3, 1, "", "__repr__"], [237, 3, 1, "", "__rmul__"], [237, 3, 1, "", "__sub__"], [237, 3, 1, "", "__truediv__"], [237, 2, 1, "", "aspect2D"], [237, 2, 1, "", "cellCenters"], [237, 2, 1, "", "cellFaceIDs"], [237, 3, 1, "", "extrude"], [237, 2, 1, "", "facesBack"], [237, 2, 1, "", "facesBottom"], [237, 2, 1, "", "facesDown"], [237, 2, 1, "", "facesFront"], [237, 2, 1, "", "facesLeft"], [237, 2, 1, "", "facesRight"], [237, 2, 1, "", "facesTop"], [237, 2, 1, "", "facesUp"], [237, 2, 1, "", "x"], [237, 2, 1, "", "y"], [237, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight": [[237, 2, 1, "", "VTKCellDataSet"], [237, 2, 1, "", "VTKFaceDataSet"], [237, 3, 1, "", "__add__"], [237, 3, 1, "", "__div__"], [237, 3, 1, "", "__getstate__"], [237, 3, 1, "", "__mul__"], [237, 3, 1, "", "__radd__"], [237, 3, 1, "", "__repr__"], [237, 3, 1, "", "__rmul__"], [237, 3, 1, "", "__sub__"], [237, 3, 1, "", "__truediv__"], [237, 2, 1, "", "aspect2D"], [237, 2, 1, "", "cellCenters"], [237, 2, 1, "", "cellFaceIDs"], [237, 3, 1, "", "extrude"], [237, 2, 1, "", "facesBack"], [237, 2, 1, "", "facesBottom"], [237, 2, 1, "", "facesDown"], [237, 2, 1, "", "facesFront"], [237, 2, 1, "", "facesLeft"], [237, 2, 1, "", "facesRight"], [237, 2, 1, "", "facesTop"], [237, 2, 1, "", "facesUp"], [237, 2, 1, "", "x"], [237, 2, 1, "", "y"], [237, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom": [[237, 2, 1, "", "VTKCellDataSet"], [237, 2, 1, "", "VTKFaceDataSet"], [237, 3, 1, "", "__add__"], [237, 3, 1, "", "__div__"], [237, 3, 1, "", "__getstate__"], [237, 3, 1, "", "__mul__"], [237, 3, 1, "", "__radd__"], [237, 3, 1, "", "__repr__"], [237, 3, 1, "", "__rmul__"], [237, 3, 1, "", "__sub__"], [237, 3, 1, "", "__truediv__"], [237, 2, 1, "", "aspect2D"], [237, 2, 1, "", "cellCenters"], [237, 2, 1, "", "cellFaceIDs"], [237, 3, 1, "", "extrude"], [237, 2, 1, "", "facesBack"], [237, 2, 1, "", "facesBottom"], [237, 2, 1, "", "facesDown"], [237, 2, 1, "", "facesFront"], [237, 2, 1, "", "facesLeft"], [237, 2, 1, "", "facesRight"], [237, 2, 1, "", "facesTop"], [237, 2, 1, "", "facesUp"], [237, 2, 1, "", "x"], [237, 2, 1, "", "y"], [237, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D": [[238, 1, 1, "", "PeriodicGrid3D"], [238, 1, 1, "", "PeriodicGrid3DFrontBack"], [238, 1, 1, "", "PeriodicGrid3DLeftRight"], [238, 1, 1, "", "PeriodicGrid3DLeftRightFrontBack"], [238, 1, 1, "", "PeriodicGrid3DLeftRightTopBottom"], [238, 1, 1, "", "PeriodicGrid3DTopBottom"], [238, 1, 1, "", "PeriodicGrid3DTopBottomFrontBack"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3D": [[238, 2, 1, "", "VTKCellDataSet"], [238, 2, 1, "", "VTKFaceDataSet"], [238, 3, 1, "", "__add__"], [238, 3, 1, "", "__div__"], [238, 3, 1, "", "__getstate__"], [238, 3, 1, "", "__mul__"], [238, 3, 1, "", "__radd__"], [238, 3, 1, "", "__repr__"], [238, 3, 1, "", "__rmul__"], [238, 3, 1, "", "__sub__"], [238, 3, 1, "", "__truediv__"], [238, 2, 1, "", "aspect2D"], [238, 2, 1, "", "cellCenters"], [238, 2, 1, "", "cellFaceIDs"], [238, 2, 1, "", "facesBack"], [238, 2, 1, "", "facesBottom"], [238, 2, 1, "", "facesDown"], [238, 2, 1, "", "facesFront"], [238, 2, 1, "", "facesLeft"], [238, 2, 1, "", "facesRight"], [238, 2, 1, "", "facesTop"], [238, 2, 1, "", "facesUp"], [238, 2, 1, "", "x"], [238, 2, 1, "", "y"], [238, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack": [[238, 2, 1, "", "VTKCellDataSet"], [238, 2, 1, "", "VTKFaceDataSet"], [238, 3, 1, "", "__add__"], [238, 3, 1, "", "__div__"], [238, 3, 1, "", "__getstate__"], [238, 3, 1, "", "__mul__"], [238, 3, 1, "", "__radd__"], [238, 3, 1, "", "__repr__"], [238, 3, 1, "", "__rmul__"], [238, 3, 1, "", "__sub__"], [238, 3, 1, "", "__truediv__"], [238, 2, 1, "", "aspect2D"], [238, 2, 1, "", "cellCenters"], [238, 2, 1, "", "cellFaceIDs"], [238, 2, 1, "", "facesBack"], [238, 2, 1, "", "facesBottom"], [238, 2, 1, "", "facesDown"], [238, 2, 1, "", "facesFront"], [238, 2, 1, "", "facesLeft"], [238, 2, 1, "", "facesRight"], [238, 2, 1, "", "facesTop"], [238, 2, 1, "", "facesUp"], [238, 2, 1, "", "x"], [238, 2, 1, "", "y"], [238, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight": [[238, 2, 1, "", "VTKCellDataSet"], [238, 2, 1, "", "VTKFaceDataSet"], [238, 3, 1, "", "__add__"], [238, 3, 1, "", "__div__"], [238, 3, 1, "", "__getstate__"], [238, 3, 1, "", "__mul__"], [238, 3, 1, "", "__radd__"], [238, 3, 1, "", "__repr__"], [238, 3, 1, "", "__rmul__"], [238, 3, 1, "", "__sub__"], [238, 3, 1, "", "__truediv__"], [238, 2, 1, "", "aspect2D"], [238, 2, 1, "", "cellCenters"], [238, 2, 1, "", "cellFaceIDs"], [238, 2, 1, "", "facesBack"], [238, 2, 1, "", "facesBottom"], [238, 2, 1, "", "facesDown"], [238, 2, 1, "", "facesFront"], [238, 2, 1, "", "facesLeft"], [238, 2, 1, "", "facesRight"], [238, 2, 1, "", "facesTop"], [238, 2, 1, "", "facesUp"], [238, 2, 1, "", "x"], [238, 2, 1, "", "y"], [238, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack": [[238, 2, 1, "", "VTKCellDataSet"], [238, 2, 1, "", "VTKFaceDataSet"], [238, 3, 1, "", "__add__"], [238, 3, 1, "", "__div__"], [238, 3, 1, "", "__getstate__"], [238, 3, 1, "", "__mul__"], [238, 3, 1, "", "__radd__"], [238, 3, 1, "", "__repr__"], [238, 3, 1, "", "__rmul__"], [238, 3, 1, "", "__sub__"], [238, 3, 1, "", "__truediv__"], [238, 2, 1, "", "aspect2D"], [238, 2, 1, "", "cellCenters"], [238, 2, 1, "", "cellFaceIDs"], [238, 2, 1, "", "facesBack"], [238, 2, 1, "", "facesBottom"], [238, 2, 1, "", "facesDown"], [238, 2, 1, "", "facesFront"], [238, 2, 1, "", "facesLeft"], [238, 2, 1, "", "facesRight"], [238, 2, 1, "", "facesTop"], [238, 2, 1, "", "facesUp"], [238, 2, 1, "", "x"], [238, 2, 1, "", "y"], [238, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom": [[238, 2, 1, "", "VTKCellDataSet"], [238, 2, 1, "", "VTKFaceDataSet"], [238, 3, 1, "", "__add__"], [238, 3, 1, "", "__div__"], [238, 3, 1, "", "__getstate__"], [238, 3, 1, "", "__mul__"], [238, 3, 1, "", "__radd__"], [238, 3, 1, "", "__repr__"], [238, 3, 1, "", "__rmul__"], [238, 3, 1, "", "__sub__"], [238, 3, 1, "", "__truediv__"], [238, 2, 1, "", "aspect2D"], [238, 2, 1, "", "cellCenters"], [238, 2, 1, "", "cellFaceIDs"], [238, 2, 1, "", "facesBack"], [238, 2, 1, "", "facesBottom"], [238, 2, 1, "", "facesDown"], [238, 2, 1, "", "facesFront"], [238, 2, 1, "", "facesLeft"], [238, 2, 1, "", "facesRight"], [238, 2, 1, "", "facesTop"], [238, 2, 1, "", "facesUp"], [238, 2, 1, "", "x"], [238, 2, 1, "", "y"], [238, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom": [[238, 2, 1, "", "VTKCellDataSet"], [238, 2, 1, "", "VTKFaceDataSet"], [238, 3, 1, "", "__add__"], [238, 3, 1, "", "__div__"], [238, 3, 1, "", "__getstate__"], [238, 3, 1, "", "__mul__"], [238, 3, 1, "", "__radd__"], [238, 3, 1, "", "__repr__"], [238, 3, 1, "", "__rmul__"], [238, 3, 1, "", "__sub__"], [238, 3, 1, "", "__truediv__"], [238, 2, 1, "", "aspect2D"], [238, 2, 1, "", "cellCenters"], [238, 2, 1, "", "cellFaceIDs"], [238, 2, 1, "", "facesBack"], [238, 2, 1, "", "facesBottom"], [238, 2, 1, "", "facesDown"], [238, 2, 1, "", "facesFront"], [238, 2, 1, "", "facesLeft"], [238, 2, 1, "", "facesRight"], [238, 2, 1, "", "facesTop"], [238, 2, 1, "", "facesUp"], [238, 2, 1, "", "x"], [238, 2, 1, "", "y"], [238, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack": [[238, 2, 1, "", "VTKCellDataSet"], [238, 2, 1, "", "VTKFaceDataSet"], [238, 3, 1, "", "__add__"], [238, 3, 1, "", "__div__"], [238, 3, 1, "", "__getstate__"], [238, 3, 1, "", "__mul__"], [238, 3, 1, "", "__radd__"], [238, 3, 1, "", "__repr__"], [238, 3, 1, "", "__rmul__"], [238, 3, 1, "", "__sub__"], [238, 3, 1, "", "__truediv__"], [238, 2, 1, "", "aspect2D"], [238, 2, 1, "", "cellCenters"], [238, 2, 1, "", "cellFaceIDs"], [238, 2, 1, "", "facesBack"], [238, 2, 1, "", "facesBottom"], [238, 2, 1, "", "facesDown"], [238, 2, 1, "", "facesFront"], [238, 2, 1, "", "facesLeft"], [238, 2, 1, "", "facesRight"], [238, 2, 1, "", "facesTop"], [238, 2, 1, "", "facesUp"], [238, 2, 1, "", "x"], [238, 2, 1, "", "y"], [238, 2, 1, "", "z"]], "fipy.meshes.representations": [[240, 0, 0, "-", "abstractRepresentation"], [241, 0, 0, "-", "gridRepresentation"], [242, 0, 0, "-", "meshRepresentation"]], "fipy.meshes.skewedGrid2D": [[243, 1, 1, "", "SkewedGrid2D"]], "fipy.meshes.skewedGrid2D.SkewedGrid2D": [[243, 2, 1, "", "VTKCellDataSet"], [243, 2, 1, "", "VTKFaceDataSet"], [243, 3, 1, "", "__add__"], [243, 3, 1, "", "__div__"], [243, 3, 1, "", "__getstate__"], [243, 3, 1, "", "__mul__"], [243, 3, 1, "", "__radd__"], [243, 3, 1, "", "__repr__"], [243, 3, 1, "", "__rmul__"], [243, 3, 1, "", "__sub__"], [243, 3, 1, "", "__truediv__"], [243, 2, 1, "", "aspect2D"], [243, 2, 1, "", "cellCenters"], [243, 2, 1, "", "cellFaceIDs"], [243, 3, 1, "", "extrude"], [243, 2, 1, "", "facesBack"], [243, 2, 1, "", "facesBottom"], [243, 2, 1, "", "facesDown"], [243, 2, 1, "", "facesFront"], [243, 2, 1, "", "facesLeft"], [243, 2, 1, "", "facesRight"], [243, 2, 1, "", "facesTop"], [243, 2, 1, "", "facesUp"], [243, 2, 1, "", "physicalShape"], [243, 2, 1, "", "x"], [243, 2, 1, "", "y"], [243, 2, 1, "", "z"]], "fipy.meshes.sphericalNonUniformGrid1D": [[244, 1, 1, "", "SphericalNonUniformGrid1D"]], "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D": [[244, 2, 1, "", "VTKCellDataSet"], [244, 2, 1, "", "VTKFaceDataSet"], [244, 3, 1, "", "__add__"], [244, 3, 1, "", "__div__"], [244, 3, 1, "", "__getstate__"], [244, 3, 1, "", "__mul__"], [244, 3, 1, "", "__radd__"], [244, 3, 1, "", "__repr__"], [244, 3, 1, "", "__rmul__"], [244, 3, 1, "", "__sub__"], [244, 3, 1, "", "__truediv__"], [244, 2, 1, "", "aspect2D"], [244, 2, 1, "", "cellCenters"], [244, 2, 1, "", "cellFaceIDs"], [244, 2, 1, "", "facesBack"], [244, 2, 1, "", "facesBottom"], [244, 2, 1, "", "facesDown"], [244, 2, 1, "", "facesFront"], [244, 2, 1, "", "facesLeft"], [244, 2, 1, "", "facesRight"], [244, 2, 1, "", "facesTop"], [244, 2, 1, "", "facesUp"], [244, 2, 1, "", "x"], [244, 2, 1, "", "y"], [244, 2, 1, "", "z"]], "fipy.meshes.sphericalUniformGrid1D": [[245, 1, 1, "", "SphericalUniformGrid1D"]], "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D": [[245, 2, 1, "", "VTKCellDataSet"], [245, 2, 1, "", "VTKFaceDataSet"], [245, 3, 1, "", "__add__"], [245, 3, 1, "", "__div__"], [245, 3, 1, "", "__getstate__"], [245, 3, 1, "", "__radd__"], [245, 3, 1, "", "__repr__"], [245, 3, 1, "", "__sub__"], [245, 3, 1, "", "__truediv__"], [245, 2, 1, "", "aspect2D"], [245, 2, 1, "", "cellCenters"], [245, 2, 1, "", "cellFaceIDs"], [245, 2, 1, "", "exteriorFaces"], [245, 2, 1, "", "facesBack"], [245, 2, 1, "", "facesBottom"], [245, 2, 1, "", "facesDown"], [245, 2, 1, "", "facesFront"], [245, 2, 1, "", "facesLeft"], [245, 2, 1, "", "facesRight"], [245, 2, 1, "", "facesTop"], [245, 2, 1, "", "facesUp"], [245, 2, 1, "", "x"], [245, 2, 1, "", "y"], [245, 2, 1, "", "z"]], "fipy.meshes.topologies": [[248, 0, 0, "-", "abstractTopology"], [249, 0, 0, "-", "gridTopology"], [250, 0, 0, "-", "meshTopology"]], "fipy.meshes.tri2D": [[251, 1, 1, "", "Tri2D"]], "fipy.meshes.tri2D.Tri2D": [[251, 2, 1, "", "VTKCellDataSet"], [251, 2, 1, "", "VTKFaceDataSet"], [251, 3, 1, "", "__add__"], [251, 3, 1, "", "__div__"], [251, 3, 1, "", "__getstate__"], [251, 3, 1, "", "__mul__"], [251, 3, 1, "", "__radd__"], [251, 3, 1, "", "__repr__"], [251, 3, 1, "", "__rmul__"], [251, 3, 1, "", "__sub__"], [251, 3, 1, "", "__truediv__"], [251, 2, 1, "", "aspect2D"], [251, 2, 1, "", "cellCenters"], [251, 2, 1, "", "cellFaceIDs"], [251, 3, 1, "", "extrude"], [251, 2, 1, "", "facesBack"], [251, 2, 1, "", "facesBottom"], [251, 2, 1, "", "facesDown"], [251, 2, 1, "", "facesFront"], [251, 2, 1, "", "facesLeft"], [251, 2, 1, "", "facesRight"], [251, 2, 1, "", "facesTop"], [251, 2, 1, "", "facesUp"], [251, 2, 1, "", "physicalShape"], [251, 2, 1, "", "x"], [251, 2, 1, "", "y"], [251, 2, 1, "", "z"]], "fipy.meshes.uniformGrid": [[252, 1, 1, "", "UniformGrid"]], "fipy.meshes.uniformGrid.UniformGrid": [[252, 2, 1, "", "VTKCellDataSet"], [252, 2, 1, "", "VTKFaceDataSet"], [252, 3, 1, "", "__add__"], [252, 3, 1, "", "__div__"], [252, 3, 1, "", "__getstate__"], [252, 3, 1, "", "__radd__"], [252, 3, 1, "", "__repr__"], [252, 3, 1, "", "__sub__"], [252, 3, 1, "", "__truediv__"], [252, 2, 1, "", "aspect2D"], [252, 2, 1, "", "cellCenters"], [252, 2, 1, "", "cellFaceIDs"], [252, 2, 1, "", "facesBack"], [252, 2, 1, "", "facesBottom"], [252, 2, 1, "", "facesDown"], [252, 2, 1, "", "facesFront"], [252, 2, 1, "", "facesLeft"], [252, 2, 1, "", "facesRight"], [252, 2, 1, "", "facesTop"], [252, 2, 1, "", "facesUp"], [252, 2, 1, "", "x"], [252, 2, 1, "", "y"], [252, 2, 1, "", "z"]], "fipy.meshes.uniformGrid1D": [[253, 1, 1, "", "UniformGrid1D"]], "fipy.meshes.uniformGrid1D.UniformGrid1D": [[253, 2, 1, "", "VTKCellDataSet"], [253, 2, 1, "", "VTKFaceDataSet"], [253, 3, 1, "", "__add__"], [253, 3, 1, "", "__div__"], [253, 3, 1, "", "__getstate__"], [253, 3, 1, "", "__radd__"], [253, 3, 1, "", "__repr__"], [253, 3, 1, "", "__sub__"], [253, 3, 1, "", "__truediv__"], [253, 2, 1, "", "aspect2D"], [253, 2, 1, "", "cellCenters"], [253, 2, 1, "", "cellFaceIDs"], [253, 2, 1, "", "exteriorFaces"], [253, 2, 1, "", "facesBack"], [253, 2, 1, "", "facesBottom"], [253, 2, 1, "", "facesDown"], [253, 2, 1, "", "facesFront"], [253, 2, 1, "", "facesLeft"], [253, 2, 1, "", "facesRight"], [253, 2, 1, "", "facesTop"], [253, 2, 1, "", "facesUp"], [253, 2, 1, "", "x"], [253, 2, 1, "", "y"], [253, 2, 1, "", "z"]], "fipy.meshes.uniformGrid2D": [[254, 1, 1, "", "UniformGrid2D"]], "fipy.meshes.uniformGrid2D.UniformGrid2D": [[254, 2, 1, "", "VTKCellDataSet"], [254, 2, 1, "", "VTKFaceDataSet"], [254, 3, 1, "", "__add__"], [254, 3, 1, "", "__div__"], [254, 3, 1, "", "__getstate__"], [254, 3, 1, "", "__radd__"], [254, 3, 1, "", "__repr__"], [254, 3, 1, "", "__sub__"], [254, 3, 1, "", "__truediv__"], [254, 2, 1, "", "aspect2D"], [254, 2, 1, "", "cellCenters"], [254, 2, 1, "", "cellFaceIDs"], [254, 2, 1, "", "facesBack"], [254, 2, 1, "", "facesBottom"], [254, 2, 1, "", "facesDown"], [254, 2, 1, "", "facesFront"], [254, 2, 1, "", "facesLeft"], [254, 2, 1, "", "facesRight"], [254, 2, 1, "", "facesTop"], [254, 2, 1, "", "facesUp"], [254, 2, 1, "", "x"], [254, 2, 1, "", "y"], [254, 2, 1, "", "z"]], "fipy.meshes.uniformGrid3D": [[255, 1, 1, "", "UniformGrid3D"]], "fipy.meshes.uniformGrid3D.UniformGrid3D": [[255, 2, 1, "", "VTKCellDataSet"], [255, 2, 1, "", "VTKFaceDataSet"], [255, 3, 1, "", "__add__"], [255, 3, 1, "", "__div__"], [255, 3, 1, "", "__getstate__"], [255, 3, 1, "", "__radd__"], [255, 3, 1, "", "__repr__"], [255, 3, 1, "", "__sub__"], [255, 3, 1, "", "__truediv__"], [255, 2, 1, "", "aspect2D"], [255, 2, 1, "", "cellCenters"], [255, 2, 1, "", "cellFaceIDs"], [255, 2, 1, "", "facesBack"], [255, 2, 1, "", "facesBottom"], [255, 2, 1, "", "facesDown"], [255, 2, 1, "", "facesFront"], [255, 2, 1, "", "facesLeft"], [255, 2, 1, "", "facesRight"], [255, 2, 1, "", "facesTop"], [255, 2, 1, "", "facesUp"], [255, 2, 1, "", "x"], [255, 2, 1, "", "y"], [255, 2, 1, "", "z"]], "fipy.solvers": [[256, 6, 1, "", "DefaultAsymmetricSolver"], [256, 6, 1, "", "DefaultSolver"], [256, 6, 1, "", "DummySolver"], [256, 6, 1, "", "GeneralSolver"], [256, 5, 1, "", "SerialSolverError"], [257, 0, 0, "-", "petsc"], [270, 0, 0, "-", "pyAMG"], [278, 0, 0, "-", "pyamgx"], [291, 0, 0, "-", "pysparse"], [302, 0, 0, "-", "pysparseMatrixSolver"], [303, 0, 0, "-", "scipy"], [311, 0, 0, "-", "solver"], [312, 0, 0, "-", "test"], [313, 0, 0, "-", "trilinos"]], "fipy.solvers.SerialSolverError": [[256, 6, 1, "", "__cause__"], [256, 6, 1, "", "__context__"], [256, 3, 1, "", "__delattr__"], [256, 3, 1, "", "__getattribute__"], [256, 3, 1, "", "__reduce__"], [256, 3, 1, "", "__repr__"], [256, 3, 1, "", "__setattr__"], [256, 3, 1, "", "__str__"], [256, 3, 1, "", "add_note"], [256, 3, 1, "", "with_traceback"]], "fipy.solvers.petsc": [[258, 0, 0, "-", "comms"], [262, 0, 0, "-", "dummySolver"], [263, 0, 0, "-", "linearBicgSolver"], [264, 0, 0, "-", "linearCGSSolver"], [265, 0, 0, "-", "linearGMRESSolver"], [266, 0, 0, "-", "linearLUSolver"], [267, 0, 0, "-", "linearPCGSolver"], [268, 0, 0, "-", "petscKrylovSolver"], [269, 0, 0, "-", "petscSolver"]], "fipy.solvers.petsc.comms": [[259, 0, 0, "-", "parallelPETScCommWrapper"], [260, 0, 0, "-", "petscCommWrapper"], [261, 0, 0, "-", "serialPETScCommWrapper"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper": [[259, 1, 1, "", "ParallelPETScCommWrapper"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper": [[259, 3, 1, "", "__getstate__"], [259, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.comms.petscCommWrapper": [[260, 1, 1, "", "PETScCommWrapper"]], "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper": [[260, 3, 1, "", "__getstate__"], [260, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper": [[261, 1, 1, "", "SerialPETScCommWrapper"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper": [[261, 3, 1, "", "__getstate__"], [261, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.dummySolver": [[262, 1, 1, "", "DummySolver"]], "fipy.solvers.petsc.dummySolver.DummySolver": [[262, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.linearBicgSolver": [[263, 1, 1, "", "LinearBicgSolver"]], "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver": [[263, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.linearCGSSolver": [[264, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver": [[264, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.linearGMRESSolver": [[265, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver": [[265, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.linearLUSolver": [[266, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.petsc.linearLUSolver.LinearLUSolver": [[266, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.linearPCGSolver": [[267, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver": [[267, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.petscKrylovSolver": [[268, 1, 1, "", "PETScKrylovSolver"]], "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver": [[268, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.petscSolver": [[269, 1, 1, "", "PETScSolver"]], "fipy.solvers.petsc.petscSolver.PETScSolver": [[269, 3, 1, "", "__repr__"]], "fipy.solvers.pyAMG": [[271, 0, 0, "-", "linearCGSSolver"], [272, 0, 0, "-", "linearGMRESSolver"], [273, 0, 0, "-", "linearGeneralSolver"], [274, 0, 0, "-", "linearLUSolver"], [275, 0, 0, "-", "linearPCGSolver"], [276, 0, 0, "-", "preconditioners"]], "fipy.solvers.pyAMG.linearCGSSolver": [[271, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver": [[271, 3, 1, "", "__repr__"]], "fipy.solvers.pyAMG.linearGMRESSolver": [[272, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver": [[272, 3, 1, "", "__repr__"]], "fipy.solvers.pyAMG.linearGeneralSolver": [[273, 1, 1, "", "LinearGeneralSolver"]], "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver": [[273, 3, 1, "", "__repr__"]], "fipy.solvers.pyAMG.linearLUSolver": [[274, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver": [[274, 3, 1, "", "__repr__"]], "fipy.solvers.pyAMG.linearPCGSolver": [[275, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver": [[275, 3, 1, "", "__repr__"]], "fipy.solvers.pyAMG.preconditioners": [[277, 0, 0, "-", "smoothedAggregationPreconditioner"]], "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner": [[277, 1, 1, "", "SmoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[279, 0, 0, "-", "aggregationAMGSolver"], [280, 0, 0, "-", "classicalAMGSolver"], [281, 0, 0, "-", "linearBiCGStabSolver"], [282, 0, 0, "-", "linearCGSolver"], [283, 0, 0, "-", "linearFGMRESSolver"], [284, 0, 0, "-", "linearGMRESSolver"], [285, 0, 0, "-", "linearLUSolver"], [286, 0, 0, "-", "preconditioners"], [288, 0, 0, "-", "pyAMGXSolver"], [289, 0, 0, "-", "smoothers"]], "fipy.solvers.pyamgx.aggregationAMGSolver": [[279, 1, 1, "", "AggregationAMGSolver"]], "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver": [[279, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.classicalAMGSolver": [[280, 1, 1, "", "ClassicalAMGSolver"]], "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver": [[280, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.linearBiCGStabSolver": [[281, 1, 1, "", "LinearBiCGStabSolver"]], "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver": [[281, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.linearCGSolver": [[282, 1, 1, "", "LinearCGSolver"], [282, 6, 1, "", "LinearPCGSolver"]], "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver": [[282, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.linearFGMRESSolver": [[283, 1, 1, "", "LinearFGMRESSolver"]], "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver": [[283, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.linearGMRESSolver": [[284, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver": [[284, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.linearLUSolver": [[285, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver": [[285, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.preconditioners": [[287, 0, 0, "-", "preconditioners"]], "fipy.solvers.pyamgx.preconditioners.preconditioners": [[287, 1, 1, "", "Preconditioner"]], "fipy.solvers.pyamgx.preconditioners.preconditioners.Preconditioner": [[287, 3, 1, "", "__call__"]], "fipy.solvers.pyamgx.pyAMGXSolver": [[288, 1, 1, "", "PyAMGXSolver"]], "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver": [[288, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.smoothers": [[290, 0, 0, "-", "smoothers"]], "fipy.solvers.pyamgx.smoothers.smoothers": [[290, 1, 1, "", "Smoother"]], "fipy.solvers.pyamgx.smoothers.smoothers.Smoother": [[290, 3, 1, "", "__call__"]], "fipy.solvers.pysparse": [[292, 0, 0, "-", "linearCGSSolver"], [293, 0, 0, "-", "linearGMRESSolver"], [294, 0, 0, "-", "linearJORSolver"], [295, 0, 0, "-", "linearLUSolver"], [296, 0, 0, "-", "linearPCGSolver"], [297, 0, 0, "-", "preconditioners"], [301, 0, 0, "-", "pysparseSolver"]], "fipy.solvers.pysparse.linearCGSSolver": [[292, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver": [[292, 3, 1, "", "__repr__"]], "fipy.solvers.pysparse.linearGMRESSolver": [[293, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver": [[293, 3, 1, "", "__repr__"]], "fipy.solvers.pysparse.linearJORSolver": [[294, 1, 1, "", "LinearJORSolver"]], "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver": [[294, 3, 1, "", "__repr__"]], "fipy.solvers.pysparse.linearLUSolver": [[295, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver": [[295, 3, 1, "", "__repr__"]], "fipy.solvers.pysparse.linearPCGSolver": [[296, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver": [[296, 3, 1, "", "__repr__"]], "fipy.solvers.pysparse.preconditioners": [[298, 0, 0, "-", "jacobiPreconditioner"], [299, 0, 0, "-", "preconditioner"], [300, 0, 0, "-", "ssorPreconditioner"]], "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner": [[298, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.preconditioner": [[299, 1, 1, "", "Preconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorPreconditioner": [[300, 1, 1, "", "SsorPreconditioner"]], "fipy.solvers.pysparse.pysparseSolver": [[301, 1, 1, "", "PysparseSolver"]], "fipy.solvers.pysparse.pysparseSolver.PysparseSolver": [[301, 3, 1, "", "__repr__"]], "fipy.solvers.scipy": [[304, 0, 0, "-", "linearBicgstabSolver"], [305, 0, 0, "-", "linearCGSSolver"], [306, 0, 0, "-", "linearGMRESSolver"], [307, 0, 0, "-", "linearLUSolver"], [308, 0, 0, "-", "linearPCGSolver"], [309, 0, 0, "-", "scipyKrylovSolver"], [310, 0, 0, "-", "scipySolver"]], "fipy.solvers.scipy.linearBicgstabSolver": [[304, 1, 1, "", "LinearBicgstabSolver"]], "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver": [[304, 3, 1, "", "__repr__"]], "fipy.solvers.scipy.linearCGSSolver": [[305, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver": [[305, 3, 1, "", "__repr__"]], "fipy.solvers.scipy.linearGMRESSolver": [[306, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver": [[306, 3, 1, "", "__repr__"]], "fipy.solvers.scipy.linearLUSolver": [[307, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.scipy.linearLUSolver.LinearLUSolver": [[307, 3, 1, "", "__repr__"]], "fipy.solvers.scipy.linearPCGSolver": [[308, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver": [[308, 3, 1, "", "__repr__"]], "fipy.solvers.solver": [[311, 5, 1, "", "IllConditionedPreconditionerWarning"], [311, 5, 1, "", "MatrixIllConditionedWarning"], [311, 5, 1, "", "MaximumIterationWarning"], [311, 5, 1, "", "PreconditionerNotPositiveDefiniteWarning"], [311, 5, 1, "", "PreconditionerWarning"], [311, 5, 1, "", "ScalarQuantityOutOfRangeWarning"], [311, 1, 1, "", "Solver"], [311, 5, 1, "", "SolverConvergenceWarning"], [311, 5, 1, "", "StagnatedSolverWarning"]], "fipy.solvers.solver.IllConditionedPreconditionerWarning": [[311, 6, 1, "", "__cause__"], [311, 6, 1, "", "__context__"], [311, 3, 1, "", "__delattr__"], [311, 3, 1, "", "__getattribute__"], [311, 3, 1, "", "__reduce__"], [311, 3, 1, "", "__repr__"], [311, 3, 1, "", "__setattr__"], [311, 3, 1, "", "__str__"], [311, 3, 1, "", "add_note"], [311, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.MatrixIllConditionedWarning": [[311, 6, 1, "", "__cause__"], [311, 6, 1, "", "__context__"], [311, 3, 1, "", "__delattr__"], [311, 3, 1, "", "__getattribute__"], [311, 3, 1, "", "__reduce__"], [311, 3, 1, "", "__repr__"], [311, 3, 1, "", "__setattr__"], [311, 3, 1, "", "__str__"], [311, 3, 1, "", "add_note"], [311, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.MaximumIterationWarning": [[311, 6, 1, "", "__cause__"], [311, 6, 1, "", "__context__"], [311, 3, 1, "", "__delattr__"], [311, 3, 1, "", "__getattribute__"], [311, 3, 1, "", "__reduce__"], [311, 3, 1, "", "__repr__"], [311, 3, 1, "", "__setattr__"], [311, 3, 1, "", "__str__"], [311, 3, 1, "", "add_note"], [311, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning": [[311, 6, 1, "", "__cause__"], [311, 6, 1, "", "__context__"], [311, 3, 1, "", "__delattr__"], [311, 3, 1, "", "__getattribute__"], [311, 3, 1, "", "__reduce__"], [311, 3, 1, "", "__repr__"], [311, 3, 1, "", "__setattr__"], [311, 3, 1, "", "__str__"], [311, 3, 1, "", "add_note"], [311, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.PreconditionerWarning": [[311, 6, 1, "", "__cause__"], [311, 6, 1, "", "__context__"], [311, 3, 1, "", "__delattr__"], [311, 3, 1, "", "__getattribute__"], [311, 3, 1, "", "__reduce__"], [311, 3, 1, "", "__repr__"], [311, 3, 1, "", "__setattr__"], [311, 3, 1, "", "__str__"], [311, 3, 1, "", "add_note"], [311, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning": [[311, 6, 1, "", "__cause__"], [311, 6, 1, "", "__context__"], [311, 3, 1, "", "__delattr__"], [311, 3, 1, "", "__getattribute__"], [311, 3, 1, "", "__reduce__"], [311, 3, 1, "", "__repr__"], [311, 3, 1, "", "__setattr__"], [311, 3, 1, "", "__str__"], [311, 3, 1, "", "add_note"], [311, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.Solver": [[311, 3, 1, "", "__repr__"]], "fipy.solvers.solver.SolverConvergenceWarning": [[311, 6, 1, "", "__cause__"], [311, 6, 1, "", "__context__"], [311, 3, 1, "", "__delattr__"], [311, 3, 1, "", "__getattribute__"], [311, 3, 1, "", "__reduce__"], [311, 3, 1, "", "__repr__"], [311, 3, 1, "", "__setattr__"], [311, 3, 1, "", "__str__"], [311, 3, 1, "", "add_note"], [311, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.StagnatedSolverWarning": [[311, 6, 1, "", "__cause__"], [311, 6, 1, "", "__context__"], [311, 3, 1, "", "__delattr__"], [311, 3, 1, "", "__getattribute__"], [311, 3, 1, "", "__reduce__"], [311, 3, 1, "", "__repr__"], [311, 3, 1, "", "__setattr__"], [311, 3, 1, "", "__str__"], [311, 3, 1, "", "add_note"], [311, 3, 1, "", "with_traceback"]], "fipy.solvers.trilinos": [[314, 0, 0, "-", "comms"], [318, 0, 0, "-", "linearBicgstabSolver"], [319, 0, 0, "-", "linearCGSSolver"], [320, 0, 0, "-", "linearGMRESSolver"], [321, 0, 0, "-", "linearLUSolver"], [322, 0, 0, "-", "linearPCGSolver"], [323, 0, 0, "-", "preconditioners"], [334, 0, 0, "-", "trilinosAztecOOSolver"], [335, 0, 0, "-", "trilinosMLTest"], [336, 0, 0, "-", "trilinosNonlinearSolver"], [337, 0, 0, "-", "trilinosSolver"]], "fipy.solvers.trilinos.comms": [[315, 0, 0, "-", "epetraCommWrapper"], [316, 0, 0, "-", "parallelEpetraCommWrapper"], [317, 0, 0, "-", "serialEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.epetraCommWrapper": [[315, 1, 1, "", "EpetraCommWrapper"]], "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper": [[315, 3, 1, "", "__getstate__"], [315, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper": [[316, 1, 1, "", "ParallelEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper": [[316, 3, 1, "", "MaxAll"], [316, 3, 1, "", "MinAll"], [316, 3, 1, "", "__getstate__"], [316, 3, 1, "", "__repr__"], [316, 3, 1, "", "allgather"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper": [[317, 1, 1, "", "SerialEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper": [[317, 3, 1, "", "__getstate__"], [317, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearBicgstabSolver": [[318, 1, 1, "", "LinearBicgstabSolver"]], "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver": [[318, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearCGSSolver": [[319, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver": [[319, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearGMRESSolver": [[320, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver": [[320, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearLUSolver": [[321, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver": [[321, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearPCGSolver": [[322, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver": [[322, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.preconditioners": [[324, 0, 0, "-", "domDecompPreconditioner"], [325, 0, 0, "-", "icPreconditioner"], [326, 0, 0, "-", "jacobiPreconditioner"], [327, 0, 0, "-", "multilevelDDMLPreconditioner"], [328, 0, 0, "-", "multilevelDDPreconditioner"], [329, 0, 0, "-", "multilevelNSSAPreconditioner"], [330, 0, 0, "-", "multilevelSAPreconditioner"], [331, 0, 0, "-", "multilevelSGSPreconditioner"], [332, 0, 0, "-", "multilevelSolverSmootherPreconditioner"], [333, 0, 0, "-", "preconditioner"]], "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner": [[324, 1, 1, "", "DomDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icPreconditioner": [[325, 1, 1, "", "ICPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner": [[326, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner": [[327, 1, 1, "", "MultilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner": [[328, 1, 1, "", "MultilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner": [[329, 1, 1, "", "MultilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner": [[330, 1, 1, "", "MultilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner": [[331, 1, 1, "", "MultilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner": [[332, 1, 1, "", "MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.preconditioner": [[333, 1, 1, "", "Preconditioner"]], "fipy.solvers.trilinos.trilinosAztecOOSolver": [[334, 1, 1, "", "TrilinosAztecOOSolver"]], "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver": [[334, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.trilinosMLTest": [[335, 1, 1, "", "TrilinosMLTest"]], "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest": [[335, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.trilinosNonlinearSolver": [[336, 1, 1, "", "TrilinosNonlinearSolver"]], "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver": [[336, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.trilinosSolver": [[337, 1, 1, "", "TrilinosSolver"]], "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver": [[337, 3, 1, "", "__repr__"]], "fipy.steppers": [[338, 4, 1, "", "L1error"], [338, 4, 1, "", "L2error"], [338, 4, 1, "", "LINFerror"], [338, 4, 1, "", "error"], [339, 0, 0, "-", "pidStepper"], [340, 0, 0, "-", "pseudoRKQSStepper"], [338, 4, 1, "", "residual"], [341, 0, 0, "-", "stepper"], [338, 4, 1, "", "sweepMonotonic"]], "fipy.steppers.pidStepper": [[339, 1, 1, "", "PIDStepper"]], "fipy.steppers.pseudoRKQSStepper": [[340, 1, 1, "", "PseudoRKQSStepper"]], "fipy.steppers.stepper": [[341, 1, 1, "", "Stepper"]], "fipy.terms": [[342, 5, 1, "", "AbstractBaseClassError"], [342, 5, 1, "", "ExplicitVariableError"], [342, 5, 1, "", "IncorrectSolutionVariable"], [342, 5, 1, "", "SolutionVariableNumberError"], [342, 5, 1, "", "SolutionVariableRequiredError"], [342, 5, 1, "", "TermMultiplyError"], [342, 5, 1, "", "TransientTermError"], [342, 5, 1, "", "VectorCoeffError"], [343, 0, 0, "-", "abstractBinaryTerm"], [344, 0, 0, "-", "abstractConvectionTerm"], [345, 0, 0, "-", "abstractDiffusionTerm"], [346, 0, 0, "-", "abstractUpwindConvectionTerm"], [347, 0, 0, "-", "advectionTerm"], [348, 0, 0, "-", "asymmetricConvectionTerm"], [349, 0, 0, "-", "binaryTerm"], [350, 0, 0, "-", "cellTerm"], [351, 0, 0, "-", "centralDiffConvectionTerm"], [352, 0, 0, "-", "coupledBinaryTerm"], [353, 0, 0, "-", "diffusionTerm"], [354, 0, 0, "-", "diffusionTermCorrection"], [355, 0, 0, "-", "diffusionTermNoCorrection"], [356, 0, 0, "-", "explicitDiffusionTerm"], [357, 0, 0, "-", "explicitSourceTerm"], [358, 0, 0, "-", "explicitUpwindConvectionTerm"], [359, 0, 0, "-", "exponentialConvectionTerm"], [360, 0, 0, "-", "faceTerm"], [361, 0, 0, "-", "firstOrderAdvectionTerm"], [362, 0, 0, "-", "hybridConvectionTerm"], [363, 0, 0, "-", "implicitDiffusionTerm"], [364, 0, 0, "-", "implicitSourceTerm"], [365, 0, 0, "-", "nonDiffusionTerm"], [366, 0, 0, "-", "powerLawConvectionTerm"], [367, 0, 0, "-", "residualTerm"], [368, 0, 0, "-", "sourceTerm"], [369, 0, 0, "-", "term"], [370, 0, 0, "-", "test"], [371, 0, 0, "-", "transientTerm"], [372, 0, 0, "-", "unaryTerm"], [373, 0, 0, "-", "upwindConvectionTerm"], [374, 0, 0, "-", "vanLeerConvectionTerm"]], "fipy.terms.AbstractBaseClassError": [[342, 6, 1, "", "__cause__"], [342, 6, 1, "", "__context__"], [342, 3, 1, "", "__delattr__"], [342, 3, 1, "", "__getattribute__"], [342, 3, 1, "", "__reduce__"], [342, 3, 1, "", "__repr__"], [342, 3, 1, "", "__setattr__"], [342, 3, 1, "", "__str__"], [342, 3, 1, "", "add_note"], [342, 3, 1, "", "with_traceback"]], "fipy.terms.ExplicitVariableError": [[342, 6, 1, "", "__cause__"], [342, 6, 1, "", "__context__"], [342, 3, 1, "", "__delattr__"], [342, 3, 1, "", "__getattribute__"], [342, 3, 1, "", "__reduce__"], [342, 3, 1, "", "__repr__"], [342, 3, 1, "", "__setattr__"], [342, 3, 1, "", "__str__"], [342, 3, 1, "", "add_note"], [342, 3, 1, "", "with_traceback"]], "fipy.terms.IncorrectSolutionVariable": [[342, 6, 1, "", "__cause__"], [342, 6, 1, "", "__context__"], [342, 3, 1, "", "__delattr__"], [342, 3, 1, "", "__getattribute__"], [342, 3, 1, "", "__reduce__"], [342, 3, 1, "", "__repr__"], [342, 3, 1, "", "__setattr__"], [342, 3, 1, "", "__str__"], [342, 3, 1, "", "add_note"], [342, 3, 1, "", "with_traceback"]], "fipy.terms.SolutionVariableNumberError": [[342, 6, 1, "", "__cause__"], [342, 6, 1, "", "__context__"], [342, 3, 1, "", "__delattr__"], [342, 3, 1, "", "__getattribute__"], [342, 3, 1, "", "__reduce__"], [342, 3, 1, "", "__repr__"], [342, 3, 1, "", "__setattr__"], [342, 3, 1, "", "__str__"], [342, 3, 1, "", "add_note"], [342, 3, 1, "", "with_traceback"]], "fipy.terms.SolutionVariableRequiredError": [[342, 6, 1, "", "__cause__"], [342, 6, 1, "", "__context__"], [342, 3, 1, "", "__delattr__"], [342, 3, 1, "", "__getattribute__"], [342, 3, 1, "", "__reduce__"], [342, 3, 1, "", "__repr__"], [342, 3, 1, "", "__setattr__"], [342, 3, 1, "", "__str__"], [342, 3, 1, "", "add_note"], [342, 3, 1, "", "with_traceback"]], "fipy.terms.TermMultiplyError": [[342, 6, 1, "", "__cause__"], [342, 6, 1, "", "__context__"], [342, 3, 1, "", "__delattr__"], [342, 3, 1, "", "__getattribute__"], [342, 3, 1, "", "__reduce__"], [342, 3, 1, "", "__repr__"], [342, 3, 1, "", "__setattr__"], [342, 3, 1, "", "__str__"], [342, 3, 1, "", "add_note"], [342, 3, 1, "", "with_traceback"]], "fipy.terms.TransientTermError": [[342, 6, 1, "", "__cause__"], [342, 6, 1, "", "__context__"], [342, 3, 1, "", "__delattr__"], [342, 3, 1, "", "__getattribute__"], [342, 3, 1, "", "__reduce__"], [342, 3, 1, "", "__repr__"], [342, 3, 1, "", "__setattr__"], [342, 3, 1, "", "__str__"], [342, 3, 1, "", "add_note"], [342, 3, 1, "", "with_traceback"]], "fipy.terms.VectorCoeffError": [[342, 6, 1, "", "__cause__"], [342, 6, 1, "", "__context__"], [342, 3, 1, "", "__delattr__"], [342, 3, 1, "", "__getattribute__"], [342, 3, 1, "", "__reduce__"], [342, 3, 1, "", "__repr__"], [342, 3, 1, "", "__setattr__"], [342, 3, 1, "", "__str__"], [342, 3, 1, "", "add_note"], [342, 3, 1, "", "with_traceback"]], "fipy.terms.advectionTerm": [[347, 1, 1, "", "AdvectionTerm"]], "fipy.terms.advectionTerm.AdvectionTerm": [[347, 2, 1, "", "RHSvector"], [347, 3, 1, "", "__eq__"], [347, 3, 1, "", "__hash__"], [347, 3, 1, "", "__mul__"], [347, 3, 1, "", "__neg__"], [347, 3, 1, "", "__repr__"], [347, 3, 1, "", "__rmul__"], [347, 3, 1, "", "cacheMatrix"], [347, 3, 1, "", "cacheRHSvector"], [347, 3, 1, "", "justErrorVector"], [347, 3, 1, "", "justResidualVector"], [347, 2, 1, "", "matrix"], [347, 3, 1, "", "residualVectorAndNorm"], [347, 3, 1, "", "solve"], [347, 3, 1, "", "sweep"]], "fipy.terms.cellTerm": [[350, 1, 1, "", "CellTerm"]], "fipy.terms.cellTerm.CellTerm": [[350, 2, 1, "", "RHSvector"], [350, 3, 1, "", "__eq__"], [350, 3, 1, "", "__hash__"], [350, 3, 1, "", "__mul__"], [350, 3, 1, "", "__neg__"], [350, 3, 1, "", "__repr__"], [350, 3, 1, "", "__rmul__"], [350, 3, 1, "", "cacheMatrix"], [350, 3, 1, "", "cacheRHSvector"], [350, 3, 1, "", "justErrorVector"], [350, 3, 1, "", "justResidualVector"], [350, 2, 1, "", "matrix"], [350, 3, 1, "", "residualVectorAndNorm"], [350, 3, 1, "", "solve"], [350, 3, 1, "", "sweep"]], "fipy.terms.centralDiffConvectionTerm": [[351, 1, 1, "", "CentralDifferenceConvectionTerm"]], "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm": [[351, 2, 1, "", "RHSvector"], [351, 3, 1, "", "__eq__"], [351, 3, 1, "", "__hash__"], [351, 3, 1, "", "__mul__"], [351, 3, 1, "", "__neg__"], [351, 3, 1, "", "__repr__"], [351, 3, 1, "", "__rmul__"], [351, 3, 1, "", "cacheMatrix"], [351, 3, 1, "", "cacheRHSvector"], [351, 3, 1, "", "justErrorVector"], [351, 3, 1, "", "justResidualVector"], [351, 2, 1, "", "matrix"], [351, 3, 1, "", "residualVectorAndNorm"], [351, 3, 1, "", "solve"], [351, 3, 1, "", "sweep"]], "fipy.terms.diffusionTerm": [[353, 1, 1, "", "DiffusionTerm"]], "fipy.terms.diffusionTerm.DiffusionTerm": [[353, 2, 1, "", "RHSvector"], [353, 3, 1, "", "__eq__"], [353, 3, 1, "", "__hash__"], [353, 3, 1, "", "__repr__"], [353, 3, 1, "", "cacheMatrix"], [353, 3, 1, "", "cacheRHSvector"], [353, 3, 1, "", "justErrorVector"], [353, 3, 1, "", "justResidualVector"], [353, 2, 1, "", "matrix"], [353, 3, 1, "", "residualVectorAndNorm"], [353, 3, 1, "", "solve"], [353, 3, 1, "", "sweep"]], "fipy.terms.diffusionTermCorrection": [[354, 1, 1, "", "DiffusionTermCorrection"]], "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection": [[354, 2, 1, "", "RHSvector"], [354, 3, 1, "", "__eq__"], [354, 3, 1, "", "__hash__"], [354, 3, 1, "", "__repr__"], [354, 3, 1, "", "cacheMatrix"], [354, 3, 1, "", "cacheRHSvector"], [354, 3, 1, "", "justErrorVector"], [354, 3, 1, "", "justResidualVector"], [354, 2, 1, "", "matrix"], [354, 3, 1, "", "residualVectorAndNorm"], [354, 3, 1, "", "solve"], [354, 3, 1, "", "sweep"]], "fipy.terms.diffusionTermNoCorrection": [[355, 1, 1, "", "DiffusionTermNoCorrection"]], "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection": [[355, 2, 1, "", "RHSvector"], [355, 3, 1, "", "__eq__"], [355, 3, 1, "", "__hash__"], [355, 3, 1, "", "__repr__"], [355, 3, 1, "", "cacheMatrix"], [355, 3, 1, "", "cacheRHSvector"], [355, 3, 1, "", "justErrorVector"], [355, 3, 1, "", "justResidualVector"], [355, 2, 1, "", "matrix"], [355, 3, 1, "", "residualVectorAndNorm"], [355, 3, 1, "", "solve"], [355, 3, 1, "", "sweep"]], "fipy.terms.explicitDiffusionTerm": [[356, 1, 1, "", "ExplicitDiffusionTerm"]], "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm": [[356, 2, 1, "", "RHSvector"], [356, 3, 1, "", "__eq__"], [356, 3, 1, "", "__hash__"], [356, 3, 1, "", "__repr__"], [356, 3, 1, "", "cacheMatrix"], [356, 3, 1, "", "cacheRHSvector"], [356, 3, 1, "", "justErrorVector"], [356, 3, 1, "", "justResidualVector"], [356, 2, 1, "", "matrix"], [356, 3, 1, "", "residualVectorAndNorm"], [356, 3, 1, "", "solve"], [356, 3, 1, "", "sweep"]], "fipy.terms.explicitUpwindConvectionTerm": [[358, 1, 1, "", "ExplicitUpwindConvectionTerm"]], "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm": [[358, 2, 1, "", "RHSvector"], [358, 3, 1, "", "__eq__"], [358, 3, 1, "", "__hash__"], [358, 3, 1, "", "__mul__"], [358, 3, 1, "", "__neg__"], [358, 3, 1, "", "__repr__"], [358, 3, 1, "", "__rmul__"], [358, 3, 1, "", "cacheMatrix"], [358, 3, 1, "", "cacheRHSvector"], [358, 3, 1, "", "justErrorVector"], [358, 3, 1, "", "justResidualVector"], [358, 2, 1, "", "matrix"], [358, 3, 1, "", "residualVectorAndNorm"], [358, 3, 1, "", "solve"], [358, 3, 1, "", "sweep"]], "fipy.terms.exponentialConvectionTerm": [[359, 1, 1, "", "ExponentialConvectionTerm"]], "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm": [[359, 2, 1, "", "RHSvector"], [359, 3, 1, "", "__eq__"], [359, 3, 1, "", "__hash__"], [359, 3, 1, "", "__mul__"], [359, 3, 1, "", "__neg__"], [359, 3, 1, "", "__repr__"], [359, 3, 1, "", "__rmul__"], [359, 3, 1, "", "cacheMatrix"], [359, 3, 1, "", "cacheRHSvector"], [359, 3, 1, "", "justErrorVector"], [359, 3, 1, "", "justResidualVector"], [359, 2, 1, "", "matrix"], [359, 3, 1, "", "residualVectorAndNorm"], [359, 3, 1, "", "solve"], [359, 3, 1, "", "sweep"]], "fipy.terms.faceTerm": [[360, 1, 1, "", "FaceTerm"]], "fipy.terms.faceTerm.FaceTerm": [[360, 2, 1, "", "RHSvector"], [360, 3, 1, "", "__eq__"], [360, 3, 1, "", "__hash__"], [360, 3, 1, "", "__mul__"], [360, 3, 1, "", "__neg__"], [360, 3, 1, "", "__repr__"], [360, 3, 1, "", "__rmul__"], [360, 3, 1, "", "cacheMatrix"], [360, 3, 1, "", "cacheRHSvector"], [360, 3, 1, "", "justErrorVector"], [360, 3, 1, "", "justResidualVector"], [360, 2, 1, "", "matrix"], [360, 3, 1, "", "residualVectorAndNorm"], [360, 3, 1, "", "solve"], [360, 3, 1, "", "sweep"]], "fipy.terms.firstOrderAdvectionTerm": [[361, 1, 1, "", "FirstOrderAdvectionTerm"]], "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm": [[361, 2, 1, "", "RHSvector"], [361, 3, 1, "", "__eq__"], [361, 3, 1, "", "__hash__"], [361, 3, 1, "", "__mul__"], [361, 3, 1, "", "__neg__"], [361, 3, 1, "", "__repr__"], [361, 3, 1, "", "__rmul__"], [361, 3, 1, "", "cacheMatrix"], [361, 3, 1, "", "cacheRHSvector"], [361, 3, 1, "", "justErrorVector"], [361, 3, 1, "", "justResidualVector"], [361, 2, 1, "", "matrix"], [361, 3, 1, "", "residualVectorAndNorm"], [361, 3, 1, "", "solve"], [361, 3, 1, "", "sweep"]], "fipy.terms.hybridConvectionTerm": [[362, 1, 1, "", "HybridConvectionTerm"]], "fipy.terms.hybridConvectionTerm.HybridConvectionTerm": [[362, 2, 1, "", "RHSvector"], [362, 3, 1, "", "__eq__"], [362, 3, 1, "", "__hash__"], [362, 3, 1, "", "__mul__"], [362, 3, 1, "", "__neg__"], [362, 3, 1, "", "__repr__"], [362, 3, 1, "", "__rmul__"], [362, 3, 1, "", "cacheMatrix"], [362, 3, 1, "", "cacheRHSvector"], [362, 3, 1, "", "justErrorVector"], [362, 3, 1, "", "justResidualVector"], [362, 2, 1, "", "matrix"], [362, 3, 1, "", "residualVectorAndNorm"], [362, 3, 1, "", "solve"], [362, 3, 1, "", "sweep"]], "fipy.terms.implicitDiffusionTerm": [[363, 6, 1, "", "ImplicitDiffusionTerm"]], "fipy.terms.implicitSourceTerm": [[364, 1, 1, "", "ImplicitSourceTerm"]], "fipy.terms.implicitSourceTerm.ImplicitSourceTerm": [[364, 2, 1, "", "RHSvector"], [364, 3, 1, "", "__eq__"], [364, 3, 1, "", "__hash__"], [364, 3, 1, "", "__mul__"], [364, 3, 1, "", "__neg__"], [364, 3, 1, "", "__repr__"], [364, 3, 1, "", "__rmul__"], [364, 3, 1, "", "cacheMatrix"], [364, 3, 1, "", "cacheRHSvector"], [364, 3, 1, "", "justErrorVector"], [364, 3, 1, "", "justResidualVector"], [364, 2, 1, "", "matrix"], [364, 3, 1, "", "residualVectorAndNorm"], [364, 3, 1, "", "solve"], [364, 3, 1, "", "sweep"]], "fipy.terms.powerLawConvectionTerm": [[366, 1, 1, "", "PowerLawConvectionTerm"]], "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm": [[366, 2, 1, "", "RHSvector"], [366, 3, 1, "", "__eq__"], [366, 3, 1, "", "__hash__"], [366, 3, 1, "", "__mul__"], [366, 3, 1, "", "__neg__"], [366, 3, 1, "", "__repr__"], [366, 3, 1, "", "__rmul__"], [366, 3, 1, "", "cacheMatrix"], [366, 3, 1, "", "cacheRHSvector"], [366, 3, 1, "", "justErrorVector"], [366, 3, 1, "", "justResidualVector"], [366, 2, 1, "", "matrix"], [366, 3, 1, "", "residualVectorAndNorm"], [366, 3, 1, "", "solve"], [366, 3, 1, "", "sweep"]], "fipy.terms.residualTerm": [[367, 1, 1, "", "ResidualTerm"]], "fipy.terms.residualTerm.ResidualTerm": [[367, 2, 1, "", "RHSvector"], [367, 3, 1, "", "__eq__"], [367, 3, 1, "", "__hash__"], [367, 3, 1, "", "__mul__"], [367, 3, 1, "", "__neg__"], [367, 3, 1, "", "__repr__"], [367, 3, 1, "", "__rmul__"], [367, 3, 1, "", "cacheMatrix"], [367, 3, 1, "", "cacheRHSvector"], [367, 3, 1, "", "justErrorVector"], [367, 3, 1, "", "justResidualVector"], [367, 2, 1, "", "matrix"], [367, 3, 1, "", "residualVectorAndNorm"], [367, 3, 1, "", "solve"], [367, 3, 1, "", "sweep"]], "fipy.terms.sourceTerm": [[368, 1, 1, "", "SourceTerm"]], "fipy.terms.sourceTerm.SourceTerm": [[368, 2, 1, "", "RHSvector"], [368, 3, 1, "", "__eq__"], [368, 3, 1, "", "__hash__"], [368, 3, 1, "", "__mul__"], [368, 3, 1, "", "__neg__"], [368, 3, 1, "", "__repr__"], [368, 3, 1, "", "__rmul__"], [368, 3, 1, "", "cacheMatrix"], [368, 3, 1, "", "cacheRHSvector"], [368, 3, 1, "", "justErrorVector"], [368, 3, 1, "", "justResidualVector"], [368, 2, 1, "", "matrix"], [368, 3, 1, "", "residualVectorAndNorm"], [368, 3, 1, "", "solve"], [368, 3, 1, "", "sweep"]], "fipy.terms.term": [[369, 1, 1, "", "Term"]], "fipy.terms.term.Term": [[369, 2, 1, "", "RHSvector"], [369, 3, 1, "", "__eq__"], [369, 3, 1, "", "__hash__"], [369, 3, 1, "", "__repr__"], [369, 3, 1, "", "cacheMatrix"], [369, 3, 1, "", "cacheRHSvector"], [369, 3, 1, "", "justErrorVector"], [369, 3, 1, "", "justResidualVector"], [369, 2, 1, "", "matrix"], [369, 3, 1, "", "residualVectorAndNorm"], [369, 3, 1, "", "solve"], [369, 3, 1, "", "sweep"]], "fipy.terms.transientTerm": [[371, 1, 1, "", "TransientTerm"]], "fipy.terms.transientTerm.TransientTerm": [[371, 2, 1, "", "RHSvector"], [371, 3, 1, "", "__eq__"], [371, 3, 1, "", "__hash__"], [371, 3, 1, "", "__mul__"], [371, 3, 1, "", "__neg__"], [371, 3, 1, "", "__repr__"], [371, 3, 1, "", "__rmul__"], [371, 3, 1, "", "cacheMatrix"], [371, 3, 1, "", "cacheRHSvector"], [371, 3, 1, "", "justErrorVector"], [371, 3, 1, "", "justResidualVector"], [371, 2, 1, "", "matrix"], [371, 3, 1, "", "residualVectorAndNorm"], [371, 3, 1, "", "solve"], [371, 3, 1, "", "sweep"]], "fipy.terms.upwindConvectionTerm": [[373, 1, 1, "", "UpwindConvectionTerm"]], "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm": [[373, 2, 1, "", "RHSvector"], [373, 3, 1, "", "__eq__"], [373, 3, 1, "", "__hash__"], [373, 3, 1, "", "__mul__"], [373, 3, 1, "", "__neg__"], [373, 3, 1, "", "__repr__"], [373, 3, 1, "", "__rmul__"], [373, 3, 1, "", "cacheMatrix"], [373, 3, 1, "", "cacheRHSvector"], [373, 3, 1, "", "justErrorVector"], [373, 3, 1, "", "justResidualVector"], [373, 2, 1, "", "matrix"], [373, 3, 1, "", "residualVectorAndNorm"], [373, 3, 1, "", "solve"], [373, 3, 1, "", "sweep"]], "fipy.terms.vanLeerConvectionTerm": [[374, 1, 1, "", "VanLeerConvectionTerm"]], "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm": [[374, 2, 1, "", "RHSvector"], [374, 3, 1, "", "__eq__"], [374, 3, 1, "", "__hash__"], [374, 3, 1, "", "__mul__"], [374, 3, 1, "", "__neg__"], [374, 3, 1, "", "__repr__"], [374, 3, 1, "", "__rmul__"], [374, 3, 1, "", "cacheMatrix"], [374, 3, 1, "", "cacheRHSvector"], [374, 3, 1, "", "justErrorVector"], [374, 3, 1, "", "justResidualVector"], [374, 2, 1, "", "matrix"], [374, 3, 1, "", "residualVectorAndNorm"], [374, 3, 1, "", "solve"], [374, 3, 1, "", "sweep"]], "fipy.tests": [[377, 0, 0, "-", "doctestPlus"], [378, 0, 0, "-", "lateImportTest"], [379, 0, 0, "-", "test"], [380, 0, 0, "-", "testProgram"]], "fipy.tests.doctestPlus": [[377, 4, 1, "", "execButNoTest"], [377, 4, 1, "", "register_skipper"], [377, 4, 1, "", "report_skips"], [377, 4, 1, "", "testmod"]], "fipy.tests.test": [[379, 1, 1, "", "DeprecationErroringTestProgram"], [379, 1, 1, "", "test"]], "fipy.tests.test.test": [[379, 3, 1, "", "finalize_options"], [379, 3, 1, "", "initialize_options"]], "fipy.tests.testProgram": [[380, 1, 1, "", "TestProgram"], [380, 6, 1, "", "main"]], "fipy.tools": [[381, 1, 1, "", "PhysicalField"], [381, 4, 1, "", "SharedTemporaryFile"], [381, 1, 1, "", "Vitals"], [382, 0, 0, "-", "comms"], [385, 0, 0, "-", "debug"], [386, 0, 0, "-", "decorators"], [387, 0, 0, "-", "dimensions"], [391, 0, 0, "-", "dump"], [392, 0, 0, "-", "inline"], [393, 0, 0, "-", "logging"], [394, 0, 0, "-", "numerix"], [381, 6, 1, "", "parallelComm"], [395, 0, 0, "-", "parser"], [381, 6, 1, "", "serialComm"], [396, 0, 0, "-", "sharedtempfile"], [397, 0, 0, "-", "test"], [398, 0, 0, "-", "vector"], [399, 0, 0, "-", "version"], [400, 0, 0, "-", "vitals"]], "fipy.tools.PhysicalField": [[381, 3, 1, "", "__abs__"], [381, 3, 1, "", "__add__"], [381, 3, 1, "", "__array__"], [381, 3, 1, "", "__array_wrap__"], [381, 3, 1, "", "__bool__"], [381, 3, 1, "", "__div__"], [381, 3, 1, "", "__eq__"], [381, 3, 1, "", "__float__"], [381, 3, 1, "", "__ge__"], [381, 3, 1, "", "__getitem__"], [381, 3, 1, "", "__gt__"], [381, 3, 1, "", "__hash__"], [381, 3, 1, "", "__le__"], [381, 3, 1, "", "__lt__"], [381, 3, 1, "", "__mod__"], [381, 3, 1, "", "__mul__"], [381, 3, 1, "", "__ne__"], [381, 3, 1, "", "__neg__"], [381, 3, 1, "", "__nonzero__"], [381, 3, 1, "", "__pow__"], [381, 3, 1, "", "__radd__"], [381, 3, 1, "", "__repr__"], [381, 3, 1, "", "__rmul__"], [381, 3, 1, "", "__setitem__"], [381, 3, 1, "", "__str__"], [381, 3, 1, "", "__sub__"], [381, 3, 1, "", "__truediv__"], [381, 3, 1, "", "add"], [381, 3, 1, "", "allclose"], [381, 3, 1, "", "allequal"], [381, 3, 1, "", "arccos"], [381, 3, 1, "", "arccosh"], [381, 3, 1, "", "arcsin"], [381, 3, 1, "", "arctan"], [381, 3, 1, "", "arctan2"], [381, 3, 1, "", "arctanh"], [381, 3, 1, "", "ceil"], [381, 3, 1, "", "conjugate"], [381, 3, 1, "", "convertToUnit"], [381, 3, 1, "", "copy"], [381, 3, 1, "", "cos"], [381, 3, 1, "", "cosh"], [381, 3, 1, "", "divide"], [381, 3, 1, "", "dot"], [381, 3, 1, "", "floor"], [381, 3, 1, "", "getsctype"], [381, 3, 1, "", "inBaseUnits"], [381, 3, 1, "", "inDimensionless"], [381, 3, 1, "", "inRadians"], [381, 3, 1, "", "inSIUnits"], [381, 3, 1, "", "inUnitsOf"], [381, 3, 1, "", "itemset"], [381, 3, 1, "", "log"], [381, 3, 1, "", "log10"], [381, 3, 1, "", "multiply"], [381, 2, 1, "", "numericValue"], [381, 3, 1, "", "put"], [381, 3, 1, "", "reshape"], [381, 2, 1, "", "shape"], [381, 3, 1, "", "sign"], [381, 3, 1, "", "sin"], [381, 3, 1, "", "sinh"], [381, 3, 1, "", "sqrt"], [381, 3, 1, "", "subtract"], [381, 3, 1, "", "sum"], [381, 3, 1, "", "take"], [381, 3, 1, "", "tan"], [381, 3, 1, "", "tanh"], [381, 3, 1, "", "tostring"], [381, 2, 1, "", "unit"]], "fipy.tools.Vitals": [[381, 3, 1, "", "__str__"], [381, 3, 1, "", "appendInfo"], [381, 2, 1, "", "documentElement"], [381, 2, 1, "", "firstChild"], [381, 2, 1, "", "lastChild"], [381, 2, 1, "", "localName"]], "fipy.tools.comms": [[383, 0, 0, "-", "commWrapper"], [384, 0, 0, "-", "dummyComm"]], "fipy.tools.comms.commWrapper": [[383, 1, 1, "", "CommWrapper"]], "fipy.tools.comms.commWrapper.CommWrapper": [[383, 3, 1, "", "__getstate__"], [383, 3, 1, "", "__repr__"]], "fipy.tools.comms.dummyComm": [[384, 1, 1, "", "DummyComm"]], "fipy.tools.comms.dummyComm.DummyComm": [[384, 3, 1, "", "__getstate__"], [384, 3, 1, "", "__repr__"]], "fipy.tools.debug": [[385, 4, 1, "", "PRINT"]], "fipy.tools.decorators": [[386, 4, 1, "", "deprecate"]], "fipy.tools.dimensions": [[388, 0, 0, "-", "DictWithDefault"], [389, 0, 0, "-", "NumberDict"], [390, 0, 0, "-", "physicalField"]], "fipy.tools.dimensions.physicalField": [[390, 1, 1, "", "PhysicalField"], [390, 1, 1, "", "PhysicalUnit"]], "fipy.tools.dimensions.physicalField.PhysicalField": [[390, 3, 1, "", "__abs__"], [390, 3, 1, "", "__add__"], [390, 3, 1, "", "__array__"], [390, 3, 1, "", "__array_wrap__"], [390, 3, 1, "", "__bool__"], [390, 3, 1, "", "__div__"], [390, 3, 1, "", "__eq__"], [390, 3, 1, "", "__float__"], [390, 3, 1, "", "__ge__"], [390, 3, 1, "", "__getitem__"], [390, 3, 1, "", "__gt__"], [390, 3, 1, "", "__hash__"], [390, 3, 1, "", "__le__"], [390, 3, 1, "", "__lt__"], [390, 3, 1, "", "__mod__"], [390, 3, 1, "", "__mul__"], [390, 3, 1, "", "__ne__"], [390, 3, 1, "", "__neg__"], [390, 3, 1, "", "__nonzero__"], [390, 3, 1, "", "__pow__"], [390, 3, 1, "", "__radd__"], [390, 3, 1, "", "__repr__"], [390, 3, 1, "", "__rmul__"], [390, 3, 1, "", "__setitem__"], [390, 3, 1, "", "__str__"], [390, 3, 1, "", "__sub__"], [390, 3, 1, "", "__truediv__"], [390, 3, 1, "", "add"], [390, 3, 1, "", "allclose"], [390, 3, 1, "", "allequal"], [390, 3, 1, "", "arccos"], [390, 3, 1, "", "arccosh"], [390, 3, 1, "", "arcsin"], [390, 3, 1, "", "arctan"], [390, 3, 1, "", "arctan2"], [390, 3, 1, "", "arctanh"], [390, 3, 1, "", "ceil"], [390, 3, 1, "", "conjugate"], [390, 3, 1, "", "convertToUnit"], [390, 3, 1, "", "copy"], [390, 3, 1, "", "cos"], [390, 3, 1, "", "cosh"], [390, 3, 1, "", "divide"], [390, 3, 1, "", "dot"], [390, 3, 1, "", "floor"], [390, 3, 1, "", "getsctype"], [390, 3, 1, "", "inBaseUnits"], [390, 3, 1, "", "inDimensionless"], [390, 3, 1, "", "inRadians"], [390, 3, 1, "", "inSIUnits"], [390, 3, 1, "", "inUnitsOf"], [390, 3, 1, "", "itemset"], [390, 3, 1, "", "log"], [390, 3, 1, "", "log10"], [390, 3, 1, "", "multiply"], [390, 2, 1, "", "numericValue"], [390, 3, 1, "", "put"], [390, 3, 1, "", "reshape"], [390, 2, 1, "", "shape"], [390, 3, 1, "", "sign"], [390, 3, 1, "", "sin"], [390, 3, 1, "", "sinh"], [390, 3, 1, "", "sqrt"], [390, 3, 1, "", "subtract"], [390, 3, 1, "", "sum"], [390, 3, 1, "", "take"], [390, 3, 1, "", "tan"], [390, 3, 1, "", "tanh"], [390, 3, 1, "", "tostring"], [390, 2, 1, "", "unit"]], "fipy.tools.dimensions.physicalField.PhysicalUnit": [[390, 3, 1, "", "__div__"], [390, 3, 1, "", "__eq__"], [390, 3, 1, "", "__ge__"], [390, 3, 1, "", "__gt__"], [390, 6, 1, "", "__hash__"], [390, 3, 1, "", "__le__"], [390, 3, 1, "", "__lt__"], [390, 3, 1, "", "__mul__"], [390, 3, 1, "", "__ne__"], [390, 3, 1, "", "__pow__"], [390, 3, 1, "", "__rdiv__"], [390, 3, 1, "", "__repr__"], [390, 3, 1, "", "__rmul__"], [390, 3, 1, "", "__rtruediv__"], [390, 3, 1, "", "__str__"], [390, 3, 1, "", "__truediv__"], [390, 3, 1, "", "conversionFactorTo"], [390, 3, 1, "", "conversionTupleTo"], [390, 3, 1, "", "isAngle"], [390, 3, 1, "", "isCompatible"], [390, 3, 1, "", "isDimensionless"], [390, 3, 1, "", "isDimensionlessOrAngle"], [390, 3, 1, "", "isInverseAngle"], [390, 3, 1, "", "name"], [390, 3, 1, "", "setName"]], "fipy.tools.dump": [[391, 4, 1, "", "read"], [391, 4, 1, "", "write"]], "fipy.tools.logging": [[393, 4, 1, "", "package_info"]], "fipy.tools.numerix": [[394, 4, 1, "", "L1norm"], [394, 4, 1, "", "L2norm"], [394, 4, 1, "", "LINFnorm"], [394, 4, 1, "", "all"], [394, 4, 1, "", "allclose"], [394, 4, 1, "", "allequal"], [394, 4, 1, "", "dot"], [394, 4, 1, "", "getShape"], [394, 4, 1, "", "getUnit"], [394, 4, 1, "", "isclose"], [394, 4, 1, "", "nearest"], [394, 4, 1, "", "put"], [394, 4, 1, "", "rank"], [394, 4, 1, "", "reshape"], [394, 4, 1, "", "sqrtDot"], [394, 4, 1, "", "sum"], [394, 4, 1, "", "take"], [394, 4, 1, "", "tostring"]], "fipy.tools.parser": [[395, 4, 1, "", "parse"]], "fipy.tools.sharedtempfile": [[396, 4, 1, "", "SharedTemporaryFile"]], "fipy.tools.vector": [[398, 4, 1, "", "prune"], [398, 4, 1, "", "putAdd"]], "fipy.tools.vitals": [[400, 1, 1, "", "Vitals"]], "fipy.tools.vitals.Vitals": [[400, 3, 1, "", "__str__"], [400, 3, 1, "", "appendInfo"], [400, 2, 1, "", "documentElement"], [400, 2, 1, "", "firstChild"], [400, 2, 1, "", "lastChild"], [400, 2, 1, "", "localName"]], "fipy.variables": [[402, 0, 0, "-", "addOverFacesVariable"], [403, 0, 0, "-", "arithmeticCellToFaceVariable"], [404, 0, 0, "-", "betaNoiseVariable"], [405, 0, 0, "-", "binaryOperatorVariable"], [406, 0, 0, "-", "cellToFaceVariable"], [407, 0, 0, "-", "cellVariable"], [408, 0, 0, "-", "constant"], [409, 0, 0, "-", "constraintMask"], [410, 0, 0, "-", "coupledCellVariable"], [411, 0, 0, "-", "distanceVariable"], [412, 0, 0, "-", "exponentialNoiseVariable"], [413, 0, 0, "-", "faceGradContributionsVariable"], [414, 0, 0, "-", "faceGradVariable"], [415, 0, 0, "-", "faceVariable"], [416, 0, 0, "-", "gammaNoiseVariable"], [417, 0, 0, "-", "gaussCellGradVariable"], [418, 0, 0, "-", "gaussianNoiseVariable"], [419, 0, 0, "-", "harmonicCellToFaceVariable"], [420, 0, 0, "-", "histogramVariable"], [421, 0, 0, "-", "interfaceAreaVariable"], [422, 0, 0, "-", "interfaceFlagVariable"], [423, 0, 0, "-", "leastSquaresCellGradVariable"], [424, 0, 0, "-", "levelSetDiffusionVariable"], [425, 0, 0, "-", "meshVariable"], [426, 0, 0, "-", "minmodCellToFaceVariable"], [427, 0, 0, "-", "modCellGradVariable"], [428, 0, 0, "-", "modCellToFaceVariable"], [429, 0, 0, "-", "modFaceGradVariable"], [430, 0, 0, "-", "modPhysicalField"], [431, 0, 0, "-", "modularVariable"], [432, 0, 0, "-", "noiseVariable"], [433, 0, 0, "-", "operatorVariable"], [434, 0, 0, "-", "scharfetterGummelFaceVariable"], [435, 0, 0, "-", "surfactantConvectionVariable"], [436, 0, 0, "-", "surfactantVariable"], [437, 0, 0, "-", "test"], [438, 0, 0, "-", "unaryOperatorVariable"], [439, 0, 0, "-", "uniformNoiseVariable"], [440, 0, 0, "-", "variable"]], "fipy.variables.betaNoiseVariable": [[404, 1, 1, "", "BetaNoiseVariable"]], "fipy.variables.betaNoiseVariable.BetaNoiseVariable": [[404, 3, 1, "", "__abs__"], [404, 3, 1, "", "__and__"], [404, 3, 1, "", "__array__"], [404, 3, 1, "", "__array_wrap__"], [404, 3, 1, "", "__bool__"], [404, 3, 1, "", "__call__"], [404, 3, 1, "", "__eq__"], [404, 3, 1, "", "__ge__"], [404, 3, 1, "", "__getitem__"], [404, 3, 1, "", "__getstate__"], [404, 3, 1, "", "__gt__"], [404, 3, 1, "", "__hash__"], [404, 3, 1, "", "__invert__"], [404, 3, 1, "", "__le__"], [404, 3, 1, "", "__lt__"], [404, 3, 1, "", "__ne__"], [404, 3, 1, "", "__new__"], [404, 3, 1, "", "__nonzero__"], [404, 3, 1, "", "__or__"], [404, 3, 1, "", "__pow__"], [404, 3, 1, "", "__repr__"], [404, 3, 1, "", "__setstate__"], [404, 3, 1, "", "__str__"], [404, 3, 1, "", "all"], [404, 3, 1, "", "allclose"], [404, 3, 1, "", "any"], [404, 2, 1, "", "arithmeticFaceValue"], [404, 2, 1, "", "cellVolumeAverage"], [404, 3, 1, "", "constrain"], [404, 2, 1, "", "constraintMask"], [404, 3, 1, "", "copy"], [404, 3, 1, "", "dot"], [404, 2, 1, "", "faceGrad"], [404, 2, 1, "", "faceGradAverage"], [404, 2, 1, "", "faceValue"], [404, 2, 1, "", "gaussGrad"], [404, 3, 1, "", "getsctype"], [404, 2, 1, "", "globalValue"], [404, 2, 1, "", "grad"], [404, 2, 1, "", "harmonicFaceValue"], [404, 3, 1, "", "inBaseUnits"], [404, 3, 1, "", "inUnitsOf"], [404, 2, 1, "", "leastSquaresGrad"], [404, 2, 1, "", "mag"], [404, 3, 1, "", "max"], [404, 3, 1, "", "min"], [404, 2, 1, "", "minmodFaceValue"], [404, 2, 1, "", "old"], [404, 3, 1, "", "rdot"], [404, 3, 1, "", "release"], [404, 3, 1, "", "scramble"], [404, 3, 1, "", "setValue"], [404, 2, 1, "", "shape"], [404, 3, 1, "", "std"], [404, 2, 1, "", "unit"], [404, 3, 1, "", "updateOld"], [404, 2, 1, "", "value"]], "fipy.variables.cellVariable": [[407, 1, 1, "", "CellVariable"]], "fipy.variables.cellVariable.CellVariable": [[407, 3, 1, "", "__abs__"], [407, 3, 1, "", "__and__"], [407, 3, 1, "", "__array__"], [407, 3, 1, "", "__array_wrap__"], [407, 3, 1, "", "__bool__"], [407, 3, 1, "", "__call__"], [407, 3, 1, "", "__eq__"], [407, 3, 1, "", "__ge__"], [407, 3, 1, "", "__getitem__"], [407, 3, 1, "", "__getstate__"], [407, 3, 1, "", "__gt__"], [407, 3, 1, "", "__hash__"], [407, 3, 1, "", "__invert__"], [407, 3, 1, "", "__le__"], [407, 3, 1, "", "__lt__"], [407, 3, 1, "", "__ne__"], [407, 3, 1, "", "__new__"], [407, 3, 1, "", "__nonzero__"], [407, 3, 1, "", "__or__"], [407, 3, 1, "", "__pow__"], [407, 3, 1, "", "__repr__"], [407, 3, 1, "", "__setstate__"], [407, 3, 1, "", "__str__"], [407, 3, 1, "", "all"], [407, 3, 1, "", "allclose"], [407, 3, 1, "", "any"], [407, 2, 1, "", "arithmeticFaceValue"], [407, 2, 1, "", "cellVolumeAverage"], [407, 3, 1, "", "constrain"], [407, 2, 1, "", "constraintMask"], [407, 3, 1, "", "copy"], [407, 3, 1, "", "dot"], [407, 2, 1, "", "faceGrad"], [407, 2, 1, "", "faceGradAverage"], [407, 2, 1, "", "faceValue"], [407, 2, 1, "", "gaussGrad"], [407, 3, 1, "", "getsctype"], [407, 2, 1, "", "globalValue"], [407, 2, 1, "", "grad"], [407, 2, 1, "", "harmonicFaceValue"], [407, 3, 1, "", "inBaseUnits"], [407, 3, 1, "", "inUnitsOf"], [407, 2, 1, "", "leastSquaresGrad"], [407, 2, 1, "", "mag"], [407, 3, 1, "", "max"], [407, 3, 1, "", "min"], [407, 2, 1, "", "minmodFaceValue"], [407, 2, 1, "", "old"], [407, 3, 1, "", "rdot"], [407, 3, 1, "", "release"], [407, 3, 1, "", "setValue"], [407, 2, 1, "", "shape"], [407, 3, 1, "", "std"], [407, 2, 1, "", "unit"], [407, 3, 1, "", "updateOld"], [407, 2, 1, "", "value"]], "fipy.variables.distanceVariable": [[411, 1, 1, "", "DistanceVariable"]], "fipy.variables.distanceVariable.DistanceVariable": [[411, 3, 1, "", "__abs__"], [411, 3, 1, "", "__and__"], [411, 3, 1, "", "__array__"], [411, 3, 1, "", "__array_wrap__"], [411, 3, 1, "", "__bool__"], [411, 3, 1, "", "__call__"], [411, 3, 1, "", "__eq__"], [411, 3, 1, "", "__ge__"], [411, 3, 1, "", "__getitem__"], [411, 3, 1, "", "__getstate__"], [411, 3, 1, "", "__gt__"], [411, 3, 1, "", "__hash__"], [411, 3, 1, "", "__invert__"], [411, 3, 1, "", "__le__"], [411, 3, 1, "", "__lt__"], [411, 3, 1, "", "__ne__"], [411, 3, 1, "", "__new__"], [411, 3, 1, "", "__nonzero__"], [411, 3, 1, "", "__or__"], [411, 3, 1, "", "__pow__"], [411, 3, 1, "", "__repr__"], [411, 3, 1, "", "__setstate__"], [411, 3, 1, "", "__str__"], [411, 3, 1, "", "all"], [411, 3, 1, "", "allclose"], [411, 3, 1, "", "any"], [411, 2, 1, "", "arithmeticFaceValue"], [411, 3, 1, "", "calcDistanceFunction"], [411, 2, 1, "", "cellInterfaceAreas"], [411, 2, 1, "", "cellVolumeAverage"], [411, 3, 1, "", "constrain"], [411, 2, 1, "", "constraintMask"], [411, 3, 1, "", "copy"], [411, 3, 1, "", "dot"], [411, 3, 1, "", "extendVariable"], [411, 2, 1, "", "faceGrad"], [411, 2, 1, "", "faceGradAverage"], [411, 2, 1, "", "faceValue"], [411, 2, 1, "", "gaussGrad"], [411, 3, 1, "", "getsctype"], [411, 2, 1, "", "globalValue"], [411, 2, 1, "", "grad"], [411, 2, 1, "", "harmonicFaceValue"], [411, 3, 1, "", "inBaseUnits"], [411, 3, 1, "", "inUnitsOf"], [411, 2, 1, "", "leastSquaresGrad"], [411, 2, 1, "", "mag"], [411, 3, 1, "", "max"], [411, 3, 1, "", "min"], [411, 2, 1, "", "minmodFaceValue"], [411, 2, 1, "", "old"], [411, 3, 1, "", "rdot"], [411, 3, 1, "", "release"], [411, 3, 1, "", "setValue"], [411, 2, 1, "", "shape"], [411, 3, 1, "", "std"], [411, 2, 1, "", "unit"], [411, 3, 1, "", "updateOld"], [411, 2, 1, "", "value"]], "fipy.variables.exponentialNoiseVariable": [[412, 1, 1, "", "ExponentialNoiseVariable"]], "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable": [[412, 3, 1, "", "__abs__"], [412, 3, 1, "", "__and__"], [412, 3, 1, "", "__array__"], [412, 3, 1, "", "__array_wrap__"], [412, 3, 1, "", "__bool__"], [412, 3, 1, "", "__call__"], [412, 3, 1, "", "__eq__"], [412, 3, 1, "", "__ge__"], [412, 3, 1, "", "__getitem__"], [412, 3, 1, "", "__getstate__"], [412, 3, 1, "", "__gt__"], [412, 3, 1, "", "__hash__"], [412, 3, 1, "", "__invert__"], [412, 3, 1, "", "__le__"], [412, 3, 1, "", "__lt__"], [412, 3, 1, "", "__ne__"], [412, 3, 1, "", "__new__"], [412, 3, 1, "", "__nonzero__"], [412, 3, 1, "", "__or__"], [412, 3, 1, "", "__pow__"], [412, 3, 1, "", "__repr__"], [412, 3, 1, "", "__setstate__"], [412, 3, 1, "", "__str__"], [412, 3, 1, "", "all"], [412, 3, 1, "", "allclose"], [412, 3, 1, "", "any"], [412, 2, 1, "", "arithmeticFaceValue"], [412, 2, 1, "", "cellVolumeAverage"], [412, 3, 1, "", "constrain"], [412, 2, 1, "", "constraintMask"], [412, 3, 1, "", "copy"], [412, 3, 1, "", "dot"], [412, 2, 1, "", "faceGrad"], [412, 2, 1, "", "faceGradAverage"], [412, 2, 1, "", "faceValue"], [412, 2, 1, "", "gaussGrad"], [412, 3, 1, "", "getsctype"], [412, 2, 1, "", "globalValue"], [412, 2, 1, "", "grad"], [412, 2, 1, "", "harmonicFaceValue"], [412, 3, 1, "", "inBaseUnits"], [412, 3, 1, "", "inUnitsOf"], [412, 2, 1, "", "leastSquaresGrad"], [412, 2, 1, "", "mag"], [412, 3, 1, "", "max"], [412, 3, 1, "", "min"], [412, 2, 1, "", "minmodFaceValue"], [412, 2, 1, "", "old"], [412, 3, 1, "", "rdot"], [412, 3, 1, "", "release"], [412, 3, 1, "", "scramble"], [412, 3, 1, "", "setValue"], [412, 2, 1, "", "shape"], [412, 3, 1, "", "std"], [412, 2, 1, "", "unit"], [412, 3, 1, "", "updateOld"], [412, 2, 1, "", "value"]], "fipy.variables.faceVariable": [[415, 1, 1, "", "FaceVariable"]], "fipy.variables.faceVariable.FaceVariable": [[415, 3, 1, "", "__abs__"], [415, 3, 1, "", "__and__"], [415, 3, 1, "", "__array__"], [415, 3, 1, "", "__array_wrap__"], [415, 3, 1, "", "__bool__"], [415, 3, 1, "", "__call__"], [415, 3, 1, "", "__eq__"], [415, 3, 1, "", "__ge__"], [415, 3, 1, "", "__getitem__"], [415, 3, 1, "", "__getstate__"], [415, 3, 1, "", "__gt__"], [415, 3, 1, "", "__hash__"], [415, 3, 1, "", "__invert__"], [415, 3, 1, "", "__le__"], [415, 3, 1, "", "__lt__"], [415, 3, 1, "", "__ne__"], [415, 3, 1, "", "__new__"], [415, 3, 1, "", "__nonzero__"], [415, 3, 1, "", "__or__"], [415, 3, 1, "", "__pow__"], [415, 3, 1, "", "__repr__"], [415, 3, 1, "", "__setstate__"], [415, 3, 1, "", "__str__"], [415, 3, 1, "", "all"], [415, 3, 1, "", "allclose"], [415, 3, 1, "", "any"], [415, 3, 1, "", "constrain"], [415, 2, 1, "", "constraintMask"], [415, 3, 1, "", "copy"], [415, 2, 1, "", "divergence"], [415, 3, 1, "", "dot"], [415, 3, 1, "", "getsctype"], [415, 3, 1, "", "inBaseUnits"], [415, 3, 1, "", "inUnitsOf"], [415, 2, 1, "", "mag"], [415, 3, 1, "", "max"], [415, 3, 1, "", "min"], [415, 3, 1, "", "rdot"], [415, 3, 1, "", "release"], [415, 3, 1, "", "setValue"], [415, 2, 1, "", "shape"], [415, 3, 1, "", "std"], [415, 2, 1, "", "unit"], [415, 2, 1, "", "value"]], "fipy.variables.gammaNoiseVariable": [[416, 1, 1, "", "GammaNoiseVariable"]], "fipy.variables.gammaNoiseVariable.GammaNoiseVariable": [[416, 3, 1, "", "__abs__"], [416, 3, 1, "", "__and__"], [416, 3, 1, "", "__array__"], [416, 3, 1, "", "__array_wrap__"], [416, 3, 1, "", "__bool__"], [416, 3, 1, "", "__call__"], [416, 3, 1, "", "__eq__"], [416, 3, 1, "", "__ge__"], [416, 3, 1, "", "__getitem__"], [416, 3, 1, "", "__getstate__"], [416, 3, 1, "", "__gt__"], [416, 3, 1, "", "__hash__"], [416, 3, 1, "", "__invert__"], [416, 3, 1, "", "__le__"], [416, 3, 1, "", "__lt__"], [416, 3, 1, "", "__ne__"], [416, 3, 1, "", "__new__"], [416, 3, 1, "", "__nonzero__"], [416, 3, 1, "", "__or__"], [416, 3, 1, "", "__pow__"], [416, 3, 1, "", "__repr__"], [416, 3, 1, "", "__setstate__"], [416, 3, 1, "", "__str__"], [416, 3, 1, "", "all"], [416, 3, 1, "", "allclose"], [416, 3, 1, "", "any"], [416, 2, 1, "", "arithmeticFaceValue"], [416, 2, 1, "", "cellVolumeAverage"], [416, 3, 1, "", "constrain"], [416, 2, 1, "", "constraintMask"], [416, 3, 1, "", "copy"], [416, 3, 1, "", "dot"], [416, 2, 1, "", "faceGrad"], [416, 2, 1, "", "faceGradAverage"], [416, 2, 1, "", "faceValue"], [416, 2, 1, "", "gaussGrad"], [416, 3, 1, "", "getsctype"], [416, 2, 1, "", "globalValue"], [416, 2, 1, "", "grad"], [416, 2, 1, "", "harmonicFaceValue"], [416, 3, 1, "", "inBaseUnits"], [416, 3, 1, "", "inUnitsOf"], [416, 2, 1, "", "leastSquaresGrad"], [416, 2, 1, "", "mag"], [416, 3, 1, "", "max"], [416, 3, 1, "", "min"], [416, 2, 1, "", "minmodFaceValue"], [416, 2, 1, "", "old"], [416, 3, 1, "", "rdot"], [416, 3, 1, "", "release"], [416, 3, 1, "", "scramble"], [416, 3, 1, "", "setValue"], [416, 2, 1, "", "shape"], [416, 3, 1, "", "std"], [416, 2, 1, "", "unit"], [416, 3, 1, "", "updateOld"], [416, 2, 1, "", "value"]], "fipy.variables.gaussianNoiseVariable": [[418, 1, 1, "", "GaussianNoiseVariable"]], "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable": [[418, 3, 1, "", "__abs__"], [418, 3, 1, "", "__and__"], [418, 3, 1, "", "__array__"], [418, 3, 1, "", "__array_wrap__"], [418, 3, 1, "", "__bool__"], [418, 3, 1, "", "__call__"], [418, 3, 1, "", "__eq__"], [418, 3, 1, "", "__ge__"], [418, 3, 1, "", "__getitem__"], [418, 3, 1, "", "__getstate__"], [418, 3, 1, "", "__gt__"], [418, 3, 1, "", "__hash__"], [418, 3, 1, "", "__invert__"], [418, 3, 1, "", "__le__"], [418, 3, 1, "", "__lt__"], [418, 3, 1, "", "__ne__"], [418, 3, 1, "", "__new__"], [418, 3, 1, "", "__nonzero__"], [418, 3, 1, "", "__or__"], [418, 3, 1, "", "__pow__"], [418, 3, 1, "", "__repr__"], [418, 3, 1, "", "__setstate__"], [418, 3, 1, "", "__str__"], [418, 3, 1, "", "all"], [418, 3, 1, "", "allclose"], [418, 3, 1, "", "any"], [418, 2, 1, "", "arithmeticFaceValue"], [418, 2, 1, "", "cellVolumeAverage"], [418, 3, 1, "", "constrain"], [418, 2, 1, "", "constraintMask"], [418, 3, 1, "", "copy"], [418, 3, 1, "", "dot"], [418, 2, 1, "", "faceGrad"], [418, 2, 1, "", "faceGradAverage"], [418, 2, 1, "", "faceValue"], [418, 2, 1, "", "gaussGrad"], [418, 3, 1, "", "getsctype"], [418, 2, 1, "", "globalValue"], [418, 2, 1, "", "grad"], [418, 2, 1, "", "harmonicFaceValue"], [418, 3, 1, "", "inBaseUnits"], [418, 3, 1, "", "inUnitsOf"], [418, 2, 1, "", "leastSquaresGrad"], [418, 2, 1, "", "mag"], [418, 3, 1, "", "max"], [418, 3, 1, "", "min"], [418, 2, 1, "", "minmodFaceValue"], [418, 2, 1, "", "old"], [418, 3, 1, "", "rdot"], [418, 3, 1, "", "release"], [418, 3, 1, "", "scramble"], [418, 3, 1, "", "setValue"], [418, 2, 1, "", "shape"], [418, 3, 1, "", "std"], [418, 2, 1, "", "unit"], [418, 3, 1, "", "updateOld"], [418, 2, 1, "", "value"]], "fipy.variables.histogramVariable": [[420, 1, 1, "", "HistogramVariable"]], "fipy.variables.histogramVariable.HistogramVariable": [[420, 3, 1, "", "__abs__"], [420, 3, 1, "", "__and__"], [420, 3, 1, "", "__array__"], [420, 3, 1, "", "__array_wrap__"], [420, 3, 1, "", "__bool__"], [420, 3, 1, "", "__call__"], [420, 3, 1, "", "__eq__"], [420, 3, 1, "", "__ge__"], [420, 3, 1, "", "__getitem__"], [420, 3, 1, "", "__getstate__"], [420, 3, 1, "", "__gt__"], [420, 3, 1, "", "__hash__"], [420, 3, 1, "", "__invert__"], [420, 3, 1, "", "__le__"], [420, 3, 1, "", "__lt__"], [420, 3, 1, "", "__ne__"], [420, 3, 1, "", "__new__"], [420, 3, 1, "", "__nonzero__"], [420, 3, 1, "", "__or__"], [420, 3, 1, "", "__pow__"], [420, 3, 1, "", "__repr__"], [420, 3, 1, "", "__setstate__"], [420, 3, 1, "", "__str__"], [420, 3, 1, "", "all"], [420, 3, 1, "", "allclose"], [420, 3, 1, "", "any"], [420, 2, 1, "", "arithmeticFaceValue"], [420, 2, 1, "", "cellVolumeAverage"], [420, 3, 1, "", "constrain"], [420, 2, 1, "", "constraintMask"], [420, 3, 1, "", "copy"], [420, 3, 1, "", "dot"], [420, 2, 1, "", "faceGrad"], [420, 2, 1, "", "faceGradAverage"], [420, 2, 1, "", "faceValue"], [420, 2, 1, "", "gaussGrad"], [420, 3, 1, "", "getsctype"], [420, 2, 1, "", "globalValue"], [420, 2, 1, "", "grad"], [420, 2, 1, "", "harmonicFaceValue"], [420, 3, 1, "", "inBaseUnits"], [420, 3, 1, "", "inUnitsOf"], [420, 2, 1, "", "leastSquaresGrad"], [420, 2, 1, "", "mag"], [420, 3, 1, "", "max"], [420, 3, 1, "", "min"], [420, 2, 1, "", "minmodFaceValue"], [420, 2, 1, "", "old"], [420, 3, 1, "", "rdot"], [420, 3, 1, "", "release"], [420, 3, 1, "", "setValue"], [420, 2, 1, "", "shape"], [420, 3, 1, "", "std"], [420, 2, 1, "", "unit"], [420, 3, 1, "", "updateOld"], [420, 2, 1, "", "value"]], "fipy.variables.meshVariable": [[425, 1, 1, "", "MeshVariable"]], "fipy.variables.meshVariable.MeshVariable": [[425, 3, 1, "", "__abs__"], [425, 3, 1, "", "__and__"], [425, 3, 1, "", "__array__"], [425, 3, 1, "", "__array_wrap__"], [425, 3, 1, "", "__bool__"], [425, 3, 1, "", "__call__"], [425, 3, 1, "", "__eq__"], [425, 3, 1, "", "__ge__"], [425, 3, 1, "", "__getitem__"], [425, 3, 1, "", "__getstate__"], [425, 3, 1, "", "__gt__"], [425, 3, 1, "", "__hash__"], [425, 3, 1, "", "__invert__"], [425, 3, 1, "", "__le__"], [425, 3, 1, "", "__lt__"], [425, 3, 1, "", "__ne__"], [425, 3, 1, "", "__new__"], [425, 3, 1, "", "__nonzero__"], [425, 3, 1, "", "__or__"], [425, 3, 1, "", "__pow__"], [425, 3, 1, "", "__repr__"], [425, 3, 1, "", "__setstate__"], [425, 3, 1, "", "__str__"], [425, 3, 1, "", "all"], [425, 3, 1, "", "allclose"], [425, 3, 1, "", "any"], [425, 3, 1, "", "constrain"], [425, 2, 1, "", "constraintMask"], [425, 3, 1, "", "copy"], [425, 3, 1, "", "dot"], [425, 3, 1, "", "getsctype"], [425, 3, 1, "", "inBaseUnits"], [425, 3, 1, "", "inUnitsOf"], [425, 2, 1, "", "mag"], [425, 3, 1, "", "max"], [425, 3, 1, "", "min"], [425, 3, 1, "", "rdot"], [425, 3, 1, "", "release"], [425, 3, 1, "", "setValue"], [425, 2, 1, "", "shape"], [425, 3, 1, "", "std"], [425, 2, 1, "", "unit"], [425, 2, 1, "", "value"]], "fipy.variables.modularVariable": [[431, 1, 1, "", "ModularVariable"]], "fipy.variables.modularVariable.ModularVariable": [[431, 3, 1, "", "__abs__"], [431, 3, 1, "", "__and__"], [431, 3, 1, "", "__array__"], [431, 3, 1, "", "__array_wrap__"], [431, 3, 1, "", "__bool__"], [431, 3, 1, "", "__call__"], [431, 3, 1, "", "__eq__"], [431, 3, 1, "", "__ge__"], [431, 3, 1, "", "__getitem__"], [431, 3, 1, "", "__getstate__"], [431, 3, 1, "", "__gt__"], [431, 3, 1, "", "__hash__"], [431, 3, 1, "", "__invert__"], [431, 3, 1, "", "__le__"], [431, 3, 1, "", "__lt__"], [431, 3, 1, "", "__ne__"], [431, 3, 1, "", "__new__"], [431, 3, 1, "", "__nonzero__"], [431, 3, 1, "", "__or__"], [431, 3, 1, "", "__pow__"], [431, 3, 1, "", "__repr__"], [431, 3, 1, "", "__setstate__"], [431, 3, 1, "", "__str__"], [431, 3, 1, "", "all"], [431, 3, 1, "", "allclose"], [431, 3, 1, "", "any"], [431, 2, 1, "", "arithmeticFaceValue"], [431, 2, 1, "", "cellVolumeAverage"], [431, 3, 1, "", "constrain"], [431, 2, 1, "", "constraintMask"], [431, 3, 1, "", "copy"], [431, 3, 1, "", "dot"], [431, 2, 1, "", "faceGrad"], [431, 2, 1, "", "faceGradAverage"], [431, 2, 1, "", "faceGradNoMod"], [431, 2, 1, "", "faceValue"], [431, 2, 1, "", "gaussGrad"], [431, 3, 1, "", "getsctype"], [431, 2, 1, "", "globalValue"], [431, 2, 1, "", "grad"], [431, 2, 1, "", "harmonicFaceValue"], [431, 3, 1, "", "inBaseUnits"], [431, 3, 1, "", "inUnitsOf"], [431, 2, 1, "", "leastSquaresGrad"], [431, 2, 1, "", "mag"], [431, 3, 1, "", "max"], [431, 3, 1, "", "min"], [431, 2, 1, "", "minmodFaceValue"], [431, 2, 1, "", "old"], [431, 3, 1, "", "rdot"], [431, 3, 1, "", "release"], [431, 3, 1, "", "setValue"], [431, 2, 1, "", "shape"], [431, 3, 1, "", "std"], [431, 2, 1, "", "unit"], [431, 3, 1, "", "updateOld"], [431, 2, 1, "", "value"]], "fipy.variables.noiseVariable": [[432, 1, 1, "", "NoiseVariable"]], "fipy.variables.noiseVariable.NoiseVariable": [[432, 3, 1, "", "__abs__"], [432, 3, 1, "", "__and__"], [432, 3, 1, "", "__array__"], [432, 3, 1, "", "__array_wrap__"], [432, 3, 1, "", "__bool__"], [432, 3, 1, "", "__call__"], [432, 3, 1, "", "__eq__"], [432, 3, 1, "", "__ge__"], [432, 3, 1, "", "__getitem__"], [432, 3, 1, "", "__getstate__"], [432, 3, 1, "", "__gt__"], [432, 3, 1, "", "__hash__"], [432, 3, 1, "", "__invert__"], [432, 3, 1, "", "__le__"], [432, 3, 1, "", "__lt__"], [432, 3, 1, "", "__ne__"], [432, 3, 1, "", "__new__"], [432, 3, 1, "", "__nonzero__"], [432, 3, 1, "", "__or__"], [432, 3, 1, "", "__pow__"], [432, 3, 1, "", "__repr__"], [432, 3, 1, "", "__setstate__"], [432, 3, 1, "", "__str__"], [432, 3, 1, "", "all"], [432, 3, 1, "", "allclose"], [432, 3, 1, "", "any"], [432, 2, 1, "", "arithmeticFaceValue"], [432, 2, 1, "", "cellVolumeAverage"], [432, 3, 1, "", "constrain"], [432, 2, 1, "", "constraintMask"], [432, 3, 1, "", "copy"], [432, 3, 1, "", "dot"], [432, 2, 1, "", "faceGrad"], [432, 2, 1, "", "faceGradAverage"], [432, 2, 1, "", "faceValue"], [432, 2, 1, "", "gaussGrad"], [432, 3, 1, "", "getsctype"], [432, 2, 1, "", "globalValue"], [432, 2, 1, "", "grad"], [432, 2, 1, "", "harmonicFaceValue"], [432, 3, 1, "", "inBaseUnits"], [432, 3, 1, "", "inUnitsOf"], [432, 2, 1, "", "leastSquaresGrad"], [432, 2, 1, "", "mag"], [432, 3, 1, "", "max"], [432, 3, 1, "", "min"], [432, 2, 1, "", "minmodFaceValue"], [432, 2, 1, "", "old"], [432, 3, 1, "", "rdot"], [432, 3, 1, "", "release"], [432, 3, 1, "", "scramble"], [432, 3, 1, "", "setValue"], [432, 2, 1, "", "shape"], [432, 3, 1, "", "std"], [432, 2, 1, "", "unit"], [432, 3, 1, "", "updateOld"], [432, 2, 1, "", "value"]], "fipy.variables.scharfetterGummelFaceVariable": [[434, 1, 1, "", "ScharfetterGummelFaceVariable"]], "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable": [[434, 3, 1, "", "__abs__"], [434, 3, 1, "", "__and__"], [434, 3, 1, "", "__array__"], [434, 3, 1, "", "__array_wrap__"], [434, 3, 1, "", "__bool__"], [434, 3, 1, "", "__call__"], [434, 3, 1, "", "__eq__"], [434, 3, 1, "", "__ge__"], [434, 3, 1, "", "__getitem__"], [434, 3, 1, "", "__getstate__"], [434, 3, 1, "", "__gt__"], [434, 3, 1, "", "__hash__"], [434, 3, 1, "", "__invert__"], [434, 3, 1, "", "__le__"], [434, 3, 1, "", "__lt__"], [434, 3, 1, "", "__ne__"], [434, 3, 1, "", "__new__"], [434, 3, 1, "", "__nonzero__"], [434, 3, 1, "", "__or__"], [434, 3, 1, "", "__pow__"], [434, 3, 1, "", "__repr__"], [434, 3, 1, "", "__setstate__"], [434, 3, 1, "", "__str__"], [434, 3, 1, "", "all"], [434, 3, 1, "", "allclose"], [434, 3, 1, "", "any"], [434, 3, 1, "", "constrain"], [434, 2, 1, "", "constraintMask"], [434, 3, 1, "", "copy"], [434, 2, 1, "", "divergence"], [434, 3, 1, "", "dot"], [434, 3, 1, "", "getsctype"], [434, 3, 1, "", "inBaseUnits"], [434, 3, 1, "", "inUnitsOf"], [434, 2, 1, "", "mag"], [434, 3, 1, "", "max"], [434, 3, 1, "", "min"], [434, 3, 1, "", "rdot"], [434, 3, 1, "", "release"], [434, 3, 1, "", "setValue"], [434, 2, 1, "", "shape"], [434, 3, 1, "", "std"], [434, 2, 1, "", "unit"], [434, 2, 1, "", "value"]], "fipy.variables.surfactantConvectionVariable": [[435, 1, 1, "", "SurfactantConvectionVariable"]], "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable": [[435, 3, 1, "", "__abs__"], [435, 3, 1, "", "__and__"], [435, 3, 1, "", "__array__"], [435, 3, 1, "", "__array_wrap__"], [435, 3, 1, "", "__bool__"], [435, 3, 1, "", "__call__"], [435, 3, 1, "", "__eq__"], [435, 3, 1, "", "__ge__"], [435, 3, 1, "", "__getitem__"], [435, 3, 1, "", "__getstate__"], [435, 3, 1, "", "__gt__"], [435, 3, 1, "", "__hash__"], [435, 3, 1, "", "__invert__"], [435, 3, 1, "", "__le__"], [435, 3, 1, "", "__lt__"], [435, 3, 1, "", "__ne__"], [435, 3, 1, "", "__new__"], [435, 3, 1, "", "__nonzero__"], [435, 3, 1, "", "__or__"], [435, 3, 1, "", "__pow__"], [435, 3, 1, "", "__repr__"], [435, 3, 1, "", "__setstate__"], [435, 3, 1, "", "__str__"], [435, 3, 1, "", "all"], [435, 3, 1, "", "allclose"], [435, 3, 1, "", "any"], [435, 3, 1, "", "constrain"], [435, 2, 1, "", "constraintMask"], [435, 3, 1, "", "copy"], [435, 2, 1, "", "divergence"], [435, 3, 1, "", "dot"], [435, 3, 1, "", "getsctype"], [435, 3, 1, "", "inBaseUnits"], [435, 3, 1, "", "inUnitsOf"], [435, 2, 1, "", "mag"], [435, 3, 1, "", "max"], [435, 3, 1, "", "min"], [435, 3, 1, "", "rdot"], [435, 3, 1, "", "release"], [435, 3, 1, "", "setValue"], [435, 2, 1, "", "shape"], [435, 3, 1, "", "std"], [435, 2, 1, "", "unit"], [435, 2, 1, "", "value"]], "fipy.variables.surfactantVariable": [[436, 1, 1, "", "SurfactantVariable"]], "fipy.variables.surfactantVariable.SurfactantVariable": [[436, 3, 1, "", "__abs__"], [436, 3, 1, "", "__and__"], [436, 3, 1, "", "__array__"], [436, 3, 1, "", "__array_wrap__"], [436, 3, 1, "", "__bool__"], [436, 3, 1, "", "__call__"], [436, 3, 1, "", "__eq__"], [436, 3, 1, "", "__ge__"], [436, 3, 1, "", "__getitem__"], [436, 3, 1, "", "__getstate__"], [436, 3, 1, "", "__gt__"], [436, 3, 1, "", "__hash__"], [436, 3, 1, "", "__invert__"], [436, 3, 1, "", "__le__"], [436, 3, 1, "", "__lt__"], [436, 3, 1, "", "__ne__"], [436, 3, 1, "", "__new__"], [436, 3, 1, "", "__nonzero__"], [436, 3, 1, "", "__or__"], [436, 3, 1, "", "__pow__"], [436, 3, 1, "", "__repr__"], [436, 3, 1, "", "__setstate__"], [436, 3, 1, "", "__str__"], [436, 3, 1, "", "all"], [436, 3, 1, "", "allclose"], [436, 3, 1, "", "any"], [436, 2, 1, "", "arithmeticFaceValue"], [436, 2, 1, "", "cellVolumeAverage"], [436, 3, 1, "", "constrain"], [436, 2, 1, "", "constraintMask"], [436, 3, 1, "", "copy"], [436, 3, 1, "", "dot"], [436, 2, 1, "", "faceGrad"], [436, 2, 1, "", "faceGradAverage"], [436, 2, 1, "", "faceValue"], [436, 2, 1, "", "gaussGrad"], [436, 3, 1, "", "getsctype"], [436, 2, 1, "", "globalValue"], [436, 2, 1, "", "grad"], [436, 2, 1, "", "harmonicFaceValue"], [436, 3, 1, "", "inBaseUnits"], [436, 3, 1, "", "inUnitsOf"], [436, 2, 1, "", "interfaceVar"], [436, 2, 1, "", "leastSquaresGrad"], [436, 2, 1, "", "mag"], [436, 3, 1, "", "max"], [436, 3, 1, "", "min"], [436, 2, 1, "", "minmodFaceValue"], [436, 2, 1, "", "old"], [436, 3, 1, "", "rdot"], [436, 3, 1, "", "release"], [436, 3, 1, "", "setValue"], [436, 2, 1, "", "shape"], [436, 3, 1, "", "std"], [436, 2, 1, "", "unit"], [436, 3, 1, "", "updateOld"], [436, 2, 1, "", "value"]], "fipy.variables.uniformNoiseVariable": [[439, 1, 1, "", "UniformNoiseVariable"]], "fipy.variables.uniformNoiseVariable.UniformNoiseVariable": [[439, 3, 1, "", "__abs__"], [439, 3, 1, "", "__and__"], [439, 3, 1, "", "__array__"], [439, 3, 1, "", "__array_wrap__"], [439, 3, 1, "", "__bool__"], [439, 3, 1, "", "__call__"], [439, 3, 1, "", "__eq__"], [439, 3, 1, "", "__ge__"], [439, 3, 1, "", "__getitem__"], [439, 3, 1, "", "__getstate__"], [439, 3, 1, "", "__gt__"], [439, 3, 1, "", "__hash__"], [439, 3, 1, "", "__invert__"], [439, 3, 1, "", "__le__"], [439, 3, 1, "", "__lt__"], [439, 3, 1, "", "__ne__"], [439, 3, 1, "", "__new__"], [439, 3, 1, "", "__nonzero__"], [439, 3, 1, "", "__or__"], [439, 3, 1, "", "__pow__"], [439, 3, 1, "", "__repr__"], [439, 3, 1, "", "__setstate__"], [439, 3, 1, "", "__str__"], [439, 3, 1, "", "all"], [439, 3, 1, "", "allclose"], [439, 3, 1, "", "any"], [439, 2, 1, "", "arithmeticFaceValue"], [439, 2, 1, "", "cellVolumeAverage"], [439, 3, 1, "", "constrain"], [439, 2, 1, "", "constraintMask"], [439, 3, 1, "", "copy"], [439, 3, 1, "", "dot"], [439, 2, 1, "", "faceGrad"], [439, 2, 1, "", "faceGradAverage"], [439, 2, 1, "", "faceValue"], [439, 2, 1, "", "gaussGrad"], [439, 3, 1, "", "getsctype"], [439, 2, 1, "", "globalValue"], [439, 2, 1, "", "grad"], [439, 2, 1, "", "harmonicFaceValue"], [439, 3, 1, "", "inBaseUnits"], [439, 3, 1, "", "inUnitsOf"], [439, 2, 1, "", "leastSquaresGrad"], [439, 2, 1, "", "mag"], [439, 3, 1, "", "max"], [439, 3, 1, "", "min"], [439, 2, 1, "", "minmodFaceValue"], [439, 2, 1, "", "old"], [439, 3, 1, "", "rdot"], [439, 3, 1, "", "release"], [439, 3, 1, "", "scramble"], [439, 3, 1, "", "setValue"], [439, 2, 1, "", "shape"], [439, 3, 1, "", "std"], [439, 2, 1, "", "unit"], [439, 3, 1, "", "updateOld"], [439, 2, 1, "", "value"]], "fipy.variables.variable": [[440, 1, 1, "", "Variable"]], "fipy.variables.variable.Variable": [[440, 3, 1, "", "__abs__"], [440, 3, 1, "", "__and__"], [440, 3, 1, "", "__array__"], [440, 3, 1, "", "__array_wrap__"], [440, 3, 1, "", "__bool__"], [440, 3, 1, "", "__call__"], [440, 3, 1, "", "__eq__"], [440, 3, 1, "", "__ge__"], [440, 3, 1, "", "__getitem__"], [440, 3, 1, "", "__getstate__"], [440, 3, 1, "", "__gt__"], [440, 3, 1, "", "__hash__"], [440, 3, 1, "", "__invert__"], [440, 3, 1, "", "__le__"], [440, 3, 1, "", "__lt__"], [440, 3, 1, "", "__ne__"], [440, 3, 1, "", "__new__"], [440, 3, 1, "", "__nonzero__"], [440, 3, 1, "", "__or__"], [440, 3, 1, "", "__pow__"], [440, 3, 1, "", "__repr__"], [440, 3, 1, "", "__setstate__"], [440, 3, 1, "", "__str__"], [440, 3, 1, "", "all"], [440, 3, 1, "", "allclose"], [440, 3, 1, "", "any"], [440, 3, 1, "", "constrain"], [440, 3, 1, "", "copy"], [440, 3, 1, "", "getsctype"], [440, 3, 1, "", "inBaseUnits"], [440, 3, 1, "", "inUnitsOf"], [440, 2, 1, "", "mag"], [440, 3, 1, "", "max"], [440, 3, 1, "", "min"], [440, 3, 1, "", "release"], [440, 3, 1, "", "setValue"], [440, 2, 1, "", "shape"], [440, 3, 1, "", "std"], [440, 2, 1, "", "unit"], [440, 2, 1, "", "value"]], "fipy.viewers": [[441, 1, 1, "", "DummyViewer"], [441, 5, 1, "", "MeshDimensionError"], [441, 4, 1, "", "Viewer"], [442, 0, 0, "-", "matplotlibViewer"], [454, 0, 0, "-", "mayaviViewer"], [458, 0, 0, "-", "multiViewer"], [459, 0, 0, "-", "test"], [460, 0, 0, "-", "testinteractive"], [461, 0, 0, "-", "tsvViewer"], [462, 0, 0, "-", "viewer"], [463, 0, 0, "-", "vtkViewer"]], "fipy.viewers.DummyViewer": [[441, 3, 1, "", "plot"], [441, 3, 1, "", "plotMesh"], [441, 3, 1, "", "setLimits"], [441, 2, 1, "", "title"], [441, 2, 1, "", "vars"]], "fipy.viewers.MeshDimensionError": [[441, 6, 1, "", "__cause__"], [441, 6, 1, "", "__context__"], [441, 3, 1, "", "__delattr__"], [441, 3, 1, "", "__getattribute__"], [441, 3, 1, "", "__reduce__"], [441, 3, 1, "", "__repr__"], [441, 3, 1, "", "__setattr__"], [441, 3, 1, "", "__str__"], [441, 3, 1, "", "add_note"], [441, 3, 1, "", "with_traceback"]], "fipy.viewers.matplotlibViewer": [[442, 4, 1, "", "MatplotlibViewer"], [443, 0, 0, "-", "abstractMatplotlib2DViewer"], [444, 0, 0, "-", "abstractMatplotlibViewer"], [445, 0, 0, "-", "matplotlib1DViewer"], [446, 0, 0, "-", "matplotlib2DContourViewer"], [447, 0, 0, "-", "matplotlib2DGridContourViewer"], [448, 0, 0, "-", "matplotlib2DGridViewer"], [449, 0, 0, "-", "matplotlib2DViewer"], [450, 0, 0, "-", "matplotlibSparseMatrixViewer"], [451, 0, 0, "-", "matplotlibStreamViewer"], [452, 0, 0, "-", "matplotlibVectorViewer"], [453, 0, 0, "-", "test"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer": [[443, 1, 1, "", "AbstractMatplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer": [[443, 2, 1, "", "axes"], [443, 2, 1, "", "cmap"], [443, 2, 1, "", "colorbar"], [443, 2, 1, "", "fig"], [443, 2, 1, "", "id"], [443, 2, 1, "", "log"], [443, 3, 1, "", "plot"], [443, 3, 1, "", "plotMesh"], [443, 3, 1, "", "setLimits"], [443, 2, 1, "", "title"], [443, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer": [[444, 1, 1, "", "AbstractMatplotlibViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer": [[444, 2, 1, "", "axes"], [444, 2, 1, "", "cmap"], [444, 2, 1, "", "colorbar"], [444, 2, 1, "", "fig"], [444, 2, 1, "", "id"], [444, 2, 1, "", "log"], [444, 3, 1, "", "plot"], [444, 3, 1, "", "plotMesh"], [444, 3, 1, "", "setLimits"], [444, 2, 1, "", "title"], [444, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer": [[445, 1, 1, "", "Matplotlib1DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer": [[445, 2, 1, "", "axes"], [445, 2, 1, "", "cmap"], [445, 2, 1, "", "colorbar"], [445, 2, 1, "", "fig"], [445, 2, 1, "", "id"], [445, 2, 1, "", "lines"], [445, 2, 1, "", "log"], [445, 3, 1, "", "plot"], [445, 3, 1, "", "plotMesh"], [445, 3, 1, "", "setLimits"], [445, 2, 1, "", "title"], [445, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer": [[446, 1, 1, "", "Matplotlib2DContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer": [[446, 2, 1, "", "axes"], [446, 2, 1, "", "cmap"], [446, 2, 1, "", "colorbar"], [446, 2, 1, "", "fig"], [446, 2, 1, "", "id"], [446, 2, 1, "", "levels"], [446, 2, 1, "", "log"], [446, 3, 1, "", "plot"], [446, 3, 1, "", "plotMesh"], [446, 3, 1, "", "setLimits"], [446, 2, 1, "", "title"], [446, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer": [[447, 1, 1, "", "Matplotlib2DGridContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer": [[447, 2, 1, "", "axes"], [447, 2, 1, "", "cmap"], [447, 2, 1, "", "colorbar"], [447, 2, 1, "", "fig"], [447, 2, 1, "", "id"], [447, 2, 1, "", "levels"], [447, 2, 1, "", "log"], [447, 3, 1, "", "plot"], [447, 3, 1, "", "plotMesh"], [447, 3, 1, "", "setLimits"], [447, 2, 1, "", "title"], [447, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer": [[448, 1, 1, "", "Matplotlib2DGridViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer": [[448, 2, 1, "", "axes"], [448, 2, 1, "", "cmap"], [448, 2, 1, "", "colorbar"], [448, 2, 1, "", "fig"], [448, 2, 1, "", "id"], [448, 2, 1, "", "log"], [448, 3, 1, "", "plot"], [448, 3, 1, "", "plotMesh"], [448, 3, 1, "", "setLimits"], [448, 2, 1, "", "title"], [448, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer": [[449, 1, 1, "", "Matplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer": [[449, 2, 1, "", "axes"], [449, 2, 1, "", "cmap"], [449, 2, 1, "", "collection"], [449, 2, 1, "", "colorbar"], [449, 2, 1, "", "fig"], [449, 2, 1, "", "id"], [449, 2, 1, "", "log"], [449, 3, 1, "", "plot"], [449, 3, 1, "", "plotMesh"], [449, 3, 1, "", "setLimits"], [449, 2, 1, "", "title"], [449, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer": [[450, 1, 1, "", "MatplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer": [[451, 1, 1, "", "MatplotlibStreamViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer": [[451, 2, 1, "", "axes"], [451, 2, 1, "", "cmap"], [451, 2, 1, "", "colorbar"], [451, 2, 1, "", "fig"], [451, 2, 1, "", "id"], [451, 2, 1, "", "kwargs"], [451, 2, 1, "", "log"], [451, 3, 1, "", "plot"], [451, 3, 1, "", "plotMesh"], [451, 3, 1, "", "setLimits"], [451, 2, 1, "", "title"], [451, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer": [[452, 1, 1, "", "MatplotlibVectorViewer"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer": [[452, 2, 1, "", "axes"], [452, 2, 1, "", "cmap"], [452, 2, 1, "", "colorbar"], [452, 2, 1, "", "fig"], [452, 2, 1, "", "id"], [452, 2, 1, "", "log"], [452, 3, 1, "", "plot"], [452, 3, 1, "", "plotMesh"], [452, 3, 1, "", "setLimits"], [452, 2, 1, "", "title"], [452, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer": [[454, 1, 1, "", "MayaviClient"], [455, 0, 0, "-", "mayaviClient"], [456, 0, 0, "-", "mayaviDaemon"], [457, 0, 0, "-", "test"]], "fipy.viewers.mayaviViewer.MayaviClient": [[454, 2, 1, "", "fps"], [454, 3, 1, "", "plot"], [454, 3, 1, "", "plotMesh"], [454, 3, 1, "", "setLimits"], [454, 2, 1, "", "title"], [454, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer.mayaviClient": [[455, 1, 1, "", "MayaviClient"]], "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient": [[455, 2, 1, "", "fps"], [455, 3, 1, "", "plot"], [455, 3, 1, "", "plotMesh"], [455, 3, 1, "", "setLimits"], [455, 2, 1, "", "title"], [455, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer.mayaviDaemon": [[456, 1, 1, "", "MayaviDaemon"], [456, 4, 1, "", "main"]], "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon": [[456, 3, 1, "", "parse_command_line"], [456, 3, 1, "", "setup_source"], [456, 3, 1, "", "update_pipeline"], [456, 3, 1, "", "view_data"]], "fipy.viewers.multiViewer": [[458, 1, 1, "", "MultiViewer"]], "fipy.viewers.multiViewer.MultiViewer": [[458, 3, 1, "", "plot"], [458, 3, 1, "", "plotMesh"], [458, 3, 1, "", "setLimits"], [458, 2, 1, "", "title"], [458, 2, 1, "", "vars"]], "fipy.viewers.tsvViewer": [[461, 1, 1, "", "TSVViewer"]], "fipy.viewers.tsvViewer.TSVViewer": [[461, 3, 1, "", "plot"], [461, 3, 1, "", "plotMesh"], [461, 3, 1, "", "setLimits"], [461, 2, 1, "", "title"], [461, 2, 1, "", "vars"]], "fipy.viewers.viewer": [[462, 1, 1, "", "AbstractViewer"]], "fipy.viewers.viewer.AbstractViewer": [[462, 3, 1, "", "plot"], [462, 3, 1, "", "plotMesh"], [462, 3, 1, "", "setLimits"], [462, 2, 1, "", "title"], [462, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer": [[463, 1, 1, "", "VTKCellViewer"], [463, 1, 1, "", "VTKFaceViewer"], [463, 4, 1, "", "VTKViewer"], [464, 0, 0, "-", "test"], [465, 0, 0, "-", "vtkCellViewer"], [466, 0, 0, "-", "vtkFaceViewer"], [467, 0, 0, "-", "vtkViewer"]], "fipy.viewers.vtkViewer.VTKCellViewer": [[463, 3, 1, "", "plot"], [463, 3, 1, "", "plotMesh"], [463, 3, 1, "", "setLimits"], [463, 2, 1, "", "title"], [463, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.VTKFaceViewer": [[463, 3, 1, "", "plot"], [463, 3, 1, "", "plotMesh"], [463, 3, 1, "", "setLimits"], [463, 2, 1, "", "title"], [463, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkCellViewer": [[465, 1, 1, "", "VTKCellViewer"]], "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer": [[465, 3, 1, "", "plot"], [465, 3, 1, "", "plotMesh"], [465, 3, 1, "", "setLimits"], [465, 2, 1, "", "title"], [465, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkFaceViewer": [[466, 1, 1, "", "VTKFaceViewer"]], "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer": [[466, 3, 1, "", "plot"], [466, 3, 1, "", "plotMesh"], [466, 3, 1, "", "setLimits"], [466, 2, 1, "", "title"], [466, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkViewer": [[467, 1, 1, "", "VTKViewer"]], "fipy.viewers.vtkViewer.vtkViewer.VTKViewer": [[467, 3, 1, "", "plot"], [467, 3, 1, "", "plotMesh"], [467, 3, 1, "", "setLimits"], [467, 2, 1, "", "title"], [467, 2, 1, "", "vars"]], "package": [[477, 0, 0, "-", "subpackage"]], "package.subpackage": [[478, 0, 0, "-", "base"], [479, 0, 0, "-", "object"]], "package.subpackage.base": [[478, 1, 1, "", "Base"]], "package.subpackage.base.Base": [[478, 3, 1, "", "method1"], [478, 3, 1, "", "method2"]], "package.subpackage.object": [[479, 1, 1, "", "Object"]], "package.subpackage.object.Object": [[479, 3, 1, "", "method1"], [479, 3, 1, "", "method2"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:function", "5": "py:exception", "6": "py:attribute", "7": "std:cmdoption", "8": "std:envvar"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"], "7": ["std", "cmdoption", "program option"], "8": ["std", "envvar", "environment variable"]}, "titleterms": {"git": [0, 10, 12], "practic": 0, "branch": [0, 10, 12], "merg": 0, "chang": [0, 2, 9], "from": 0, "master": 0, "submit": 0, "code": 0, "review": 0, "refactor": 0, "complet": 0, "continu": 0, "integr": 0, "conda": [0, 12], "lockfil": 0, "make": [0, 9], "releas": 0, "sourc": [0, 9, 22, 69, 471], "upload": 0, "updat": [0, 8, 190, 191, 192, 193], "forg": 0, "feedstock": 0, "announc": 0, "fipi": [1, 8, 9, 12, 18, 21, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470], "packag": [1, 12, 14, 476, 477, 478, 479], "document": [1, 480], "log": [2, 18, 393], "version": [2, 30, 399], "3": 2, "4": 2, "68": 2, "g1c1afa551": 2, "pull": 2, "fix": [2, 18], "2022": 2, "06": 2, "15": 2, "2": [2, 18], "1": 2, "2020": 2, "08": 2, "01": 2, "02": 2, "14": 2, "2019": 2, "28": 2, "04": 2, "22": 2, "2017": 2, "17": 2, "2016": 2, "12": 2, "24": 2, "2015": 2, "2013": 2, "09": 2, "30": 2, "0": 2, "2012": 2, "10": 2, "03": 2, "16": 2, "2011": 2, "20": 2, "2010": 2, "05": 2, "2009": 2, "11": 2, "23": 2, "2008": 2, "2007": 2, "2006": 2, "2005": 2, "2004": 2, "creat": [3, 12], "conda_": 3, "environ": [3, 12, 18, 23], "contact": 4, "github": 4, "discuss": [4, 7], "issu": 4, "stackoverflow": 4, "mail": 4, "list": 4, "archiv": 4, "contributor": 5, "disclaim": 6, "effici": 7, "comparison": 7, "between": [7, 9], "cach": 7, "flag": [7, 18, 23], "pyspars": [7, 17, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301], "trilino": [7, 17, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337], "exampl": [8, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193], "select": 8, "diffus": [8, 9, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 471], "convect": [8, 9, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 471], "phase": [8, 115, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "field": 8, "level": [8, 12, 22, 141], "set": [8, 12], "cahn": 8, "hilliard": 8, "fluid": 8, "flow": [8, 119, 120, 121], "reactiv": 8, "wet": 8, "frequent": 9, "ask": 9, "question": 9, "how": [9, 480], "do": 9, "i": 9, "repres": 9, "an": 9, "equat": [9, 18, 471, 472], "wai": 9, "model": 9, "anisotrop": 9, "process": 9, "more": 9, "gener": [9, 472], "coeffici": 9, "tensor": 9, "so": 9, "term": [9, 13, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 471], "take": 9, "form": 9, "partial_i": 9, "gamma_": 9, "ij": 9, "partial_j": 9, "phi": [9, 471], "doesn": 9, "t": [9, 16, 471], "involv": 9, "depend": 9, "variabl": [9, 18, 23, 108, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440], "transient": [9, 471], "what": 9, "my": 9, "where": 9, "put": 9, "m": 9, "solv": [9, 18], "can": 9, "see": 9, "export": 9, "data": 9, "save": 9, "plot": 9, "imag": 9, "onli": 9, "want": 9, "file": 9, "displai": 9, "screen": 9, "movi": 9, "why": 9, "viewer": [9, 19, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467], "look": 9, "iter": 9, "timestep": 9, "sweep": 9, "oh": 9, "distinct": 9, "cellvari": [9, 407], "facevari": [9, 415], "boundari": [9, 18, 471], "condit": [9, 18, 471], "doe": 9, "thi": 9, "error": 9, "messag": 9, "mean": 9, "": 9, "default": [9, 18], "behavior": 9, "tell": 9, "run": [9, 18], "parallel": [9, 18, 161], "don": [9, 16], "script": [9, 22], "work": 9, "anymor": 9, "isn": 9, "answer": 9, "here": 9, "usag": [10, 12], "client": [10, 12], "develop": [11, 12, 22], "guidelin": 11, "object": [11, 22, 479], "orient": [11, 22], "design": [11, 22], "program": [11, 22], "style": 11, "test": [11, 18, 22, 38, 43, 70, 80, 88, 106, 107, 118, 121, 126, 133, 148, 154, 155, 160, 170, 175, 181, 185, 188, 189, 201, 208, 246, 312, 370, 376, 377, 378, 379, 380, 397, 437, 453, 457, 459, 464], "instal": [12, 14, 16], "pre": 12, "binder": 12, "recommend": 12, "method": [12, 471], "enabl": 12, "obtain": 12, "requir": 12, "python": [12, 18, 22], "numpi": 12, "option": 12, "gmsh": [12, 18], "scipi": [12, 17, 303, 304, 305, 306, 307, 308, 309, 310], "scikit": 12, "fmm": 12, "lsmlib": 12, "nix": [12, 14], "get": [12, 14], "start": [12, 14], "addit": [12, 14], "us": [12, 13, 14, 18], "pip": [12, 14], "public": 15, "present": 15, "overview": 16, "even": 16, "you": 16, "read": [16, 480], "manual": [16, 18, 470], "download": 16, "support": 16, "convent": 16, "notat": 16, "solver": [17, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337], "petsc": [17, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269], "pyamg": [17, 270, 271, 272, 273, 274, 275, 276, 277], "pyamgx": [17, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "command": [18, 23], "line": [18, 23, 142], "openmp": 18, "thread": 18, "v": 18, "mpi": 18, "rank": 18, "mesh": [18, 156, 157, 158, 159, 160, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "coupl": [18, 75], "vector": [18, 398], "appli": 18, "valu": 18, "dirichlet": 18, "gradient": 18, "neumann": 18, "flux": 18, "outlet": 18, "inlet": 18, "spatial": 18, "vari": 18, "robin": [18, 68], "intern": 18, "under": 18, "matplotlib": 19, "mayavi": 19, "virtual": 20, "kinet": 20, "materi": 20, "laboratori": 20, "content": 21, "implement": 22, "numer": [22, 473, 474], "approach": 22, "structur": 22, "base": [22, 478], "open": 22, "high": 22, "languag": 22, "extern": 23, "benchmark": [25, 26, 27, 28, 29, 30], "size": 27, "step": 28, "util": 29, "cahnhilliard": [31, 32, 33, 34, 35, 36, 37, 38], "mesh2d": [32, 62, 113, 232], "mesh2dcoupl": 33, "mesh3d": 34, "sphere": [35, 159], "spheredaemon": 36, "tanh1d": 37, "chemotaxi": [39, 40, 41, 42, 43], "input": [40, 100, 114], "input2d": 41, "paramet": 42, "advect": [45, 46, 47, 48, 123, 124, 125, 126, 127], "explicitupwind": 46, "implicitupwind": 47, "vanleerupwind": 48, "exponential1d": [49, 50, 51, 52, 53], "cylindricalmesh1d": 50, "cylindricalmesh1dnonuniform": 51, "mesh1d": [52, 55, 57, 66, 78, 82, 90, 91, 92, 111, 125, 131, 173, 231], "tri2d": [53, 58, 63, 67, 81, 251], "exponential1dback": [54, 55], "exponential1dsourc": [56, 57, 58], "exponential2d": [59, 60, 61, 62, 63], "cylindricalmesh2d": 60, "cylindricalmesh2dnonuniform": 61, "peclet": 64, "powerlaw1d": [65, 66, 67], "anisotropi": [72, 163], "circl": [73, 124, 129, 151, 172], "circlequad": 74, "electrostat": 76, "explicit": [77, 78, 79, 80, 81], "mixedel": 79, "mesh20x20": [83, 93, 94, 95, 96, 97, 98, 168], "mesh20x20coupl": 84, "nthorder": [85, 86, 87, 88], "input4thorder1d": 86, "input4thorder_lin": 87, "steadyst": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], "inputperiod": 91, "tri2dinput": [92, 98, 101], "gmshinput": 94, "isotropi": 95, "modifiedmeshinput": 96, "orthoerror": 97, "mesh50x50": [99, 100, 101], "othermesh": [102, 103, 104, 105], "cubicalproblem": 103, "grid3dinput": 104, "prism": 105, "elphf": [109, 110, 111, 112, 113, 114, 115, 116, 117, 118], "mesh1ddimension": 112, "phasediffus": 116, "poisson": 117, "stokescav": 120, "levelset": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "trench": 127, "distancefunct": [128, 129, 130, 131, 132, 133], "interior": 130, "squar": [132, 153], "electrochem": [134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], "adsorbingsurfactantequ": 135, "adsorpt": 136, "gapfilldistancevari": 137, "gapfillmesh": 138, "gold": 139, "howtowriteascript": 140, "matplotlibsurfactantview": 143, "mayavisurfactantview": 144, "metaliondiffusionequ": 145, "simpletrenchsystem": 146, "surfactantbulkdiffusionequ": 147, "trenchmesh": 149, "surfact": [150, 151, 152, 153, 154], "expandingcircl": 152, "gmshrefin": 157, "inputgrid2d": 158, "anisotropyold": 164, "binari": 165, "binarycoupl": 166, "imping": [167, 168, 169, 170], "mesh40x1": 169, "missorient": [171, 172, 173, 174, 175], "modcircl": 174, "polyxt": 176, "polyxtalcoupl": 177, "quaternari": 178, "simpl": 179, "symmetri": 180, "reactivewet": [182, 183, 184, 185], "liquidvapor1d": 183, "liquidvapor2d": 184, "riemann": [186, 187, 188], "acoust": 187, "update0_1to1_0": 191, "update1_0to2_0": 192, "update2_0to3_0": 193, "boundarycondit": [195, 196, 197, 198, 199, 200, 201], "constraint": 197, "fixedflux": 198, "fixedvalu": 199, "nthorderboundarycondit": 200, "matric": [202, 203, 204, 205, 206, 207, 208, 209], "offsetsparsematrix": 203, "petscmatrix": 204, "pysparsematrix": 205, "scipymatrix": 206, "sparsematrix": 207, "trilinosmatrix": 209, "abstractmesh": 211, "builder": [212, 213, 214, 215, 216, 217, 218], "abstractgridbuild": 213, "grid1dbuild": 214, "grid2dbuild": 215, "grid3dbuild": 216, "periodicgrid1dbuild": 217, "utilityclass": 218, "cylindricalgrid1d": 219, "cylindricalgrid2d": 220, "cylindricalnonuniformgrid1d": 221, "cylindricalnonuniformgrid2d": 222, "cylindricaluniformgrid1d": 223, "cylindricaluniformgrid2d": 224, "factorymesh": 225, "gmshmesh": 226, "grid1d": 227, "grid2d": 228, "grid3d": 229, "nonuniformgrid1d": 233, "nonuniformgrid2d": 234, "nonuniformgrid3d": 235, "periodicgrid1d": 236, "periodicgrid2d": 237, "periodicgrid3d": 238, "represent": [239, 240, 241, 242], "abstractrepresent": 240, "gridrepresent": 241, "meshrepresent": 242, "skewedgrid2d": 243, "sphericalnonuniformgrid1d": 244, "sphericaluniformgrid1d": 245, "topologi": [247, 248, 249, 250], "abstracttopologi": 248, "gridtopologi": 249, "meshtopologi": 250, "uniformgrid": 252, "uniformgrid1d": 253, "uniformgrid2d": 254, "uniformgrid3d": 255, "comm": [258, 259, 260, 261, 314, 315, 316, 317, 382, 383, 384], "parallelpetsccommwrapp": 259, "petsccommwrapp": 260, "serialpetsccommwrapp": 261, "dummysolv": 262, "linearbicgsolv": 263, "linearcgssolv": [264, 271, 292, 305, 319], "lineargmressolv": [265, 272, 284, 293, 306, 320], "linearlusolv": [266, 274, 285, 295, 307, 321], "linearpcgsolv": [267, 275, 296, 308, 322], "petsckrylovsolv": 268, "petscsolv": 269, "lineargeneralsolv": 273, "precondition": [276, 277, 286, 287, 297, 298, 299, 300, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333], "smoothedaggregationprecondition": 277, "aggregationamgsolv": 279, "classicalamgsolv": 280, "linearbicgstabsolv": [281, 304, 318], "linearcgsolv": 282, "linearfgmressolv": 283, "pyamgxsolv": 288, "smoother": [289, 290], "linearjorsolv": 294, "jacobiprecondition": [298, 326], "ssorprecondition": 300, "pysparsesolv": 301, "pysparsematrixsolv": 302, "scipykrylovsolv": 309, "scipysolv": 310, "epetracommwrapp": 315, "parallelepetracommwrapp": 316, "serialepetracommwrapp": 317, "domdecompprecondition": 324, "icprecondition": 325, "multilevelddmlprecondition": 327, "multilevelddprecondition": 328, "multilevelnssaprecondition": 329, "multilevelsaprecondition": 330, "multilevelsgsprecondition": 331, "multilevelsolversmootherprecondition": 332, "trilinosaztecoosolv": 334, "trilinosmltest": 335, "trilinosnonlinearsolv": 336, "trilinossolv": 337, "stepper": [338, 339, 340, 341], "pidstepp": 339, "pseudorkqsstepp": 340, "abstractbinaryterm": 343, "abstractconvectionterm": 344, "abstractdiffusionterm": 345, "abstractupwindconvectionterm": 346, "advectionterm": 347, "asymmetricconvectionterm": 348, "binaryterm": 349, "cellterm": 350, "centraldiffconvectionterm": 351, "coupledbinaryterm": 352, "diffusionterm": 353, "diffusiontermcorrect": 354, "diffusiontermnocorrect": 355, "explicitdiffusionterm": 356, "explicitsourceterm": 357, "explicitupwindconvectionterm": 358, "exponentialconvectionterm": 359, "faceterm": 360, "firstorderadvectionterm": 361, "hybridconvectionterm": 362, "implicitdiffusionterm": 363, "implicitsourceterm": 364, "nondiffusionterm": 365, "powerlawconvectionterm": 366, "residualterm": 367, "sourceterm": 368, "transientterm": 371, "unaryterm": 372, "upwindconvectionterm": 373, "vanleerconvectionterm": 374, "testfipi": 375, "doctestplu": 377, "lateimporttest": 378, "testprogram": 380, "tool": [381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400], "commwrapp": 383, "dummycomm": 384, "debug": 385, "decor": 386, "dimens": [387, 388, 389, 390], "dictwithdefault": 388, "numberdict": 389, "physicalfield": 390, "dump": 391, "inlin": 392, "numerix": 394, "parser": 395, "sharedtempfil": 396, "vital": 400, "addoverfacesvari": 402, "arithmeticcelltofacevari": 403, "betanoisevari": 404, "binaryoperatorvari": 405, "celltofacevari": 406, "constant": 408, "constraintmask": 409, "coupledcellvari": 410, "distancevari": 411, "exponentialnoisevari": 412, "facegradcontributionsvari": 413, "facegradvari": 414, "gammanoisevari": 416, "gausscellgradvari": 417, "gaussiannoisevari": 418, "harmoniccelltofacevari": 419, "histogramvari": 420, "interfaceareavari": 421, "interfaceflagvari": 422, "leastsquarescellgradvari": 423, "levelsetdiffusionvari": 424, "meshvari": 425, "minmodcelltofacevari": 426, "modcellgradvari": 427, "modcelltofacevari": 428, "modfacegradvari": 429, "modphysicalfield": 430, "modularvari": 431, "noisevari": 432, "operatorvari": 433, "scharfettergummelfacevari": 434, "surfactantconvectionvari": 435, "surfactantvari": 436, "unaryoperatorvari": 438, "uniformnoisevari": 439, "matplotlibview": [442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453], "abstractmatplotlib2dview": 443, "abstractmatplotlibview": 444, "matplotlib1dview": 445, "matplotlib2dcontourview": 446, "matplotlib2dgridcontourview": 447, "matplotlib2dgridview": 448, "matplotlib2dview": 449, "matplotlibsparsematrixview": 450, "matplotlibstreamview": 451, "matplotlibvectorview": 452, "mayaviview": [454, 455, 456, 457], "mayavicli": 455, "mayavidaemon": 456, "multiview": 458, "testinteract": 460, "tsvviewer": 461, "vtkviewer": [463, 464, 465, 466, 467], "vtkcellview": 465, "vtkfaceview": 466, "glossari": 468, "introduct": 469, "finit": 471, "volum": 471, "cell": 471, "center": 471, "fvm": 471, "cc": 471, "vertex": 471, "vc": 471, "discret": 471, "partial": 471, "rho": 471, "nabla": 471, "cdot": 471, "left": 471, "vec": 471, "u": 471, "right": 471, "gamma_1": 471, "higher": 471, "order": 471, "linear": 471, "conserv": 472, "theoret": 473, "background": 473, "scheme": 474, "refer": 475, "subpackag": [477, 478, 479], "modul": 480}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinxcontrib.bibtex": 9, "sphinx": 58}, "alltitles": {"Git practices": [[0, "git-practices"]], "Branches": [[0, "branches"]], "Merging changes from master to the branch": [[0, "merging-changes-from-master-to-the-branch"]], "Submit branch for code review": [[0, "submit-branch-for-code-review"]], "Refactoring complete: merge branch to master": [[0, "refactoring-complete-merge-branch-to-master"]], "Continuous Integration": [[0, "continuous-integration"]], "Conda Lockfiles": [[0, "conda-lockfiles"]], "Making a Release": [[0, "making-a-release"]], "Source": [[0, "source"]], "Release from master": [[0, "release-from-master"]], "Upload": [[0, "upload"]], "Update conda-forge feedstock": [[0, "update-conda-forge-feedstock"]], "Announce": [[0, "announce"]], "fipy Package Documentation": [[1, "fipy-package-documentation"]], "Change Log": [[2, "change-log"]], "Version 3.4.4+68.g1c1afa551": [[2, "version-release"]], "Pulls": [[2, "pulls"], [2, "id7"], [2, "id52"], [2, "id61"], [2, "id67"], [2, "id80"], [2, "id98"], [2, "id171"]], "Fixes": [[2, "fixes"], [2, "id25"], [2, "id57"], [2, "id65"], [2, "id76"], [2, "id86"], [2, "id130"], [2, "id169"], [2, "id206"], [2, "id231"], [2, "id241"], [2, "id304"], [2, "id308"], [2, "id367"], [2, "id391"], [2, "id399"], [2, "id407"], [2, "id416"], [2, "id423"], [2, "id427"], [2, "id439"], [2, "id441"], [2, "id484"], [2, "id500"], [2, "id519"]], "Version 3.4.3 - 2022-06-15": [[2, "version-3-4-3-2022-06-15"]], "Version 3.4.2.1 - 2020-08-01": [[2, "version-3-4-2-1-2020-08-01"]], "Version 3.4.1 - 2020-02-14": [[2, "version-3-4-1-2020-02-14"]], "Version 3.4 - 2020-02-06": [[2, "version-3-4-2020-02-06"]], "Version 3.3 - 2019-06-28": [[2, "version-3-3-2019-06-28"]], "Version 3.2 - 2019-04-22": [[2, "version-3-2-2019-04-22"]], "Version 3.1.3 - 2017-01-17": [[2, "version-3-1-3-2017-01-17"]], "Version 3.1.2 - 2016-12-24": [[2, "version-3-1-2-2016-12-24"]], "Version 3.1.1 - 2015-12-17": [[2, "version-3-1-1-2015-12-17"]], "Version 3.1 - 2013-09-30": [[2, "version-3-1-2013-09-30"]], "Version 3.0.1 - 2012-10-03": [[2, "version-3-0-1-2012-10-03"]], "Version 3.0 - 2012-08-16": [[2, "version-3-0-2012-08-16"]], "Version 2.1.3 - 2012-01-17": [[2, "version-2-1-3-2012-01-17"]], "Version 2.1.2 - 2011-04-20": [[2, "version-2-1-2-2011-04-20"]], "Version 2.1.1 - 2010-10-05": [[2, "version-2-1-1-2010-10-05"]], "Version 2.1 - 2010-04-01": [[2, "version-2-1-2010-04-01"]], "Version 2.0.3 - 2010-03-17": [[2, "version-2-0-3-2010-03-17"]], "Version 2.0.2 - 2009-06-11": [[2, "version-2-0-2-2009-06-11"]], "Version 2.0.1 - 2009-04-23": [[2, "version-2-0-1-2009-04-23"]], "Version 2.0 - 2009-02-09": [[2, "version-2-0-2009-02-09"]], "Version 1.2.3 - 2009-01-0": [[2, "version-1-2-3-2009-01-0"]], "Version 1.2.2 - 2008-12-30": [[2, "version-1-2-2-2008-12-30"]], "Version 1.2.1 - 2008-02-08": [[2, "version-1-2-1-2008-02-08"]], "Version 1.2 - 2007-02-12": [[2, "version-1-2-2007-02-12"]], "Version 1.1 - 2006-06-06": [[2, "version-1-1-2006-06-06"]], "Version 1.0 - 2005-09-16": [[2, "version-1-0-2005-09-16"]], "Version 0.1.1": [[2, "version-0-1-1"]], "Version 0.1 - 2004-11-05": [[2, "version-0-1-2004-11-05"]], "Create a conda_ environment": [[3, "create-a-conda-environment"]], "Contact": [[4, "contact"]], "GitHub Discussions": [[4, "github-discussions"]], "GitHub Issues": [[4, "github-issues"]], "StackOverflow": [[4, "stackoverflow"]], "Mailing List": [[4, "mailing-list"]], "List Archive": [[4, "list-archive"]], "Contributors": [[5, "contributors"]], "Disclaimer": [[6, "disclaimer"]], "Efficiency": [[7, "efficiency"]], "Efficiency comparison between --no-cache and --cache flags": [[7, "efficiency-comparison-between-no-cache-and-cache-flags"]], "Efficiency discussion of Pysparse and Trilinos": [[7, "efficiency-discussion-of-pysparse-and-trilinos"]], "Examples": [[8, "examples"]], "Selected Examples": [[8, "selected-examples"]], "Diffusion Examples": [[8, "diffusion-examples"]], "Convection Examples": [[8, "convection-examples"]], "Phase Field Examples": [[8, "phase-field-examples"]], "Level Set Examples": [[8, "level-set-examples"]], "Cahn-Hilliard Examples": [[8, "cahn-hilliard-examples"]], "Fluid Flow Examples": [[8, "fluid-flow-examples"]], "Reactive Wetting Examples": [[8, "reactive-wetting-examples"]], "Updating FiPy": [[8, "updating-fipy"]], "Frequently Asked Questions": [[9, "frequently-asked-questions"]], "How do I represent an equation in FiPy?": [[9, "how-do-i-represent-an-equation-in-fipy"]], "Is there a way to model an anisotropic diffusion process or more generally to represent the diffusion coefficient as a tensor so that the diffusion term takes the form \\partial_i \\Gamma_{ij}\\partial_j \\phi?": [[9, "is-there-a-way-to-model-an-anisotropic-diffusion-process-or-more-generally-to-represent-the-diffusion-coefficient-as-a-tensor-so-that-the-diffusion-term-takes-the-form-partial-i-gamma-ij-partial-j-phi"]], "How do I represent a \u2026 term that doesn\u2019t involve the dependent variable?": [[9, "how-do-i-represent-a-term-that-doesn-t-involve-the-dependent-variable"]], "How do I represent a diffusive source?": [[9, "how-do-i-represent-a-diffusive-source"]], "How do I represent a convective source?": [[9, "how-do-i-represent-a-convective-source"]], "How do I represent a transient source?": [[9, "how-do-i-represent-a-transient-source"]], "What if my term involves the dependent variable, but not where FiPy puts it?": [[9, "what-if-my-term-involves-the-dependent-variable-but-not-where-fipy-puts-it"]], "What if the coefficient of a term depends on the variable that I\u2019m solving for?": [[9, "what-if-the-coefficient-of-a-term-depends-on-the-variable-that-i-m-solving-for"]], "How can I see what I\u2019m doing?": [[9, "how-can-i-see-what-i-m-doing"]], "How do I export data?": [[9, "how-do-i-export-data"]], "How do I save a plot image?": [[9, "how-do-i-save-a-plot-image"]], "What if I only want the saved file, with no display on screen?": [[9, "what-if-i-only-want-the-saved-file-with-no-display-on-screen"]], "How do I make a movie?": [[9, "how-do-i-make-a-movie"]], "Why doesn\u2019t the Viewer look the way I want?": [[9, "why-doesn-t-the-viewer-look-the-way-i-want"]], "Iterations, timesteps, and sweeps? Oh, my!": [[9, "iterations-timesteps-and-sweeps-oh-my"]], "Why the distinction between CellVariable and FaceVariable coefficients?": [[9, "why-the-distinction-between-cellvariable-and-facevariable-coefficients"]], "How do I represent boundary conditions?": [[9, "how-do-i-represent-boundary-conditions"]], "What does this error message mean?": [[9, "what-does-this-error-message-mean"]], "How do I change FiPy\u2019s default behavior?": [[9, "how-do-i-change-fipy-s-default-behavior"]], "How can I tell if I\u2019m running in parallel?": [[9, "how-can-i-tell-if-i-m-running-in-parallel"]], "Why don\u2019t my scripts work anymore?": [[9, "why-don-t-my-scripts-work-anymore"]], "What if my question isn\u2019t answered here?": [[9, "what-if-my-question-isn-t-answered-here"]], "Git usage": [[10, "git-usage"], [12, "git-usage"]], "Git client": [[10, "git-client"], [12, "git-client"]], "Git branches": [[10, "git-branches"], [12, "git-branches"]], "Development Guidelines": [[11, "development-guidelines"]], "Object Oriented Design": [[11, "object-oriented-design"]], "Programming Style": [[11, "programming-style"]], "Testing": [[11, "testing"]], "Installation": [[12, "installation"]], "Pre-Installed on Binder": [[12, "pre-installed-on-binder"]], "Recommended Method": [[12, "recommended-method"]], "Install conda": [[12, "install-conda"]], "Create a conda environment": [[12, "create-a-conda-environment"]], "Install FiPy": [[12, "install-fipy"]], "Enable conda environment": [[12, "enable-conda-environment"]], "Obtaining FiPy": [[12, "obtaining-fipy"]], "Installing FiPy": [[12, "installing-fipy"]], "Required Packages": [[12, "required-packages"]], "Python": [[12, "python"]], "NumPy": [[12, "numpy"]], "Optional Packages": [[12, "optional-packages"]], "Gmsh": [[12, "gmsh"]], "SciPy": [[12, "scipy"], [17, "scipy"]], "Level Set Packages": [[12, "level-set-packages"]], "Scikit-fmm": [[12, "scikit-fmm"]], "LSMLIB": [[12, "lsmlib"]], "Development Environment": [[12, "development-environment"]], "Nix": [[12, "nix"]], "Nix Installation": [[12, "nix-installation"], [14, "nix-installation"]], "Getting Started with Nix": [[12, "getting-started-with-nix"], [14, "getting-started-with-nix"]], "Installing": [[12, "installing"], [14, "installing"]], "Additional Packages": [[12, "additional-packages"], [14, "additional-packages"]], "Using Pip": [[12, "using-pip"], [14, "using-pip"]], "Terms of Use": [[13, "terms-of-use"]], "Publications": [[15, "publications"]], "Presentations": [[15, "presentations"]], "Overview": [[16, "overview"]], "Even if you don\u2019t read manuals\u2026": [[16, "even-if-you-don-t-read-manuals"]], "Download and Installation": [[16, "download-and-installation"]], "Support": [[16, "support"]], "Conventions and Notation": [[16, "conventions-and-notation"]], "Solvers": [[17, "solvers"]], "PETSc": [[17, "petsc"]], "Pysparse": [[17, "pysparse"]], "PyAMG": [[17, "pyamg"]], "pyamgx": [[17, "pyamgx"]], "Trilinos": [[17, "trilinos"]], "Using FiPy": [[18, "using-fipy"]], "Logging": [[18, "logging"]], "Testing FiPy": [[18, "testing-fipy"]], "Parallel Tests": [[18, "parallel-tests"]], "Command-line Flags and Environment Variables": [[18, "command-line-flags-and-environment-variables"]], "Command-line Flags": [[18, "command-line-flags"]], "Environment Variables": [[18, "environment-variables"]], "Solving in Parallel": [[18, "solving-in-parallel"]], "OpenMP Threads vs. MPI Ranks": [[18, "openmp-threads-vs-mpi-ranks"]], "Meshing with Gmsh": [[18, "meshing-with-gmsh"]], "Coupled and Vector Equations": [[18, "coupled-and-vector-equations"]], "Boundary Conditions": [[18, "boundary-conditions"], [471, "boundary-conditions"]], "Default boundary conditions": [[18, "default-boundary-conditions"]], "Applying fixed value (Dirichlet) boundary conditions": [[18, "applying-fixed-value-dirichlet-boundary-conditions"]], "Applying fixed gradient boundary conditions (Neumann)": [[18, "applying-fixed-gradient-boundary-conditions-neumann"]], "Applying fixed flux boundary conditions": [[18, "applying-fixed-flux-boundary-conditions"]], "Applying outlet or inlet boundary conditions": [[18, "applying-outlet-or-inlet-boundary-conditions"]], "Applying spatially varying boundary conditions": [[18, "applying-spatially-varying-boundary-conditions"]], "Applying Robin boundary conditions": [[18, "applying-robin-boundary-conditions"]], "Applying internal \u201cboundary\u201d conditions": [[18, "applying-internal-boundary-conditions"]], "Internal fixed value": [[18, "internal-fixed-value"]], "Internal fixed gradient": [[18, "internal-fixed-gradient"]], "Internal Robin condition": [[18, "internal-robin-condition"]], "Running under Python 2": [[18, "running-under-python-2"]], "Manual": [[18, "manual"]], "Viewers": [[19, "viewers"]], "Matplotlib": [[19, "matplotlib"]], "Mayavi": [[19, "mayavi"]], "Virtual Kinetics of Materials Laboratory": [[20, "virtual-kinetics-of-materials-laboratory"]], "FiPy Contents": [[21, "fipy-contents"]], "Design and Implementation": [[22, "design-and-implementation"]], "Design": [[22, "design"]], "Numerical Approach": [[22, "numerical-approach"]], "Object Oriented Structure": [[22, "object-oriented-structure"]], "Test Based Development": [[22, "test-based-development"]], "Open Source": [[22, "open-source"]], "High-Level Scripting Language": [[22, "high-level-scripting-language"]], "Python Programming Language": [[22, "python-programming-language"]], "Implementation": [[22, "implementation"]], "External Command-line Flags": [[23, "external-command-line-flags"]], "External Environment Variables": [[23, "external-environment-variables"]], "examples": [[24, "module-examples"]], "examples.benchmarking": [[25, "module-examples.benchmarking"]], "examples.benchmarking.benchmarker": [[26, "module-examples.benchmarking.benchmarker"]], "examples.benchmarking.size": [[27, "module-examples.benchmarking.size"]], "examples.benchmarking.steps": [[28, "module-examples.benchmarking.steps"]], "examples.benchmarking.utils": [[29, "module-examples.benchmarking.utils"]], "examples.benchmarking.versions": [[30, "module-examples.benchmarking.versions"]], "examples.cahnHilliard": [[31, "module-examples.cahnHilliard"]], "examples.cahnHilliard.mesh2D": [[32, "module-examples.cahnHilliard.mesh2D"]], "examples.cahnHilliard.mesh2DCoupled": [[33, "module-examples.cahnHilliard.mesh2DCoupled"]], "examples.cahnHilliard.mesh3D": [[34, "module-examples.cahnHilliard.mesh3D"]], "examples.cahnHilliard.sphere": [[35, "module-examples.cahnHilliard.sphere"]], "examples.cahnHilliard.sphereDaemon": [[36, "module-examples.cahnHilliard.sphereDaemon"]], "examples.cahnHilliard.tanh1D": [[37, "module-examples.cahnHilliard.tanh1D"]], "examples.cahnHilliard.test": [[38, "module-examples.cahnHilliard.test"]], "examples.chemotaxis": [[39, "module-examples.chemotaxis"]], "examples.chemotaxis.input": [[40, "module-examples.chemotaxis.input"]], "examples.chemotaxis.input2D": [[41, "module-examples.chemotaxis.input2D"]], "examples.chemotaxis.parameters": [[42, "module-examples.chemotaxis.parameters"]], "examples.chemotaxis.test": [[43, "module-examples.chemotaxis.test"]], "examples.convection": [[44, "module-examples.convection"]], "examples.convection.advection": [[45, "module-examples.convection.advection"]], "examples.convection.advection.explicitUpwind": [[46, "module-examples.convection.advection.explicitUpwind"]], "examples.convection.advection.implicitUpwind": [[47, "module-examples.convection.advection.implicitUpwind"]], "examples.convection.advection.vanLeerUpwind": [[48, "module-examples.convection.advection.vanLeerUpwind"]], "examples.convection.exponential1D": [[49, "module-examples.convection.exponential1D"]], "examples.convection.exponential1D.cylindricalMesh1D": [[50, "module-examples.convection.exponential1D.cylindricalMesh1D"]], "examples.convection.exponential1D.cylindricalMesh1DNonUniform": [[51, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"]], "examples.convection.exponential1D.mesh1D": [[52, "module-examples.convection.exponential1D.mesh1D"]], "examples.convection.exponential1D.tri2D": [[53, "module-examples.convection.exponential1D.tri2D"]], "examples.convection.exponential1DBack": [[54, "module-examples.convection.exponential1DBack"]], "examples.convection.exponential1DBack.mesh1D": [[55, "module-examples.convection.exponential1DBack.mesh1D"]], "examples.convection.exponential1DSource": [[56, "module-examples.convection.exponential1DSource"]], "examples.convection.exponential1DSource.mesh1D": [[57, "module-examples.convection.exponential1DSource.mesh1D"]], "examples.convection.exponential1DSource.tri2D": [[58, "module-examples.convection.exponential1DSource.tri2D"]], "examples.convection.exponential2D": [[59, "module-examples.convection.exponential2D"]], "examples.convection.exponential2D.cylindricalMesh2D": [[60, "module-examples.convection.exponential2D.cylindricalMesh2D"]], "examples.convection.exponential2D.cylindricalMesh2DNonUniform": [[61, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"]], "examples.convection.exponential2D.mesh2D": [[62, "module-examples.convection.exponential2D.mesh2D"]], "examples.convection.exponential2D.tri2D": [[63, "module-examples.convection.exponential2D.tri2D"]], "examples.convection.peclet": [[64, "module-examples.convection.peclet"]], "examples.convection.powerLaw1D": [[65, "module-examples.convection.powerLaw1D"]], "examples.convection.powerLaw1D.mesh1D": [[66, "module-examples.convection.powerLaw1D.mesh1D"]], "examples.convection.powerLaw1D.tri2D": [[67, "module-examples.convection.powerLaw1D.tri2D"]], "examples.convection.robin": [[68, "module-examples.convection.robin"]], "examples.convection.source": [[69, "module-examples.convection.source"]], "examples.convection.test": [[70, "module-examples.convection.test"]], "examples.diffusion": [[71, "module-examples.diffusion"]], "examples.diffusion.anisotropy": [[72, "module-examples.diffusion.anisotropy"]], "examples.diffusion.circle": [[73, "module-examples.diffusion.circle"]], "examples.diffusion.circleQuad": [[74, "module-examples.diffusion.circleQuad"]], "examples.diffusion.coupled": [[75, "module-examples.diffusion.coupled"]], "examples.diffusion.electrostatics": [[76, "module-examples.diffusion.electrostatics"]], "examples.diffusion.explicit": [[77, "module-examples.diffusion.explicit"]], "examples.diffusion.explicit.mesh1D": [[78, "module-examples.diffusion.explicit.mesh1D"]], "examples.diffusion.explicit.mixedelement": [[79, "module-examples.diffusion.explicit.mixedelement"]], "examples.diffusion.explicit.test": [[80, "module-examples.diffusion.explicit.test"]], "examples.diffusion.explicit.tri2D": [[81, "module-examples.diffusion.explicit.tri2D"]], "examples.diffusion.mesh1D": [[82, "module-examples.diffusion.mesh1D"]], "examples.diffusion.mesh20x20": [[83, "module-examples.diffusion.mesh20x20"]], "examples.diffusion.mesh20x20Coupled": [[84, "module-examples.diffusion.mesh20x20Coupled"]], "examples.diffusion.nthOrder": [[85, "module-examples.diffusion.nthOrder"]], "examples.diffusion.nthOrder.input4thOrder1D": [[86, "module-examples.diffusion.nthOrder.input4thOrder1D"]], "examples.diffusion.nthOrder.input4thOrder_line": [[87, "module-examples.diffusion.nthOrder.input4thOrder_line"]], "examples.diffusion.nthOrder.test": [[88, "module-examples.diffusion.nthOrder.test"]], "examples.diffusion.steadyState": [[89, "module-examples.diffusion.steadyState"]], "examples.diffusion.steadyState.mesh1D": [[90, "module-examples.diffusion.steadyState.mesh1D"]], "examples.diffusion.steadyState.mesh1D.inputPeriodic": [[91, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"]], "examples.diffusion.steadyState.mesh1D.tri2Dinput": [[92, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"]], "examples.diffusion.steadyState.mesh20x20": [[93, "module-examples.diffusion.steadyState.mesh20x20"]], "examples.diffusion.steadyState.mesh20x20.gmshinput": [[94, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"]], "examples.diffusion.steadyState.mesh20x20.isotropy": [[95, "module-examples.diffusion.steadyState.mesh20x20.isotropy"]], "examples.diffusion.steadyState.mesh20x20.modifiedMeshInput": [[96, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"]], "examples.diffusion.steadyState.mesh20x20.orthoerror": [[97, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"]], "examples.diffusion.steadyState.mesh20x20.tri2Dinput": [[98, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"]], "examples.diffusion.steadyState.mesh50x50": [[99, "module-examples.diffusion.steadyState.mesh50x50"]], "examples.diffusion.steadyState.mesh50x50.input": [[100, "module-examples.diffusion.steadyState.mesh50x50.input"]], "examples.diffusion.steadyState.mesh50x50.tri2Dinput": [[101, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"]], "examples.diffusion.steadyState.otherMeshes": [[102, "module-examples.diffusion.steadyState.otherMeshes"]], "examples.diffusion.steadyState.otherMeshes.cubicalProblem": [[103, "module-examples.diffusion.steadyState.otherMeshes.cubicalProblem"]], "examples.diffusion.steadyState.otherMeshes.grid3Dinput": [[104, "module-examples.diffusion.steadyState.otherMeshes.grid3Dinput"]], "examples.diffusion.steadyState.otherMeshes.prism": [[105, "module-examples.diffusion.steadyState.otherMeshes.prism"]], "examples.diffusion.steadyState.test": [[106, "module-examples.diffusion.steadyState.test"]], "examples.diffusion.test": [[107, "module-examples.diffusion.test"]], "examples.diffusion.variable": [[108, "module-examples.diffusion.variable"]], "examples.elphf": [[109, "module-examples.elphf"]], "examples.elphf.diffusion": [[110, "module-examples.elphf.diffusion"]], "examples.elphf.diffusion.mesh1D": [[111, "module-examples.elphf.diffusion.mesh1D"]], "examples.elphf.diffusion.mesh1Ddimensional": [[112, "module-examples.elphf.diffusion.mesh1Ddimensional"]], "examples.elphf.diffusion.mesh2D": [[113, "module-examples.elphf.diffusion.mesh2D"]], "examples.elphf.input": [[114, "module-examples.elphf.input"]], "examples.elphf.phase": [[115, "module-examples.elphf.phase"]], "examples.elphf.phaseDiffusion": [[116, "module-examples.elphf.phaseDiffusion"]], "examples.elphf.poisson": [[117, "module-examples.elphf.poisson"]], "examples.elphf.test": [[118, "module-examples.elphf.test"]], "examples.flow": [[119, "module-examples.flow"]], "examples.flow.stokesCavity": [[120, "module-examples.flow.stokesCavity"]], "examples.flow.test": [[121, "module-examples.flow.test"]], "examples.levelSet": [[122, "module-examples.levelSet"]], "examples.levelSet.advection": [[123, "module-examples.levelSet.advection"]], "examples.levelSet.advection.circle": [[124, "module-examples.levelSet.advection.circle"]], "examples.levelSet.advection.mesh1D": [[125, "module-examples.levelSet.advection.mesh1D"]], "examples.levelSet.advection.test": [[126, "module-examples.levelSet.advection.test"]], "examples.levelSet.advection.trench": [[127, "module-examples.levelSet.advection.trench"]], "examples.levelSet.distanceFunction": [[128, "module-examples.levelSet.distanceFunction"]], "examples.levelSet.distanceFunction.circle": [[129, "module-examples.levelSet.distanceFunction.circle"]], "examples.levelSet.distanceFunction.interior": [[130, "module-examples.levelSet.distanceFunction.interior"]], "examples.levelSet.distanceFunction.mesh1D": [[131, "module-examples.levelSet.distanceFunction.mesh1D"]], "examples.levelSet.distanceFunction.square": [[132, "module-examples.levelSet.distanceFunction.square"]], "examples.levelSet.distanceFunction.test": [[133, "module-examples.levelSet.distanceFunction.test"]], "examples.levelSet.electroChem": [[134, "module-examples.levelSet.electroChem"]], "examples.levelSet.electroChem.adsorbingSurfactantEquation": [[135, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"]], "examples.levelSet.electroChem.adsorption": [[136, "module-examples.levelSet.electroChem.adsorption"]], "examples.levelSet.electroChem.gapFillDistanceVariable": [[137, "module-examples.levelSet.electroChem.gapFillDistanceVariable"]], "examples.levelSet.electroChem.gapFillMesh": [[138, "module-examples.levelSet.electroChem.gapFillMesh"]], "examples.levelSet.electroChem.gold": [[139, "module-examples.levelSet.electroChem.gold"]], "examples.levelSet.electroChem.howToWriteAScript": [[140, "module-examples.levelSet.electroChem.howToWriteAScript"]], "examples.levelSet.electroChem.leveler": [[141, "module-examples.levelSet.electroChem.leveler"]], "examples.levelSet.electroChem.lines": [[142, "module-examples.levelSet.electroChem.lines"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer": [[143, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"]], "examples.levelSet.electroChem.mayaviSurfactantViewer": [[144, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"]], "examples.levelSet.electroChem.metalIonDiffusionEquation": [[145, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"]], "examples.levelSet.electroChem.simpleTrenchSystem": [[146, "module-examples.levelSet.electroChem.simpleTrenchSystem"]], "examples.levelSet.electroChem.surfactantBulkDiffusionEquation": [[147, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"]], "examples.levelSet.electroChem.test": [[148, "module-examples.levelSet.electroChem.test"]], "examples.levelSet.electroChem.trenchMesh": [[149, "module-examples.levelSet.electroChem.trenchMesh"]], "examples.levelSet.surfactant": [[150, "module-examples.levelSet.surfactant"]], "examples.levelSet.surfactant.circle": [[151, "module-examples.levelSet.surfactant.circle"]], "examples.levelSet.surfactant.expandingCircle": [[152, "module-examples.levelSet.surfactant.expandingCircle"]], "examples.levelSet.surfactant.square": [[153, "module-examples.levelSet.surfactant.square"]], "examples.levelSet.surfactant.test": [[154, "module-examples.levelSet.surfactant.test"]], "examples.levelSet.test": [[155, "module-examples.levelSet.test"]], "examples.meshing": [[156, "module-examples.meshing"]], "examples.meshing.gmshRefinement": [[157, "module-examples.meshing.gmshRefinement"]], "examples.meshing.inputGrid2D": [[158, "module-examples.meshing.inputGrid2D"]], "examples.meshing.sphere": [[159, "module-examples.meshing.sphere"]], "examples.meshing.test": [[160, "module-examples.meshing.test"]], "examples.parallel": [[161, "module-examples.parallel"]], "examples.phase": [[162, "module-examples.phase"]], "examples.phase.anisotropy": [[163, "module-examples.phase.anisotropy"]], "examples.phase.anisotropyOLD": [[164, "module-examples.phase.anisotropyOLD"]], "examples.phase.binary": [[165, "module-examples.phase.binary"]], "examples.phase.binaryCoupled": [[166, "module-examples.phase.binaryCoupled"]], "examples.phase.impingement": [[167, "module-examples.phase.impingement"]], "examples.phase.impingement.mesh20x20": [[168, "module-examples.phase.impingement.mesh20x20"]], "examples.phase.impingement.mesh40x1": [[169, "module-examples.phase.impingement.mesh40x1"]], "examples.phase.impingement.test": [[170, "module-examples.phase.impingement.test"]], "examples.phase.missOrientation": [[171, "module-examples.phase.missOrientation"]], "examples.phase.missOrientation.circle": [[172, "module-examples.phase.missOrientation.circle"]], "examples.phase.missOrientation.mesh1D": [[173, "module-examples.phase.missOrientation.mesh1D"]], "examples.phase.missOrientation.modCircle": [[174, "module-examples.phase.missOrientation.modCircle"]], "examples.phase.missOrientation.test": [[175, "module-examples.phase.missOrientation.test"]], "examples.phase.polyxtal": [[176, "module-examples.phase.polyxtal"]], "examples.phase.polyxtalCoupled": [[177, "module-examples.phase.polyxtalCoupled"]], "examples.phase.quaternary": [[178, "module-examples.phase.quaternary"]], "examples.phase.simple": [[179, "module-examples.phase.simple"]], "examples.phase.symmetry": [[180, "module-examples.phase.symmetry"]], "examples.phase.test": [[181, "module-examples.phase.test"]], "examples.reactiveWetting": [[182, "module-examples.reactiveWetting"]], "examples.reactiveWetting.liquidVapor1D": [[183, "module-examples.reactiveWetting.liquidVapor1D"]], "examples.reactiveWetting.liquidVapor2D": [[184, "module-examples.reactiveWetting.liquidVapor2D"]], "examples.reactiveWetting.test": [[185, "module-examples.reactiveWetting.test"]], "examples.riemann": [[186, "module-examples.riemann"]], "examples.riemann.acoustics": [[187, "module-examples.riemann.acoustics"]], "examples.riemann.test": [[188, "module-examples.riemann.test"]], "examples.test": [[189, "module-examples.test"]], "examples.updating": [[190, "module-examples.updating"]], "examples.updating.update0_1to1_0": [[191, "module-examples.updating.update0_1to1_0"]], "examples.updating.update1_0to2_0": [[192, "module-examples.updating.update1_0to2_0"]], "examples.updating.update2_0to3_0": [[193, "module-examples.updating.update2_0to3_0"]], "fipy": [[194, "module-fipy"]], "fipy.boundaryConditions": [[195, "module-fipy.boundaryConditions"]], "fipy.boundaryConditions.boundaryCondition": [[196, "module-fipy.boundaryConditions.boundaryCondition"]], "fipy.boundaryConditions.constraint": [[197, "module-fipy.boundaryConditions.constraint"]], "fipy.boundaryConditions.fixedFlux": [[198, "module-fipy.boundaryConditions.fixedFlux"]], "fipy.boundaryConditions.fixedValue": [[199, "module-fipy.boundaryConditions.fixedValue"]], "fipy.boundaryConditions.nthOrderBoundaryCondition": [[200, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"]], "fipy.boundaryConditions.test": [[201, "module-fipy.boundaryConditions.test"]], "fipy.matrices": [[202, "module-fipy.matrices"]], "fipy.matrices.offsetSparseMatrix": [[203, "module-fipy.matrices.offsetSparseMatrix"]], "fipy.matrices.petscMatrix": [[204, "module-fipy.matrices.petscMatrix"]], "fipy.matrices.pysparseMatrix": [[205, "module-fipy.matrices.pysparseMatrix"]], "fipy.matrices.scipyMatrix": [[206, "module-fipy.matrices.scipyMatrix"]], "fipy.matrices.sparseMatrix": [[207, "module-fipy.matrices.sparseMatrix"]], "fipy.matrices.test": [[208, "module-fipy.matrices.test"]], "fipy.matrices.trilinosMatrix": [[209, "module-fipy.matrices.trilinosMatrix"]], "fipy.meshes": [[210, "module-fipy.meshes"]], "fipy.meshes.abstractMesh": [[211, "module-fipy.meshes.abstractMesh"]], "fipy.meshes.builders": [[212, "module-fipy.meshes.builders"]], "fipy.meshes.builders.abstractGridBuilder": [[213, "module-fipy.meshes.builders.abstractGridBuilder"]], "fipy.meshes.builders.grid1DBuilder": [[214, "module-fipy.meshes.builders.grid1DBuilder"]], "fipy.meshes.builders.grid2DBuilder": [[215, "module-fipy.meshes.builders.grid2DBuilder"]], "fipy.meshes.builders.grid3DBuilder": [[216, "module-fipy.meshes.builders.grid3DBuilder"]], "fipy.meshes.builders.periodicGrid1DBuilder": [[217, "module-fipy.meshes.builders.periodicGrid1DBuilder"]], "fipy.meshes.builders.utilityClasses": [[218, "module-fipy.meshes.builders.utilityClasses"]], "fipy.meshes.cylindricalGrid1D": [[219, "module-fipy.meshes.cylindricalGrid1D"]], "fipy.meshes.cylindricalGrid2D": [[220, "module-fipy.meshes.cylindricalGrid2D"]], "fipy.meshes.cylindricalNonUniformGrid1D": [[221, "module-fipy.meshes.cylindricalNonUniformGrid1D"]], "fipy.meshes.cylindricalNonUniformGrid2D": [[222, "module-fipy.meshes.cylindricalNonUniformGrid2D"]], "fipy.meshes.cylindricalUniformGrid1D": [[223, "module-fipy.meshes.cylindricalUniformGrid1D"]], "fipy.meshes.cylindricalUniformGrid2D": [[224, "module-fipy.meshes.cylindricalUniformGrid2D"]], "fipy.meshes.factoryMeshes": [[225, "module-fipy.meshes.factoryMeshes"]], "fipy.meshes.gmshMesh": [[226, "module-fipy.meshes.gmshMesh"]], "fipy.meshes.grid1D": [[227, "module-fipy.meshes.grid1D"]], "fipy.meshes.grid2D": [[228, "module-fipy.meshes.grid2D"]], "fipy.meshes.grid3D": [[229, "module-fipy.meshes.grid3D"]], "fipy.meshes.mesh": [[230, "module-fipy.meshes.mesh"]], "fipy.meshes.mesh1D": [[231, "module-fipy.meshes.mesh1D"]], "fipy.meshes.mesh2D": [[232, "module-fipy.meshes.mesh2D"]], "fipy.meshes.nonUniformGrid1D": [[233, "module-fipy.meshes.nonUniformGrid1D"]], "fipy.meshes.nonUniformGrid2D": [[234, "module-fipy.meshes.nonUniformGrid2D"]], "fipy.meshes.nonUniformGrid3D": [[235, "module-fipy.meshes.nonUniformGrid3D"]], "fipy.meshes.periodicGrid1D": [[236, "module-fipy.meshes.periodicGrid1D"]], "fipy.meshes.periodicGrid2D": [[237, "module-fipy.meshes.periodicGrid2D"]], "fipy.meshes.periodicGrid3D": [[238, "module-fipy.meshes.periodicGrid3D"]], "fipy.meshes.representations": [[239, "module-fipy.meshes.representations"]], "fipy.meshes.representations.abstractRepresentation": [[240, "module-fipy.meshes.representations.abstractRepresentation"]], "fipy.meshes.representations.gridRepresentation": [[241, "module-fipy.meshes.representations.gridRepresentation"]], "fipy.meshes.representations.meshRepresentation": [[242, "module-fipy.meshes.representations.meshRepresentation"]], "fipy.meshes.skewedGrid2D": [[243, "module-fipy.meshes.skewedGrid2D"]], "fipy.meshes.sphericalNonUniformGrid1D": [[244, "module-fipy.meshes.sphericalNonUniformGrid1D"]], "fipy.meshes.sphericalUniformGrid1D": [[245, "module-fipy.meshes.sphericalUniformGrid1D"]], "fipy.meshes.test": [[246, "module-fipy.meshes.test"]], "fipy.meshes.topologies": [[247, "module-fipy.meshes.topologies"]], "fipy.meshes.topologies.abstractTopology": [[248, "module-fipy.meshes.topologies.abstractTopology"]], "fipy.meshes.topologies.gridTopology": [[249, "module-fipy.meshes.topologies.gridTopology"]], "fipy.meshes.topologies.meshTopology": [[250, "module-fipy.meshes.topologies.meshTopology"]], "fipy.meshes.tri2D": [[251, "module-fipy.meshes.tri2D"]], "fipy.meshes.uniformGrid": [[252, "module-fipy.meshes.uniformGrid"]], "fipy.meshes.uniformGrid1D": [[253, "module-fipy.meshes.uniformGrid1D"]], "fipy.meshes.uniformGrid2D": [[254, "module-fipy.meshes.uniformGrid2D"]], "fipy.meshes.uniformGrid3D": [[255, "module-fipy.meshes.uniformGrid3D"]], "fipy.solvers": [[256, "module-fipy.solvers"]], "fipy.solvers.petsc": [[257, "module-fipy.solvers.petsc"]], "fipy.solvers.petsc.comms": [[258, "module-fipy.solvers.petsc.comms"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper": [[259, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"]], "fipy.solvers.petsc.comms.petscCommWrapper": [[260, "module-fipy.solvers.petsc.comms.petscCommWrapper"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper": [[261, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"]], "fipy.solvers.petsc.dummySolver": [[262, "module-fipy.solvers.petsc.dummySolver"]], "fipy.solvers.petsc.linearBicgSolver": [[263, "module-fipy.solvers.petsc.linearBicgSolver"]], "fipy.solvers.petsc.linearCGSSolver": [[264, "module-fipy.solvers.petsc.linearCGSSolver"]], "fipy.solvers.petsc.linearGMRESSolver": [[265, "module-fipy.solvers.petsc.linearGMRESSolver"]], "fipy.solvers.petsc.linearLUSolver": [[266, "module-fipy.solvers.petsc.linearLUSolver"]], "fipy.solvers.petsc.linearPCGSolver": [[267, "module-fipy.solvers.petsc.linearPCGSolver"]], "fipy.solvers.petsc.petscKrylovSolver": [[268, "module-fipy.solvers.petsc.petscKrylovSolver"]], "fipy.solvers.petsc.petscSolver": [[269, "module-fipy.solvers.petsc.petscSolver"]], "fipy.solvers.pyAMG": [[270, "module-fipy.solvers.pyAMG"]], "fipy.solvers.pyAMG.linearCGSSolver": [[271, "module-fipy.solvers.pyAMG.linearCGSSolver"]], "fipy.solvers.pyAMG.linearGMRESSolver": [[272, "module-fipy.solvers.pyAMG.linearGMRESSolver"]], "fipy.solvers.pyAMG.linearGeneralSolver": [[273, "module-fipy.solvers.pyAMG.linearGeneralSolver"]], "fipy.solvers.pyAMG.linearLUSolver": [[274, "module-fipy.solvers.pyAMG.linearLUSolver"]], "fipy.solvers.pyAMG.linearPCGSolver": [[275, "module-fipy.solvers.pyAMG.linearPCGSolver"]], "fipy.solvers.pyAMG.preconditioners": [[276, "module-fipy.solvers.pyAMG.preconditioners"]], "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner": [[277, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[278, "module-fipy.solvers.pyamgx"]], "fipy.solvers.pyamgx.aggregationAMGSolver": [[279, "module-fipy.solvers.pyamgx.aggregationAMGSolver"]], "fipy.solvers.pyamgx.classicalAMGSolver": [[280, "module-fipy.solvers.pyamgx.classicalAMGSolver"]], "fipy.solvers.pyamgx.linearBiCGStabSolver": [[281, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"]], "fipy.solvers.pyamgx.linearCGSolver": [[282, "module-fipy.solvers.pyamgx.linearCGSolver"]], "fipy.solvers.pyamgx.linearFGMRESSolver": [[283, "module-fipy.solvers.pyamgx.linearFGMRESSolver"]], "fipy.solvers.pyamgx.linearGMRESSolver": [[284, "module-fipy.solvers.pyamgx.linearGMRESSolver"]], "fipy.solvers.pyamgx.linearLUSolver": [[285, "module-fipy.solvers.pyamgx.linearLUSolver"]], "fipy.solvers.pyamgx.preconditioners": [[286, "module-fipy.solvers.pyamgx.preconditioners"]], "fipy.solvers.pyamgx.preconditioners.preconditioners": [[287, "module-fipy.solvers.pyamgx.preconditioners.preconditioners"]], "fipy.solvers.pyamgx.pyAMGXSolver": [[288, "module-fipy.solvers.pyamgx.pyAMGXSolver"]], "fipy.solvers.pyamgx.smoothers": [[289, "module-fipy.solvers.pyamgx.smoothers"]], "fipy.solvers.pyamgx.smoothers.smoothers": [[290, "module-fipy.solvers.pyamgx.smoothers.smoothers"]], "fipy.solvers.pysparse": [[291, "module-fipy.solvers.pysparse"]], "fipy.solvers.pysparse.linearCGSSolver": [[292, "module-fipy.solvers.pysparse.linearCGSSolver"]], "fipy.solvers.pysparse.linearGMRESSolver": [[293, "module-fipy.solvers.pysparse.linearGMRESSolver"]], "fipy.solvers.pysparse.linearJORSolver": [[294, "module-fipy.solvers.pysparse.linearJORSolver"]], "fipy.solvers.pysparse.linearLUSolver": [[295, "module-fipy.solvers.pysparse.linearLUSolver"]], "fipy.solvers.pysparse.linearPCGSolver": [[296, "module-fipy.solvers.pysparse.linearPCGSolver"]], "fipy.solvers.pysparse.preconditioners": [[297, "module-fipy.solvers.pysparse.preconditioners"]], "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner": [[298, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.preconditioner": [[299, "module-fipy.solvers.pysparse.preconditioners.preconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorPreconditioner": [[300, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"]], "fipy.solvers.pysparse.pysparseSolver": [[301, "module-fipy.solvers.pysparse.pysparseSolver"]], "fipy.solvers.pysparseMatrixSolver": [[302, "module-fipy.solvers.pysparseMatrixSolver"]], "fipy.solvers.scipy": [[303, "module-fipy.solvers.scipy"]], "fipy.solvers.scipy.linearBicgstabSolver": [[304, "module-fipy.solvers.scipy.linearBicgstabSolver"]], "fipy.solvers.scipy.linearCGSSolver": [[305, "module-fipy.solvers.scipy.linearCGSSolver"]], "fipy.solvers.scipy.linearGMRESSolver": [[306, "module-fipy.solvers.scipy.linearGMRESSolver"]], "fipy.solvers.scipy.linearLUSolver": [[307, "module-fipy.solvers.scipy.linearLUSolver"]], "fipy.solvers.scipy.linearPCGSolver": [[308, "module-fipy.solvers.scipy.linearPCGSolver"]], "fipy.solvers.scipy.scipyKrylovSolver": [[309, "module-fipy.solvers.scipy.scipyKrylovSolver"]], "fipy.solvers.scipy.scipySolver": [[310, "module-fipy.solvers.scipy.scipySolver"]], "fipy.solvers.solver": [[311, "module-fipy.solvers.solver"]], "fipy.solvers.test": [[312, "module-fipy.solvers.test"]], "fipy.solvers.trilinos": [[313, "module-fipy.solvers.trilinos"]], "fipy.solvers.trilinos.comms": [[314, "module-fipy.solvers.trilinos.comms"]], "fipy.solvers.trilinos.comms.epetraCommWrapper": [[315, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper": [[316, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper": [[317, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"]], "fipy.solvers.trilinos.linearBicgstabSolver": [[318, "module-fipy.solvers.trilinos.linearBicgstabSolver"]], "fipy.solvers.trilinos.linearCGSSolver": [[319, "module-fipy.solvers.trilinos.linearCGSSolver"]], "fipy.solvers.trilinos.linearGMRESSolver": [[320, "module-fipy.solvers.trilinos.linearGMRESSolver"]], "fipy.solvers.trilinos.linearLUSolver": [[321, "module-fipy.solvers.trilinos.linearLUSolver"]], "fipy.solvers.trilinos.linearPCGSolver": [[322, "module-fipy.solvers.trilinos.linearPCGSolver"]], "fipy.solvers.trilinos.preconditioners": [[323, "module-fipy.solvers.trilinos.preconditioners"]], "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner": [[324, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icPreconditioner": [[325, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner": [[326, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner": [[327, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner": [[328, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner": [[329, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner": [[330, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner": [[331, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner": [[332, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.preconditioner": [[333, "module-fipy.solvers.trilinos.preconditioners.preconditioner"]], "fipy.solvers.trilinos.trilinosAztecOOSolver": [[334, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"]], "fipy.solvers.trilinos.trilinosMLTest": [[335, "module-fipy.solvers.trilinos.trilinosMLTest"]], "fipy.solvers.trilinos.trilinosNonlinearSolver": [[336, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"]], "fipy.solvers.trilinos.trilinosSolver": [[337, "module-fipy.solvers.trilinos.trilinosSolver"]], "fipy.steppers": [[338, "module-fipy.steppers"]], "fipy.steppers.pidStepper": [[339, "module-fipy.steppers.pidStepper"]], "fipy.steppers.pseudoRKQSStepper": [[340, "module-fipy.steppers.pseudoRKQSStepper"]], "fipy.steppers.stepper": [[341, "module-fipy.steppers.stepper"]], "fipy.terms": [[342, "module-fipy.terms"]], "fipy.terms.abstractBinaryTerm": [[343, "module-fipy.terms.abstractBinaryTerm"]], "fipy.terms.abstractConvectionTerm": [[344, "module-fipy.terms.abstractConvectionTerm"]], "fipy.terms.abstractDiffusionTerm": [[345, "module-fipy.terms.abstractDiffusionTerm"]], "fipy.terms.abstractUpwindConvectionTerm": [[346, "module-fipy.terms.abstractUpwindConvectionTerm"]], "fipy.terms.advectionTerm": [[347, "module-fipy.terms.advectionTerm"]], "fipy.terms.asymmetricConvectionTerm": [[348, "module-fipy.terms.asymmetricConvectionTerm"]], "fipy.terms.binaryTerm": [[349, "module-fipy.terms.binaryTerm"]], "fipy.terms.cellTerm": [[350, "module-fipy.terms.cellTerm"]], "fipy.terms.centralDiffConvectionTerm": [[351, "module-fipy.terms.centralDiffConvectionTerm"]], "fipy.terms.coupledBinaryTerm": [[352, "module-fipy.terms.coupledBinaryTerm"]], "fipy.terms.diffusionTerm": [[353, "module-fipy.terms.diffusionTerm"]], "fipy.terms.diffusionTermCorrection": [[354, "module-fipy.terms.diffusionTermCorrection"]], "fipy.terms.diffusionTermNoCorrection": [[355, "module-fipy.terms.diffusionTermNoCorrection"]], "fipy.terms.explicitDiffusionTerm": [[356, "module-fipy.terms.explicitDiffusionTerm"]], "fipy.terms.explicitSourceTerm": [[357, "module-fipy.terms.explicitSourceTerm"]], "fipy.terms.explicitUpwindConvectionTerm": [[358, "module-fipy.terms.explicitUpwindConvectionTerm"]], "fipy.terms.exponentialConvectionTerm": [[359, "module-fipy.terms.exponentialConvectionTerm"]], "fipy.terms.faceTerm": [[360, "module-fipy.terms.faceTerm"]], "fipy.terms.firstOrderAdvectionTerm": [[361, "module-fipy.terms.firstOrderAdvectionTerm"]], "fipy.terms.hybridConvectionTerm": [[362, "module-fipy.terms.hybridConvectionTerm"]], "fipy.terms.implicitDiffusionTerm": [[363, "module-fipy.terms.implicitDiffusionTerm"]], "fipy.terms.implicitSourceTerm": [[364, "module-fipy.terms.implicitSourceTerm"]], "fipy.terms.nonDiffusionTerm": [[365, "module-fipy.terms.nonDiffusionTerm"]], "fipy.terms.powerLawConvectionTerm": [[366, "module-fipy.terms.powerLawConvectionTerm"]], "fipy.terms.residualTerm": [[367, "module-fipy.terms.residualTerm"]], "fipy.terms.sourceTerm": [[368, "module-fipy.terms.sourceTerm"]], "fipy.terms.term": [[369, "module-fipy.terms.term"]], "fipy.terms.test": [[370, "module-fipy.terms.test"]], "fipy.terms.transientTerm": [[371, "module-fipy.terms.transientTerm"]], "fipy.terms.unaryTerm": [[372, "module-fipy.terms.unaryTerm"]], "fipy.terms.upwindConvectionTerm": [[373, "module-fipy.terms.upwindConvectionTerm"]], "fipy.terms.vanLeerConvectionTerm": [[374, "module-fipy.terms.vanLeerConvectionTerm"]], "fipy.testFiPy": [[375, "module-fipy.testFiPy"]], "fipy.tests": [[376, "module-fipy.tests"]], "fipy.tests.doctestPlus": [[377, "module-fipy.tests.doctestPlus"]], "fipy.tests.lateImportTest": [[378, "module-fipy.tests.lateImportTest"]], "fipy.tests.test": [[379, "module-fipy.tests.test"]], "fipy.tests.testProgram": [[380, "module-fipy.tests.testProgram"]], "fipy.tools": [[381, "module-fipy.tools"]], "fipy.tools.comms": [[382, "module-fipy.tools.comms"]], "fipy.tools.comms.commWrapper": [[383, "module-fipy.tools.comms.commWrapper"]], "fipy.tools.comms.dummyComm": [[384, "module-fipy.tools.comms.dummyComm"]], "fipy.tools.debug": [[385, "module-fipy.tools.debug"]], "fipy.tools.decorators": [[386, "module-fipy.tools.decorators"]], "fipy.tools.dimensions": [[387, "module-fipy.tools.dimensions"]], "fipy.tools.dimensions.DictWithDefault": [[388, "module-fipy.tools.dimensions.DictWithDefault"]], "fipy.tools.dimensions.NumberDict": [[389, "module-fipy.tools.dimensions.NumberDict"]], "fipy.tools.dimensions.physicalField": [[390, "module-fipy.tools.dimensions.physicalField"]], "fipy.tools.dump": [[391, "module-fipy.tools.dump"]], "fipy.tools.inline": [[392, "module-fipy.tools.inline"]], "fipy.tools.logging": [[393, "module-fipy.tools.logging"]], "fipy.tools.numerix": [[394, "module-fipy.tools.numerix"]], "fipy.tools.parser": [[395, "module-fipy.tools.parser"]], "fipy.tools.sharedtempfile": [[396, "module-fipy.tools.sharedtempfile"]], "fipy.tools.test": [[397, "module-fipy.tools.test"]], "fipy.tools.vector": [[398, "module-fipy.tools.vector"]], "fipy.tools.version": [[399, "module-fipy.tools.version"]], "fipy.tools.vitals": [[400, "module-fipy.tools.vitals"]], "fipy.variables": [[401, "module-fipy.variables"]], "fipy.variables.addOverFacesVariable": [[402, "module-fipy.variables.addOverFacesVariable"]], "fipy.variables.arithmeticCellToFaceVariable": [[403, "module-fipy.variables.arithmeticCellToFaceVariable"]], "fipy.variables.betaNoiseVariable": [[404, "module-fipy.variables.betaNoiseVariable"]], "fipy.variables.binaryOperatorVariable": [[405, "module-fipy.variables.binaryOperatorVariable"]], "fipy.variables.cellToFaceVariable": [[406, "module-fipy.variables.cellToFaceVariable"]], "fipy.variables.cellVariable": [[407, "module-fipy.variables.cellVariable"]], "fipy.variables.constant": [[408, "module-fipy.variables.constant"]], "fipy.variables.constraintMask": [[409, "module-fipy.variables.constraintMask"]], "fipy.variables.coupledCellVariable": [[410, "module-fipy.variables.coupledCellVariable"]], "fipy.variables.distanceVariable": [[411, "module-fipy.variables.distanceVariable"]], "fipy.variables.exponentialNoiseVariable": [[412, "module-fipy.variables.exponentialNoiseVariable"]], "fipy.variables.faceGradContributionsVariable": [[413, "module-fipy.variables.faceGradContributionsVariable"]], "fipy.variables.faceGradVariable": [[414, "module-fipy.variables.faceGradVariable"]], "fipy.variables.faceVariable": [[415, "module-fipy.variables.faceVariable"]], "fipy.variables.gammaNoiseVariable": [[416, "module-fipy.variables.gammaNoiseVariable"]], "fipy.variables.gaussCellGradVariable": [[417, "module-fipy.variables.gaussCellGradVariable"]], "fipy.variables.gaussianNoiseVariable": [[418, "module-fipy.variables.gaussianNoiseVariable"]], "fipy.variables.harmonicCellToFaceVariable": [[419, "module-fipy.variables.harmonicCellToFaceVariable"]], "fipy.variables.histogramVariable": [[420, "module-fipy.variables.histogramVariable"]], "fipy.variables.interfaceAreaVariable": [[421, "module-fipy.variables.interfaceAreaVariable"]], "fipy.variables.interfaceFlagVariable": [[422, "module-fipy.variables.interfaceFlagVariable"]], "fipy.variables.leastSquaresCellGradVariable": [[423, "module-fipy.variables.leastSquaresCellGradVariable"]], "fipy.variables.levelSetDiffusionVariable": [[424, "module-fipy.variables.levelSetDiffusionVariable"]], "fipy.variables.meshVariable": [[425, "module-fipy.variables.meshVariable"]], "fipy.variables.minmodCellToFaceVariable": [[426, "module-fipy.variables.minmodCellToFaceVariable"]], "fipy.variables.modCellGradVariable": [[427, "module-fipy.variables.modCellGradVariable"]], "fipy.variables.modCellToFaceVariable": [[428, "module-fipy.variables.modCellToFaceVariable"]], "fipy.variables.modFaceGradVariable": [[429, "module-fipy.variables.modFaceGradVariable"]], "fipy.variables.modPhysicalField": [[430, "module-fipy.variables.modPhysicalField"]], "fipy.variables.modularVariable": [[431, "module-fipy.variables.modularVariable"]], "fipy.variables.noiseVariable": [[432, "module-fipy.variables.noiseVariable"]], "fipy.variables.operatorVariable": [[433, "module-fipy.variables.operatorVariable"]], "fipy.variables.scharfetterGummelFaceVariable": [[434, "module-fipy.variables.scharfetterGummelFaceVariable"]], "fipy.variables.surfactantConvectionVariable": [[435, "module-fipy.variables.surfactantConvectionVariable"]], "fipy.variables.surfactantVariable": [[436, "module-fipy.variables.surfactantVariable"]], "fipy.variables.test": [[437, "module-fipy.variables.test"]], "fipy.variables.unaryOperatorVariable": [[438, "module-fipy.variables.unaryOperatorVariable"]], "fipy.variables.uniformNoiseVariable": [[439, "module-fipy.variables.uniformNoiseVariable"]], "fipy.variables.variable": [[440, "module-fipy.variables.variable"]], "fipy.viewers": [[441, "module-fipy.viewers"]], "fipy.viewers.matplotlibViewer": [[442, "module-fipy.viewers.matplotlibViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer": [[443, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer": [[444, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer": [[445, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer": [[446, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer": [[447, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer": [[448, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer": [[449, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer": [[450, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer": [[451, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer": [[452, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"]], "fipy.viewers.matplotlibViewer.test": [[453, "module-fipy.viewers.matplotlibViewer.test"]], "fipy.viewers.mayaviViewer": [[454, "module-fipy.viewers.mayaviViewer"]], "fipy.viewers.mayaviViewer.mayaviClient": [[455, "module-fipy.viewers.mayaviViewer.mayaviClient"]], "fipy.viewers.mayaviViewer.mayaviDaemon": [[456, "module-fipy.viewers.mayaviViewer.mayaviDaemon"]], "fipy.viewers.mayaviViewer.test": [[457, "module-fipy.viewers.mayaviViewer.test"]], "fipy.viewers.multiViewer": [[458, "module-fipy.viewers.multiViewer"]], "fipy.viewers.test": [[459, "module-fipy.viewers.test"]], "fipy.viewers.testinteractive": [[460, "module-fipy.viewers.testinteractive"]], "fipy.viewers.tsvViewer": [[461, "module-fipy.viewers.tsvViewer"]], "fipy.viewers.viewer": [[462, "module-fipy.viewers.viewer"]], "fipy.viewers.vtkViewer": [[463, "module-fipy.viewers.vtkViewer"]], "fipy.viewers.vtkViewer.test": [[464, "module-fipy.viewers.vtkViewer.test"]], "fipy.viewers.vtkViewer.vtkCellViewer": [[465, "module-fipy.viewers.vtkViewer.vtkCellViewer"]], "fipy.viewers.vtkViewer.vtkFaceViewer": [[466, "module-fipy.viewers.vtkViewer.vtkFaceViewer"]], "fipy.viewers.vtkViewer.vtkViewer": [[467, "module-fipy.viewers.vtkViewer.vtkViewer"]], "Glossary": [[468, "glossary"]], "Introduction": [[469, "introduction"]], "FiPy Manual": [[470, "fipy-manual"]], "Finite Volume Method": [[471, "finite-volume-method"]], "Cell Centered FVM (CC-FVM)": [[471, "cell-centered-fvm-cc-fvm"]], "Vertex Centered FVM (VC-FVM)": [[471, "vertex-centered-fvm-vc-fvm"]], "Discretization": [[471, "discretization"]], "Transient Term \\partial (\\rho \\phi) / \\partial t": [[471, "transient-term-partial-rho-phi-partial-t"]], "Convection Term \\nabla \\cdot \\left( \\vec{u} \\phi \\right)": [[471, "convection-term-nabla-cdot-left-vec-u-phi-right"]], "Diffusion Term \\nabla \\cdot \\left( \\Gamma_1 \\nabla \\phi \\right)": [[471, "diffusion-term-nabla-cdot-left-gamma-1-nabla-phi-right"]], "Higher Order Diffusion": [[471, "higher-order-diffusion"]], "Source Term": [[471, "source-term"]], "Linear Equations": [[471, "linear-equations"]], "General Conservation Equation": [[472, "general-conservation-equation"]], "Theoretical and Numerical Background": [[473, "theoretical-and-numerical-background"]], "Numerical Schemes": [[474, "numerical-schemes"]], "References": [[475, "references"]], "package": [[476, "module-package"]], "package.subpackage": [[477, "module-package.subpackage"]], "package.subpackage.base": [[478, "module-package.subpackage.base"]], "package.subpackage.object": [[479, "module-package.subpackage.object"]], "How to Read the Modules Documentation": [[480, "how-to-read-the-modules-documentation"]]}, "indexentries": {"path": [[11, "index-1"]], "pep 8": [[11, "index-0"]], "python enhancement proposals": [[11, "index-0"], [468, "index-0"]], "environment variable": [[11, "index-1"], [17, "index-0"], [18, "envvar-FIPY_CACHE"], [18, "envvar-FIPY_DISPLAY_MATRIX"], [18, "envvar-FIPY_INCLUDE_NUMERIX_ALL"], [18, "envvar-FIPY_INLINE"], [18, "envvar-FIPY_INLINE_COMMENT"], [18, "envvar-FIPY_LOG_CONFIG"], [18, "envvar-FIPY_SOLVERS"], [18, "envvar-FIPY_VERBOSE_SOLVER"], [18, "envvar-FIPY_VIEWER"], [18, "envvar-PETSC_OPTIONS"], [18, "index-0"], [18, "index-1"], [18, "index-2"], [23, "envvar-DYLD_LIBRARY_PATH"], [23, "envvar-LD_LIBRARY_PATH"], [193, "index-0"]], "fipy_solvers": [[17, "index-0"], [18, "envvar-FIPY_SOLVERS"], [18, "index-1"]], "--cache": [[18, "cmdoption-cache"]], "--inline": [[18, "cmdoption-inline"]], "--lsmlib": [[18, "cmdoption-lsmlib"]], "--no-cache": [[18, "cmdoption-no-cache"]], "--no-pysparse": [[18, "cmdoption-no-pysparse"]], "--pyamg": [[18, "cmdoption-pyamg"]], "--pyamgx": [[18, "cmdoption-pyamgx"]], "--pysparse": [[18, "cmdoption-pysparse"]], "--scipy": [[18, "cmdoption-scipy"]], "--skfmm": [[18, "cmdoption-skfmm"]], "--trilinos": [[18, "cmdoption-trilinos"]], "fipy_cache": [[18, "envvar-FIPY_CACHE"]], "fipy_display_matrix": [[18, "envvar-FIPY_DISPLAY_MATRIX"]], "fipy_include_numerix_all": [[18, "envvar-FIPY_INCLUDE_NUMERIX_ALL"], [193, "index-0"]], "fipy_inline": [[18, "envvar-FIPY_INLINE"]], "fipy_inline_comment": [[18, "envvar-FIPY_INLINE_COMMENT"]], "fipy_log_config": [[18, "envvar-FIPY_LOG_CONFIG"], [18, "index-0"], [18, "index-2"]], "fipy_verbose_solver": [[18, "envvar-FIPY_VERBOSE_SOLVER"]], "fipy_viewer": [[18, "envvar-FIPY_VIEWER"]], "petsc_options": [[18, "envvar-PETSC_OPTIONS"]], "command line option": [[18, "cmdoption-cache"], [18, "cmdoption-inline"], [18, "cmdoption-lsmlib"], [18, "cmdoption-no-cache"], [18, "cmdoption-no-pysparse"], [18, "cmdoption-pyamg"], [18, "cmdoption-pyamgx"], [18, "cmdoption-pysparse"], [18, "cmdoption-scipy"], [18, "cmdoption-skfmm"], [18, "cmdoption-trilinos"], [23, "cmdoption-home"], [23, "cmdoption-prefix"]], "--home": [[23, "cmdoption-home"]], "--prefix": [[23, "cmdoption-prefix"]], "dyld_library_path": [[23, "envvar-DYLD_LIBRARY_PATH"]], "ld_library_path": [[23, "envvar-LD_LIBRARY_PATH"]], "examples": [[24, "module-examples"]], "module": [[24, "module-examples"], [25, "module-examples.benchmarking"], [26, "module-examples.benchmarking.benchmarker"], [27, "module-examples.benchmarking.size"], [28, "module-examples.benchmarking.steps"], [29, "module-examples.benchmarking.utils"], [30, "module-examples.benchmarking.versions"], [31, "module-examples.cahnHilliard"], [32, "module-examples.cahnHilliard.mesh2D"], [33, "module-examples.cahnHilliard.mesh2DCoupled"], [34, "module-examples.cahnHilliard.mesh3D"], [35, "module-examples.cahnHilliard.sphere"], [36, "module-examples.cahnHilliard.sphereDaemon"], [37, "index-5"], [37, "module-examples.cahnHilliard.tanh1D"], [38, "module-examples.cahnHilliard.test"], [39, "module-examples.chemotaxis"], [40, "module-examples.chemotaxis.input"], [41, "module-examples.chemotaxis.input2D"], [42, "module-examples.chemotaxis.parameters"], [43, "module-examples.chemotaxis.test"], [44, "module-examples.convection"], [45, "module-examples.convection.advection"], [46, "module-examples.convection.advection.explicitUpwind"], [47, "module-examples.convection.advection.implicitUpwind"], [48, "module-examples.convection.advection.vanLeerUpwind"], [49, "module-examples.convection.exponential1D"], [50, "index-2"], [50, "module-examples.convection.exponential1D.cylindricalMesh1D"], [51, "index-1"], [51, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"], [52, "index-2"], [52, "module-examples.convection.exponential1D.mesh1D"], [53, "module-examples.convection.exponential1D.tri2D"], [54, "module-examples.convection.exponential1DBack"], [55, "module-examples.convection.exponential1DBack.mesh1D"], [56, "module-examples.convection.exponential1DSource"], [57, "index-4"], [57, "module-examples.convection.exponential1DSource.mesh1D"], [58, "module-examples.convection.exponential1DSource.tri2D"], [59, "module-examples.convection.exponential2D"], [60, "index-2"], [60, "module-examples.convection.exponential2D.cylindricalMesh2D"], [61, "index-1"], [61, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"], [62, "module-examples.convection.exponential2D.mesh2D"], [63, "module-examples.convection.exponential2D.tri2D"], [64, "module-examples.convection.peclet"], [65, "module-examples.convection.powerLaw1D"], [66, "module-examples.convection.powerLaw1D.mesh1D"], [67, "module-examples.convection.powerLaw1D.tri2D"], [68, "module-examples.convection.robin"], [69, "module-examples.convection.source"], [70, "module-examples.convection.test"], [71, "module-examples.diffusion"], [72, "module-examples.diffusion.anisotropy"], [73, "index-3"], [73, "module-examples.diffusion.circle"], [74, "index-3"], [74, "module-examples.diffusion.circleQuad"], [75, "module-examples.diffusion.coupled"], [76, "module-examples.diffusion.electrostatics"], [77, "module-examples.diffusion.explicit"], [78, "module-examples.diffusion.explicit.mesh1D"], [79, "module-examples.diffusion.explicit.mixedelement"], [80, "module-examples.diffusion.explicit.test"], [81, "module-examples.diffusion.explicit.tri2D"], [82, "index-1"], [82, "module-examples.diffusion.mesh1D"], [83, "index-1"], [83, "module-examples.diffusion.mesh20x20"], [84, "index-1"], [84, "module-examples.diffusion.mesh20x20Coupled"], [85, "module-examples.diffusion.nthOrder"], [86, "index-3"], [86, "module-examples.diffusion.nthOrder.input4thOrder1D"], [87, "module-examples.diffusion.nthOrder.input4thOrder_line"], [88, "module-examples.diffusion.nthOrder.test"], [89, "module-examples.diffusion.steadyState"], [90, "module-examples.diffusion.steadyState.mesh1D"], [91, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"], [92, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"], [93, "module-examples.diffusion.steadyState.mesh20x20"], [94, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"], [95, "module-examples.diffusion.steadyState.mesh20x20.isotropy"], [96, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"], [97, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"], [98, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"], [99, "module-examples.diffusion.steadyState.mesh50x50"], [100, "module-examples.diffusion.steadyState.mesh50x50.input"], [101, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"], [102, "module-examples.diffusion.steadyState.otherMeshes"], [103, "module-examples.diffusion.steadyState.otherMeshes.cubicalProblem"], [104, "module-examples.diffusion.steadyState.otherMeshes.grid3Dinput"], [105, "module-examples.diffusion.steadyState.otherMeshes.prism"], [106, "module-examples.diffusion.steadyState.test"], [107, "module-examples.diffusion.test"], [108, "module-examples.diffusion.variable"], [109, "module-examples.elphf"], [110, "module-examples.elphf.diffusion"], [111, "module-examples.elphf.diffusion.mesh1D"], [112, "module-examples.elphf.diffusion.mesh1Ddimensional"], [113, "module-examples.elphf.diffusion.mesh2D"], [114, "module-examples.elphf.input"], [115, "module-examples.elphf.phase"], [116, "module-examples.elphf.phaseDiffusion"], [117, "module-examples.elphf.poisson"], [118, "module-examples.elphf.test"], [119, "module-examples.flow"], [120, "index-2"], [120, "module-examples.flow.stokesCavity"], [121, "module-examples.flow.test"], [122, "module-examples.levelSet"], [123, "module-examples.levelSet.advection"], [124, "module-examples.levelSet.advection.circle"], [125, "module-examples.levelSet.advection.mesh1D"], [126, "module-examples.levelSet.advection.test"], [127, "module-examples.levelSet.advection.trench"], [128, "module-examples.levelSet.distanceFunction"], [129, "module-examples.levelSet.distanceFunction.circle"], [130, "module-examples.levelSet.distanceFunction.interior"], [131, "module-examples.levelSet.distanceFunction.mesh1D"], [132, "module-examples.levelSet.distanceFunction.square"], [133, "module-examples.levelSet.distanceFunction.test"], [134, "module-examples.levelSet.electroChem"], [135, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"], [136, "module-examples.levelSet.electroChem.adsorption"], [137, "module-examples.levelSet.electroChem.gapFillDistanceVariable"], [138, "module-examples.levelSet.electroChem.gapFillMesh"], [139, "index-1"], [139, "module-examples.levelSet.electroChem.gold"], [140, "index-0"], [140, "module-examples.levelSet.electroChem.howToWriteAScript"], [141, "index-1"], [141, "module-examples.levelSet.electroChem.leveler"], [142, "module-examples.levelSet.electroChem.lines"], [143, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"], [144, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"], [145, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"], [146, "index-1"], [146, "module-examples.levelSet.electroChem.simpleTrenchSystem"], [147, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"], [148, "module-examples.levelSet.electroChem.test"], [149, "module-examples.levelSet.electroChem.trenchMesh"], [150, "module-examples.levelSet.surfactant"], [151, "module-examples.levelSet.surfactant.circle"], [152, "module-examples.levelSet.surfactant.expandingCircle"], [153, "module-examples.levelSet.surfactant.square"], [154, "module-examples.levelSet.surfactant.test"], [155, "module-examples.levelSet.test"], [156, "module-examples.meshing"], [157, "module-examples.meshing.gmshRefinement"], [158, "module-examples.meshing.inputGrid2D"], [159, "module-examples.meshing.sphere"], [160, "module-examples.meshing.test"], [161, "module-examples.parallel"], [162, "module-examples.phase"], [163, "module-examples.phase.anisotropy"], [164, "index-4"], [164, "module-examples.phase.anisotropyOLD"], [165, "index-7"], [165, "module-examples.phase.binary"], [166, "index-5"], [166, "index-6"], [166, "module-examples.phase.binaryCoupled"], [167, "module-examples.phase.impingement"], [168, "index-0"], [168, "index-6"], [168, "index-8"], [168, "module-examples.phase.impingement.mesh20x20"], [169, "index-4"], [169, "module-examples.phase.impingement.mesh40x1"], [170, "module-examples.phase.impingement.test"], [171, "module-examples.phase.missOrientation"], [172, "module-examples.phase.missOrientation.circle"], [173, "module-examples.phase.missOrientation.mesh1D"], [174, "module-examples.phase.missOrientation.modCircle"], [175, "module-examples.phase.missOrientation.test"], [176, "module-examples.phase.polyxtal"], [177, "module-examples.phase.polyxtalCoupled"], [178, "index-4"], [178, "module-examples.phase.quaternary"], [179, "index-2"], [179, "index-8"], [179, "module-examples.phase.simple"], [180, "module-examples.phase.symmetry"], [181, "module-examples.phase.test"], [182, "module-examples.reactiveWetting"], [183, "module-examples.reactiveWetting.liquidVapor1D"], [184, "module-examples.reactiveWetting.liquidVapor2D"], [185, "module-examples.reactiveWetting.test"], [186, "module-examples.riemann"], [187, "module-examples.riemann.acoustics"], [188, "module-examples.riemann.test"], [189, "module-examples.test"], [190, "module-examples.updating"], [191, "index-5"], [191, "module-examples.updating.update0_1to1_0"], [192, "module-examples.updating.update1_0to2_0"], [193, "module-examples.updating.update2_0to3_0"], [194, "module-fipy"], [195, "module-fipy.boundaryConditions"], [196, "module-fipy.boundaryConditions.boundaryCondition"], [197, "module-fipy.boundaryConditions.constraint"], [198, "module-fipy.boundaryConditions.fixedFlux"], [199, "module-fipy.boundaryConditions.fixedValue"], [200, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"], [201, "module-fipy.boundaryConditions.test"], [202, "module-fipy.matrices"], [203, "module-fipy.matrices.offsetSparseMatrix"], [204, "module-fipy.matrices.petscMatrix"], [205, "module-fipy.matrices.pysparseMatrix"], [206, "module-fipy.matrices.scipyMatrix"], [207, "module-fipy.matrices.sparseMatrix"], [208, "module-fipy.matrices.test"], [209, "module-fipy.matrices.trilinosMatrix"], [210, "module-fipy.meshes"], [211, "module-fipy.meshes.abstractMesh"], [212, "module-fipy.meshes.builders"], [213, "module-fipy.meshes.builders.abstractGridBuilder"], [214, "module-fipy.meshes.builders.grid1DBuilder"], [215, "module-fipy.meshes.builders.grid2DBuilder"], [216, "module-fipy.meshes.builders.grid3DBuilder"], [217, "module-fipy.meshes.builders.periodicGrid1DBuilder"], [218, "module-fipy.meshes.builders.utilityClasses"], [219, "module-fipy.meshes.cylindricalGrid1D"], [220, "module-fipy.meshes.cylindricalGrid2D"], [221, "module-fipy.meshes.cylindricalNonUniformGrid1D"], [222, "module-fipy.meshes.cylindricalNonUniformGrid2D"], [223, "module-fipy.meshes.cylindricalUniformGrid1D"], [224, "module-fipy.meshes.cylindricalUniformGrid2D"], [225, "module-fipy.meshes.factoryMeshes"], [226, "module-fipy.meshes.gmshMesh"], [227, "module-fipy.meshes.grid1D"], [228, "module-fipy.meshes.grid2D"], [229, "module-fipy.meshes.grid3D"], [230, "module-fipy.meshes.mesh"], [231, "module-fipy.meshes.mesh1D"], [232, "module-fipy.meshes.mesh2D"], [233, "module-fipy.meshes.nonUniformGrid1D"], [234, "module-fipy.meshes.nonUniformGrid2D"], [235, "module-fipy.meshes.nonUniformGrid3D"], [236, "module-fipy.meshes.periodicGrid1D"], [237, "module-fipy.meshes.periodicGrid2D"], [238, "module-fipy.meshes.periodicGrid3D"], [239, "module-fipy.meshes.representations"], [240, "module-fipy.meshes.representations.abstractRepresentation"], [241, "module-fipy.meshes.representations.gridRepresentation"], [242, "module-fipy.meshes.representations.meshRepresentation"], [243, "module-fipy.meshes.skewedGrid2D"], [244, "module-fipy.meshes.sphericalNonUniformGrid1D"], [245, "module-fipy.meshes.sphericalUniformGrid1D"], [246, "module-fipy.meshes.test"], [247, "module-fipy.meshes.topologies"], [248, "module-fipy.meshes.topologies.abstractTopology"], [249, "module-fipy.meshes.topologies.gridTopology"], [250, "module-fipy.meshes.topologies.meshTopology"], [251, "module-fipy.meshes.tri2D"], [252, "module-fipy.meshes.uniformGrid"], [253, "module-fipy.meshes.uniformGrid1D"], [254, "module-fipy.meshes.uniformGrid2D"], [255, "module-fipy.meshes.uniformGrid3D"], [256, "module-fipy.solvers"], [257, "module-fipy.solvers.petsc"], [258, "module-fipy.solvers.petsc.comms"], [259, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"], [260, "module-fipy.solvers.petsc.comms.petscCommWrapper"], [261, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"], [262, "module-fipy.solvers.petsc.dummySolver"], [263, "module-fipy.solvers.petsc.linearBicgSolver"], [264, "module-fipy.solvers.petsc.linearCGSSolver"], [265, "module-fipy.solvers.petsc.linearGMRESSolver"], [266, "module-fipy.solvers.petsc.linearLUSolver"], [267, "module-fipy.solvers.petsc.linearPCGSolver"], [268, "module-fipy.solvers.petsc.petscKrylovSolver"], [269, "module-fipy.solvers.petsc.petscSolver"], [270, "module-fipy.solvers.pyAMG"], [271, "module-fipy.solvers.pyAMG.linearCGSSolver"], [272, "module-fipy.solvers.pyAMG.linearGMRESSolver"], [273, "module-fipy.solvers.pyAMG.linearGeneralSolver"], [274, "module-fipy.solvers.pyAMG.linearLUSolver"], [275, "module-fipy.solvers.pyAMG.linearPCGSolver"], [276, "module-fipy.solvers.pyAMG.preconditioners"], [277, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"], [278, "module-fipy.solvers.pyamgx"], [279, "module-fipy.solvers.pyamgx.aggregationAMGSolver"], [280, "module-fipy.solvers.pyamgx.classicalAMGSolver"], [281, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"], [282, "module-fipy.solvers.pyamgx.linearCGSolver"], [283, "module-fipy.solvers.pyamgx.linearFGMRESSolver"], [284, "module-fipy.solvers.pyamgx.linearGMRESSolver"], [285, "module-fipy.solvers.pyamgx.linearLUSolver"], [286, "module-fipy.solvers.pyamgx.preconditioners"], [287, "module-fipy.solvers.pyamgx.preconditioners.preconditioners"], [288, "module-fipy.solvers.pyamgx.pyAMGXSolver"], [289, "module-fipy.solvers.pyamgx.smoothers"], [290, "module-fipy.solvers.pyamgx.smoothers.smoothers"], [291, "module-fipy.solvers.pysparse"], [292, "module-fipy.solvers.pysparse.linearCGSSolver"], [293, "module-fipy.solvers.pysparse.linearGMRESSolver"], [294, "module-fipy.solvers.pysparse.linearJORSolver"], [295, "module-fipy.solvers.pysparse.linearLUSolver"], [296, "module-fipy.solvers.pysparse.linearPCGSolver"], [297, "module-fipy.solvers.pysparse.preconditioners"], [298, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"], [299, "module-fipy.solvers.pysparse.preconditioners.preconditioner"], [300, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"], [301, "module-fipy.solvers.pysparse.pysparseSolver"], [302, "module-fipy.solvers.pysparseMatrixSolver"], [303, "module-fipy.solvers.scipy"], [304, "module-fipy.solvers.scipy.linearBicgstabSolver"], [305, "module-fipy.solvers.scipy.linearCGSSolver"], [306, "module-fipy.solvers.scipy.linearGMRESSolver"], [307, "module-fipy.solvers.scipy.linearLUSolver"], [308, "module-fipy.solvers.scipy.linearPCGSolver"], [309, "module-fipy.solvers.scipy.scipyKrylovSolver"], [310, "module-fipy.solvers.scipy.scipySolver"], [311, "module-fipy.solvers.solver"], [312, "module-fipy.solvers.test"], [313, "module-fipy.solvers.trilinos"], [314, "module-fipy.solvers.trilinos.comms"], [315, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"], [316, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"], [317, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"], [318, "module-fipy.solvers.trilinos.linearBicgstabSolver"], [319, "module-fipy.solvers.trilinos.linearCGSSolver"], [320, "module-fipy.solvers.trilinos.linearGMRESSolver"], [321, "module-fipy.solvers.trilinos.linearLUSolver"], [322, "module-fipy.solvers.trilinos.linearPCGSolver"], [323, "module-fipy.solvers.trilinos.preconditioners"], [324, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"], [325, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"], [326, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"], [327, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"], [328, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"], [329, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"], [330, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"], [331, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"], [332, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"], [333, "module-fipy.solvers.trilinos.preconditioners.preconditioner"], [334, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"], [335, "module-fipy.solvers.trilinos.trilinosMLTest"], [336, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"], [337, "module-fipy.solvers.trilinos.trilinosSolver"], [338, "module-fipy.steppers"], [339, "module-fipy.steppers.pidStepper"], [340, "module-fipy.steppers.pseudoRKQSStepper"], [341, "module-fipy.steppers.stepper"], [342, "module-fipy.terms"], [343, "module-fipy.terms.abstractBinaryTerm"], [344, "module-fipy.terms.abstractConvectionTerm"], [345, "module-fipy.terms.abstractDiffusionTerm"], [346, "module-fipy.terms.abstractUpwindConvectionTerm"], [347, "module-fipy.terms.advectionTerm"], [348, "module-fipy.terms.asymmetricConvectionTerm"], [349, "module-fipy.terms.binaryTerm"], [350, "module-fipy.terms.cellTerm"], [351, "module-fipy.terms.centralDiffConvectionTerm"], [352, "module-fipy.terms.coupledBinaryTerm"], [353, "module-fipy.terms.diffusionTerm"], [354, "module-fipy.terms.diffusionTermCorrection"], [355, "module-fipy.terms.diffusionTermNoCorrection"], [356, "module-fipy.terms.explicitDiffusionTerm"], [357, "module-fipy.terms.explicitSourceTerm"], [358, "module-fipy.terms.explicitUpwindConvectionTerm"], [359, "module-fipy.terms.exponentialConvectionTerm"], [360, "module-fipy.terms.faceTerm"], [361, "module-fipy.terms.firstOrderAdvectionTerm"], [362, "module-fipy.terms.hybridConvectionTerm"], [363, "module-fipy.terms.implicitDiffusionTerm"], [364, "module-fipy.terms.implicitSourceTerm"], [365, "module-fipy.terms.nonDiffusionTerm"], [366, "module-fipy.terms.powerLawConvectionTerm"], [367, "module-fipy.terms.residualTerm"], [368, "module-fipy.terms.sourceTerm"], [369, "module-fipy.terms.term"], [370, "module-fipy.terms.test"], [371, "module-fipy.terms.transientTerm"], [372, "module-fipy.terms.unaryTerm"], [373, "module-fipy.terms.upwindConvectionTerm"], [374, "module-fipy.terms.vanLeerConvectionTerm"], [375, "module-fipy.testFiPy"], [376, "module-fipy.tests"], [377, "module-fipy.tests.doctestPlus"], [378, "module-fipy.tests.lateImportTest"], [379, "module-fipy.tests.test"], [380, "module-fipy.tests.testProgram"], [381, "module-fipy.tools"], [382, "module-fipy.tools.comms"], [383, "module-fipy.tools.comms.commWrapper"], [384, "module-fipy.tools.comms.dummyComm"], [385, "module-fipy.tools.debug"], [386, "module-fipy.tools.decorators"], [387, "module-fipy.tools.dimensions"], [388, "module-fipy.tools.dimensions.DictWithDefault"], [389, "module-fipy.tools.dimensions.NumberDict"], [390, "module-fipy.tools.dimensions.physicalField"], [391, "module-fipy.tools.dump"], [392, "module-fipy.tools.inline"], [393, "module-fipy.tools.logging"], [394, "module-fipy.tools.numerix"], [395, "module-fipy.tools.parser"], [396, "module-fipy.tools.sharedtempfile"], [397, "module-fipy.tools.test"], [398, "module-fipy.tools.vector"], [399, "module-fipy.tools.version"], [400, "module-fipy.tools.vitals"], [401, "module-fipy.variables"], [402, "module-fipy.variables.addOverFacesVariable"], [403, "module-fipy.variables.arithmeticCellToFaceVariable"], [404, "module-fipy.variables.betaNoiseVariable"], [405, "module-fipy.variables.binaryOperatorVariable"], [406, "module-fipy.variables.cellToFaceVariable"], [407, "module-fipy.variables.cellVariable"], [408, "module-fipy.variables.constant"], [409, "module-fipy.variables.constraintMask"], [410, "module-fipy.variables.coupledCellVariable"], [411, "module-fipy.variables.distanceVariable"], [412, "module-fipy.variables.exponentialNoiseVariable"], [413, "module-fipy.variables.faceGradContributionsVariable"], [414, "module-fipy.variables.faceGradVariable"], [415, "module-fipy.variables.faceVariable"], [416, "module-fipy.variables.gammaNoiseVariable"], [417, "module-fipy.variables.gaussCellGradVariable"], [418, "module-fipy.variables.gaussianNoiseVariable"], [419, "module-fipy.variables.harmonicCellToFaceVariable"], [420, "module-fipy.variables.histogramVariable"], [421, "module-fipy.variables.interfaceAreaVariable"], [422, "module-fipy.variables.interfaceFlagVariable"], [423, "module-fipy.variables.leastSquaresCellGradVariable"], [424, "module-fipy.variables.levelSetDiffusionVariable"], [425, "module-fipy.variables.meshVariable"], [426, "module-fipy.variables.minmodCellToFaceVariable"], [427, "module-fipy.variables.modCellGradVariable"], [428, "module-fipy.variables.modCellToFaceVariable"], [429, "module-fipy.variables.modFaceGradVariable"], [430, "module-fipy.variables.modPhysicalField"], [431, "module-fipy.variables.modularVariable"], [432, "module-fipy.variables.noiseVariable"], [433, "module-fipy.variables.operatorVariable"], [434, "module-fipy.variables.scharfetterGummelFaceVariable"], [435, "module-fipy.variables.surfactantConvectionVariable"], [436, "module-fipy.variables.surfactantVariable"], [437, "module-fipy.variables.test"], [438, "module-fipy.variables.unaryOperatorVariable"], [439, "module-fipy.variables.uniformNoiseVariable"], [440, "module-fipy.variables.variable"], [441, "module-fipy.viewers"], [442, "module-fipy.viewers.matplotlibViewer"], [443, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"], [444, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"], [445, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"], [446, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"], [447, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"], [448, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"], [449, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"], [450, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"], [451, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"], [452, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"], [453, "module-fipy.viewers.matplotlibViewer.test"], [454, "module-fipy.viewers.mayaviViewer"], [455, "module-fipy.viewers.mayaviViewer.mayaviClient"], [456, "module-fipy.viewers.mayaviViewer.mayaviDaemon"], [457, "module-fipy.viewers.mayaviViewer.test"], [458, "module-fipy.viewers.multiViewer"], [459, "module-fipy.viewers.test"], [460, "module-fipy.viewers.testinteractive"], [461, "module-fipy.viewers.tsvViewer"], [462, "module-fipy.viewers.viewer"], [463, "module-fipy.viewers.vtkViewer"], [464, "module-fipy.viewers.vtkViewer.test"], [465, "module-fipy.viewers.vtkViewer.vtkCellViewer"], [466, "module-fipy.viewers.vtkViewer.vtkFaceViewer"], [467, "module-fipy.viewers.vtkViewer.vtkViewer"], [476, "module-package"], [477, "module-package.subpackage"], [478, "module-package.subpackage.base"], [479, "module-package.subpackage.object"]], "examples.benchmarking": [[25, "module-examples.benchmarking"]], "examples.benchmarking.benchmarker": [[26, "module-examples.benchmarking.benchmarker"]], "examples.benchmarking.size": [[27, "module-examples.benchmarking.size"]], "examples.benchmarking.steps": [[28, "module-examples.benchmarking.steps"]], "examples.benchmarking.utils": [[29, "module-examples.benchmarking.utils"]], "examples.benchmarking.versions": [[30, "module-examples.benchmarking.versions"]], "examples.cahnhilliard": [[31, "module-examples.cahnHilliard"]], "examples.cahnhilliard.mesh2d": [[32, "module-examples.cahnHilliard.mesh2D"]], "examples.cahnhilliard.mesh2dcoupled": [[33, "module-examples.cahnHilliard.mesh2DCoupled"]], "examples.cahnhilliard.mesh3d": [[34, "module-examples.cahnHilliard.mesh3D"]], "examples.cahnhilliard.sphere": [[35, "module-examples.cahnHilliard.sphere"]], "examples.cahnhilliard.spheredaemon": [[36, "module-examples.cahnHilliard.sphereDaemon"]], "cellvariable": [[37, "index-1"], [57, "index-1"], [86, "index-1"], [120, "index-1"], [140, "index-5"], [164, "index-1"], [165, "index-1"], [166, "index-1"], [168, "index-2"], [169, "index-1"], [178, "index-1"], [179, "index-1"], [191, "index-2"], [191, "index-9"]], "defaultsolver": [[37, "index-3"]], "grid2d": [[37, "index-0"], [83, "index-0"], [84, "index-0"], [120, "index-0"], [129, "index-0"], [131, "index-0"], [140, "index-2"], [164, "index-0"], [168, "index-1"], [191, "index-0"]], "linearlusolver": [[37, "index-3"], [166, "index-7"], [191, "index-3"]], "nthorderboundarycondition": [[37, "index-2"], [86, "index-2"]], "examples.cahnhilliard.tanh1d": [[37, "module-examples.cahnHilliard.tanh1D"]], "exp": [[37, "index-4"], [50, "index-1"], [51, "index-0"], [52, "index-1"], [57, "index-3"], [60, "index-1"], [61, "index-0"], [140, "index-1"], [165, "index-4"], [166, "index-3"], [168, "index-5"], [169, "index-3"]], "fipy.viewers": [[37, "index-5"], [50, "index-2"], [51, "index-1"], [52, "index-2"], [57, "index-4"], [60, "index-2"], [61, "index-1"], [82, "index-1"], [83, "index-1"], [84, "index-1"], [86, "index-3"], [120, "index-2"], [164, "index-4"], [165, "index-7"], [166, "index-6"], [168, "index-6"], [169, "index-4"], [179, "index-2"], [191, "index-11"], [441, "module-fipy.viewers"]], "sqrt": [[37, "index-4"], [73, "index-3"], [74, "index-3"], [140, "index-1"], [168, "index-1"], [179, "index-3"]], "examples.cahnhilliard.test": [[38, "module-examples.cahnHilliard.test"]], "examples.chemotaxis": [[39, "module-examples.chemotaxis"]], "examples.chemotaxis.input": [[40, "module-examples.chemotaxis.input"]], "examples.chemotaxis.input2d": [[41, "module-examples.chemotaxis.input2D"]], "examples.chemotaxis.parameters": [[42, "module-examples.chemotaxis.parameters"]], "examples.chemotaxis.test": [[43, "module-examples.chemotaxis.test"]], "examples.convection": [[44, "module-examples.convection"]], "examples.convection.advection": [[45, "module-examples.convection.advection"]], "examples.convection.advection.explicitupwind": [[46, "module-examples.convection.advection.explicitUpwind"]], "examples.convection.advection.implicitupwind": [[47, "module-examples.convection.advection.implicitUpwind"]], "examples.convection.advection.vanleerupwind": [[48, "module-examples.convection.advection.vanLeerUpwind"]], "examples.convection.exponential1d": [[49, "module-examples.convection.exponential1D"]], "grid1d": [[50, "index-0"], [52, "index-0"], [57, "index-0"], [60, "index-0"], [86, "index-0"], [125, "index-0"], [165, "index-0"], [166, "index-0"], [169, "index-0"], [178, "index-0"], [179, "index-0"], [191, "index-7"]], "examples.convection.exponential1d.cylindricalmesh1d": [[50, "module-examples.convection.exponential1D.cylindricalMesh1D"]], "examples.convection.exponential1d.cylindricalmesh1dnonuniform": [[51, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"]], "examples.convection.exponential1d.mesh1d": [[52, "module-examples.convection.exponential1D.mesh1D"]], "examples.convection.exponential1d.tri2d": [[53, "module-examples.convection.exponential1D.tri2D"]], "examples.convection.exponential1dback": [[54, "module-examples.convection.exponential1DBack"]], "examples.convection.exponential1dback.mesh1d": [[55, "module-examples.convection.exponential1DBack.mesh1D"]], "examples.convection.exponential1dsource": [[56, "module-examples.convection.exponential1DSource"]], "defaultasymmetricsolver": [[57, "index-2"], [178, "index-5"]], "examples.convection.exponential1dsource.mesh1d": [[57, "module-examples.convection.exponential1DSource.mesh1D"]], "examples.convection.exponential1dsource.tri2d": [[58, "module-examples.convection.exponential1DSource.tri2D"]], "examples.convection.exponential2d": [[59, "module-examples.convection.exponential2D"]], "examples.convection.exponential2d.cylindricalmesh2d": [[60, "module-examples.convection.exponential2D.cylindricalMesh2D"]], "examples.convection.exponential2d.cylindricalmesh2dnonuniform": [[61, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"]], "examples.convection.exponential2d.mesh2d": [[62, "module-examples.convection.exponential2D.mesh2D"]], "examples.convection.exponential2d.tri2d": [[63, "module-examples.convection.exponential2D.tri2D"]], "examples.convection.peclet": [[64, "module-examples.convection.peclet"]], "examples.convection.powerlaw1d": [[65, "module-examples.convection.powerLaw1D"]], "examples.convection.powerlaw1d.mesh1d": [[66, "module-examples.convection.powerLaw1D.mesh1D"]], "examples.convection.powerlaw1d.tri2d": [[67, "module-examples.convection.powerLaw1D.tri2D"]], "examples.convection.robin": [[68, "module-examples.convection.robin"]], "examples.convection.source": [[69, "module-examples.convection.source"]], "examples.convection.test": [[70, "module-examples.convection.test"]], "examples.diffusion": [[71, "module-examples.diffusion"]], "examples.diffusion.anisotropy": [[72, "module-examples.diffusion.anisotropy"]], "arcsin; cos": [[73, "index-3"], [74, "index-3"]], "examples.diffusion.circle": [[73, "module-examples.diffusion.circle"]], "fipy.terms.implicitdiffusionterm.diffusionterm": [[73, "index-1"], [74, "index-1"]], "fipy.terms.transientterm.transientterm": [[73, "index-1"], [74, "index-1"]], "fipy.variables.cellvariable.cellvariable": [[73, "index-0"], [74, "index-0"]], "fipy.viewers.tsvviewer.tsvviewer": [[73, "index-2"], [74, "index-2"]], "object": [[73, "index-0"], [73, "index-1"], [73, "index-2"], [74, "index-0"], [74, "index-1"], [74, "index-2"]], "scipy": [[73, "index-3"], [74, "index-3"], [165, "index-6"], [166, "index-5"], [179, "index-8"], [468, "term-SciPy"]], "examples.diffusion.circlequad": [[74, "module-examples.diffusion.circleQuad"]], "examples.diffusion.coupled": [[75, "module-examples.diffusion.coupled"]], "examples.diffusion.electrostatics": [[76, "module-examples.diffusion.electrostatics"]], "examples.diffusion.explicit": [[77, "module-examples.diffusion.explicit"]], "examples.diffusion.explicit.mesh1d": [[78, "module-examples.diffusion.explicit.mesh1D"]], "examples.diffusion.explicit.mixedelement": [[79, "module-examples.diffusion.explicit.mixedelement"]], "examples.diffusion.explicit.test": [[80, "module-examples.diffusion.explicit.test"]], "examples.diffusion.explicit.tri2d": [[81, "module-examples.diffusion.explicit.tri2D"]], "explicitdiffusionterm": [[82, "index-0"], [164, "index-3"], [168, "index-4"], [169, "index-2"]], "facevariable": [[82, "index-2"]], "transientterm": [[82, "index-0"], [164, "index-3"], [168, "index-4"], [169, "index-2"], [179, "index-4"]], "examples.diffusion.mesh1d": [[82, "module-examples.diffusion.mesh1D"]], "examples.diffusion.mesh20x20": [[83, "module-examples.diffusion.mesh20x20"]], "examples.diffusion.mesh20x20coupled": [[84, "module-examples.diffusion.mesh20x20Coupled"]], "examples.diffusion.nthorder": [[85, "module-examples.diffusion.nthOrder"]], "examples.diffusion.nthorder.input4thorder1d": [[86, "module-examples.diffusion.nthOrder.input4thOrder1D"]], "examples.diffusion.nthorder.input4thorder_line": [[87, "module-examples.diffusion.nthOrder.input4thOrder_line"]], "examples.diffusion.nthorder.test": [[88, "module-examples.diffusion.nthOrder.test"]], "examples.diffusion.steadystate": [[89, "module-examples.diffusion.steadyState"]], "examples.diffusion.steadystate.mesh1d": [[90, "module-examples.diffusion.steadyState.mesh1D"]], "examples.diffusion.steadystate.mesh1d.inputperiodic": [[91, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"]], "examples.diffusion.steadystate.mesh1d.tri2dinput": [[92, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"]], "examples.diffusion.steadystate.mesh20x20": [[93, "module-examples.diffusion.steadyState.mesh20x20"]], "examples.diffusion.steadystate.mesh20x20.gmshinput": [[94, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"]], "examples.diffusion.steadystate.mesh20x20.isotropy": [[95, "module-examples.diffusion.steadyState.mesh20x20.isotropy"]], "examples.diffusion.steadystate.mesh20x20.modifiedmeshinput": [[96, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"]], "examples.diffusion.steadystate.mesh20x20.orthoerror": [[97, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"]], "examples.diffusion.steadystate.mesh20x20.tri2dinput": [[98, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"]], "examples.diffusion.steadystate.mesh50x50": [[99, "module-examples.diffusion.steadyState.mesh50x50"]], "examples.diffusion.steadystate.mesh50x50.input": [[100, "module-examples.diffusion.steadyState.mesh50x50.input"]], "examples.diffusion.steadystate.mesh50x50.tri2dinput": [[101, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"]], "examples.diffusion.steadystate.othermeshes": [[102, "module-examples.diffusion.steadyState.otherMeshes"]], "examples.diffusion.steadystate.othermeshes.cubicalproblem": [[103, "module-examples.diffusion.steadyState.otherMeshes.cubicalProblem"]], "examples.diffusion.steadystate.othermeshes.grid3dinput": [[104, "module-examples.diffusion.steadyState.otherMeshes.grid3Dinput"]], "examples.diffusion.steadystate.othermeshes.prism": [[105, "module-examples.diffusion.steadyState.otherMeshes.prism"]], "examples.diffusion.steadystate.test": [[106, "module-examples.diffusion.steadyState.test"]], "examples.diffusion.test": [[107, "module-examples.diffusion.test"]], "examples.diffusion.variable": [[108, "module-examples.diffusion.variable"]], "examples.elphf": [[109, "module-examples.elphf"]], "examples.elphf.diffusion": [[110, "module-examples.elphf.diffusion"]], "examples.elphf.diffusion.mesh1d": [[111, "module-examples.elphf.diffusion.mesh1D"]], "examples.elphf.diffusion.mesh1ddimensional": [[112, "module-examples.elphf.diffusion.mesh1Ddimensional"]], "examples.elphf.diffusion.mesh2d": [[113, "module-examples.elphf.diffusion.mesh2D"]], "examples.elphf.input": [[114, "module-examples.elphf.input"]], "examples.elphf.phase": [[115, "module-examples.elphf.phase"]], "examples.elphf.phasediffusion": [[116, "module-examples.elphf.phaseDiffusion"]], "examples.elphf.poisson": [[117, "module-examples.elphf.poisson"]], "examples.elphf.test": [[118, "module-examples.elphf.test"]], "examples.flow": [[119, "module-examples.flow"]], "rhsvector": [[120, "index-3"]], "cachematrix": [[120, "index-3"]], "cacherhsvector": [[120, "index-3"]], "examples.flow.stokescavity": [[120, "module-examples.flow.stokesCavity"]], "matrix": [[120, "index-3"]], "sweep": [[120, "index-3"], [166, "index-7"], [179, "index-7"]], "examples.flow.test": [[121, "module-examples.flow.test"]], "examples.levelset": [[122, "module-examples.levelSet"]], "examples.levelset.advection": [[123, "module-examples.levelSet.advection"]], "examples.levelset.advection.circle": [[124, "module-examples.levelSet.advection.circle"]], "examples.levelset.advection.mesh1d": [[125, "module-examples.levelSet.advection.mesh1D"]], "examples.levelset.advection.test": [[126, "module-examples.levelSet.advection.test"]], "examples.levelset.advection.trench": [[127, "module-examples.levelSet.advection.trench"]], "examples.levelset.distancefunction": [[128, "module-examples.levelSet.distanceFunction"]], "examples.levelset.distancefunction.circle": [[129, "module-examples.levelSet.distanceFunction.circle"]], "examples.levelset.distancefunction.interior": [[130, "module-examples.levelSet.distanceFunction.interior"]], "examples.levelset.distancefunction.mesh1d": [[131, "module-examples.levelSet.distanceFunction.mesh1D"]], "examples.levelset.distancefunction.square": [[132, "module-examples.levelSet.distanceFunction.square"]], "examples.levelset.distancefunction.test": [[133, "module-examples.levelSet.distanceFunction.test"]], "examples.levelset.electrochem": [[134, "module-examples.levelSet.electroChem"]], "examples.levelset.electrochem.adsorbingsurfactantequation": [[135, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"]], "examples.levelset.electrochem.adsorption": [[136, "module-examples.levelSet.electroChem.adsorption"]], "examples.levelset.electrochem.gapfilldistancevariable": [[137, "module-examples.levelSet.electroChem.gapFillDistanceVariable"]], "examples.levelset.electrochem.gapfillmesh": [[138, "module-examples.levelSet.electroChem.gapFillMesh"]], "examples.levelset.electrochem.gold": [[139, "module-examples.levelSet.electroChem.gold"]], "gmsh": [[139, "index-1"], [141, "index-1"], [146, "index-1"], [468, "term-Gmsh"]], "rungold": [[139, "index-0"]], "advectionterm": [[140, "index-6"]], "distancevariable": [[140, "index-3"]], "mayavisurfactantviewer": [[140, "index-7"]], "surfactantvariable": [[140, "index-4"]], "examples.levelset.electrochem.howtowriteascript": [[140, "module-examples.levelSet.electroChem.howToWriteAScript"]], "fipy.tools.parser": [[140, "index-0"], [168, "index-0"], [395, "module-fipy.tools.parser"]], "loadtxt": [[140, "index-8"], [164, "index-5"], [168, "index-7"], [169, "index-6"]], "examples.levelset.electrochem.leveler": [[141, "module-examples.levelSet.electroChem.leveler"]], "runleveler": [[141, "index-0"]], "examples.levelset.electrochem.lines": [[142, "module-examples.levelSet.electroChem.lines"]], "matplotlibsurfactantviewer (class in examples.levelset.electrochem.matplotlibsurfactantviewer)": [[143, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer"]], "axes (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[143, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.axes"]], "cmap (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[143, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.cmap"]], "colorbar (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[143, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.colorbar"]], "examples.levelset.electrochem.matplotlibsurfactantviewer": [[143, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"]], "fig (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[143, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.fig"]], "id (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[143, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.id"]], "log (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[143, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.log"]], "plot() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[143, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.plot"]], "plotmesh() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[143, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.plotMesh"]], "setlimits() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[143, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.setLimits"]], "title (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[143, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.title"]], "vars (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[143, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.vars"]], "mayavisurfactantviewer (class in examples.levelset.electrochem.mayavisurfactantviewer)": [[144, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer"]], "examples.levelset.electrochem.mayavisurfactantviewer": [[144, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"]], "plotmesh() (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer method)": [[144, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.plotMesh"]], "setlimits() (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer method)": [[144, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.setLimits"]], "title (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer property)": [[144, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.title"]], "vars (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer property)": [[144, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.vars"]], "examples.levelset.electrochem.metaliondiffusionequation": [[145, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"]], "examples.levelset.electrochem.simpletrenchsystem": [[146, "module-examples.levelSet.electroChem.simpleTrenchSystem"]], "runsimpletrenchsystem": [[146, "index-0"]], "examples.levelset.electrochem.surfactantbulkdiffusionequation": [[147, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"]], "examples.levelset.electrochem.test": [[148, "module-examples.levelSet.electroChem.test"]], "examples.levelset.electrochem.trenchmesh": [[149, "module-examples.levelSet.electroChem.trenchMesh"]], "examples.levelset.surfactant": [[150, "module-examples.levelSet.surfactant"]], "examples.levelset.surfactant.circle": [[151, "module-examples.levelSet.surfactant.circle"]], "examples.levelset.surfactant.expandingcircle": [[152, "module-examples.levelSet.surfactant.expandingCircle"]], "examples.levelset.surfactant.square": [[153, "module-examples.levelSet.surfactant.square"]], "examples.levelset.surfactant.test": [[154, "module-examples.levelSet.surfactant.test"]], "examples.levelset.test": [[155, "module-examples.levelSet.test"]], "examples.meshing": [[156, "module-examples.meshing"]], "examples.meshing.gmshrefinement": [[157, "module-examples.meshing.gmshRefinement"]], "examples.meshing.inputgrid2d": [[158, "module-examples.meshing.inputGrid2D"]], "examples.meshing.sphere": [[159, "module-examples.meshing.sphere"]], "examples.meshing.test": [[160, "module-examples.meshing.test"]], "examples.parallel": [[161, "module-examples.parallel"]], "examples.phase": [[162, "module-examples.phase"]], ":math:`\\pi`": [[163, "index-0"], [164, "index-2"], [168, "index-3"], [169, "index-5"]], "arctan": [[163, "index-0"], [164, "index-2"]], "arctan2": [[163, "index-0"], [164, "index-2"]], "examples.phase.anisotropy": [[163, "module-examples.phase.anisotropy"]], "pi": [[163, "index-0"], [164, "index-2"], [168, "index-3"], [169, "index-5"]], "tan": [[163, "index-0"], [164, "index-2"]], "implicitsourceterm": [[164, "index-3"], [168, "index-4"], [169, "index-2"], [179, "index-5"]], "allclose": [[164, "index-5"], [178, "index-6"]], "examples.phase.anisotropyold": [[164, "module-examples.phase.anisotropyOLD"]], "powerlawconvectionterm": [[165, "index-3"], [178, "index-3"]], "variable": [[165, "index-2"], [166, "index-2"], [179, "index-6"]], "array": [[165, "index-5"], [166, "index-4"]], "examples.phase.binary": [[165, "module-examples.phase.binary"]], "log": [[165, "index-5"], [166, "index-4"], [178, "index-2"]], "examples.phase.binarycoupled": [[166, "module-examples.phase.binaryCoupled"]], "solve": [[166, "index-7"]], "examples.phase.impingement": [[167, "module-examples.phase.impingement"]], "modularvariable": [[168, "index-3"]], "examples.phase.impingement.mesh20x20": [[168, "module-examples.phase.impingement.mesh20x20"]], "fipy.tools.dump": [[168, "index-8"], [391, "module-fipy.tools.dump"]], "examples.phase.impingement.mesh40x1": [[169, "module-examples.phase.impingement.mesh40x1"]], "examples.phase.impingement.test": [[170, "module-examples.phase.impingement.test"]], "examples.phase.missorientation": [[171, "module-examples.phase.missOrientation"]], "examples.phase.missorientation.circle": [[172, "module-examples.phase.missOrientation.circle"]], "examples.phase.missorientation.mesh1d": [[173, "module-examples.phase.missOrientation.mesh1D"]], "examples.phase.missorientation.modcircle": [[174, "module-examples.phase.missOrientation.modCircle"]], "examples.phase.missorientation.test": [[175, "module-examples.phase.missOrientation.test"]], "examples.phase.polyxtal": [[176, "module-examples.phase.polyxtal"]], "examples.phase.polyxtalcoupled": [[177, "module-examples.phase.polyxtalCoupled"]], "examples.phase.quaternary": [[178, "module-examples.phase.quaternary"]], "viewers": [[178, "index-4"]], "examples.phase.simple": [[179, "module-examples.phase.simple"]], "tanh": [[179, "index-3"]], "examples.phase.symmetry": [[180, "module-examples.phase.symmetry"]], "examples.phase.test": [[181, "module-examples.phase.test"]], "examples.reactivewetting": [[182, "module-examples.reactiveWetting"]], "examples.reactivewetting.liquidvapor1d": [[183, "module-examples.reactiveWetting.liquidVapor1D"]], "examples.reactivewetting.liquidvapor2d": [[184, "module-examples.reactiveWetting.liquidVapor2D"]], "examples.reactivewetting.test": [[185, "module-examples.reactiveWetting.test"]], "examples.riemann": [[186, "module-examples.riemann"]], "examples.riemann.acoustics": [[187, "module-examples.riemann.acoustics"]], "examples.riemann.test": [[188, "module-examples.riemann.test"]], "examples.test": [[189, "module-examples.test"]], "examples.updating": [[190, "module-examples.updating"]], "exponentialconvectionterm": [[191, "index-3"]], "fixedflux": [[191, "index-1"]], "fixedvalue": [[191, "index-1"], [191, "index-8"]], "gist1dviewer": [[191, "index-10"]], "grid2dgistviewer": [[191, "index-6"]], "iterator": [[191, "index-4"]], "steadyconvectiondiffusionscequation": [[191, "index-3"]], "examples.updating.update0_1to1_0": [[191, "module-examples.updating.update0_1to1_0"]], "fipy.numerix": [[191, "index-5"]], "examples.updating.update1_0to2_0": [[192, "module-examples.updating.update1_0to2_0"]], "examples.updating.update2_0to3_0": [[193, "module-examples.updating.update2_0to3_0"]], "doctest_raw_input() (in module fipy)": [[194, "fipy.doctest_raw_input"]], "fipy": [[194, "module-fipy"], [468, "term-FiPy"]], "test() (in module fipy)": [[194, "fipy.test"]], "fipy.boundaryconditions": [[195, "module-fipy.boundaryConditions"]], "boundarycondition (class in fipy.boundaryconditions.boundarycondition)": [[196, "fipy.boundaryConditions.boundaryCondition.BoundaryCondition"]], "__repr__() (fipy.boundaryconditions.boundarycondition.boundarycondition method)": [[196, "fipy.boundaryConditions.boundaryCondition.BoundaryCondition.__repr__"]], "fipy.boundaryconditions.boundarycondition": [[196, "module-fipy.boundaryConditions.boundaryCondition"]], "constraint (class in fipy.boundaryconditions.constraint)": [[197, "fipy.boundaryConditions.constraint.Constraint"]], "__repr__() (fipy.boundaryconditions.constraint.constraint method)": [[197, "fipy.boundaryConditions.constraint.Constraint.__repr__"]], "fipy.boundaryconditions.constraint": [[197, "module-fipy.boundaryConditions.constraint"]], "fixedflux (class in fipy.boundaryconditions.fixedflux)": [[198, "fipy.boundaryConditions.fixedFlux.FixedFlux"]], "__repr__() (fipy.boundaryconditions.fixedflux.fixedflux method)": [[198, "fipy.boundaryConditions.fixedFlux.FixedFlux.__repr__"]], "fipy.boundaryconditions.fixedflux": [[198, "module-fipy.boundaryConditions.fixedFlux"]], "fixedvalue (class in fipy.boundaryconditions.fixedvalue)": [[199, "fipy.boundaryConditions.fixedValue.FixedValue"]], "__repr__() (fipy.boundaryconditions.fixedvalue.fixedvalue method)": [[199, "fipy.boundaryConditions.fixedValue.FixedValue.__repr__"]], "fipy.boundaryconditions.fixedvalue": [[199, "module-fipy.boundaryConditions.fixedValue"]], "nthorderboundarycondition (class in fipy.boundaryconditions.nthorderboundarycondition)": [[200, "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition"]], "__repr__() (fipy.boundaryconditions.nthorderboundarycondition.nthorderboundarycondition method)": [[200, "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition.__repr__"]], "fipy.boundaryconditions.nthorderboundarycondition": [[200, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"]], "fipy.boundaryconditions.test": [[201, "module-fipy.boundaryConditions.test"]], "fipy.matrices": [[202, "module-fipy.matrices"]], "offsetsparsematrix() (in module fipy.matrices.offsetsparsematrix)": [[203, "fipy.matrices.offsetSparseMatrix.OffsetSparseMatrix"]], "fipy.matrices.offsetsparsematrix": [[203, "module-fipy.matrices.offsetSparseMatrix"]], "fipy.matrices.petscmatrix": [[204, "module-fipy.matrices.petscMatrix"]], "fipy.matrices.pysparsematrix": [[205, "module-fipy.matrices.pysparseMatrix"]], "fipy.matrices.scipymatrix": [[206, "module-fipy.matrices.scipyMatrix"]], "fipy.matrices.sparsematrix": [[207, "module-fipy.matrices.sparseMatrix"]], "fipy.matrices.test": [[208, "module-fipy.matrices.test"]], "fipy.matrices.trilinosmatrix": [[209, "module-fipy.matrices.trilinosMatrix"]], "fipy.meshes": [[210, "module-fipy.meshes"]], "abstractmesh (class in fipy.meshes.abstractmesh)": [[211, "fipy.meshes.abstractMesh.AbstractMesh"]], "meshadditionerror": [[211, "fipy.meshes.abstractMesh.MeshAdditionError"], [230, "fipy.meshes.mesh.MeshAdditionError"]], "vtkcelldataset (fipy.meshes.abstractmesh.abstractmesh property)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.abstractmesh.abstractmesh property)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.VTKFaceDataSet"]], "__add__() (fipy.meshes.abstractmesh.abstractmesh method)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.__add__"]], "__cause__ (fipy.meshes.abstractmesh.meshadditionerror attribute)": [[211, "fipy.meshes.abstractMesh.MeshAdditionError.__cause__"]], "__context__ (fipy.meshes.abstractmesh.meshadditionerror attribute)": [[211, "fipy.meshes.abstractMesh.MeshAdditionError.__context__"]], "__delattr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[211, "fipy.meshes.abstractMesh.MeshAdditionError.__delattr__"]], "__div__() (fipy.meshes.abstractmesh.abstractmesh method)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.__div__"]], "__getattribute__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[211, "fipy.meshes.abstractMesh.MeshAdditionError.__getattribute__"]], "__getstate__() (fipy.meshes.abstractmesh.abstractmesh method)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.__getstate__"]], "__radd__() (fipy.meshes.abstractmesh.abstractmesh method)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.__radd__"]], "__reduce__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[211, "fipy.meshes.abstractMesh.MeshAdditionError.__reduce__"]], "__repr__() (fipy.meshes.abstractmesh.abstractmesh method)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.__repr__"]], "__repr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[211, "fipy.meshes.abstractMesh.MeshAdditionError.__repr__"]], "__setattr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[211, "fipy.meshes.abstractMesh.MeshAdditionError.__setattr__"]], "__str__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[211, "fipy.meshes.abstractMesh.MeshAdditionError.__str__"]], "__sub__() (fipy.meshes.abstractmesh.abstractmesh method)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.__sub__"]], "__truediv__() (fipy.meshes.abstractmesh.abstractmesh method)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.__truediv__"]], "add_note() (fipy.meshes.abstractmesh.meshadditionerror method)": [[211, "fipy.meshes.abstractMesh.MeshAdditionError.add_note"]], "aspect2d (fipy.meshes.abstractmesh.abstractmesh property)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.aspect2D"]], "cellcenters (fipy.meshes.abstractmesh.abstractmesh property)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.cellCenters"]], "cellfaceids (fipy.meshes.abstractmesh.abstractmesh property)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.cellFaceIDs"]], "facesback (fipy.meshes.abstractmesh.abstractmesh property)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.facesBack"]], "facesbottom (fipy.meshes.abstractmesh.abstractmesh property)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.facesBottom"]], "facesdown (fipy.meshes.abstractmesh.abstractmesh property)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.facesDown"]], "facesfront (fipy.meshes.abstractmesh.abstractmesh property)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.facesFront"]], "facesleft (fipy.meshes.abstractmesh.abstractmesh property)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.facesLeft"]], "facesright (fipy.meshes.abstractmesh.abstractmesh property)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.facesRight"]], "facestop (fipy.meshes.abstractmesh.abstractmesh property)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.facesTop"]], "facesup (fipy.meshes.abstractmesh.abstractmesh property)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.facesUp"]], "fipy.meshes.abstractmesh": [[211, "module-fipy.meshes.abstractMesh"]], "with_traceback() (fipy.meshes.abstractmesh.meshadditionerror method)": [[211, "fipy.meshes.abstractMesh.MeshAdditionError.with_traceback"]], "x (fipy.meshes.abstractmesh.abstractmesh property)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.x"]], "y (fipy.meshes.abstractmesh.abstractmesh property)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.y"]], "z (fipy.meshes.abstractmesh.abstractmesh property)": [[211, "fipy.meshes.abstractMesh.AbstractMesh.z"]], "fipy.meshes.builders": [[212, "module-fipy.meshes.builders"]], "fipy.meshes.builders.abstractgridbuilder": [[213, "module-fipy.meshes.builders.abstractGridBuilder"]], "fipy.meshes.builders.grid1dbuilder": [[214, "module-fipy.meshes.builders.grid1DBuilder"]], "fipy.meshes.builders.grid2dbuilder": [[215, "module-fipy.meshes.builders.grid2DBuilder"]], "fipy.meshes.builders.grid3dbuilder": [[216, "module-fipy.meshes.builders.grid3DBuilder"]], "fipy.meshes.builders.periodicgrid1dbuilder": [[217, "module-fipy.meshes.builders.periodicGrid1DBuilder"]], "fipy.meshes.builders.utilityclasses": [[218, "module-fipy.meshes.builders.utilityClasses"]], "fipy.meshes.cylindricalgrid1d": [[219, "module-fipy.meshes.cylindricalGrid1D"]], "fipy.meshes.cylindricalgrid2d": [[220, "module-fipy.meshes.cylindricalGrid2D"]], "cylindricalnonuniformgrid1d (class in fipy.meshes.cylindricalnonuniformgrid1d)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesUp"]], "fipy.meshes.cylindricalnonuniformgrid1d": [[221, "module-fipy.meshes.cylindricalNonUniformGrid1D"]], "x (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.x"]], "y (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.y"]], "z (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[221, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.z"]], "cylindricalnonuniformgrid2d (class in fipy.meshes.cylindricalnonuniformgrid2d)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D"]], "vtkcelldataset (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__add__"]], "__div__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__getstate__"]], "__mul__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__mul__"]], "__radd__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__repr__"]], "__rmul__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__rmul__"]], "__sub__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.extrude"]], "facesback (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesRight"]], "facestop (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesTop"]], "facesup (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesUp"]], "fipy.meshes.cylindricalnonuniformgrid2d": [[222, "module-fipy.meshes.cylindricalNonUniformGrid2D"]], "x (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.x"]], "y (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.y"]], "z (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[222, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.z"]], "cylindricaluniformgrid1d (class in fipy.meshes.cylindricaluniformgrid1d)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D"]], "vtkcelldataset (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__add__"]], "__div__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesRight"]], "facestop (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesTop"]], "facesup (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesUp"]], "fipy.meshes.cylindricaluniformgrid1d": [[223, "module-fipy.meshes.cylindricalUniformGrid1D"]], "x (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.x"]], "y (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.y"]], "z (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[223, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.z"]], "cylindricaluniformgrid2d (class in fipy.meshes.cylindricaluniformgrid2d)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D"]], "vtkcelldataset (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__add__"]], "__div__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__getstate__"]], "__radd__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__repr__"]], "__sub__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.cellFaceIDs"]], "facesback (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesRight"]], "facestop (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesTop"]], "facesup (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesUp"]], "fipy.meshes.cylindricaluniformgrid2d": [[224, "module-fipy.meshes.cylindricalUniformGrid2D"]], "x (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.x"]], "y (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.y"]], "z (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[224, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.z"]], "cylindricalgrid1d() (in module fipy.meshes.factorymeshes)": [[225, "fipy.meshes.factoryMeshes.CylindricalGrid1D"]], "cylindricalgrid2d() (in module fipy.meshes.factorymeshes)": [[225, "fipy.meshes.factoryMeshes.CylindricalGrid2D"]], "grid1d() (in module fipy.meshes.factorymeshes)": [[225, "fipy.meshes.factoryMeshes.Grid1D"]], "grid2d() (in module fipy.meshes.factorymeshes)": [[225, "fipy.meshes.factoryMeshes.Grid2D"]], "grid3d() (in module fipy.meshes.factorymeshes)": [[225, "fipy.meshes.factoryMeshes.Grid3D"]], "sphericalgrid1d() (in module fipy.meshes.factorymeshes)": [[225, "fipy.meshes.factoryMeshes.SphericalGrid1D"]], "fipy.meshes.factorymeshes": [[225, "module-fipy.meshes.factoryMeshes"]], "gmsh2d (class in fipy.meshes.gmshmesh)": [[226, "fipy.meshes.gmshMesh.Gmsh2D"]], "gmsh2din3dspace (class in fipy.meshes.gmshmesh)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace"]], "gmsh3d (class in fipy.meshes.gmshmesh)": [[226, "fipy.meshes.gmshMesh.Gmsh3D"]], "gmshexception": [[226, "fipy.meshes.gmshMesh.GmshException"]], "gmshfile (class in fipy.meshes.gmshmesh)": [[226, "fipy.meshes.gmshMesh.GmshFile"]], "gmshgrid2d (class in fipy.meshes.gmshmesh)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D"]], "gmshgrid3d (class in fipy.meshes.gmshmesh)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D"]], "mshfile (class in fipy.meshes.gmshmesh)": [[226, "fipy.meshes.gmshMesh.MSHFile"]], "meshexporterror": [[226, "fipy.meshes.gmshMesh.MeshExportError"]], "posfile (class in fipy.meshes.gmshmesh)": [[226, "fipy.meshes.gmshMesh.POSFile"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh2d property)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh3d property)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmshgrid2d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmshgrid3d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh2d property)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh3d property)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmshgrid2d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmshgrid3d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.gmshmesh.gmsh2d method)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmsh3d method)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.__add__"]], "__cause__ (fipy.meshes.gmshmesh.gmshexception attribute)": [[226, "fipy.meshes.gmshMesh.GmshException.__cause__"]], "__cause__ (fipy.meshes.gmshmesh.meshexporterror attribute)": [[226, "fipy.meshes.gmshMesh.MeshExportError.__cause__"]], "__context__ (fipy.meshes.gmshmesh.gmshexception attribute)": [[226, "fipy.meshes.gmshMesh.GmshException.__context__"]], "__context__ (fipy.meshes.gmshmesh.meshexporterror attribute)": [[226, "fipy.meshes.gmshMesh.MeshExportError.__context__"]], "__delattr__() (fipy.meshes.gmshmesh.gmshexception method)": [[226, "fipy.meshes.gmshMesh.GmshException.__delattr__"]], "__delattr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[226, "fipy.meshes.gmshMesh.MeshExportError.__delattr__"]], "__div__() (fipy.meshes.gmshmesh.gmsh2d method)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmsh3d method)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.__div__"]], "__getattribute__() (fipy.meshes.gmshmesh.gmshexception method)": [[226, "fipy.meshes.gmshMesh.GmshException.__getattribute__"]], "__getattribute__() (fipy.meshes.gmshmesh.meshexporterror method)": [[226, "fipy.meshes.gmshMesh.MeshExportError.__getattribute__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh2d method)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh3d method)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.__getstate__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh2d method)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh3d method)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.__mul__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh2d method)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh3d method)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.__radd__"]], "__reduce__() (fipy.meshes.gmshmesh.gmshexception method)": [[226, "fipy.meshes.gmshMesh.GmshException.__reduce__"]], "__reduce__() (fipy.meshes.gmshmesh.meshexporterror method)": [[226, "fipy.meshes.gmshMesh.MeshExportError.__reduce__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh2d method)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh3d method)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshexception method)": [[226, "fipy.meshes.gmshMesh.GmshException.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[226, "fipy.meshes.gmshMesh.MeshExportError.__repr__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh2d method)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh3d method)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.__rmul__"]], "__setattr__() (fipy.meshes.gmshmesh.gmshexception method)": [[226, "fipy.meshes.gmshMesh.GmshException.__setattr__"]], "__setattr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[226, "fipy.meshes.gmshMesh.MeshExportError.__setattr__"]], "__str__() (fipy.meshes.gmshmesh.gmshexception method)": [[226, "fipy.meshes.gmshMesh.GmshException.__str__"]], "__str__() (fipy.meshes.gmshmesh.meshexporterror method)": [[226, "fipy.meshes.gmshMesh.MeshExportError.__str__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh2d method)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh3d method)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.__sub__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh2d method)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh3d method)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.__truediv__"]], "add_note() (fipy.meshes.gmshmesh.gmshexception method)": [[226, "fipy.meshes.gmshMesh.GmshException.add_note"]], "add_note() (fipy.meshes.gmshmesh.meshexporterror method)": [[226, "fipy.meshes.gmshMesh.MeshExportError.add_note"]], "aspect2d (fipy.meshes.gmshmesh.gmsh2d property)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmsh3d property)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmshgrid2d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmshgrid3d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.aspect2D"]], "cellcenters (fipy.meshes.gmshmesh.gmsh2d property)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmsh3d property)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmshgrid2d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmshgrid3d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.cellCenters"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh2d property)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh3d property)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmshgrid2d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmshgrid3d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.cellFaceIDs"]], "extrude() (fipy.meshes.gmshmesh.gmsh2d method)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.extrude"]], "extrude() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.extrude"]], "extrude() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.extrude"]], "facesback (fipy.meshes.gmshmesh.gmsh2d property)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmsh3d property)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmshgrid2d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmshgrid3d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.facesBack"]], "facesbottom (fipy.meshes.gmshmesh.gmsh2d property)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmsh3d property)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmshgrid2d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmshgrid3d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.facesBottom"]], "facesdown (fipy.meshes.gmshmesh.gmsh2d property)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmsh3d property)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmshgrid2d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmshgrid3d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.facesDown"]], "facesfront (fipy.meshes.gmshmesh.gmsh2d property)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmsh3d property)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmshgrid2d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmshgrid3d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.facesFront"]], "facesleft (fipy.meshes.gmshmesh.gmsh2d property)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmsh3d property)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmshgrid2d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmshgrid3d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.facesLeft"]], "facesright (fipy.meshes.gmshmesh.gmsh2d property)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmsh3d property)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmshgrid2d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmshgrid3d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.facesRight"]], "facestop (fipy.meshes.gmshmesh.gmsh2d property)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmsh3d property)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmshgrid2d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmshgrid3d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.facesTop"]], "facesup (fipy.meshes.gmshmesh.gmsh2d property)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmsh3d property)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmshgrid2d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmshgrid3d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.facesUp"]], "fipy.meshes.gmshmesh": [[226, "module-fipy.meshes.gmshMesh"]], "gmshversion() (in module fipy.meshes.gmshmesh)": [[226, "fipy.meshes.gmshMesh.gmshVersion"]], "makemapvariables() (fipy.meshes.gmshmesh.mshfile method)": [[226, "fipy.meshes.gmshMesh.MSHFile.makeMapVariables"]], "openmshfile() (in module fipy.meshes.gmshmesh)": [[226, "fipy.meshes.gmshMesh.openMSHFile"]], "openposfile() (in module fipy.meshes.gmshmesh)": [[226, "fipy.meshes.gmshMesh.openPOSFile"]], "read() (fipy.meshes.gmshmesh.mshfile method)": [[226, "fipy.meshes.gmshMesh.MSHFile.read"]], "with_traceback() (fipy.meshes.gmshmesh.gmshexception method)": [[226, "fipy.meshes.gmshMesh.GmshException.with_traceback"]], "with_traceback() (fipy.meshes.gmshmesh.meshexporterror method)": [[226, "fipy.meshes.gmshMesh.MeshExportError.with_traceback"]], "x (fipy.meshes.gmshmesh.gmsh2d property)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.x"]], "x (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.x"]], "x (fipy.meshes.gmshmesh.gmsh3d property)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.x"]], "x (fipy.meshes.gmshmesh.gmshgrid2d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.x"]], "x (fipy.meshes.gmshmesh.gmshgrid3d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.x"]], "y (fipy.meshes.gmshmesh.gmsh2d property)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.y"]], "y (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.y"]], "y (fipy.meshes.gmshmesh.gmsh3d property)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.y"]], "y (fipy.meshes.gmshmesh.gmshgrid2d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.y"]], "y (fipy.meshes.gmshmesh.gmshgrid3d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.y"]], "z (fipy.meshes.gmshmesh.gmsh2d property)": [[226, "fipy.meshes.gmshMesh.Gmsh2D.z"]], "z (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[226, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.z"]], "z (fipy.meshes.gmshmesh.gmsh3d property)": [[226, "fipy.meshes.gmshMesh.Gmsh3D.z"]], "z (fipy.meshes.gmshmesh.gmshgrid2d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid2D.z"]], "z (fipy.meshes.gmshmesh.gmshgrid3d property)": [[226, "fipy.meshes.gmshMesh.GmshGrid3D.z"]], "fipy.meshes.grid1d": [[227, "module-fipy.meshes.grid1D"]], "fipy.meshes.grid2d": [[228, "module-fipy.meshes.grid2D"]], "fipy.meshes.grid3d": [[229, "module-fipy.meshes.grid3D"]], "mesh (class in fipy.meshes.mesh)": [[230, "fipy.meshes.mesh.Mesh"]], "vtkcelldataset (fipy.meshes.mesh.mesh property)": [[230, "fipy.meshes.mesh.Mesh.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh.mesh property)": [[230, "fipy.meshes.mesh.Mesh.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh.mesh method)": [[230, "fipy.meshes.mesh.Mesh.__add__"]], "__cause__ (fipy.meshes.mesh.meshadditionerror attribute)": [[230, "fipy.meshes.mesh.MeshAdditionError.__cause__"]], "__context__ (fipy.meshes.mesh.meshadditionerror attribute)": [[230, "fipy.meshes.mesh.MeshAdditionError.__context__"]], "__delattr__() (fipy.meshes.mesh.meshadditionerror method)": [[230, "fipy.meshes.mesh.MeshAdditionError.__delattr__"]], "__div__() (fipy.meshes.mesh.mesh method)": [[230, "fipy.meshes.mesh.Mesh.__div__"]], "__getattribute__() (fipy.meshes.mesh.meshadditionerror method)": [[230, "fipy.meshes.mesh.MeshAdditionError.__getattribute__"]], "__getstate__() (fipy.meshes.mesh.mesh method)": [[230, "fipy.meshes.mesh.Mesh.__getstate__"]], "__mul__() (fipy.meshes.mesh.mesh method)": [[230, "fipy.meshes.mesh.Mesh.__mul__"]], "__radd__() (fipy.meshes.mesh.mesh method)": [[230, "fipy.meshes.mesh.Mesh.__radd__"]], "__reduce__() (fipy.meshes.mesh.meshadditionerror method)": [[230, "fipy.meshes.mesh.MeshAdditionError.__reduce__"]], "__repr__() (fipy.meshes.mesh.mesh method)": [[230, "fipy.meshes.mesh.Mesh.__repr__"]], "__repr__() (fipy.meshes.mesh.meshadditionerror method)": [[230, "fipy.meshes.mesh.MeshAdditionError.__repr__"]], "__rmul__() (fipy.meshes.mesh.mesh method)": [[230, "fipy.meshes.mesh.Mesh.__rmul__"]], "__setattr__() (fipy.meshes.mesh.meshadditionerror method)": [[230, "fipy.meshes.mesh.MeshAdditionError.__setattr__"]], "__str__() (fipy.meshes.mesh.meshadditionerror method)": [[230, "fipy.meshes.mesh.MeshAdditionError.__str__"]], "__sub__() (fipy.meshes.mesh.mesh method)": [[230, "fipy.meshes.mesh.Mesh.__sub__"]], "__truediv__() (fipy.meshes.mesh.mesh method)": [[230, "fipy.meshes.mesh.Mesh.__truediv__"]], "add_note() (fipy.meshes.mesh.meshadditionerror method)": [[230, "fipy.meshes.mesh.MeshAdditionError.add_note"]], "aspect2d (fipy.meshes.mesh.mesh property)": [[230, "fipy.meshes.mesh.Mesh.aspect2D"]], "cellcenters (fipy.meshes.mesh.mesh property)": [[230, "fipy.meshes.mesh.Mesh.cellCenters"]], "cellfaceids (fipy.meshes.mesh.mesh property)": [[230, "fipy.meshes.mesh.Mesh.cellFaceIDs"]], "facesback (fipy.meshes.mesh.mesh property)": [[230, "fipy.meshes.mesh.Mesh.facesBack"]], "facesbottom (fipy.meshes.mesh.mesh property)": [[230, "fipy.meshes.mesh.Mesh.facesBottom"]], "facesdown (fipy.meshes.mesh.mesh property)": [[230, "fipy.meshes.mesh.Mesh.facesDown"]], "facesfront (fipy.meshes.mesh.mesh property)": [[230, "fipy.meshes.mesh.Mesh.facesFront"]], "facesleft (fipy.meshes.mesh.mesh property)": [[230, "fipy.meshes.mesh.Mesh.facesLeft"]], "facesright (fipy.meshes.mesh.mesh property)": [[230, "fipy.meshes.mesh.Mesh.facesRight"]], "facestop (fipy.meshes.mesh.mesh property)": [[230, "fipy.meshes.mesh.Mesh.facesTop"]], "facesup (fipy.meshes.mesh.mesh property)": [[230, "fipy.meshes.mesh.Mesh.facesUp"]], "fipy.meshes.mesh": [[230, "module-fipy.meshes.mesh"]], "with_traceback() (fipy.meshes.mesh.meshadditionerror method)": [[230, "fipy.meshes.mesh.MeshAdditionError.with_traceback"]], "x (fipy.meshes.mesh.mesh property)": [[230, "fipy.meshes.mesh.Mesh.x"]], "y (fipy.meshes.mesh.mesh property)": [[230, "fipy.meshes.mesh.Mesh.y"]], "z (fipy.meshes.mesh.mesh property)": [[230, "fipy.meshes.mesh.Mesh.z"]], "mesh1d (class in fipy.meshes.mesh1d)": [[231, "fipy.meshes.mesh1D.Mesh1D"]], "vtkcelldataset (fipy.meshes.mesh1d.mesh1d property)": [[231, "fipy.meshes.mesh1D.Mesh1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh1d.mesh1d property)": [[231, "fipy.meshes.mesh1D.Mesh1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh1d.mesh1d method)": [[231, "fipy.meshes.mesh1D.Mesh1D.__add__"]], "__div__() (fipy.meshes.mesh1d.mesh1d method)": [[231, "fipy.meshes.mesh1D.Mesh1D.__div__"]], "__getstate__() (fipy.meshes.mesh1d.mesh1d method)": [[231, "fipy.meshes.mesh1D.Mesh1D.__getstate__"]], "__mul__() (fipy.meshes.mesh1d.mesh1d method)": [[231, "fipy.meshes.mesh1D.Mesh1D.__mul__"]], "__radd__() (fipy.meshes.mesh1d.mesh1d method)": [[231, "fipy.meshes.mesh1D.Mesh1D.__radd__"]], "__repr__() (fipy.meshes.mesh1d.mesh1d method)": [[231, "fipy.meshes.mesh1D.Mesh1D.__repr__"]], "__rmul__() (fipy.meshes.mesh1d.mesh1d method)": [[231, "fipy.meshes.mesh1D.Mesh1D.__rmul__"]], "__sub__() (fipy.meshes.mesh1d.mesh1d method)": [[231, "fipy.meshes.mesh1D.Mesh1D.__sub__"]], "__truediv__() (fipy.meshes.mesh1d.mesh1d method)": [[231, "fipy.meshes.mesh1D.Mesh1D.__truediv__"]], "aspect2d (fipy.meshes.mesh1d.mesh1d property)": [[231, "fipy.meshes.mesh1D.Mesh1D.aspect2D"]], "cellcenters (fipy.meshes.mesh1d.mesh1d property)": [[231, "fipy.meshes.mesh1D.Mesh1D.cellCenters"]], "cellfaceids (fipy.meshes.mesh1d.mesh1d property)": [[231, "fipy.meshes.mesh1D.Mesh1D.cellFaceIDs"]], "facesback (fipy.meshes.mesh1d.mesh1d property)": [[231, "fipy.meshes.mesh1D.Mesh1D.facesBack"]], "facesbottom (fipy.meshes.mesh1d.mesh1d property)": [[231, "fipy.meshes.mesh1D.Mesh1D.facesBottom"]], "facesdown (fipy.meshes.mesh1d.mesh1d property)": [[231, "fipy.meshes.mesh1D.Mesh1D.facesDown"]], "facesfront (fipy.meshes.mesh1d.mesh1d property)": [[231, "fipy.meshes.mesh1D.Mesh1D.facesFront"]], "facesleft (fipy.meshes.mesh1d.mesh1d property)": [[231, "fipy.meshes.mesh1D.Mesh1D.facesLeft"]], "facesright (fipy.meshes.mesh1d.mesh1d property)": [[231, "fipy.meshes.mesh1D.Mesh1D.facesRight"]], "facestop (fipy.meshes.mesh1d.mesh1d property)": [[231, "fipy.meshes.mesh1D.Mesh1D.facesTop"]], "facesup (fipy.meshes.mesh1d.mesh1d property)": [[231, "fipy.meshes.mesh1D.Mesh1D.facesUp"]], "fipy.meshes.mesh1d": [[231, "module-fipy.meshes.mesh1D"]], "x (fipy.meshes.mesh1d.mesh1d property)": [[231, "fipy.meshes.mesh1D.Mesh1D.x"]], "y (fipy.meshes.mesh1d.mesh1d property)": [[231, "fipy.meshes.mesh1D.Mesh1D.y"]], "z (fipy.meshes.mesh1d.mesh1d property)": [[231, "fipy.meshes.mesh1D.Mesh1D.z"]], "mesh2d (class in fipy.meshes.mesh2d)": [[232, "fipy.meshes.mesh2D.Mesh2D"]], "vtkcelldataset (fipy.meshes.mesh2d.mesh2d property)": [[232, "fipy.meshes.mesh2D.Mesh2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh2d.mesh2d property)": [[232, "fipy.meshes.mesh2D.Mesh2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh2d.mesh2d method)": [[232, "fipy.meshes.mesh2D.Mesh2D.__add__"]], "__div__() (fipy.meshes.mesh2d.mesh2d method)": [[232, "fipy.meshes.mesh2D.Mesh2D.__div__"]], "__getstate__() (fipy.meshes.mesh2d.mesh2d method)": [[232, "fipy.meshes.mesh2D.Mesh2D.__getstate__"]], "__mul__() (fipy.meshes.mesh2d.mesh2d method)": [[232, "fipy.meshes.mesh2D.Mesh2D.__mul__"]], "__radd__() (fipy.meshes.mesh2d.mesh2d method)": [[232, "fipy.meshes.mesh2D.Mesh2D.__radd__"]], "__repr__() (fipy.meshes.mesh2d.mesh2d method)": [[232, "fipy.meshes.mesh2D.Mesh2D.__repr__"]], "__rmul__() (fipy.meshes.mesh2d.mesh2d method)": [[232, "fipy.meshes.mesh2D.Mesh2D.__rmul__"]], "__sub__() (fipy.meshes.mesh2d.mesh2d method)": [[232, "fipy.meshes.mesh2D.Mesh2D.__sub__"]], "__truediv__() (fipy.meshes.mesh2d.mesh2d method)": [[232, "fipy.meshes.mesh2D.Mesh2D.__truediv__"]], "aspect2d (fipy.meshes.mesh2d.mesh2d property)": [[232, "fipy.meshes.mesh2D.Mesh2D.aspect2D"]], "cellcenters (fipy.meshes.mesh2d.mesh2d property)": [[232, "fipy.meshes.mesh2D.Mesh2D.cellCenters"]], "cellfaceids (fipy.meshes.mesh2d.mesh2d property)": [[232, "fipy.meshes.mesh2D.Mesh2D.cellFaceIDs"]], "extrude() (fipy.meshes.mesh2d.mesh2d method)": [[232, "fipy.meshes.mesh2D.Mesh2D.extrude"]], "facesback (fipy.meshes.mesh2d.mesh2d property)": [[232, "fipy.meshes.mesh2D.Mesh2D.facesBack"]], "facesbottom (fipy.meshes.mesh2d.mesh2d property)": [[232, "fipy.meshes.mesh2D.Mesh2D.facesBottom"]], "facesdown (fipy.meshes.mesh2d.mesh2d property)": [[232, "fipy.meshes.mesh2D.Mesh2D.facesDown"]], "facesfront (fipy.meshes.mesh2d.mesh2d property)": [[232, "fipy.meshes.mesh2D.Mesh2D.facesFront"]], "facesleft (fipy.meshes.mesh2d.mesh2d property)": [[232, "fipy.meshes.mesh2D.Mesh2D.facesLeft"]], "facesright (fipy.meshes.mesh2d.mesh2d property)": [[232, "fipy.meshes.mesh2D.Mesh2D.facesRight"]], "facestop (fipy.meshes.mesh2d.mesh2d property)": [[232, "fipy.meshes.mesh2D.Mesh2D.facesTop"]], "facesup (fipy.meshes.mesh2d.mesh2d property)": [[232, "fipy.meshes.mesh2D.Mesh2D.facesUp"]], "fipy.meshes.mesh2d": [[232, "module-fipy.meshes.mesh2D"]], "x (fipy.meshes.mesh2d.mesh2d property)": [[232, "fipy.meshes.mesh2D.Mesh2D.x"]], "y (fipy.meshes.mesh2d.mesh2d property)": [[232, "fipy.meshes.mesh2D.Mesh2D.y"]], "z (fipy.meshes.mesh2d.mesh2d property)": [[232, "fipy.meshes.mesh2D.Mesh2D.z"]], "nonuniformgrid1d (class in fipy.meshes.nonuniformgrid1d)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesUp"]], "fipy.meshes.nonuniformgrid1d": [[233, "module-fipy.meshes.nonUniformGrid1D"]], "x (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.x"]], "y (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.y"]], "z (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[233, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.z"]], "nonuniformgrid2d (class in fipy.meshes.nonuniformgrid2d)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.extrude"]], "facesback (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesUp"]], "fipy.meshes.nonuniformgrid2d": [[234, "module-fipy.meshes.nonUniformGrid2D"]], "x (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.x"]], "y (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.y"]], "z (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[234, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.z"]], "nonuniformgrid3d (class in fipy.meshes.nonuniformgrid3d)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.cellFaceIDs"]], "facesback (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesUp"]], "fipy.meshes.nonuniformgrid3d": [[235, "module-fipy.meshes.nonUniformGrid3D"]], "x (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.x"]], "y (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.y"]], "z (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[235, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.z"]], "periodicgrid1d (class in fipy.meshes.periodicgrid1d)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D"]], "vtkcelldataset (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__add__"]], "__div__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__div__"]], "__getstate__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__mul__"]], "__radd__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__radd__"]], "__repr__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesBack"]], "facesbottom (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesBottom"]], "facesdown (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesDown"]], "facesfront (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesFront"]], "facesleft (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesLeft"]], "facesright (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesRight"]], "facestop (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesTop"]], "facesup (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesUp"]], "fipy.meshes.periodicgrid1d": [[236, "module-fipy.meshes.periodicGrid1D"]], "x (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.x"]], "y (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.y"]], "z (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[236, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.z"]], "periodicgrid2d (class in fipy.meshes.periodicgrid2d)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D"]], "periodicgrid2dleftright (class in fipy.meshes.periodicgrid2d)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight"]], "periodicgrid2dtopbottom (class in fipy.meshes.periodicgrid2d)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__add__"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__add__"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__add__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__div__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__div__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__div__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__mul__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__mul__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__mul__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__radd__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__radd__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__radd__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__repr__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__repr__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__sub__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__sub__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.cellFaceIDs"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.extrude"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.extrude"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.extrude"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesBack"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesBack"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesBack"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesBottom"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesDown"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesDown"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesDown"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesFront"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesFront"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesFront"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesLeft"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesLeft"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesLeft"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesRight"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesRight"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesRight"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesTop"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesTop"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesTop"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesUp"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesUp"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesUp"]], "fipy.meshes.periodicgrid2d": [[237, "module-fipy.meshes.periodicGrid2D"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.x"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.x"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.x"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.y"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.y"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.y"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.z"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.z"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[237, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.z"]], "periodicgrid3d (class in fipy.meshes.periodicgrid3d)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D"]], "periodicgrid3dfrontback (class in fipy.meshes.periodicgrid3d)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack"]], "periodicgrid3dleftright (class in fipy.meshes.periodicgrid3d)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight"]], "periodicgrid3dleftrightfrontback (class in fipy.meshes.periodicgrid3d)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack"]], "periodicgrid3dleftrighttopbottom (class in fipy.meshes.periodicgrid3d)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom"]], "periodicgrid3dtopbottom (class in fipy.meshes.periodicgrid3d)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom"]], "periodicgrid3dtopbottomfrontback (class in fipy.meshes.periodicgrid3d)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__add__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__div__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__mul__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__radd__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.cellFaceIDs"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesBack"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesBottom"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesDown"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesFront"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesLeft"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesRight"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesTop"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesUp"]], "fipy.meshes.periodicgrid3d": [[238, "module-fipy.meshes.periodicGrid3D"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.x"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.y"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[238, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.z"]], "fipy.meshes.representations": [[239, "module-fipy.meshes.representations"]], "fipy.meshes.representations.abstractrepresentation": [[240, "module-fipy.meshes.representations.abstractRepresentation"]], "fipy.meshes.representations.gridrepresentation": [[241, "module-fipy.meshes.representations.gridRepresentation"]], "fipy.meshes.representations.meshrepresentation": [[242, "module-fipy.meshes.representations.meshRepresentation"]], "skewedgrid2d (class in fipy.meshes.skewedgrid2d)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D"]], "vtkcelldataset (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__add__"]], "__div__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__div__"]], "__getstate__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__getstate__"]], "__mul__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__mul__"]], "__radd__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__radd__"]], "__repr__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__repr__"]], "__rmul__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__rmul__"]], "__sub__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__sub__"]], "__truediv__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__truediv__"]], "aspect2d (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.aspect2D"]], "cellcenters (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.extrude"]], "facesback (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesBack"]], "facesbottom (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesBottom"]], "facesdown (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesDown"]], "facesfront (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesFront"]], "facesleft (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesLeft"]], "facesright (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesRight"]], "facestop (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesTop"]], "facesup (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesUp"]], "fipy.meshes.skewedgrid2d": [[243, "module-fipy.meshes.skewedGrid2D"]], "physicalshape (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.physicalShape"]], "x (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.x"]], "y (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.y"]], "z (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[243, "fipy.meshes.skewedGrid2D.SkewedGrid2D.z"]], "sphericalnonuniformgrid1d (class in fipy.meshes.sphericalnonuniformgrid1d)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesUp"]], "fipy.meshes.sphericalnonuniformgrid1d": [[244, "module-fipy.meshes.sphericalNonUniformGrid1D"]], "x (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.x"]], "y (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.y"]], "z (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[244, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.z"]], "sphericaluniformgrid1d (class in fipy.meshes.sphericaluniformgrid1d)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D"]], "vtkcelldataset (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__add__"]], "__div__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesRight"]], "facestop (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesTop"]], "facesup (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesUp"]], "fipy.meshes.sphericaluniformgrid1d": [[245, "module-fipy.meshes.sphericalUniformGrid1D"]], "x (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.x"]], "y (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.y"]], "z (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[245, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.z"]], "fipy.meshes.test": [[246, "module-fipy.meshes.test"]], "fipy.meshes.topologies": [[247, "module-fipy.meshes.topologies"]], "fipy.meshes.topologies.abstracttopology": [[248, "module-fipy.meshes.topologies.abstractTopology"]], "fipy.meshes.topologies.gridtopology": [[249, "module-fipy.meshes.topologies.gridTopology"]], "fipy.meshes.topologies.meshtopology": [[250, "module-fipy.meshes.topologies.meshTopology"]], "tri2d (class in fipy.meshes.tri2d)": [[251, "fipy.meshes.tri2D.Tri2D"]], "vtkcelldataset (fipy.meshes.tri2d.tri2d property)": [[251, "fipy.meshes.tri2D.Tri2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.tri2d.tri2d property)": [[251, "fipy.meshes.tri2D.Tri2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.tri2d.tri2d method)": [[251, "fipy.meshes.tri2D.Tri2D.__add__"]], "__div__() (fipy.meshes.tri2d.tri2d method)": [[251, "fipy.meshes.tri2D.Tri2D.__div__"]], "__getstate__() (fipy.meshes.tri2d.tri2d method)": [[251, "fipy.meshes.tri2D.Tri2D.__getstate__"]], "__mul__() (fipy.meshes.tri2d.tri2d method)": [[251, "fipy.meshes.tri2D.Tri2D.__mul__"]], "__radd__() (fipy.meshes.tri2d.tri2d method)": [[251, "fipy.meshes.tri2D.Tri2D.__radd__"]], "__repr__() (fipy.meshes.tri2d.tri2d method)": [[251, "fipy.meshes.tri2D.Tri2D.__repr__"]], "__rmul__() (fipy.meshes.tri2d.tri2d method)": [[251, "fipy.meshes.tri2D.Tri2D.__rmul__"]], "__sub__() (fipy.meshes.tri2d.tri2d method)": [[251, "fipy.meshes.tri2D.Tri2D.__sub__"]], "__truediv__() (fipy.meshes.tri2d.tri2d method)": [[251, "fipy.meshes.tri2D.Tri2D.__truediv__"]], "aspect2d (fipy.meshes.tri2d.tri2d property)": [[251, "fipy.meshes.tri2D.Tri2D.aspect2D"]], "cellcenters (fipy.meshes.tri2d.tri2d property)": [[251, "fipy.meshes.tri2D.Tri2D.cellCenters"]], "cellfaceids (fipy.meshes.tri2d.tri2d property)": [[251, "fipy.meshes.tri2D.Tri2D.cellFaceIDs"]], "extrude() (fipy.meshes.tri2d.tri2d method)": [[251, "fipy.meshes.tri2D.Tri2D.extrude"]], "facesback (fipy.meshes.tri2d.tri2d property)": [[251, "fipy.meshes.tri2D.Tri2D.facesBack"]], "facesbottom (fipy.meshes.tri2d.tri2d property)": [[251, "fipy.meshes.tri2D.Tri2D.facesBottom"]], "facesdown (fipy.meshes.tri2d.tri2d property)": [[251, "fipy.meshes.tri2D.Tri2D.facesDown"]], "facesfront (fipy.meshes.tri2d.tri2d property)": [[251, "fipy.meshes.tri2D.Tri2D.facesFront"]], "facesleft (fipy.meshes.tri2d.tri2d property)": [[251, "fipy.meshes.tri2D.Tri2D.facesLeft"]], "facesright (fipy.meshes.tri2d.tri2d property)": [[251, "fipy.meshes.tri2D.Tri2D.facesRight"]], "facestop (fipy.meshes.tri2d.tri2d property)": [[251, "fipy.meshes.tri2D.Tri2D.facesTop"]], "facesup (fipy.meshes.tri2d.tri2d property)": [[251, "fipy.meshes.tri2D.Tri2D.facesUp"]], "fipy.meshes.tri2d": [[251, "module-fipy.meshes.tri2D"]], "physicalshape (fipy.meshes.tri2d.tri2d property)": [[251, "fipy.meshes.tri2D.Tri2D.physicalShape"]], "x (fipy.meshes.tri2d.tri2d property)": [[251, "fipy.meshes.tri2D.Tri2D.x"]], "y (fipy.meshes.tri2d.tri2d property)": [[251, "fipy.meshes.tri2D.Tri2D.y"]], "z (fipy.meshes.tri2d.tri2d property)": [[251, "fipy.meshes.tri2D.Tri2D.z"]], "uniformgrid (class in fipy.meshes.uniformgrid)": [[252, "fipy.meshes.uniformGrid.UniformGrid"]], "vtkcelldataset (fipy.meshes.uniformgrid.uniformgrid property)": [[252, "fipy.meshes.uniformGrid.UniformGrid.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid.uniformgrid property)": [[252, "fipy.meshes.uniformGrid.UniformGrid.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid.uniformgrid method)": [[252, "fipy.meshes.uniformGrid.UniformGrid.__add__"]], "__div__() (fipy.meshes.uniformgrid.uniformgrid method)": [[252, "fipy.meshes.uniformGrid.UniformGrid.__div__"]], "__getstate__() (fipy.meshes.uniformgrid.uniformgrid method)": [[252, "fipy.meshes.uniformGrid.UniformGrid.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid.uniformgrid method)": [[252, "fipy.meshes.uniformGrid.UniformGrid.__radd__"]], "__repr__() (fipy.meshes.uniformgrid.uniformgrid method)": [[252, "fipy.meshes.uniformGrid.UniformGrid.__repr__"]], "__sub__() (fipy.meshes.uniformgrid.uniformgrid method)": [[252, "fipy.meshes.uniformGrid.UniformGrid.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid.uniformgrid method)": [[252, "fipy.meshes.uniformGrid.UniformGrid.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid.uniformgrid property)": [[252, "fipy.meshes.uniformGrid.UniformGrid.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid.uniformgrid property)": [[252, "fipy.meshes.uniformGrid.UniformGrid.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid.uniformgrid property)": [[252, "fipy.meshes.uniformGrid.UniformGrid.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid.uniformgrid property)": [[252, "fipy.meshes.uniformGrid.UniformGrid.facesBack"]], "facesbottom (fipy.meshes.uniformgrid.uniformgrid property)": [[252, "fipy.meshes.uniformGrid.UniformGrid.facesBottom"]], "facesdown (fipy.meshes.uniformgrid.uniformgrid property)": [[252, "fipy.meshes.uniformGrid.UniformGrid.facesDown"]], "facesfront (fipy.meshes.uniformgrid.uniformgrid property)": [[252, "fipy.meshes.uniformGrid.UniformGrid.facesFront"]], "facesleft (fipy.meshes.uniformgrid.uniformgrid property)": [[252, "fipy.meshes.uniformGrid.UniformGrid.facesLeft"]], "facesright (fipy.meshes.uniformgrid.uniformgrid property)": [[252, "fipy.meshes.uniformGrid.UniformGrid.facesRight"]], "facestop (fipy.meshes.uniformgrid.uniformgrid property)": [[252, "fipy.meshes.uniformGrid.UniformGrid.facesTop"]], "facesup (fipy.meshes.uniformgrid.uniformgrid property)": [[252, "fipy.meshes.uniformGrid.UniformGrid.facesUp"]], "fipy.meshes.uniformgrid": [[252, "module-fipy.meshes.uniformGrid"]], "x (fipy.meshes.uniformgrid.uniformgrid property)": [[252, "fipy.meshes.uniformGrid.UniformGrid.x"]], "y (fipy.meshes.uniformgrid.uniformgrid property)": [[252, "fipy.meshes.uniformGrid.UniformGrid.y"]], "z (fipy.meshes.uniformgrid.uniformgrid property)": [[252, "fipy.meshes.uniformGrid.UniformGrid.z"]], "uniformgrid1d (class in fipy.meshes.uniformgrid1d)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D"]], "vtkcelldataset (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.__add__"]], "__div__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesDown"]], "facesfront (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesFront"]], "facesleft (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesLeft"]], "facesright (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesRight"]], "facestop (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesTop"]], "facesup (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesUp"]], "fipy.meshes.uniformgrid1d": [[253, "module-fipy.meshes.uniformGrid1D"]], "x (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.x"]], "y (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.y"]], "z (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[253, "fipy.meshes.uniformGrid1D.UniformGrid1D.z"]], "uniformgrid2d (class in fipy.meshes.uniformgrid2d)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D"]], "vtkcelldataset (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.__add__"]], "__div__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesDown"]], "facesfront (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesFront"]], "facesleft (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesLeft"]], "facesright (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesRight"]], "facestop (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesTop"]], "facesup (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesUp"]], "fipy.meshes.uniformgrid2d": [[254, "module-fipy.meshes.uniformGrid2D"]], "x (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.x"]], "y (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.y"]], "z (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[254, "fipy.meshes.uniformGrid2D.UniformGrid2D.z"]], "uniformgrid3d (class in fipy.meshes.uniformgrid3d)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D"]], "vtkcelldataset (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.__add__"]], "__div__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.__div__"]], "__getstate__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesDown"]], "facesfront (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesFront"]], "facesleft (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesLeft"]], "facesright (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesRight"]], "facestop (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesTop"]], "facesup (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesUp"]], "fipy.meshes.uniformgrid3d": [[255, "module-fipy.meshes.uniformGrid3D"]], "x (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.x"]], "y (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.y"]], "z (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[255, "fipy.meshes.uniformGrid3D.UniformGrid3D.z"]], "defaultasymmetricsolver (in module fipy.solvers)": [[256, "fipy.solvers.DefaultAsymmetricSolver"]], "defaultsolver (in module fipy.solvers)": [[256, "fipy.solvers.DefaultSolver"]], "dummysolver (in module fipy.solvers)": [[256, "fipy.solvers.DummySolver"]], "generalsolver (in module fipy.solvers)": [[256, "fipy.solvers.GeneralSolver"]], "serialsolvererror": [[256, "fipy.solvers.SerialSolverError"]], "__cause__ (fipy.solvers.serialsolvererror attribute)": [[256, "fipy.solvers.SerialSolverError.__cause__"]], "__context__ (fipy.solvers.serialsolvererror attribute)": [[256, "fipy.solvers.SerialSolverError.__context__"]], "__delattr__() (fipy.solvers.serialsolvererror method)": [[256, "fipy.solvers.SerialSolverError.__delattr__"]], "__getattribute__() (fipy.solvers.serialsolvererror method)": [[256, "fipy.solvers.SerialSolverError.__getattribute__"]], "__reduce__() (fipy.solvers.serialsolvererror method)": [[256, "fipy.solvers.SerialSolverError.__reduce__"]], "__repr__() (fipy.solvers.serialsolvererror method)": [[256, "fipy.solvers.SerialSolverError.__repr__"]], "__setattr__() (fipy.solvers.serialsolvererror method)": [[256, "fipy.solvers.SerialSolverError.__setattr__"]], "__str__() (fipy.solvers.serialsolvererror method)": [[256, "fipy.solvers.SerialSolverError.__str__"]], "add_note() (fipy.solvers.serialsolvererror method)": [[256, "fipy.solvers.SerialSolverError.add_note"]], "fipy.solvers": [[256, "module-fipy.solvers"]], "with_traceback() (fipy.solvers.serialsolvererror method)": [[256, "fipy.solvers.SerialSolverError.with_traceback"]], "fipy.solvers.petsc": [[257, "module-fipy.solvers.petsc"]], "fipy.solvers.petsc.comms": [[258, "module-fipy.solvers.petsc.comms"]], "parallelpetsccommwrapper (class in fipy.solvers.petsc.comms.parallelpetsccommwrapper)": [[259, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.parallelpetsccommwrapper.parallelpetsccommwrapper method)": [[259, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.parallelpetsccommwrapper.parallelpetsccommwrapper method)": [[259, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.parallelpetsccommwrapper": [[259, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"]], "petsccommwrapper (class in fipy.solvers.petsc.comms.petsccommwrapper)": [[260, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.petsccommwrapper.petsccommwrapper method)": [[260, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.petsccommwrapper.petsccommwrapper method)": [[260, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.petsccommwrapper": [[260, "module-fipy.solvers.petsc.comms.petscCommWrapper"]], "serialpetsccommwrapper (class in fipy.solvers.petsc.comms.serialpetsccommwrapper)": [[261, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.serialpetsccommwrapper.serialpetsccommwrapper method)": [[261, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.serialpetsccommwrapper.serialpetsccommwrapper method)": [[261, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.serialpetsccommwrapper": [[261, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"]], "dummysolver (class in fipy.solvers.petsc.dummysolver)": [[262, "fipy.solvers.petsc.dummySolver.DummySolver"]], "__repr__() (fipy.solvers.petsc.dummysolver.dummysolver method)": [[262, "fipy.solvers.petsc.dummySolver.DummySolver.__repr__"]], "fipy.solvers.petsc.dummysolver": [[262, "module-fipy.solvers.petsc.dummySolver"]], "linearbicgsolver (class in fipy.solvers.petsc.linearbicgsolver)": [[263, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver"]], "__repr__() (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver method)": [[263, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.__repr__"]], "fipy.solvers.petsc.linearbicgsolver": [[263, "module-fipy.solvers.petsc.linearBicgSolver"]], "linearcgssolver (class in fipy.solvers.petsc.linearcgssolver)": [[264, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.petsc.linearcgssolver.linearcgssolver method)": [[264, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.__repr__"]], "fipy.solvers.petsc.linearcgssolver": [[264, "module-fipy.solvers.petsc.linearCGSSolver"]], "lineargmressolver (class in fipy.solvers.petsc.lineargmressolver)": [[265, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.petsc.lineargmressolver.lineargmressolver method)": [[265, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "fipy.solvers.petsc.lineargmressolver": [[265, "module-fipy.solvers.petsc.linearGMRESSolver"]], "linearlusolver (class in fipy.solvers.petsc.linearlusolver)": [[266, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.petsc.linearlusolver.linearlusolver method)": [[266, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.__repr__"]], "fipy.solvers.petsc.linearlusolver": [[266, "module-fipy.solvers.petsc.linearLUSolver"]], "linearpcgsolver (class in fipy.solvers.petsc.linearpcgsolver)": [[267, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver method)": [[267, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.__repr__"]], "fipy.solvers.petsc.linearpcgsolver": [[267, "module-fipy.solvers.petsc.linearPCGSolver"]], "petsckrylovsolver (class in fipy.solvers.petsc.petsckrylovsolver)": [[268, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver"]], "__repr__() (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver method)": [[268, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.__repr__"]], "fipy.solvers.petsc.petsckrylovsolver": [[268, "module-fipy.solvers.petsc.petscKrylovSolver"]], "petscsolver (class in fipy.solvers.petsc.petscsolver)": [[269, "fipy.solvers.petsc.petscSolver.PETScSolver"]], "__repr__() (fipy.solvers.petsc.petscsolver.petscsolver method)": [[269, "fipy.solvers.petsc.petscSolver.PETScSolver.__repr__"]], "fipy.solvers.petsc.petscsolver": [[269, "module-fipy.solvers.petsc.petscSolver"]], "fipy.solvers.pyamg": [[270, "module-fipy.solvers.pyAMG"]], "linearcgssolver (class in fipy.solvers.pyamg.linearcgssolver)": [[271, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.pyamg.linearcgssolver.linearcgssolver method)": [[271, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.__repr__"]], "fipy.solvers.pyamg.linearcgssolver": [[271, "module-fipy.solvers.pyAMG.linearCGSSolver"]], "lineargmressolver (class in fipy.solvers.pyamg.lineargmressolver)": [[272, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pyamg.lineargmressolver.lineargmressolver method)": [[272, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "fipy.solvers.pyamg.lineargmressolver": [[272, "module-fipy.solvers.pyAMG.linearGMRESSolver"]], "lineargeneralsolver (class in fipy.solvers.pyamg.lineargeneralsolver)": [[273, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver"]], "__repr__() (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver method)": [[273, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.__repr__"]], "fipy.solvers.pyamg.lineargeneralsolver": [[273, "module-fipy.solvers.pyAMG.linearGeneralSolver"]], "linearlusolver (class in fipy.solvers.pyamg.linearlusolver)": [[274, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pyamg.linearlusolver.linearlusolver method)": [[274, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.__repr__"]], "fipy.solvers.pyamg.linearlusolver": [[274, "module-fipy.solvers.pyAMG.linearLUSolver"]], "linearpcgsolver (class in fipy.solvers.pyamg.linearpcgsolver)": [[275, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver method)": [[275, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.__repr__"]], "fipy.solvers.pyamg.linearpcgsolver": [[275, "module-fipy.solvers.pyAMG.linearPCGSolver"]], "fipy.solvers.pyamg.preconditioners": [[276, "module-fipy.solvers.pyAMG.preconditioners"]], "smoothedaggregationpreconditioner (class in fipy.solvers.pyamg.preconditioners.smoothedaggregationpreconditioner)": [[277, "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner.SmoothedAggregationPreconditioner"]], "fipy.solvers.pyamg.preconditioners.smoothedaggregationpreconditioner": [[277, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[278, "module-fipy.solvers.pyamgx"]], "aggregationamgsolver (class in fipy.solvers.pyamgx.aggregationamgsolver)": [[279, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver"]], "__repr__() (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver method)": [[279, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.__repr__"]], "fipy.solvers.pyamgx.aggregationamgsolver": [[279, "module-fipy.solvers.pyamgx.aggregationAMGSolver"]], "classicalamgsolver (class in fipy.solvers.pyamgx.classicalamgsolver)": [[280, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver"]], "__repr__() (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver method)": [[280, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.__repr__"]], "fipy.solvers.pyamgx.classicalamgsolver": [[280, "module-fipy.solvers.pyamgx.classicalAMGSolver"]], "linearbicgstabsolver (class in fipy.solvers.pyamgx.linearbicgstabsolver)": [[281, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver"]], "__repr__() (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver method)": [[281, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.__repr__"]], "fipy.solvers.pyamgx.linearbicgstabsolver": [[281, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"]], "linearcgsolver (class in fipy.solvers.pyamgx.linearcgsolver)": [[282, "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver"]], "linearpcgsolver (in module fipy.solvers.pyamgx.linearcgsolver)": [[282, "fipy.solvers.pyamgx.linearCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pyamgx.linearcgsolver.linearcgsolver method)": [[282, "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver.__repr__"]], "fipy.solvers.pyamgx.linearcgsolver": [[282, "module-fipy.solvers.pyamgx.linearCGSolver"]], "linearfgmressolver (class in fipy.solvers.pyamgx.linearfgmressolver)": [[283, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver"]], "__repr__() (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver method)": [[283, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.__repr__"]], "fipy.solvers.pyamgx.linearfgmressolver": [[283, "module-fipy.solvers.pyamgx.linearFGMRESSolver"]], "lineargmressolver (class in fipy.solvers.pyamgx.lineargmressolver)": [[284, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver method)": [[284, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "fipy.solvers.pyamgx.lineargmressolver": [[284, "module-fipy.solvers.pyamgx.linearGMRESSolver"]], "linearlusolver (class in fipy.solvers.pyamgx.linearlusolver)": [[285, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pyamgx.linearlusolver.linearlusolver method)": [[285, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.__repr__"]], "fipy.solvers.pyamgx.linearlusolver": [[285, "module-fipy.solvers.pyamgx.linearLUSolver"]], "fipy.solvers.pyamgx.preconditioners": [[286, "module-fipy.solvers.pyamgx.preconditioners"]], "preconditioner (class in fipy.solvers.pyamgx.preconditioners.preconditioners)": [[287, "fipy.solvers.pyamgx.preconditioners.preconditioners.Preconditioner"]], "__call__() (fipy.solvers.pyamgx.preconditioners.preconditioners.preconditioner method)": [[287, "fipy.solvers.pyamgx.preconditioners.preconditioners.Preconditioner.__call__"]], "fipy.solvers.pyamgx.preconditioners.preconditioners": [[287, "module-fipy.solvers.pyamgx.preconditioners.preconditioners"]], "pyamgxsolver (class in fipy.solvers.pyamgx.pyamgxsolver)": [[288, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver"]], "__repr__() (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver method)": [[288, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.__repr__"]], "fipy.solvers.pyamgx.pyamgxsolver": [[288, "module-fipy.solvers.pyamgx.pyAMGXSolver"]], "fipy.solvers.pyamgx.smoothers": [[289, "module-fipy.solvers.pyamgx.smoothers"]], "smoother (class in fipy.solvers.pyamgx.smoothers.smoothers)": [[290, "fipy.solvers.pyamgx.smoothers.smoothers.Smoother"]], "__call__() (fipy.solvers.pyamgx.smoothers.smoothers.smoother method)": [[290, "fipy.solvers.pyamgx.smoothers.smoothers.Smoother.__call__"]], "fipy.solvers.pyamgx.smoothers.smoothers": [[290, "module-fipy.solvers.pyamgx.smoothers.smoothers"]], "fipy.solvers.pysparse": [[291, "module-fipy.solvers.pysparse"]], "linearcgssolver (class in fipy.solvers.pysparse.linearcgssolver)": [[292, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.pysparse.linearcgssolver.linearcgssolver method)": [[292, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.__repr__"]], "fipy.solvers.pysparse.linearcgssolver": [[292, "module-fipy.solvers.pysparse.linearCGSSolver"]], "lineargmressolver (class in fipy.solvers.pysparse.lineargmressolver)": [[293, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pysparse.lineargmressolver.lineargmressolver method)": [[293, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "fipy.solvers.pysparse.lineargmressolver": [[293, "module-fipy.solvers.pysparse.linearGMRESSolver"]], "linearjorsolver (class in fipy.solvers.pysparse.linearjorsolver)": [[294, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver"]], "__repr__() (fipy.solvers.pysparse.linearjorsolver.linearjorsolver method)": [[294, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.__repr__"]], "fipy.solvers.pysparse.linearjorsolver": [[294, "module-fipy.solvers.pysparse.linearJORSolver"]], "linearlusolver (class in fipy.solvers.pysparse.linearlusolver)": [[295, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pysparse.linearlusolver.linearlusolver method)": [[295, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.__repr__"]], "fipy.solvers.pysparse.linearlusolver": [[295, "module-fipy.solvers.pysparse.linearLUSolver"]], "linearpcgsolver (class in fipy.solvers.pysparse.linearpcgsolver)": [[296, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver method)": [[296, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.__repr__"]], "fipy.solvers.pysparse.linearpcgsolver": [[296, "module-fipy.solvers.pysparse.linearPCGSolver"]], "fipy.solvers.pysparse.preconditioners": [[297, "module-fipy.solvers.pysparse.preconditioners"]], "jacobipreconditioner (class in fipy.solvers.pysparse.preconditioners.jacobipreconditioner)": [[298, "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.jacobipreconditioner": [[298, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"]], "preconditioner (class in fipy.solvers.pysparse.preconditioners.preconditioner)": [[299, "fipy.solvers.pysparse.preconditioners.preconditioner.Preconditioner"]], "fipy.solvers.pysparse.preconditioners.preconditioner": [[299, "module-fipy.solvers.pysparse.preconditioners.preconditioner"]], "ssorpreconditioner (class in fipy.solvers.pysparse.preconditioners.ssorpreconditioner)": [[300, "fipy.solvers.pysparse.preconditioners.ssorPreconditioner.SsorPreconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorpreconditioner": [[300, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"]], "pysparsesolver (class in fipy.solvers.pysparse.pysparsesolver)": [[301, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver"]], "__repr__() (fipy.solvers.pysparse.pysparsesolver.pysparsesolver method)": [[301, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.__repr__"]], "fipy.solvers.pysparse.pysparsesolver": [[301, "module-fipy.solvers.pysparse.pysparseSolver"]], "fipy.solvers.pysparsematrixsolver": [[302, "module-fipy.solvers.pysparseMatrixSolver"]], "fipy.solvers.scipy": [[303, "module-fipy.solvers.scipy"]], "linearbicgstabsolver (class in fipy.solvers.scipy.linearbicgstabsolver)": [[304, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver"]], "__repr__() (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver method)": [[304, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.__repr__"]], "fipy.solvers.scipy.linearbicgstabsolver": [[304, "module-fipy.solvers.scipy.linearBicgstabSolver"]], "linearcgssolver (class in fipy.solvers.scipy.linearcgssolver)": [[305, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.scipy.linearcgssolver.linearcgssolver method)": [[305, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.__repr__"]], "fipy.solvers.scipy.linearcgssolver": [[305, "module-fipy.solvers.scipy.linearCGSSolver"]], "lineargmressolver (class in fipy.solvers.scipy.lineargmressolver)": [[306, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.scipy.lineargmressolver.lineargmressolver method)": [[306, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "fipy.solvers.scipy.lineargmressolver": [[306, "module-fipy.solvers.scipy.linearGMRESSolver"]], "linearlusolver (class in fipy.solvers.scipy.linearlusolver)": [[307, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.scipy.linearlusolver.linearlusolver method)": [[307, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.__repr__"]], "fipy.solvers.scipy.linearlusolver": [[307, "module-fipy.solvers.scipy.linearLUSolver"]], "linearpcgsolver (class in fipy.solvers.scipy.linearpcgsolver)": [[308, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver method)": [[308, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.__repr__"]], "fipy.solvers.scipy.linearpcgsolver": [[308, "module-fipy.solvers.scipy.linearPCGSolver"]], "fipy.solvers.scipy.scipykrylovsolver": [[309, "module-fipy.solvers.scipy.scipyKrylovSolver"]], "fipy.solvers.scipy.scipysolver": [[310, "module-fipy.solvers.scipy.scipySolver"]], "illconditionedpreconditionerwarning": [[311, "fipy.solvers.solver.IllConditionedPreconditionerWarning"]], "matrixillconditionedwarning": [[311, "fipy.solvers.solver.MatrixIllConditionedWarning"]], "maximumiterationwarning": [[311, "fipy.solvers.solver.MaximumIterationWarning"]], "preconditionernotpositivedefinitewarning": [[311, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning"]], "preconditionerwarning": [[311, "fipy.solvers.solver.PreconditionerWarning"]], "scalarquantityoutofrangewarning": [[311, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning"]], "solver (class in fipy.solvers.solver)": [[311, "fipy.solvers.solver.Solver"]], "solverconvergencewarning": [[311, "fipy.solvers.solver.SolverConvergenceWarning"]], "stagnatedsolverwarning": [[311, "fipy.solvers.solver.StagnatedSolverWarning"]], "__cause__ (fipy.solvers.solver.illconditionedpreconditionerwarning attribute)": [[311, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__cause__"]], "__cause__ (fipy.solvers.solver.matrixillconditionedwarning attribute)": [[311, "fipy.solvers.solver.MatrixIllConditionedWarning.__cause__"]], "__cause__ (fipy.solvers.solver.maximumiterationwarning attribute)": [[311, "fipy.solvers.solver.MaximumIterationWarning.__cause__"]], "__cause__ (fipy.solvers.solver.preconditionernotpositivedefinitewarning attribute)": [[311, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__cause__"]], "__cause__ (fipy.solvers.solver.preconditionerwarning attribute)": [[311, "fipy.solvers.solver.PreconditionerWarning.__cause__"]], "__cause__ (fipy.solvers.solver.scalarquantityoutofrangewarning attribute)": [[311, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__cause__"]], "__cause__ (fipy.solvers.solver.solverconvergencewarning attribute)": [[311, "fipy.solvers.solver.SolverConvergenceWarning.__cause__"]], "__cause__ (fipy.solvers.solver.stagnatedsolverwarning attribute)": [[311, "fipy.solvers.solver.StagnatedSolverWarning.__cause__"]], "__context__ (fipy.solvers.solver.illconditionedpreconditionerwarning attribute)": [[311, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__context__"]], "__context__ (fipy.solvers.solver.matrixillconditionedwarning attribute)": [[311, "fipy.solvers.solver.MatrixIllConditionedWarning.__context__"]], "__context__ (fipy.solvers.solver.maximumiterationwarning attribute)": [[311, "fipy.solvers.solver.MaximumIterationWarning.__context__"]], "__context__ (fipy.solvers.solver.preconditionernotpositivedefinitewarning attribute)": [[311, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__context__"]], "__context__ (fipy.solvers.solver.preconditionerwarning attribute)": [[311, "fipy.solvers.solver.PreconditionerWarning.__context__"]], "__context__ (fipy.solvers.solver.scalarquantityoutofrangewarning attribute)": [[311, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__context__"]], "__context__ (fipy.solvers.solver.solverconvergencewarning attribute)": [[311, "fipy.solvers.solver.SolverConvergenceWarning.__context__"]], "__context__ (fipy.solvers.solver.stagnatedsolverwarning attribute)": [[311, "fipy.solvers.solver.StagnatedSolverWarning.__context__"]], "__delattr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[311, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[311, "fipy.solvers.solver.MatrixIllConditionedWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.maximumiterationwarning method)": [[311, "fipy.solvers.solver.MaximumIterationWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[311, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.preconditionerwarning method)": [[311, "fipy.solvers.solver.PreconditionerWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[311, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.solverconvergencewarning method)": [[311, "fipy.solvers.solver.SolverConvergenceWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[311, "fipy.solvers.solver.StagnatedSolverWarning.__delattr__"]], "__getattribute__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[311, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[311, "fipy.solvers.solver.MatrixIllConditionedWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.maximumiterationwarning method)": [[311, "fipy.solvers.solver.MaximumIterationWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[311, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.preconditionerwarning method)": [[311, "fipy.solvers.solver.PreconditionerWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[311, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.solverconvergencewarning method)": [[311, "fipy.solvers.solver.SolverConvergenceWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[311, "fipy.solvers.solver.StagnatedSolverWarning.__getattribute__"]], "__reduce__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[311, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[311, "fipy.solvers.solver.MatrixIllConditionedWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.maximumiterationwarning method)": [[311, "fipy.solvers.solver.MaximumIterationWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[311, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.preconditionerwarning method)": [[311, "fipy.solvers.solver.PreconditionerWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[311, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.solverconvergencewarning method)": [[311, "fipy.solvers.solver.SolverConvergenceWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[311, "fipy.solvers.solver.StagnatedSolverWarning.__reduce__"]], "__repr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[311, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__repr__"]], "__repr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[311, "fipy.solvers.solver.MatrixIllConditionedWarning.__repr__"]], "__repr__() (fipy.solvers.solver.maximumiterationwarning method)": [[311, "fipy.solvers.solver.MaximumIterationWarning.__repr__"]], "__repr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[311, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__repr__"]], "__repr__() (fipy.solvers.solver.preconditionerwarning method)": [[311, "fipy.solvers.solver.PreconditionerWarning.__repr__"]], "__repr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[311, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__repr__"]], "__repr__() (fipy.solvers.solver.solver method)": [[311, "fipy.solvers.solver.Solver.__repr__"]], "__repr__() (fipy.solvers.solver.solverconvergencewarning method)": [[311, "fipy.solvers.solver.SolverConvergenceWarning.__repr__"]], "__repr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[311, "fipy.solvers.solver.StagnatedSolverWarning.__repr__"]], "__setattr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[311, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[311, "fipy.solvers.solver.MatrixIllConditionedWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.maximumiterationwarning method)": [[311, "fipy.solvers.solver.MaximumIterationWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[311, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.preconditionerwarning method)": [[311, "fipy.solvers.solver.PreconditionerWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[311, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.solverconvergencewarning method)": [[311, "fipy.solvers.solver.SolverConvergenceWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[311, "fipy.solvers.solver.StagnatedSolverWarning.__setattr__"]], "__str__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[311, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__str__"]], "__str__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[311, "fipy.solvers.solver.MatrixIllConditionedWarning.__str__"]], "__str__() (fipy.solvers.solver.maximumiterationwarning method)": [[311, "fipy.solvers.solver.MaximumIterationWarning.__str__"]], "__str__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[311, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__str__"]], "__str__() (fipy.solvers.solver.preconditionerwarning method)": [[311, "fipy.solvers.solver.PreconditionerWarning.__str__"]], "__str__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[311, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__str__"]], "__str__() (fipy.solvers.solver.solverconvergencewarning method)": [[311, "fipy.solvers.solver.SolverConvergenceWarning.__str__"]], "__str__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[311, "fipy.solvers.solver.StagnatedSolverWarning.__str__"]], "add_note() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[311, "fipy.solvers.solver.IllConditionedPreconditionerWarning.add_note"]], "add_note() (fipy.solvers.solver.matrixillconditionedwarning method)": [[311, "fipy.solvers.solver.MatrixIllConditionedWarning.add_note"]], "add_note() (fipy.solvers.solver.maximumiterationwarning method)": [[311, "fipy.solvers.solver.MaximumIterationWarning.add_note"]], "add_note() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[311, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.add_note"]], "add_note() (fipy.solvers.solver.preconditionerwarning method)": [[311, "fipy.solvers.solver.PreconditionerWarning.add_note"]], "add_note() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[311, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.add_note"]], "add_note() (fipy.solvers.solver.solverconvergencewarning method)": [[311, "fipy.solvers.solver.SolverConvergenceWarning.add_note"]], "add_note() (fipy.solvers.solver.stagnatedsolverwarning method)": [[311, "fipy.solvers.solver.StagnatedSolverWarning.add_note"]], "fipy.solvers.solver": [[311, "module-fipy.solvers.solver"]], "with_traceback() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[311, "fipy.solvers.solver.IllConditionedPreconditionerWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.matrixillconditionedwarning method)": [[311, "fipy.solvers.solver.MatrixIllConditionedWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.maximumiterationwarning method)": [[311, "fipy.solvers.solver.MaximumIterationWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[311, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.preconditionerwarning method)": [[311, "fipy.solvers.solver.PreconditionerWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[311, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.solverconvergencewarning method)": [[311, "fipy.solvers.solver.SolverConvergenceWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.stagnatedsolverwarning method)": [[311, "fipy.solvers.solver.StagnatedSolverWarning.with_traceback"]], "fipy.solvers.test": [[312, "module-fipy.solvers.test"]], "fipy.solvers.trilinos": [[313, "module-fipy.solvers.trilinos"]], "fipy.solvers.trilinos.comms": [[314, "module-fipy.solvers.trilinos.comms"]], "epetracommwrapper (class in fipy.solvers.trilinos.comms.epetracommwrapper)": [[315, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.epetracommwrapper.epetracommwrapper method)": [[315, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.epetracommwrapper.epetracommwrapper method)": [[315, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper.__repr__"]], "fipy.solvers.trilinos.comms.epetracommwrapper": [[315, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"]], "maxall() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[316, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.MaxAll"]], "minall() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[316, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.MinAll"]], "parallelepetracommwrapper (class in fipy.solvers.trilinos.comms.parallelepetracommwrapper)": [[316, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[316, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[316, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.__repr__"]], "allgather() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[316, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.allgather"]], "fipy.solvers.trilinos.comms.parallelepetracommwrapper": [[316, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"]], "serialepetracommwrapper (class in fipy.solvers.trilinos.comms.serialepetracommwrapper)": [[317, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.serialepetracommwrapper.serialepetracommwrapper method)": [[317, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.serialepetracommwrapper.serialepetracommwrapper method)": [[317, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper.__repr__"]], "fipy.solvers.trilinos.comms.serialepetracommwrapper": [[317, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"]], "linearbicgstabsolver (class in fipy.solvers.trilinos.linearbicgstabsolver)": [[318, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver"]], "__repr__() (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver method)": [[318, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.__repr__"]], "fipy.solvers.trilinos.linearbicgstabsolver": [[318, "module-fipy.solvers.trilinos.linearBicgstabSolver"]], "linearcgssolver (class in fipy.solvers.trilinos.linearcgssolver)": [[319, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.trilinos.linearcgssolver.linearcgssolver method)": [[319, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.__repr__"]], "fipy.solvers.trilinos.linearcgssolver": [[319, "module-fipy.solvers.trilinos.linearCGSSolver"]], "lineargmressolver (class in fipy.solvers.trilinos.lineargmressolver)": [[320, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.trilinos.lineargmressolver.lineargmressolver method)": [[320, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "fipy.solvers.trilinos.lineargmressolver": [[320, "module-fipy.solvers.trilinos.linearGMRESSolver"]], "linearlusolver (class in fipy.solvers.trilinos.linearlusolver)": [[321, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.trilinos.linearlusolver.linearlusolver method)": [[321, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.__repr__"]], "fipy.solvers.trilinos.linearlusolver": [[321, "module-fipy.solvers.trilinos.linearLUSolver"]], "linearpcgsolver (class in fipy.solvers.trilinos.linearpcgsolver)": [[322, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver method)": [[322, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.__repr__"]], "fipy.solvers.trilinos.linearpcgsolver": [[322, "module-fipy.solvers.trilinos.linearPCGSolver"]], "fipy.solvers.trilinos.preconditioners": [[323, "module-fipy.solvers.trilinos.preconditioners"]], "domdecomppreconditioner (class in fipy.solvers.trilinos.preconditioners.domdecomppreconditioner)": [[324, "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner.DomDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.domdecomppreconditioner": [[324, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"]], "icpreconditioner (class in fipy.solvers.trilinos.preconditioners.icpreconditioner)": [[325, "fipy.solvers.trilinos.preconditioners.icPreconditioner.ICPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icpreconditioner": [[325, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.trilinos.preconditioners.jacobipreconditioner)": [[326, "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobipreconditioner": [[326, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"]], "multilevelddmlpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelddmlpreconditioner)": [[327, "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner.MultilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelddmlpreconditioner": [[327, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"]], "multilevelddpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelddpreconditioner)": [[328, "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner.MultilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelddpreconditioner": [[328, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"]], "multilevelnssapreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelnssapreconditioner)": [[329, "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner.MultilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelnssapreconditioner": [[329, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"]], "multilevelsapreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsapreconditioner)": [[330, "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner.MultilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsapreconditioner": [[330, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"]], "multilevelsgspreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsgspreconditioner)": [[331, "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner.MultilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsgspreconditioner": [[331, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"]], "multilevelsolversmootherpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsolversmootherpreconditioner)": [[332, "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner.MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsolversmootherpreconditioner": [[332, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"]], "preconditioner (class in fipy.solvers.trilinos.preconditioners.preconditioner)": [[333, "fipy.solvers.trilinos.preconditioners.preconditioner.Preconditioner"]], "fipy.solvers.trilinos.preconditioners.preconditioner": [[333, "module-fipy.solvers.trilinos.preconditioners.preconditioner"]], "trilinosaztecoosolver (class in fipy.solvers.trilinos.trilinosaztecoosolver)": [[334, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver"]], "__repr__() (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver method)": [[334, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.__repr__"]], "fipy.solvers.trilinos.trilinosaztecoosolver": [[334, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"]], "trilinosmltest (class in fipy.solvers.trilinos.trilinosmltest)": [[335, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest"]], "__repr__() (fipy.solvers.trilinos.trilinosmltest.trilinosmltest method)": [[335, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.__repr__"]], "fipy.solvers.trilinos.trilinosmltest": [[335, "module-fipy.solvers.trilinos.trilinosMLTest"]], "trilinosnonlinearsolver (class in fipy.solvers.trilinos.trilinosnonlinearsolver)": [[336, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver"]], "__repr__() (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver method)": [[336, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.__repr__"]], "fipy.solvers.trilinos.trilinosnonlinearsolver": [[336, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"]], "trilinossolver (class in fipy.solvers.trilinos.trilinossolver)": [[337, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver"]], "__repr__() (fipy.solvers.trilinos.trilinossolver.trilinossolver method)": [[337, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.__repr__"]], "fipy.solvers.trilinos.trilinossolver": [[337, "module-fipy.solvers.trilinos.trilinosSolver"]], "l1error() (in module fipy.steppers)": [[338, "fipy.steppers.L1error"]], "l2error() (in module fipy.steppers)": [[338, "fipy.steppers.L2error"]], "linferror() (in module fipy.steppers)": [[338, "fipy.steppers.LINFerror"]], "error() (in module fipy.steppers)": [[338, "fipy.steppers.error"]], "fipy.steppers": [[338, "module-fipy.steppers"]], "residual() (in module fipy.steppers)": [[338, "fipy.steppers.residual"]], "sweepmonotonic() (in module fipy.steppers)": [[338, "fipy.steppers.sweepMonotonic"]], "pidstepper (class in fipy.steppers.pidstepper)": [[339, "fipy.steppers.pidStepper.PIDStepper"]], "fipy.steppers.pidstepper": [[339, "module-fipy.steppers.pidStepper"]], "pseudorkqsstepper (class in fipy.steppers.pseudorkqsstepper)": [[340, "fipy.steppers.pseudoRKQSStepper.PseudoRKQSStepper"]], "fipy.steppers.pseudorkqsstepper": [[340, "module-fipy.steppers.pseudoRKQSStepper"]], "stepper (class in fipy.steppers.stepper)": [[341, "fipy.steppers.stepper.Stepper"]], "fipy.steppers.stepper": [[341, "module-fipy.steppers.stepper"]], "abstractbaseclasserror": [[342, "fipy.terms.AbstractBaseClassError"]], "explicitvariableerror": [[342, "fipy.terms.ExplicitVariableError"]], "incorrectsolutionvariable": [[342, "fipy.terms.IncorrectSolutionVariable"]], "solutionvariablenumbererror": [[342, "fipy.terms.SolutionVariableNumberError"]], "solutionvariablerequirederror": [[342, "fipy.terms.SolutionVariableRequiredError"]], "termmultiplyerror": [[342, "fipy.terms.TermMultiplyError"]], "transienttermerror": [[342, "fipy.terms.TransientTermError"]], "vectorcoefferror": [[342, "fipy.terms.VectorCoeffError"]], "__cause__ (fipy.terms.abstractbaseclasserror attribute)": [[342, "fipy.terms.AbstractBaseClassError.__cause__"]], "__cause__ (fipy.terms.explicitvariableerror attribute)": [[342, "fipy.terms.ExplicitVariableError.__cause__"]], "__cause__ (fipy.terms.incorrectsolutionvariable attribute)": [[342, "fipy.terms.IncorrectSolutionVariable.__cause__"]], "__cause__ (fipy.terms.solutionvariablenumbererror attribute)": [[342, "fipy.terms.SolutionVariableNumberError.__cause__"]], "__cause__ (fipy.terms.solutionvariablerequirederror attribute)": [[342, "fipy.terms.SolutionVariableRequiredError.__cause__"]], "__cause__ (fipy.terms.termmultiplyerror attribute)": [[342, "fipy.terms.TermMultiplyError.__cause__"]], "__cause__ (fipy.terms.transienttermerror attribute)": [[342, "fipy.terms.TransientTermError.__cause__"]], "__cause__ (fipy.terms.vectorcoefferror attribute)": [[342, "fipy.terms.VectorCoeffError.__cause__"]], "__context__ (fipy.terms.abstractbaseclasserror attribute)": [[342, "fipy.terms.AbstractBaseClassError.__context__"]], "__context__ (fipy.terms.explicitvariableerror attribute)": [[342, "fipy.terms.ExplicitVariableError.__context__"]], "__context__ (fipy.terms.incorrectsolutionvariable attribute)": [[342, "fipy.terms.IncorrectSolutionVariable.__context__"]], "__context__ (fipy.terms.solutionvariablenumbererror attribute)": [[342, "fipy.terms.SolutionVariableNumberError.__context__"]], "__context__ (fipy.terms.solutionvariablerequirederror attribute)": [[342, "fipy.terms.SolutionVariableRequiredError.__context__"]], "__context__ (fipy.terms.termmultiplyerror attribute)": [[342, "fipy.terms.TermMultiplyError.__context__"]], "__context__ (fipy.terms.transienttermerror attribute)": [[342, "fipy.terms.TransientTermError.__context__"]], "__context__ (fipy.terms.vectorcoefferror attribute)": [[342, "fipy.terms.VectorCoeffError.__context__"]], "__delattr__() (fipy.terms.abstractbaseclasserror method)": [[342, "fipy.terms.AbstractBaseClassError.__delattr__"]], "__delattr__() (fipy.terms.explicitvariableerror method)": [[342, "fipy.terms.ExplicitVariableError.__delattr__"]], "__delattr__() (fipy.terms.incorrectsolutionvariable method)": [[342, "fipy.terms.IncorrectSolutionVariable.__delattr__"]], "__delattr__() (fipy.terms.solutionvariablenumbererror method)": [[342, "fipy.terms.SolutionVariableNumberError.__delattr__"]], "__delattr__() (fipy.terms.solutionvariablerequirederror method)": [[342, "fipy.terms.SolutionVariableRequiredError.__delattr__"]], "__delattr__() (fipy.terms.termmultiplyerror method)": [[342, "fipy.terms.TermMultiplyError.__delattr__"]], "__delattr__() (fipy.terms.transienttermerror method)": [[342, "fipy.terms.TransientTermError.__delattr__"]], "__delattr__() (fipy.terms.vectorcoefferror method)": [[342, "fipy.terms.VectorCoeffError.__delattr__"]], "__getattribute__() (fipy.terms.abstractbaseclasserror method)": [[342, "fipy.terms.AbstractBaseClassError.__getattribute__"]], "__getattribute__() (fipy.terms.explicitvariableerror method)": [[342, "fipy.terms.ExplicitVariableError.__getattribute__"]], "__getattribute__() (fipy.terms.incorrectsolutionvariable method)": [[342, "fipy.terms.IncorrectSolutionVariable.__getattribute__"]], "__getattribute__() (fipy.terms.solutionvariablenumbererror method)": [[342, "fipy.terms.SolutionVariableNumberError.__getattribute__"]], "__getattribute__() (fipy.terms.solutionvariablerequirederror method)": [[342, "fipy.terms.SolutionVariableRequiredError.__getattribute__"]], "__getattribute__() (fipy.terms.termmultiplyerror method)": [[342, "fipy.terms.TermMultiplyError.__getattribute__"]], "__getattribute__() (fipy.terms.transienttermerror method)": [[342, "fipy.terms.TransientTermError.__getattribute__"]], "__getattribute__() (fipy.terms.vectorcoefferror method)": [[342, "fipy.terms.VectorCoeffError.__getattribute__"]], "__reduce__() (fipy.terms.abstractbaseclasserror method)": [[342, "fipy.terms.AbstractBaseClassError.__reduce__"]], "__reduce__() (fipy.terms.explicitvariableerror method)": [[342, "fipy.terms.ExplicitVariableError.__reduce__"]], "__reduce__() (fipy.terms.incorrectsolutionvariable method)": [[342, "fipy.terms.IncorrectSolutionVariable.__reduce__"]], "__reduce__() (fipy.terms.solutionvariablenumbererror method)": [[342, "fipy.terms.SolutionVariableNumberError.__reduce__"]], "__reduce__() (fipy.terms.solutionvariablerequirederror method)": [[342, "fipy.terms.SolutionVariableRequiredError.__reduce__"]], "__reduce__() (fipy.terms.termmultiplyerror method)": [[342, "fipy.terms.TermMultiplyError.__reduce__"]], "__reduce__() (fipy.terms.transienttermerror method)": [[342, "fipy.terms.TransientTermError.__reduce__"]], "__reduce__() (fipy.terms.vectorcoefferror method)": [[342, "fipy.terms.VectorCoeffError.__reduce__"]], "__repr__() (fipy.terms.abstractbaseclasserror method)": [[342, "fipy.terms.AbstractBaseClassError.__repr__"]], "__repr__() (fipy.terms.explicitvariableerror method)": [[342, "fipy.terms.ExplicitVariableError.__repr__"]], "__repr__() (fipy.terms.incorrectsolutionvariable method)": [[342, "fipy.terms.IncorrectSolutionVariable.__repr__"]], "__repr__() (fipy.terms.solutionvariablenumbererror method)": [[342, "fipy.terms.SolutionVariableNumberError.__repr__"]], "__repr__() (fipy.terms.solutionvariablerequirederror method)": [[342, "fipy.terms.SolutionVariableRequiredError.__repr__"]], "__repr__() (fipy.terms.termmultiplyerror method)": [[342, "fipy.terms.TermMultiplyError.__repr__"]], "__repr__() (fipy.terms.transienttermerror method)": [[342, "fipy.terms.TransientTermError.__repr__"]], "__repr__() (fipy.terms.vectorcoefferror method)": [[342, "fipy.terms.VectorCoeffError.__repr__"]], "__setattr__() (fipy.terms.abstractbaseclasserror method)": [[342, "fipy.terms.AbstractBaseClassError.__setattr__"]], "__setattr__() (fipy.terms.explicitvariableerror method)": [[342, "fipy.terms.ExplicitVariableError.__setattr__"]], "__setattr__() (fipy.terms.incorrectsolutionvariable method)": [[342, "fipy.terms.IncorrectSolutionVariable.__setattr__"]], "__setattr__() (fipy.terms.solutionvariablenumbererror method)": [[342, "fipy.terms.SolutionVariableNumberError.__setattr__"]], "__setattr__() (fipy.terms.solutionvariablerequirederror method)": [[342, "fipy.terms.SolutionVariableRequiredError.__setattr__"]], "__setattr__() (fipy.terms.termmultiplyerror method)": [[342, "fipy.terms.TermMultiplyError.__setattr__"]], "__setattr__() (fipy.terms.transienttermerror method)": [[342, "fipy.terms.TransientTermError.__setattr__"]], "__setattr__() (fipy.terms.vectorcoefferror method)": [[342, "fipy.terms.VectorCoeffError.__setattr__"]], "__str__() (fipy.terms.abstractbaseclasserror method)": [[342, "fipy.terms.AbstractBaseClassError.__str__"]], "__str__() (fipy.terms.explicitvariableerror method)": [[342, "fipy.terms.ExplicitVariableError.__str__"]], "__str__() (fipy.terms.incorrectsolutionvariable method)": [[342, "fipy.terms.IncorrectSolutionVariable.__str__"]], "__str__() (fipy.terms.solutionvariablenumbererror method)": [[342, "fipy.terms.SolutionVariableNumberError.__str__"]], "__str__() (fipy.terms.solutionvariablerequirederror method)": [[342, "fipy.terms.SolutionVariableRequiredError.__str__"]], "__str__() (fipy.terms.termmultiplyerror method)": [[342, "fipy.terms.TermMultiplyError.__str__"]], "__str__() (fipy.terms.transienttermerror method)": [[342, "fipy.terms.TransientTermError.__str__"]], "__str__() (fipy.terms.vectorcoefferror method)": [[342, "fipy.terms.VectorCoeffError.__str__"]], "add_note() (fipy.terms.abstractbaseclasserror method)": [[342, "fipy.terms.AbstractBaseClassError.add_note"]], "add_note() (fipy.terms.explicitvariableerror method)": [[342, "fipy.terms.ExplicitVariableError.add_note"]], "add_note() (fipy.terms.incorrectsolutionvariable method)": [[342, "fipy.terms.IncorrectSolutionVariable.add_note"]], "add_note() (fipy.terms.solutionvariablenumbererror method)": [[342, "fipy.terms.SolutionVariableNumberError.add_note"]], "add_note() (fipy.terms.solutionvariablerequirederror method)": [[342, "fipy.terms.SolutionVariableRequiredError.add_note"]], "add_note() (fipy.terms.termmultiplyerror method)": [[342, "fipy.terms.TermMultiplyError.add_note"]], "add_note() (fipy.terms.transienttermerror method)": [[342, "fipy.terms.TransientTermError.add_note"]], "add_note() (fipy.terms.vectorcoefferror method)": [[342, "fipy.terms.VectorCoeffError.add_note"]], "fipy.terms": [[342, "module-fipy.terms"]], "with_traceback() (fipy.terms.abstractbaseclasserror method)": [[342, "fipy.terms.AbstractBaseClassError.with_traceback"]], "with_traceback() (fipy.terms.explicitvariableerror method)": [[342, "fipy.terms.ExplicitVariableError.with_traceback"]], "with_traceback() (fipy.terms.incorrectsolutionvariable method)": [[342, "fipy.terms.IncorrectSolutionVariable.with_traceback"]], "with_traceback() (fipy.terms.solutionvariablenumbererror method)": [[342, "fipy.terms.SolutionVariableNumberError.with_traceback"]], "with_traceback() (fipy.terms.solutionvariablerequirederror method)": [[342, "fipy.terms.SolutionVariableRequiredError.with_traceback"]], "with_traceback() (fipy.terms.termmultiplyerror method)": [[342, "fipy.terms.TermMultiplyError.with_traceback"]], "with_traceback() (fipy.terms.transienttermerror method)": [[342, "fipy.terms.TransientTermError.with_traceback"]], "with_traceback() (fipy.terms.vectorcoefferror method)": [[342, "fipy.terms.VectorCoeffError.with_traceback"]], "fipy.terms.abstractbinaryterm": [[343, "module-fipy.terms.abstractBinaryTerm"]], "fipy.terms.abstractconvectionterm": [[344, "module-fipy.terms.abstractConvectionTerm"]], "fipy.terms.abstractdiffusionterm": [[345, "module-fipy.terms.abstractDiffusionTerm"]], "fipy.terms.abstractupwindconvectionterm": [[346, "module-fipy.terms.abstractUpwindConvectionTerm"]], "advectionterm (class in fipy.terms.advectionterm)": [[347, "fipy.terms.advectionTerm.AdvectionTerm"]], "rhsvector (fipy.terms.advectionterm.advectionterm property)": [[347, "fipy.terms.advectionTerm.AdvectionTerm.RHSvector"]], "__eq__() (fipy.terms.advectionterm.advectionterm method)": [[347, "fipy.terms.advectionTerm.AdvectionTerm.__eq__"]], "__hash__() (fipy.terms.advectionterm.advectionterm method)": [[347, "fipy.terms.advectionTerm.AdvectionTerm.__hash__"]], "__mul__() (fipy.terms.advectionterm.advectionterm method)": [[347, "fipy.terms.advectionTerm.AdvectionTerm.__mul__"]], "__neg__() (fipy.terms.advectionterm.advectionterm method)": [[347, "fipy.terms.advectionTerm.AdvectionTerm.__neg__"]], "__repr__() (fipy.terms.advectionterm.advectionterm method)": [[347, "fipy.terms.advectionTerm.AdvectionTerm.__repr__"]], "__rmul__() (fipy.terms.advectionterm.advectionterm method)": [[347, "fipy.terms.advectionTerm.AdvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.advectionterm.advectionterm method)": [[347, "fipy.terms.advectionTerm.AdvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.advectionterm.advectionterm method)": [[347, "fipy.terms.advectionTerm.AdvectionTerm.cacheRHSvector"]], "fipy.terms.advectionterm": [[347, "module-fipy.terms.advectionTerm"]], "justerrorvector() (fipy.terms.advectionterm.advectionterm method)": [[347, "fipy.terms.advectionTerm.AdvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.advectionterm.advectionterm method)": [[347, "fipy.terms.advectionTerm.AdvectionTerm.justResidualVector"]], "matrix (fipy.terms.advectionterm.advectionterm property)": [[347, "fipy.terms.advectionTerm.AdvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.advectionterm.advectionterm method)": [[347, "fipy.terms.advectionTerm.AdvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.advectionterm.advectionterm method)": [[347, "fipy.terms.advectionTerm.AdvectionTerm.solve"]], "sweep() (fipy.terms.advectionterm.advectionterm method)": [[347, "fipy.terms.advectionTerm.AdvectionTerm.sweep"]], "fipy.terms.asymmetricconvectionterm": [[348, "module-fipy.terms.asymmetricConvectionTerm"]], "fipy.terms.binaryterm": [[349, "module-fipy.terms.binaryTerm"]], "cellterm (class in fipy.terms.cellterm)": [[350, "fipy.terms.cellTerm.CellTerm"]], "rhsvector (fipy.terms.cellterm.cellterm property)": [[350, "fipy.terms.cellTerm.CellTerm.RHSvector"]], "__eq__() (fipy.terms.cellterm.cellterm method)": [[350, "fipy.terms.cellTerm.CellTerm.__eq__"]], "__hash__() (fipy.terms.cellterm.cellterm method)": [[350, "fipy.terms.cellTerm.CellTerm.__hash__"]], "__mul__() (fipy.terms.cellterm.cellterm method)": [[350, "fipy.terms.cellTerm.CellTerm.__mul__"]], "__neg__() (fipy.terms.cellterm.cellterm method)": [[350, "fipy.terms.cellTerm.CellTerm.__neg__"]], "__repr__() (fipy.terms.cellterm.cellterm method)": [[350, "fipy.terms.cellTerm.CellTerm.__repr__"]], "__rmul__() (fipy.terms.cellterm.cellterm method)": [[350, "fipy.terms.cellTerm.CellTerm.__rmul__"]], "cachematrix() (fipy.terms.cellterm.cellterm method)": [[350, "fipy.terms.cellTerm.CellTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.cellterm.cellterm method)": [[350, "fipy.terms.cellTerm.CellTerm.cacheRHSvector"]], "fipy.terms.cellterm": [[350, "module-fipy.terms.cellTerm"]], "justerrorvector() (fipy.terms.cellterm.cellterm method)": [[350, "fipy.terms.cellTerm.CellTerm.justErrorVector"]], "justresidualvector() (fipy.terms.cellterm.cellterm method)": [[350, "fipy.terms.cellTerm.CellTerm.justResidualVector"]], "matrix (fipy.terms.cellterm.cellterm property)": [[350, "fipy.terms.cellTerm.CellTerm.matrix"]], "residualvectorandnorm() (fipy.terms.cellterm.cellterm method)": [[350, "fipy.terms.cellTerm.CellTerm.residualVectorAndNorm"]], "solve() (fipy.terms.cellterm.cellterm method)": [[350, "fipy.terms.cellTerm.CellTerm.solve"]], "sweep() (fipy.terms.cellterm.cellterm method)": [[350, "fipy.terms.cellTerm.CellTerm.sweep"]], "centraldifferenceconvectionterm (class in fipy.terms.centraldiffconvectionterm)": [[351, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm"]], "rhsvector (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm property)": [[351, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[351, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__eq__"]], "__hash__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[351, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__hash__"]], "__mul__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[351, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__mul__"]], "__neg__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[351, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__neg__"]], "__repr__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[351, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[351, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[351, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[351, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.cacheRHSvector"]], "fipy.terms.centraldiffconvectionterm": [[351, "module-fipy.terms.centralDiffConvectionTerm"]], "justerrorvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[351, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[351, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.justResidualVector"]], "matrix (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm property)": [[351, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[351, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[351, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.solve"]], "sweep() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[351, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.sweep"]], "fipy.terms.coupledbinaryterm": [[352, "module-fipy.terms.coupledBinaryTerm"]], "diffusionterm (class in fipy.terms.diffusionterm)": [[353, "fipy.terms.diffusionTerm.DiffusionTerm"]], "rhsvector (fipy.terms.diffusionterm.diffusionterm property)": [[353, "fipy.terms.diffusionTerm.DiffusionTerm.RHSvector"]], "__eq__() (fipy.terms.diffusionterm.diffusionterm method)": [[353, "fipy.terms.diffusionTerm.DiffusionTerm.__eq__"]], "__hash__() (fipy.terms.diffusionterm.diffusionterm method)": [[353, "fipy.terms.diffusionTerm.DiffusionTerm.__hash__"]], "__repr__() (fipy.terms.diffusionterm.diffusionterm method)": [[353, "fipy.terms.diffusionTerm.DiffusionTerm.__repr__"]], "cachematrix() (fipy.terms.diffusionterm.diffusionterm method)": [[353, "fipy.terms.diffusionTerm.DiffusionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusionterm.diffusionterm method)": [[353, "fipy.terms.diffusionTerm.DiffusionTerm.cacheRHSvector"]], "fipy.terms.diffusionterm": [[353, "module-fipy.terms.diffusionTerm"]], "justerrorvector() (fipy.terms.diffusionterm.diffusionterm method)": [[353, "fipy.terms.diffusionTerm.DiffusionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.diffusionterm.diffusionterm method)": [[353, "fipy.terms.diffusionTerm.DiffusionTerm.justResidualVector"]], "matrix (fipy.terms.diffusionterm.diffusionterm property)": [[353, "fipy.terms.diffusionTerm.DiffusionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.diffusionterm.diffusionterm method)": [[353, "fipy.terms.diffusionTerm.DiffusionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.diffusionterm.diffusionterm method)": [[353, "fipy.terms.diffusionTerm.DiffusionTerm.solve"]], "sweep() (fipy.terms.diffusionterm.diffusionterm method)": [[353, "fipy.terms.diffusionTerm.DiffusionTerm.sweep"]], "diffusiontermcorrection (class in fipy.terms.diffusiontermcorrection)": [[354, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection"]], "rhsvector (fipy.terms.diffusiontermcorrection.diffusiontermcorrection property)": [[354, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.RHSvector"]], "__eq__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[354, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__eq__"]], "__hash__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[354, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__hash__"]], "__repr__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[354, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__repr__"]], "cachematrix() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[354, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[354, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.cacheRHSvector"]], "fipy.terms.diffusiontermcorrection": [[354, "module-fipy.terms.diffusionTermCorrection"]], "justerrorvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[354, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.justErrorVector"]], "justresidualvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[354, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.justResidualVector"]], "matrix (fipy.terms.diffusiontermcorrection.diffusiontermcorrection property)": [[354, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.matrix"]], "residualvectorandnorm() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[354, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.residualVectorAndNorm"]], "solve() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[354, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.solve"]], "sweep() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[354, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.sweep"]], "diffusiontermnocorrection (class in fipy.terms.diffusiontermnocorrection)": [[355, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection"]], "rhsvector (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection property)": [[355, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.RHSvector"]], "__eq__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[355, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__eq__"]], "__hash__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[355, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__hash__"]], "__repr__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[355, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__repr__"]], "cachematrix() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[355, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[355, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.cacheRHSvector"]], "fipy.terms.diffusiontermnocorrection": [[355, "module-fipy.terms.diffusionTermNoCorrection"]], "justerrorvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[355, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.justErrorVector"]], "justresidualvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[355, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.justResidualVector"]], "matrix (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection property)": [[355, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.matrix"]], "residualvectorandnorm() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[355, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.residualVectorAndNorm"]], "solve() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[355, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.solve"]], "sweep() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[355, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.sweep"]], "explicitdiffusionterm (class in fipy.terms.explicitdiffusionterm)": [[356, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm"]], "rhsvector (fipy.terms.explicitdiffusionterm.explicitdiffusionterm property)": [[356, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.RHSvector"]], "__eq__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[356, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__eq__"]], "__hash__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[356, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__hash__"]], "__repr__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[356, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__repr__"]], "cachematrix() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[356, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[356, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.cacheRHSvector"]], "fipy.terms.explicitdiffusionterm": [[356, "module-fipy.terms.explicitDiffusionTerm"]], "justerrorvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[356, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[356, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.justResidualVector"]], "matrix (fipy.terms.explicitdiffusionterm.explicitdiffusionterm property)": [[356, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[356, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[356, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.solve"]], "sweep() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[356, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.sweep"]], "fipy.terms.explicitsourceterm": [[357, "module-fipy.terms.explicitSourceTerm"]], "explicitupwindconvectionterm (class in fipy.terms.explicitupwindconvectionterm)": [[358, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm"]], "rhsvector (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm property)": [[358, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[358, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__eq__"]], "__hash__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[358, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__hash__"]], "__mul__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[358, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__mul__"]], "__neg__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[358, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__neg__"]], "__repr__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[358, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[358, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[358, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[358, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.cacheRHSvector"]], "fipy.terms.explicitupwindconvectionterm": [[358, "module-fipy.terms.explicitUpwindConvectionTerm"]], "justerrorvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[358, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[358, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.justResidualVector"]], "matrix (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm property)": [[358, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[358, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[358, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.solve"]], "sweep() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[358, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.sweep"]], "exponentialconvectionterm (class in fipy.terms.exponentialconvectionterm)": [[359, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm"]], "rhsvector (fipy.terms.exponentialconvectionterm.exponentialconvectionterm property)": [[359, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[359, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__eq__"]], "__hash__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[359, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__hash__"]], "__mul__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[359, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__mul__"]], "__neg__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[359, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__neg__"]], "__repr__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[359, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[359, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[359, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[359, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.cacheRHSvector"]], "fipy.terms.exponentialconvectionterm": [[359, "module-fipy.terms.exponentialConvectionTerm"]], "justerrorvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[359, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[359, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.justResidualVector"]], "matrix (fipy.terms.exponentialconvectionterm.exponentialconvectionterm property)": [[359, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[359, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[359, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.solve"]], "sweep() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[359, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.sweep"]], "faceterm (class in fipy.terms.faceterm)": [[360, "fipy.terms.faceTerm.FaceTerm"]], "rhsvector (fipy.terms.faceterm.faceterm property)": [[360, "fipy.terms.faceTerm.FaceTerm.RHSvector"]], "__eq__() (fipy.terms.faceterm.faceterm method)": [[360, "fipy.terms.faceTerm.FaceTerm.__eq__"]], "__hash__() (fipy.terms.faceterm.faceterm method)": [[360, "fipy.terms.faceTerm.FaceTerm.__hash__"]], "__mul__() (fipy.terms.faceterm.faceterm method)": [[360, "fipy.terms.faceTerm.FaceTerm.__mul__"]], "__neg__() (fipy.terms.faceterm.faceterm method)": [[360, "fipy.terms.faceTerm.FaceTerm.__neg__"]], "__repr__() (fipy.terms.faceterm.faceterm method)": [[360, "fipy.terms.faceTerm.FaceTerm.__repr__"]], "__rmul__() (fipy.terms.faceterm.faceterm method)": [[360, "fipy.terms.faceTerm.FaceTerm.__rmul__"]], "cachematrix() (fipy.terms.faceterm.faceterm method)": [[360, "fipy.terms.faceTerm.FaceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.faceterm.faceterm method)": [[360, "fipy.terms.faceTerm.FaceTerm.cacheRHSvector"]], "fipy.terms.faceterm": [[360, "module-fipy.terms.faceTerm"]], "justerrorvector() (fipy.terms.faceterm.faceterm method)": [[360, "fipy.terms.faceTerm.FaceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.faceterm.faceterm method)": [[360, "fipy.terms.faceTerm.FaceTerm.justResidualVector"]], "matrix (fipy.terms.faceterm.faceterm property)": [[360, "fipy.terms.faceTerm.FaceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.faceterm.faceterm method)": [[360, "fipy.terms.faceTerm.FaceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.faceterm.faceterm method)": [[360, "fipy.terms.faceTerm.FaceTerm.solve"]], "sweep() (fipy.terms.faceterm.faceterm method)": [[360, "fipy.terms.faceTerm.FaceTerm.sweep"]], "firstorderadvectionterm (class in fipy.terms.firstorderadvectionterm)": [[361, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm"]], "rhsvector (fipy.terms.firstorderadvectionterm.firstorderadvectionterm property)": [[361, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.RHSvector"]], "__eq__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[361, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__eq__"]], "__hash__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[361, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__hash__"]], "__mul__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[361, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__mul__"]], "__neg__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[361, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__neg__"]], "__repr__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[361, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__repr__"]], "__rmul__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[361, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[361, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[361, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.cacheRHSvector"]], "fipy.terms.firstorderadvectionterm": [[361, "module-fipy.terms.firstOrderAdvectionTerm"]], "justerrorvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[361, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[361, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.justResidualVector"]], "matrix (fipy.terms.firstorderadvectionterm.firstorderadvectionterm property)": [[361, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[361, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[361, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.solve"]], "sweep() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[361, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.sweep"]], "hybridconvectionterm (class in fipy.terms.hybridconvectionterm)": [[362, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm"]], "rhsvector (fipy.terms.hybridconvectionterm.hybridconvectionterm property)": [[362, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[362, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__eq__"]], "__hash__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[362, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__hash__"]], "__mul__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[362, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__mul__"]], "__neg__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[362, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__neg__"]], "__repr__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[362, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[362, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[362, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[362, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.cacheRHSvector"]], "fipy.terms.hybridconvectionterm": [[362, "module-fipy.terms.hybridConvectionTerm"]], "justerrorvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[362, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[362, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.justResidualVector"]], "matrix (fipy.terms.hybridconvectionterm.hybridconvectionterm property)": [[362, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[362, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[362, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.solve"]], "sweep() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[362, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.sweep"]], "implicitdiffusionterm (in module fipy.terms.implicitdiffusionterm)": [[363, "fipy.terms.implicitDiffusionTerm.ImplicitDiffusionTerm"]], "fipy.terms.implicitdiffusionterm": [[363, "module-fipy.terms.implicitDiffusionTerm"]], "implicitsourceterm (class in fipy.terms.implicitsourceterm)": [[364, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm"]], "rhsvector (fipy.terms.implicitsourceterm.implicitsourceterm property)": [[364, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.RHSvector"]], "__eq__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[364, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__eq__"]], "__hash__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[364, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__hash__"]], "__mul__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[364, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__mul__"]], "__neg__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[364, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__neg__"]], "__repr__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[364, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__repr__"]], "__rmul__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[364, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__rmul__"]], "cachematrix() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[364, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[364, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.cacheRHSvector"]], "fipy.terms.implicitsourceterm": [[364, "module-fipy.terms.implicitSourceTerm"]], "justerrorvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[364, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[364, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.justResidualVector"]], "matrix (fipy.terms.implicitsourceterm.implicitsourceterm property)": [[364, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[364, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[364, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.solve"]], "sweep() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[364, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.sweep"]], "fipy.terms.nondiffusionterm": [[365, "module-fipy.terms.nonDiffusionTerm"]], "powerlawconvectionterm (class in fipy.terms.powerlawconvectionterm)": [[366, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm"]], "rhsvector (fipy.terms.powerlawconvectionterm.powerlawconvectionterm property)": [[366, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[366, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__eq__"]], "__hash__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[366, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__hash__"]], "__mul__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[366, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__mul__"]], "__neg__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[366, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__neg__"]], "__repr__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[366, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[366, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[366, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[366, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.cacheRHSvector"]], "fipy.terms.powerlawconvectionterm": [[366, "module-fipy.terms.powerLawConvectionTerm"]], "justerrorvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[366, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[366, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.justResidualVector"]], "matrix (fipy.terms.powerlawconvectionterm.powerlawconvectionterm property)": [[366, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[366, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[366, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.solve"]], "sweep() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[366, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.sweep"]], "rhsvector (fipy.terms.residualterm.residualterm property)": [[367, "fipy.terms.residualTerm.ResidualTerm.RHSvector"]], "residualterm (class in fipy.terms.residualterm)": [[367, "fipy.terms.residualTerm.ResidualTerm"]], "__eq__() (fipy.terms.residualterm.residualterm method)": [[367, "fipy.terms.residualTerm.ResidualTerm.__eq__"]], "__hash__() (fipy.terms.residualterm.residualterm method)": [[367, "fipy.terms.residualTerm.ResidualTerm.__hash__"]], "__mul__() (fipy.terms.residualterm.residualterm method)": [[367, "fipy.terms.residualTerm.ResidualTerm.__mul__"]], "__neg__() (fipy.terms.residualterm.residualterm method)": [[367, "fipy.terms.residualTerm.ResidualTerm.__neg__"]], "__repr__() (fipy.terms.residualterm.residualterm method)": [[367, "fipy.terms.residualTerm.ResidualTerm.__repr__"]], "__rmul__() (fipy.terms.residualterm.residualterm method)": [[367, "fipy.terms.residualTerm.ResidualTerm.__rmul__"]], "cachematrix() (fipy.terms.residualterm.residualterm method)": [[367, "fipy.terms.residualTerm.ResidualTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.residualterm.residualterm method)": [[367, "fipy.terms.residualTerm.ResidualTerm.cacheRHSvector"]], "fipy.terms.residualterm": [[367, "module-fipy.terms.residualTerm"]], "justerrorvector() (fipy.terms.residualterm.residualterm method)": [[367, "fipy.terms.residualTerm.ResidualTerm.justErrorVector"]], "justresidualvector() (fipy.terms.residualterm.residualterm method)": [[367, "fipy.terms.residualTerm.ResidualTerm.justResidualVector"]], "matrix (fipy.terms.residualterm.residualterm property)": [[367, "fipy.terms.residualTerm.ResidualTerm.matrix"]], "residualvectorandnorm() (fipy.terms.residualterm.residualterm method)": [[367, "fipy.terms.residualTerm.ResidualTerm.residualVectorAndNorm"]], "solve() (fipy.terms.residualterm.residualterm method)": [[367, "fipy.terms.residualTerm.ResidualTerm.solve"]], "sweep() (fipy.terms.residualterm.residualterm method)": [[367, "fipy.terms.residualTerm.ResidualTerm.sweep"]], "rhsvector (fipy.terms.sourceterm.sourceterm property)": [[368, "fipy.terms.sourceTerm.SourceTerm.RHSvector"]], "sourceterm (class in fipy.terms.sourceterm)": [[368, "fipy.terms.sourceTerm.SourceTerm"]], "__eq__() (fipy.terms.sourceterm.sourceterm method)": [[368, "fipy.terms.sourceTerm.SourceTerm.__eq__"]], "__hash__() (fipy.terms.sourceterm.sourceterm method)": [[368, "fipy.terms.sourceTerm.SourceTerm.__hash__"]], "__mul__() (fipy.terms.sourceterm.sourceterm method)": [[368, "fipy.terms.sourceTerm.SourceTerm.__mul__"]], "__neg__() (fipy.terms.sourceterm.sourceterm method)": [[368, "fipy.terms.sourceTerm.SourceTerm.__neg__"]], "__repr__() (fipy.terms.sourceterm.sourceterm method)": [[368, "fipy.terms.sourceTerm.SourceTerm.__repr__"]], "__rmul__() (fipy.terms.sourceterm.sourceterm method)": [[368, "fipy.terms.sourceTerm.SourceTerm.__rmul__"]], "cachematrix() (fipy.terms.sourceterm.sourceterm method)": [[368, "fipy.terms.sourceTerm.SourceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.sourceterm.sourceterm method)": [[368, "fipy.terms.sourceTerm.SourceTerm.cacheRHSvector"]], "fipy.terms.sourceterm": [[368, "module-fipy.terms.sourceTerm"]], "justerrorvector() (fipy.terms.sourceterm.sourceterm method)": [[368, "fipy.terms.sourceTerm.SourceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.sourceterm.sourceterm method)": [[368, "fipy.terms.sourceTerm.SourceTerm.justResidualVector"]], "matrix (fipy.terms.sourceterm.sourceterm property)": [[368, "fipy.terms.sourceTerm.SourceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.sourceterm.sourceterm method)": [[368, "fipy.terms.sourceTerm.SourceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.sourceterm.sourceterm method)": [[368, "fipy.terms.sourceTerm.SourceTerm.solve"]], "sweep() (fipy.terms.sourceterm.sourceterm method)": [[368, "fipy.terms.sourceTerm.SourceTerm.sweep"]], "rhsvector (fipy.terms.term.term property)": [[369, "fipy.terms.term.Term.RHSvector"]], "term (class in fipy.terms.term)": [[369, "fipy.terms.term.Term"]], "__eq__() (fipy.terms.term.term method)": [[369, "fipy.terms.term.Term.__eq__"]], "__hash__() (fipy.terms.term.term method)": [[369, "fipy.terms.term.Term.__hash__"]], "__repr__() (fipy.terms.term.term method)": [[369, "fipy.terms.term.Term.__repr__"]], "cachematrix() (fipy.terms.term.term method)": [[369, "fipy.terms.term.Term.cacheMatrix"]], "cacherhsvector() (fipy.terms.term.term method)": [[369, "fipy.terms.term.Term.cacheRHSvector"]], "fipy.terms.term": [[369, "module-fipy.terms.term"]], "justerrorvector() (fipy.terms.term.term method)": [[369, "fipy.terms.term.Term.justErrorVector"]], "justresidualvector() (fipy.terms.term.term method)": [[369, "fipy.terms.term.Term.justResidualVector"]], "matrix (fipy.terms.term.term property)": [[369, "fipy.terms.term.Term.matrix"]], "residualvectorandnorm() (fipy.terms.term.term method)": [[369, "fipy.terms.term.Term.residualVectorAndNorm"]], "solve() (fipy.terms.term.term method)": [[369, "fipy.terms.term.Term.solve"]], "sweep() (fipy.terms.term.term method)": [[369, "fipy.terms.term.Term.sweep"]], "fipy.terms.test": [[370, "module-fipy.terms.test"]], "rhsvector (fipy.terms.transientterm.transientterm property)": [[371, "fipy.terms.transientTerm.TransientTerm.RHSvector"]], "transientterm (class in fipy.terms.transientterm)": [[371, "fipy.terms.transientTerm.TransientTerm"]], "__eq__() (fipy.terms.transientterm.transientterm method)": [[371, "fipy.terms.transientTerm.TransientTerm.__eq__"]], "__hash__() (fipy.terms.transientterm.transientterm method)": [[371, "fipy.terms.transientTerm.TransientTerm.__hash__"]], "__mul__() (fipy.terms.transientterm.transientterm method)": [[371, "fipy.terms.transientTerm.TransientTerm.__mul__"]], "__neg__() (fipy.terms.transientterm.transientterm method)": [[371, "fipy.terms.transientTerm.TransientTerm.__neg__"]], "__repr__() (fipy.terms.transientterm.transientterm method)": [[371, "fipy.terms.transientTerm.TransientTerm.__repr__"]], "__rmul__() (fipy.terms.transientterm.transientterm method)": [[371, "fipy.terms.transientTerm.TransientTerm.__rmul__"]], "cachematrix() (fipy.terms.transientterm.transientterm method)": [[371, "fipy.terms.transientTerm.TransientTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.transientterm.transientterm method)": [[371, "fipy.terms.transientTerm.TransientTerm.cacheRHSvector"]], "fipy.terms.transientterm": [[371, "module-fipy.terms.transientTerm"]], "justerrorvector() (fipy.terms.transientterm.transientterm method)": [[371, "fipy.terms.transientTerm.TransientTerm.justErrorVector"]], "justresidualvector() (fipy.terms.transientterm.transientterm method)": [[371, "fipy.terms.transientTerm.TransientTerm.justResidualVector"]], "matrix (fipy.terms.transientterm.transientterm property)": [[371, "fipy.terms.transientTerm.TransientTerm.matrix"]], "residualvectorandnorm() (fipy.terms.transientterm.transientterm method)": [[371, "fipy.terms.transientTerm.TransientTerm.residualVectorAndNorm"]], "solve() (fipy.terms.transientterm.transientterm method)": [[371, "fipy.terms.transientTerm.TransientTerm.solve"]], "sweep() (fipy.terms.transientterm.transientterm method)": [[371, "fipy.terms.transientTerm.TransientTerm.sweep"]], "fipy.terms.unaryterm": [[372, "module-fipy.terms.unaryTerm"]], "rhsvector (fipy.terms.upwindconvectionterm.upwindconvectionterm property)": [[373, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.RHSvector"]], "upwindconvectionterm (class in fipy.terms.upwindconvectionterm)": [[373, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm"]], "__eq__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[373, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__eq__"]], "__hash__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[373, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__hash__"]], "__mul__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[373, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__mul__"]], "__neg__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[373, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__neg__"]], "__repr__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[373, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[373, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[373, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[373, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.cacheRHSvector"]], "fipy.terms.upwindconvectionterm": [[373, "module-fipy.terms.upwindConvectionTerm"]], "justerrorvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[373, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[373, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.justResidualVector"]], "matrix (fipy.terms.upwindconvectionterm.upwindconvectionterm property)": [[373, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[373, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[373, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.solve"]], "sweep() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[373, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.sweep"]], "rhsvector (fipy.terms.vanleerconvectionterm.vanleerconvectionterm property)": [[374, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.RHSvector"]], "vanleerconvectionterm (class in fipy.terms.vanleerconvectionterm)": [[374, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm"]], "__eq__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[374, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__eq__"]], "__hash__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[374, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__hash__"]], "__mul__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[374, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__mul__"]], "__neg__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[374, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__neg__"]], "__repr__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[374, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[374, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[374, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[374, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.cacheRHSvector"]], "fipy.terms.vanleerconvectionterm": [[374, "module-fipy.terms.vanLeerConvectionTerm"]], "justerrorvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[374, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[374, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.justResidualVector"]], "matrix (fipy.terms.vanleerconvectionterm.vanleerconvectionterm property)": [[374, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[374, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[374, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.solve"]], "sweep() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[374, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.sweep"]], "fipy.testfipy": [[375, "module-fipy.testFiPy"]], "fipy.tests": [[376, "module-fipy.tests"]], "execbutnotest() (in module fipy.tests.doctestplus)": [[377, "fipy.tests.doctestPlus.execButNoTest"]], "fipy.tests.doctestplus": [[377, "module-fipy.tests.doctestPlus"]], "register_skipper() (in module fipy.tests.doctestplus)": [[377, "fipy.tests.doctestPlus.register_skipper"]], "report_skips() (in module fipy.tests.doctestplus)": [[377, "fipy.tests.doctestPlus.report_skips"]], "testmod() (in module fipy.tests.doctestplus)": [[377, "fipy.tests.doctestPlus.testmod"]], "fipy.tests.lateimporttest": [[378, "module-fipy.tests.lateImportTest"]], "deprecationerroringtestprogram (class in fipy.tests.test)": [[379, "fipy.tests.test.DeprecationErroringTestProgram"]], "finalize_options() (fipy.tests.test.test method)": [[379, "fipy.tests.test.test.finalize_options"]], "fipy.tests.test": [[379, "module-fipy.tests.test"]], "initialize_options() (fipy.tests.test.test method)": [[379, "fipy.tests.test.test.initialize_options"]], "test (class in fipy.tests.test)": [[379, "fipy.tests.test.test"]], "testprogram (class in fipy.tests.testprogram)": [[380, "fipy.tests.testProgram.TestProgram"]], "fipy.tests.testprogram": [[380, "module-fipy.tests.testProgram"]], "main (in module fipy.tests.testprogram)": [[380, "fipy.tests.testProgram.main"]], "physicalfield (class in fipy.tools)": [[381, "fipy.tools.PhysicalField"]], "sharedtemporaryfile() (in module fipy.tools)": [[381, "fipy.tools.SharedTemporaryFile"]], "vitals (class in fipy.tools)": [[381, "fipy.tools.Vitals"]], "__abs__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__abs__"]], "__add__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__add__"]], "__array__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__array__"]], "__array_wrap__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__array_wrap__"]], "__bool__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__bool__"]], "__div__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__div__"]], "__eq__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__eq__"]], "__float__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__float__"]], "__ge__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__ge__"]], "__getitem__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__getitem__"]], "__gt__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__gt__"]], "__hash__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__hash__"]], "__le__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__le__"]], "__lt__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__lt__"]], "__mod__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__mod__"]], "__mul__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__mul__"]], "__ne__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__ne__"]], "__neg__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__neg__"]], "__nonzero__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__nonzero__"]], "__pow__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__pow__"]], "__radd__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__radd__"]], "__repr__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__repr__"]], "__rmul__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__rmul__"]], "__setitem__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__setitem__"]], "__str__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__str__"]], "__str__() (fipy.tools.vitals method)": [[381, "fipy.tools.Vitals.__str__"]], "__sub__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__sub__"]], "__truediv__() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.__truediv__"]], "add() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.add"]], "allclose() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.allclose"]], "allequal() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.allequal"]], "appendinfo() (fipy.tools.vitals method)": [[381, "fipy.tools.Vitals.appendInfo"]], "arccos() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.arccos"]], "arccosh() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.arccosh"]], "arcsin() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.arcsin"]], "arctan() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.arctan"]], "arctan2() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.arctan2"]], "arctanh() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.arctanh"]], "ceil() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.ceil"]], "conjugate() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.conjugate"]], "converttounit() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.convertToUnit"]], "copy() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.copy"]], "cos() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.cos"]], "cosh() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.cosh"]], "divide() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.divide"]], "documentelement (fipy.tools.vitals property)": [[381, "fipy.tools.Vitals.documentElement"]], "dot() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.dot"]], "fipy.tools": [[381, "module-fipy.tools"]], "firstchild (fipy.tools.vitals property)": [[381, "fipy.tools.Vitals.firstChild"]], "floor() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.floor"]], "getsctype() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.getsctype"]], "inbaseunits() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.inBaseUnits"]], "indimensionless() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.inDimensionless"]], "inradians() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.inRadians"]], "insiunits() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.inSIUnits"]], "inunitsof() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.inUnitsOf"]], "itemset() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.itemset"]], "lastchild (fipy.tools.vitals property)": [[381, "fipy.tools.Vitals.lastChild"]], "localname (fipy.tools.vitals property)": [[381, "fipy.tools.Vitals.localName"]], "log() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.log"]], "log10() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.log10"]], "multiply() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.multiply"]], "numericvalue (fipy.tools.physicalfield property)": [[381, "fipy.tools.PhysicalField.numericValue"]], "parallelcomm (in module fipy.tools)": [[381, "fipy.tools.parallelComm"]], "put() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.put"]], "reshape() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.reshape"]], "serialcomm (in module fipy.tools)": [[381, "fipy.tools.serialComm"]], "shape (fipy.tools.physicalfield property)": [[381, "fipy.tools.PhysicalField.shape"]], "sign() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.sign"]], "sin() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.sin"]], "sinh() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.sinh"]], "sqrt() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.sqrt"]], "subtract() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.subtract"]], "sum() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.sum"]], "take() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.take"]], "tan() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.tan"]], "tanh() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.tanh"]], "tostring() (fipy.tools.physicalfield method)": [[381, "fipy.tools.PhysicalField.tostring"]], "unit (fipy.tools.physicalfield property)": [[381, "fipy.tools.PhysicalField.unit"]], "fipy.tools.comms": [[382, "module-fipy.tools.comms"]], "commwrapper (class in fipy.tools.comms.commwrapper)": [[383, "fipy.tools.comms.commWrapper.CommWrapper"]], "__getstate__() (fipy.tools.comms.commwrapper.commwrapper method)": [[383, "fipy.tools.comms.commWrapper.CommWrapper.__getstate__"]], "__repr__() (fipy.tools.comms.commwrapper.commwrapper method)": [[383, "fipy.tools.comms.commWrapper.CommWrapper.__repr__"]], "fipy.tools.comms.commwrapper": [[383, "module-fipy.tools.comms.commWrapper"]], "dummycomm (class in fipy.tools.comms.dummycomm)": [[384, "fipy.tools.comms.dummyComm.DummyComm"]], "__getstate__() (fipy.tools.comms.dummycomm.dummycomm method)": [[384, "fipy.tools.comms.dummyComm.DummyComm.__getstate__"]], "__repr__() (fipy.tools.comms.dummycomm.dummycomm method)": [[384, "fipy.tools.comms.dummyComm.DummyComm.__repr__"]], "fipy.tools.comms.dummycomm": [[384, "module-fipy.tools.comms.dummyComm"]], "print() (in module fipy.tools.debug)": [[385, "fipy.tools.debug.PRINT"]], "fipy.tools.debug": [[385, "module-fipy.tools.debug"]], "deprecate() (in module fipy.tools.decorators)": [[386, "fipy.tools.decorators.deprecate"]], "fipy.tools.decorators": [[386, "module-fipy.tools.decorators"]], "fipy.tools.dimensions": [[387, "module-fipy.tools.dimensions"]], "fipy.tools.dimensions.dictwithdefault": [[388, "module-fipy.tools.dimensions.DictWithDefault"]], "fipy.tools.dimensions.numberdict": [[389, "module-fipy.tools.dimensions.NumberDict"]], "physicalfield (class in fipy.tools.dimensions.physicalfield)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField"]], "physicalunit (class in fipy.tools.dimensions.physicalfield)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit"]], "__abs__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__abs__"]], "__add__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__add__"]], "__array__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__array__"]], "__array_wrap__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__array_wrap__"]], "__bool__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__bool__"]], "__div__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__div__"]], "__div__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.__div__"]], "__eq__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__eq__"]], "__eq__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.__eq__"]], "__float__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__float__"]], "__ge__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__ge__"]], "__ge__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.__ge__"]], "__getitem__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__getitem__"]], "__gt__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__gt__"]], "__gt__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.__gt__"]], "__hash__ (fipy.tools.dimensions.physicalfield.physicalunit attribute)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.__hash__"]], "__hash__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__hash__"]], "__le__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__le__"]], "__le__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.__le__"]], "__lt__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__lt__"]], "__lt__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.__lt__"]], "__mod__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__mod__"]], "__mul__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__mul__"]], "__mul__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.__mul__"]], "__ne__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__ne__"]], "__ne__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.__ne__"]], "__neg__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__neg__"]], "__nonzero__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__nonzero__"]], "__pow__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__pow__"]], "__pow__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.__pow__"]], "__radd__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__radd__"]], "__rdiv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rdiv__"]], "__repr__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__repr__"]], "__repr__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.__repr__"]], "__rmul__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__rmul__"]], "__rmul__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rmul__"]], "__rtruediv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rtruediv__"]], "__setitem__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__setitem__"]], "__str__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__str__"]], "__str__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.__str__"]], "__sub__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__sub__"]], "__truediv__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.__truediv__"]], "__truediv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.__truediv__"]], "add() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.add"]], "allclose() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.allclose"]], "allequal() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.allequal"]], "arccos() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.arccos"]], "arccosh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.arccosh"]], "arcsin() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.arcsin"]], "arctan() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.arctan"]], "arctan2() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.arctan2"]], "arctanh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.arctanh"]], "ceil() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.ceil"]], "conjugate() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.conjugate"]], "conversionfactorto() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.conversionFactorTo"]], "conversiontupleto() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.conversionTupleTo"]], "converttounit() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.convertToUnit"]], "copy() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.copy"]], "cos() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.cos"]], "cosh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.cosh"]], "divide() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.divide"]], "dot() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.dot"]], "fipy.tools.dimensions.physicalfield": [[390, "module-fipy.tools.dimensions.physicalField"]], "floor() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.floor"]], "getsctype() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.getsctype"]], "inbaseunits() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.inBaseUnits"]], "indimensionless() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.inDimensionless"]], "inradians() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.inRadians"]], "insiunits() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.inSIUnits"]], "inunitsof() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.inUnitsOf"]], "isangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.isAngle"]], "iscompatible() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.isCompatible"]], "isdimensionless() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.isDimensionless"]], "isdimensionlessorangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.isDimensionlessOrAngle"]], "isinverseangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.isInverseAngle"]], "itemset() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.itemset"]], "log() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.log"]], "log10() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.log10"]], "multiply() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.multiply"]], "name() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.name"]], "numericvalue (fipy.tools.dimensions.physicalfield.physicalfield property)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.numericValue"]], "put() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.put"]], "reshape() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.reshape"]], "setname() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalUnit.setName"]], "shape (fipy.tools.dimensions.physicalfield.physicalfield property)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.shape"]], "sign() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.sign"]], "sin() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.sin"]], "sinh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.sinh"]], "sqrt() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.sqrt"]], "subtract() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.subtract"]], "sum() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.sum"]], "take() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.take"]], "tan() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.tan"]], "tanh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.tanh"]], "tostring() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.tostring"]], "unit (fipy.tools.dimensions.physicalfield.physicalfield property)": [[390, "fipy.tools.dimensions.physicalField.PhysicalField.unit"]], "read() (in module fipy.tools.dump)": [[391, "fipy.tools.dump.read"]], "write() (in module fipy.tools.dump)": [[391, "fipy.tools.dump.write"]], "fipy.tools.inline": [[392, "module-fipy.tools.inline"]], "fipy.tools.logging": [[393, "module-fipy.tools.logging"]], "package_info() (in module fipy.tools.logging)": [[393, "fipy.tools.logging.package_info"]], "l1norm() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.L1norm"]], "l2norm() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.L2norm"]], "linfnorm() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.LINFnorm"]], "all() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.all"]], "allclose() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.allclose"]], "allequal() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.allequal"]], "dot() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.dot"]], "fipy.tools.numerix": [[394, "module-fipy.tools.numerix"]], "getshape() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.getShape"]], "getunit() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.getUnit"]], "isclose() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.isclose"]], "nearest() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.nearest"]], "put() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.put"]], "rank() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.rank"]], "reshape() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.reshape"]], "sqrtdot() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.sqrtDot"]], "sum() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.sum"]], "take() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.take"]], "tostring() (in module fipy.tools.numerix)": [[394, "fipy.tools.numerix.tostring"]], "parse() (in module fipy.tools.parser)": [[395, "fipy.tools.parser.parse"]], "sharedtemporaryfile() (in module fipy.tools.sharedtempfile)": [[396, "fipy.tools.sharedtempfile.SharedTemporaryFile"]], "fipy.tools.sharedtempfile": [[396, "module-fipy.tools.sharedtempfile"]], "fipy.tools.test": [[397, "module-fipy.tools.test"]], "fipy.tools.vector": [[398, "module-fipy.tools.vector"]], "prune() (in module fipy.tools.vector)": [[398, "fipy.tools.vector.prune"]], "putadd() (in module fipy.tools.vector)": [[398, "fipy.tools.vector.putAdd"]], "fipy.tools.version": [[399, "module-fipy.tools.version"]], "vitals (class in fipy.tools.vitals)": [[400, "fipy.tools.vitals.Vitals"]], "__str__() (fipy.tools.vitals.vitals method)": [[400, "fipy.tools.vitals.Vitals.__str__"]], "appendinfo() (fipy.tools.vitals.vitals method)": [[400, "fipy.tools.vitals.Vitals.appendInfo"]], "documentelement (fipy.tools.vitals.vitals property)": [[400, "fipy.tools.vitals.Vitals.documentElement"]], "fipy.tools.vitals": [[400, "module-fipy.tools.vitals"]], "firstchild (fipy.tools.vitals.vitals property)": [[400, "fipy.tools.vitals.Vitals.firstChild"]], "lastchild (fipy.tools.vitals.vitals property)": [[400, "fipy.tools.vitals.Vitals.lastChild"]], "localname (fipy.tools.vitals.vitals property)": [[400, "fipy.tools.vitals.Vitals.localName"]], "fipy.variables": [[401, "module-fipy.variables"]], "fipy.variables.addoverfacesvariable": [[402, "module-fipy.variables.addOverFacesVariable"]], "fipy.variables.arithmeticcelltofacevariable": [[403, "module-fipy.variables.arithmeticCellToFaceVariable"]], "betanoisevariable (class in fipy.variables.betanoisevariable)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable"]], "__abs__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__abs__"]], "__and__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__and__"]], "__array__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__bool__"]], "__call__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__call__"]], "__eq__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__eq__"]], "__ge__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__gt__"]], "__hash__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__hash__"]], "__invert__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__invert__"]], "__le__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__le__"]], "__lt__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__lt__"]], "__ne__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__ne__"]], "__new__() (fipy.variables.betanoisevariable.betanoisevariable static method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__or__"]], "__pow__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__pow__"]], "__repr__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__setstate__"]], "__str__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__str__"]], "all() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.all"]], "allclose() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.allclose"]], "any() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.betanoisevariable.betanoisevariable property)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.constrain"]], "constraintmask (fipy.variables.betanoisevariable.betanoisevariable property)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.constraintMask"]], "copy() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.copy"]], "dot() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.dot"]], "facegrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.betanoisevariable.betanoisevariable property)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceValue"]], "fipy.variables.betanoisevariable": [[404, "module-fipy.variables.betaNoiseVariable"]], "gaussgrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.getsctype"]], "globalvalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.globalValue"]], "grad (fipy.variables.betanoisevariable.betanoisevariable property)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.betanoisevariable.betanoisevariable property)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.mag"]], "max() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.max"]], "min() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.min"]], "minmodfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.minmodFaceValue"]], "old (fipy.variables.betanoisevariable.betanoisevariable property)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.old"]], "rdot() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.rdot"]], "release() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.release"]], "scramble() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.scramble"]], "setvalue() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.setValue"]], "shape (fipy.variables.betanoisevariable.betanoisevariable property)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.shape"]], "std() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.std"]], "unit (fipy.variables.betanoisevariable.betanoisevariable property)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.unit"]], "updateold() (fipy.variables.betanoisevariable.betanoisevariable method)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.updateOld"]], "value (fipy.variables.betanoisevariable.betanoisevariable property)": [[404, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.value"]], "fipy.variables.binaryoperatorvariable": [[405, "module-fipy.variables.binaryOperatorVariable"]], "fipy.variables.celltofacevariable": [[406, "module-fipy.variables.cellToFaceVariable"]], "cellvariable (class in fipy.variables.cellvariable)": [[407, "fipy.variables.cellVariable.CellVariable"]], "__abs__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__abs__"]], "__and__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__and__"]], "__array__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__array__"]], "__array_wrap__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__array_wrap__"]], "__bool__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__bool__"]], "__call__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__call__"]], "__eq__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__eq__"]], "__ge__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__ge__"]], "__getitem__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__getitem__"]], "__getstate__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__getstate__"]], "__gt__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__gt__"]], "__hash__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__hash__"]], "__invert__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__invert__"]], "__le__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__le__"]], "__lt__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__lt__"]], "__ne__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__ne__"]], "__new__() (fipy.variables.cellvariable.cellvariable static method)": [[407, "fipy.variables.cellVariable.CellVariable.__new__"]], "__nonzero__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__nonzero__"]], "__or__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__or__"]], "__pow__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__pow__"]], "__repr__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__repr__"]], "__setstate__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__setstate__"]], "__str__() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.__str__"]], "all() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.all"]], "allclose() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.allclose"]], "any() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.any"]], "arithmeticfacevalue (fipy.variables.cellvariable.cellvariable property)": [[407, "fipy.variables.cellVariable.CellVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.cellvariable.cellvariable property)": [[407, "fipy.variables.cellVariable.CellVariable.cellVolumeAverage"]], "constrain() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.constrain"]], "constraintmask (fipy.variables.cellvariable.cellvariable property)": [[407, "fipy.variables.cellVariable.CellVariable.constraintMask"]], "copy() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.copy"]], "dot() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.dot"]], "facegrad (fipy.variables.cellvariable.cellvariable property)": [[407, "fipy.variables.cellVariable.CellVariable.faceGrad"]], "facegradaverage (fipy.variables.cellvariable.cellvariable property)": [[407, "fipy.variables.cellVariable.CellVariable.faceGradAverage"]], "facevalue (fipy.variables.cellvariable.cellvariable property)": [[407, "fipy.variables.cellVariable.CellVariable.faceValue"]], "fipy.variables.cellvariable": [[407, "module-fipy.variables.cellVariable"]], "gaussgrad (fipy.variables.cellvariable.cellvariable property)": [[407, "fipy.variables.cellVariable.CellVariable.gaussGrad"]], "getsctype() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.getsctype"]], "globalvalue (fipy.variables.cellvariable.cellvariable property)": [[407, "fipy.variables.cellVariable.CellVariable.globalValue"]], "grad (fipy.variables.cellvariable.cellvariable property)": [[407, "fipy.variables.cellVariable.CellVariable.grad"]], "harmonicfacevalue (fipy.variables.cellvariable.cellvariable property)": [[407, "fipy.variables.cellVariable.CellVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.inBaseUnits"]], "inunitsof() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.cellvariable.cellvariable property)": [[407, "fipy.variables.cellVariable.CellVariable.leastSquaresGrad"]], "mag (fipy.variables.cellvariable.cellvariable property)": [[407, "fipy.variables.cellVariable.CellVariable.mag"]], "max() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.max"]], "min() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.min"]], "minmodfacevalue (fipy.variables.cellvariable.cellvariable property)": [[407, "fipy.variables.cellVariable.CellVariable.minmodFaceValue"]], "old (fipy.variables.cellvariable.cellvariable property)": [[407, "fipy.variables.cellVariable.CellVariable.old"]], "rdot() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.rdot"]], "release() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.release"]], "setvalue() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.setValue"]], "shape (fipy.variables.cellvariable.cellvariable property)": [[407, "fipy.variables.cellVariable.CellVariable.shape"]], "std() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.std"]], "unit (fipy.variables.cellvariable.cellvariable property)": [[407, "fipy.variables.cellVariable.CellVariable.unit"]], "updateold() (fipy.variables.cellvariable.cellvariable method)": [[407, "fipy.variables.cellVariable.CellVariable.updateOld"]], "value (fipy.variables.cellvariable.cellvariable property)": [[407, "fipy.variables.cellVariable.CellVariable.value"]], "fipy.variables.constant": [[408, "module-fipy.variables.constant"]], "fipy.variables.constraintmask": [[409, "module-fipy.variables.constraintMask"]], "fipy.variables.coupledcellvariable": [[410, "module-fipy.variables.coupledCellVariable"]], "distancevariable (class in fipy.variables.distancevariable)": [[411, "fipy.variables.distanceVariable.DistanceVariable"]], "__abs__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__abs__"]], "__and__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__and__"]], "__array__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__array__"]], "__array_wrap__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__array_wrap__"]], "__bool__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__bool__"]], "__call__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__call__"]], "__eq__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__eq__"]], "__ge__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__ge__"]], "__getitem__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__getitem__"]], "__getstate__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__getstate__"]], "__gt__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__gt__"]], "__hash__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__hash__"]], "__invert__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__invert__"]], "__le__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__le__"]], "__lt__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__lt__"]], "__ne__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__ne__"]], "__new__() (fipy.variables.distancevariable.distancevariable static method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__new__"]], "__nonzero__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__nonzero__"]], "__or__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__or__"]], "__pow__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__pow__"]], "__repr__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__repr__"]], "__setstate__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__setstate__"]], "__str__() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.__str__"]], "all() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.all"]], "allclose() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.allclose"]], "any() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.any"]], "arithmeticfacevalue (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.arithmeticFaceValue"]], "calcdistancefunction() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.calcDistanceFunction"]], "cellinterfaceareas (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.cellInterfaceAreas"]], "cellvolumeaverage (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.cellVolumeAverage"]], "constrain() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.constrain"]], "constraintmask (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.constraintMask"]], "copy() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.copy"]], "dot() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.dot"]], "extendvariable() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.extendVariable"]], "facegrad (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.faceGrad"]], "facegradaverage (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.faceGradAverage"]], "facevalue (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.faceValue"]], "fipy.variables.distancevariable": [[411, "module-fipy.variables.distanceVariable"]], "gaussgrad (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.gaussGrad"]], "getsctype() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.getsctype"]], "globalvalue (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.globalValue"]], "grad (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.grad"]], "harmonicfacevalue (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.leastSquaresGrad"]], "mag (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.mag"]], "max() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.max"]], "min() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.min"]], "minmodfacevalue (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.minmodFaceValue"]], "old (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.old"]], "rdot() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.rdot"]], "release() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.release"]], "setvalue() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.setValue"]], "shape (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.shape"]], "std() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.std"]], "unit (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.unit"]], "updateold() (fipy.variables.distancevariable.distancevariable method)": [[411, "fipy.variables.distanceVariable.DistanceVariable.updateOld"]], "value (fipy.variables.distancevariable.distancevariable property)": [[411, "fipy.variables.distanceVariable.DistanceVariable.value"]], "exponentialnoisevariable (class in fipy.variables.exponentialnoisevariable)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable"]], "__abs__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__abs__"]], "__and__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__and__"]], "__array__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__bool__"]], "__call__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__call__"]], "__eq__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__eq__"]], "__ge__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__gt__"]], "__hash__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__hash__"]], "__invert__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__invert__"]], "__le__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__le__"]], "__lt__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__lt__"]], "__ne__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__ne__"]], "__new__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable static method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__or__"]], "__pow__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__pow__"]], "__repr__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__setstate__"]], "__str__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__str__"]], "all() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.all"]], "allclose() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.allclose"]], "any() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.constrain"]], "constraintmask (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.constraintMask"]], "copy() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.copy"]], "dot() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.dot"]], "facegrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceValue"]], "fipy.variables.exponentialnoisevariable": [[412, "module-fipy.variables.exponentialNoiseVariable"]], "gaussgrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.getsctype"]], "globalvalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.globalValue"]], "grad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.mag"]], "max() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.max"]], "min() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.min"]], "minmodfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.minmodFaceValue"]], "old (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.old"]], "rdot() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.rdot"]], "release() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.release"]], "scramble() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.scramble"]], "setvalue() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.setValue"]], "shape (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.shape"]], "std() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.std"]], "unit (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.unit"]], "updateold() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.updateOld"]], "value (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[412, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.value"]], "fipy.variables.facegradcontributionsvariable": [[413, "module-fipy.variables.faceGradContributionsVariable"]], "fipy.variables.facegradvariable": [[414, "module-fipy.variables.faceGradVariable"]], "facevariable (class in fipy.variables.facevariable)": [[415, "fipy.variables.faceVariable.FaceVariable"]], "__abs__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__abs__"]], "__and__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__and__"]], "__array__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__array__"]], "__array_wrap__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__array_wrap__"]], "__bool__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__bool__"]], "__call__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__call__"]], "__eq__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__eq__"]], "__ge__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__ge__"]], "__getitem__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__getitem__"]], "__getstate__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__getstate__"]], "__gt__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__gt__"]], "__hash__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__hash__"]], "__invert__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__invert__"]], "__le__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__le__"]], "__lt__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__lt__"]], "__ne__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__ne__"]], "__new__() (fipy.variables.facevariable.facevariable static method)": [[415, "fipy.variables.faceVariable.FaceVariable.__new__"]], "__nonzero__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__nonzero__"]], "__or__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__or__"]], "__pow__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__pow__"]], "__repr__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__repr__"]], "__setstate__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__setstate__"]], "__str__() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.__str__"]], "all() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.all"]], "allclose() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.allclose"]], "any() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.any"]], "constrain() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.constrain"]], "constraintmask (fipy.variables.facevariable.facevariable property)": [[415, "fipy.variables.faceVariable.FaceVariable.constraintMask"]], "copy() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.copy"]], "divergence (fipy.variables.facevariable.facevariable property)": [[415, "fipy.variables.faceVariable.FaceVariable.divergence"]], "dot() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.dot"]], "fipy.variables.facevariable": [[415, "module-fipy.variables.faceVariable"]], "getsctype() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.getsctype"]], "inbaseunits() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.inUnitsOf"]], "mag (fipy.variables.facevariable.facevariable property)": [[415, "fipy.variables.faceVariable.FaceVariable.mag"]], "max() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.max"]], "min() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.min"]], "rdot() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.rdot"]], "release() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.release"]], "setvalue() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.setValue"]], "shape (fipy.variables.facevariable.facevariable property)": [[415, "fipy.variables.faceVariable.FaceVariable.shape"]], "std() (fipy.variables.facevariable.facevariable method)": [[415, "fipy.variables.faceVariable.FaceVariable.std"]], "unit (fipy.variables.facevariable.facevariable property)": [[415, "fipy.variables.faceVariable.FaceVariable.unit"]], "value (fipy.variables.facevariable.facevariable property)": [[415, "fipy.variables.faceVariable.FaceVariable.value"]], "gammanoisevariable (class in fipy.variables.gammanoisevariable)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable"]], "__abs__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__abs__"]], "__and__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__and__"]], "__array__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__bool__"]], "__call__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__call__"]], "__eq__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__eq__"]], "__ge__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__gt__"]], "__hash__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__hash__"]], "__invert__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__invert__"]], "__le__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__le__"]], "__lt__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__lt__"]], "__ne__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__ne__"]], "__new__() (fipy.variables.gammanoisevariable.gammanoisevariable static method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__or__"]], "__pow__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__pow__"]], "__repr__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__setstate__"]], "__str__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__str__"]], "all() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.all"]], "allclose() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.allclose"]], "any() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.constrain"]], "constraintmask (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.constraintMask"]], "copy() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.copy"]], "dot() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.dot"]], "facegrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceValue"]], "fipy.variables.gammanoisevariable": [[416, "module-fipy.variables.gammaNoiseVariable"]], "gaussgrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.getsctype"]], "globalvalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.globalValue"]], "grad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.mag"]], "max() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.max"]], "min() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.min"]], "minmodfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.minmodFaceValue"]], "old (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.old"]], "rdot() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.rdot"]], "release() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.release"]], "scramble() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.scramble"]], "setvalue() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.setValue"]], "shape (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.shape"]], "std() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.std"]], "unit (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.unit"]], "updateold() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.updateOld"]], "value (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[416, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.value"]], "fipy.variables.gausscellgradvariable": [[417, "module-fipy.variables.gaussCellGradVariable"]], "gaussiannoisevariable (class in fipy.variables.gaussiannoisevariable)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable"]], "__abs__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__abs__"]], "__and__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__and__"]], "__array__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__bool__"]], "__call__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__call__"]], "__eq__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__eq__"]], "__ge__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__gt__"]], "__hash__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__hash__"]], "__invert__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__invert__"]], "__le__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__le__"]], "__lt__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__lt__"]], "__ne__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__ne__"]], "__new__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable static method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__or__"]], "__pow__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__pow__"]], "__repr__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__setstate__"]], "__str__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__str__"]], "all() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.all"]], "allclose() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.allclose"]], "any() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.constrain"]], "constraintmask (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.constraintMask"]], "copy() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.copy"]], "dot() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.dot"]], "facegrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceValue"]], "fipy.variables.gaussiannoisevariable": [[418, "module-fipy.variables.gaussianNoiseVariable"]], "gaussgrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.getsctype"]], "globalvalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.globalValue"]], "grad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.mag"]], "max() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.max"]], "min() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.min"]], "minmodfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.minmodFaceValue"]], "old (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.old"]], "rdot() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.rdot"]], "release() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.release"]], "scramble() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.scramble"]], "setvalue() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.setValue"]], "shape (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.shape"]], "std() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.std"]], "unit (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.unit"]], "updateold() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.updateOld"]], "value (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[418, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.value"]], "fipy.variables.harmoniccelltofacevariable": [[419, "module-fipy.variables.harmonicCellToFaceVariable"]], "histogramvariable (class in fipy.variables.histogramvariable)": [[420, "fipy.variables.histogramVariable.HistogramVariable"]], "__abs__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__abs__"]], "__and__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__and__"]], "__array__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__array__"]], "__array_wrap__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__array_wrap__"]], "__bool__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__bool__"]], "__call__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__call__"]], "__eq__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__eq__"]], "__ge__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__ge__"]], "__getitem__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__getitem__"]], "__getstate__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__getstate__"]], "__gt__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__gt__"]], "__hash__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__hash__"]], "__invert__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__invert__"]], "__le__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__le__"]], "__lt__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__lt__"]], "__ne__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__ne__"]], "__new__() (fipy.variables.histogramvariable.histogramvariable static method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__new__"]], "__nonzero__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__nonzero__"]], "__or__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__or__"]], "__pow__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__pow__"]], "__repr__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__repr__"]], "__setstate__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__setstate__"]], "__str__() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.__str__"]], "all() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.all"]], "allclose() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.allclose"]], "any() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.any"]], "arithmeticfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[420, "fipy.variables.histogramVariable.HistogramVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.histogramvariable.histogramvariable property)": [[420, "fipy.variables.histogramVariable.HistogramVariable.cellVolumeAverage"]], "constrain() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.constrain"]], "constraintmask (fipy.variables.histogramvariable.histogramvariable property)": [[420, "fipy.variables.histogramVariable.HistogramVariable.constraintMask"]], "copy() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.copy"]], "dot() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.dot"]], "facegrad (fipy.variables.histogramvariable.histogramvariable property)": [[420, "fipy.variables.histogramVariable.HistogramVariable.faceGrad"]], "facegradaverage (fipy.variables.histogramvariable.histogramvariable property)": [[420, "fipy.variables.histogramVariable.HistogramVariable.faceGradAverage"]], "facevalue (fipy.variables.histogramvariable.histogramvariable property)": [[420, "fipy.variables.histogramVariable.HistogramVariable.faceValue"]], "fipy.variables.histogramvariable": [[420, "module-fipy.variables.histogramVariable"]], "gaussgrad (fipy.variables.histogramvariable.histogramvariable property)": [[420, "fipy.variables.histogramVariable.HistogramVariable.gaussGrad"]], "getsctype() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.getsctype"]], "globalvalue (fipy.variables.histogramvariable.histogramvariable property)": [[420, "fipy.variables.histogramVariable.HistogramVariable.globalValue"]], "grad (fipy.variables.histogramvariable.histogramvariable property)": [[420, "fipy.variables.histogramVariable.HistogramVariable.grad"]], "harmonicfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[420, "fipy.variables.histogramVariable.HistogramVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.inBaseUnits"]], "inunitsof() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.histogramvariable.histogramvariable property)": [[420, "fipy.variables.histogramVariable.HistogramVariable.leastSquaresGrad"]], "mag (fipy.variables.histogramvariable.histogramvariable property)": [[420, "fipy.variables.histogramVariable.HistogramVariable.mag"]], "max() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.max"]], "min() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.min"]], "minmodfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[420, "fipy.variables.histogramVariable.HistogramVariable.minmodFaceValue"]], "old (fipy.variables.histogramvariable.histogramvariable property)": [[420, "fipy.variables.histogramVariable.HistogramVariable.old"]], "rdot() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.rdot"]], "release() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.release"]], "setvalue() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.setValue"]], "shape (fipy.variables.histogramvariable.histogramvariable property)": [[420, "fipy.variables.histogramVariable.HistogramVariable.shape"]], "std() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.std"]], "unit (fipy.variables.histogramvariable.histogramvariable property)": [[420, "fipy.variables.histogramVariable.HistogramVariable.unit"]], "updateold() (fipy.variables.histogramvariable.histogramvariable method)": [[420, "fipy.variables.histogramVariable.HistogramVariable.updateOld"]], "value (fipy.variables.histogramvariable.histogramvariable property)": [[420, "fipy.variables.histogramVariable.HistogramVariable.value"]], "fipy.variables.interfaceareavariable": [[421, "module-fipy.variables.interfaceAreaVariable"]], "fipy.variables.interfaceflagvariable": [[422, "module-fipy.variables.interfaceFlagVariable"]], "fipy.variables.leastsquarescellgradvariable": [[423, "module-fipy.variables.leastSquaresCellGradVariable"]], "fipy.variables.levelsetdiffusionvariable": [[424, "module-fipy.variables.levelSetDiffusionVariable"]], "meshvariable (class in fipy.variables.meshvariable)": [[425, "fipy.variables.meshVariable.MeshVariable"]], "__abs__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__abs__"]], "__and__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__and__"]], "__array__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__array__"]], "__array_wrap__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__array_wrap__"]], "__bool__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__bool__"]], "__call__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__call__"]], "__eq__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__eq__"]], "__ge__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__ge__"]], "__getitem__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__getitem__"]], "__getstate__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__getstate__"]], "__gt__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__gt__"]], "__hash__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__hash__"]], "__invert__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__invert__"]], "__le__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__le__"]], "__lt__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__lt__"]], "__ne__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__ne__"]], "__new__() (fipy.variables.meshvariable.meshvariable static method)": [[425, "fipy.variables.meshVariable.MeshVariable.__new__"]], "__nonzero__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__nonzero__"]], "__or__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__or__"]], "__pow__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__pow__"]], "__repr__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__repr__"]], "__setstate__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__setstate__"]], "__str__() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.__str__"]], "all() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.all"]], "allclose() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.allclose"]], "any() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.any"]], "constrain() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.constrain"]], "constraintmask (fipy.variables.meshvariable.meshvariable property)": [[425, "fipy.variables.meshVariable.MeshVariable.constraintMask"]], "copy() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.copy"]], "dot() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.dot"]], "fipy.variables.meshvariable": [[425, "module-fipy.variables.meshVariable"]], "getsctype() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.getsctype"]], "inbaseunits() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.inBaseUnits"]], "inunitsof() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.inUnitsOf"]], "mag (fipy.variables.meshvariable.meshvariable property)": [[425, "fipy.variables.meshVariable.MeshVariable.mag"]], "max() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.max"]], "min() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.min"]], "rdot() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.rdot"]], "release() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.release"]], "setvalue() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.setValue"]], "shape (fipy.variables.meshvariable.meshvariable property)": [[425, "fipy.variables.meshVariable.MeshVariable.shape"]], "std() (fipy.variables.meshvariable.meshvariable method)": [[425, "fipy.variables.meshVariable.MeshVariable.std"]], "unit (fipy.variables.meshvariable.meshvariable property)": [[425, "fipy.variables.meshVariable.MeshVariable.unit"]], "value (fipy.variables.meshvariable.meshvariable property)": [[425, "fipy.variables.meshVariable.MeshVariable.value"]], "fipy.variables.minmodcelltofacevariable": [[426, "module-fipy.variables.minmodCellToFaceVariable"]], "fipy.variables.modcellgradvariable": [[427, "module-fipy.variables.modCellGradVariable"]], "fipy.variables.modcelltofacevariable": [[428, "module-fipy.variables.modCellToFaceVariable"]], "fipy.variables.modfacegradvariable": [[429, "module-fipy.variables.modFaceGradVariable"]], "fipy.variables.modphysicalfield": [[430, "module-fipy.variables.modPhysicalField"]], "modularvariable (class in fipy.variables.modularvariable)": [[431, "fipy.variables.modularVariable.ModularVariable"]], "__abs__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__abs__"]], "__and__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__and__"]], "__array__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__array__"]], "__array_wrap__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__array_wrap__"]], "__bool__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__bool__"]], "__call__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__call__"]], "__eq__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__eq__"]], "__ge__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__ge__"]], "__getitem__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__getitem__"]], "__getstate__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__getstate__"]], "__gt__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__gt__"]], "__hash__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__hash__"]], "__invert__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__invert__"]], "__le__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__le__"]], "__lt__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__lt__"]], "__ne__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__ne__"]], "__new__() (fipy.variables.modularvariable.modularvariable static method)": [[431, "fipy.variables.modularVariable.ModularVariable.__new__"]], "__nonzero__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__nonzero__"]], "__or__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__or__"]], "__pow__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__pow__"]], "__repr__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__repr__"]], "__setstate__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__setstate__"]], "__str__() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.__str__"]], "all() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.all"]], "allclose() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.allclose"]], "any() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.any"]], "arithmeticfacevalue (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.cellVolumeAverage"]], "constrain() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.constrain"]], "constraintmask (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.constraintMask"]], "copy() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.copy"]], "dot() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.dot"]], "facegrad (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.faceGrad"]], "facegradaverage (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.faceGradAverage"]], "facegradnomod (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.faceGradNoMod"]], "facevalue (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.faceValue"]], "fipy.variables.modularvariable": [[431, "module-fipy.variables.modularVariable"]], "gaussgrad (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.gaussGrad"]], "getsctype() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.getsctype"]], "globalvalue (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.globalValue"]], "grad (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.grad"]], "harmonicfacevalue (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.inBaseUnits"]], "inunitsof() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.leastSquaresGrad"]], "mag (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.mag"]], "max() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.max"]], "min() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.min"]], "minmodfacevalue (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.minmodFaceValue"]], "old (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.old"]], "rdot() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.rdot"]], "release() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.release"]], "setvalue() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.setValue"]], "shape (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.shape"]], "std() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.std"]], "unit (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.unit"]], "updateold() (fipy.variables.modularvariable.modularvariable method)": [[431, "fipy.variables.modularVariable.ModularVariable.updateOld"]], "value (fipy.variables.modularvariable.modularvariable property)": [[431, "fipy.variables.modularVariable.ModularVariable.value"]], "noisevariable (class in fipy.variables.noisevariable)": [[432, "fipy.variables.noiseVariable.NoiseVariable"]], "__abs__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__abs__"]], "__and__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__and__"]], "__array__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__bool__"]], "__call__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__call__"]], "__eq__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__eq__"]], "__ge__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__ge__"]], "__getitem__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__getstate__"]], "__gt__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__gt__"]], "__hash__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__hash__"]], "__invert__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__invert__"]], "__le__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__le__"]], "__lt__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__lt__"]], "__ne__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__ne__"]], "__new__() (fipy.variables.noisevariable.noisevariable static method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__new__"]], "__nonzero__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__nonzero__"]], "__or__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__or__"]], "__pow__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__pow__"]], "__repr__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__repr__"]], "__setstate__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__setstate__"]], "__str__() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.__str__"]], "all() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.all"]], "allclose() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.allclose"]], "any() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.noisevariable.noisevariable property)": [[432, "fipy.variables.noiseVariable.NoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.noisevariable.noisevariable property)": [[432, "fipy.variables.noiseVariable.NoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.constrain"]], "constraintmask (fipy.variables.noisevariable.noisevariable property)": [[432, "fipy.variables.noiseVariable.NoiseVariable.constraintMask"]], "copy() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.copy"]], "dot() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.dot"]], "facegrad (fipy.variables.noisevariable.noisevariable property)": [[432, "fipy.variables.noiseVariable.NoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.noisevariable.noisevariable property)": [[432, "fipy.variables.noiseVariable.NoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.noisevariable.noisevariable property)": [[432, "fipy.variables.noiseVariable.NoiseVariable.faceValue"]], "fipy.variables.noisevariable": [[432, "module-fipy.variables.noiseVariable"]], "gaussgrad (fipy.variables.noisevariable.noisevariable property)": [[432, "fipy.variables.noiseVariable.NoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.getsctype"]], "globalvalue (fipy.variables.noisevariable.noisevariable property)": [[432, "fipy.variables.noiseVariable.NoiseVariable.globalValue"]], "grad (fipy.variables.noisevariable.noisevariable property)": [[432, "fipy.variables.noiseVariable.NoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.noisevariable.noisevariable property)": [[432, "fipy.variables.noiseVariable.NoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.noisevariable.noisevariable property)": [[432, "fipy.variables.noiseVariable.NoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.noisevariable.noisevariable property)": [[432, "fipy.variables.noiseVariable.NoiseVariable.mag"]], "max() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.max"]], "min() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.min"]], "minmodfacevalue (fipy.variables.noisevariable.noisevariable property)": [[432, "fipy.variables.noiseVariable.NoiseVariable.minmodFaceValue"]], "old (fipy.variables.noisevariable.noisevariable property)": [[432, "fipy.variables.noiseVariable.NoiseVariable.old"]], "rdot() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.rdot"]], "release() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.release"]], "scramble() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.scramble"]], "setvalue() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.setValue"]], "shape (fipy.variables.noisevariable.noisevariable property)": [[432, "fipy.variables.noiseVariable.NoiseVariable.shape"]], "std() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.std"]], "unit (fipy.variables.noisevariable.noisevariable property)": [[432, "fipy.variables.noiseVariable.NoiseVariable.unit"]], "updateold() (fipy.variables.noisevariable.noisevariable method)": [[432, "fipy.variables.noiseVariable.NoiseVariable.updateOld"]], "value (fipy.variables.noisevariable.noisevariable property)": [[432, "fipy.variables.noiseVariable.NoiseVariable.value"]], "fipy.variables.operatorvariable": [[433, "module-fipy.variables.operatorVariable"]], "scharfettergummelfacevariable (class in fipy.variables.scharfettergummelfacevariable)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable"]], "__abs__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__abs__"]], "__and__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__and__"]], "__array__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__array__"]], "__array_wrap__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__array_wrap__"]], "__bool__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__bool__"]], "__call__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__call__"]], "__eq__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__eq__"]], "__ge__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__ge__"]], "__getitem__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__getitem__"]], "__getstate__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__getstate__"]], "__gt__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__gt__"]], "__hash__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__hash__"]], "__invert__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__invert__"]], "__le__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__le__"]], "__lt__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__lt__"]], "__ne__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__ne__"]], "__new__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable static method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__new__"]], "__nonzero__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__nonzero__"]], "__or__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__or__"]], "__pow__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__pow__"]], "__repr__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__repr__"]], "__setstate__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__setstate__"]], "__str__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__str__"]], "all() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.all"]], "allclose() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.allclose"]], "any() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.any"]], "constrain() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.constrain"]], "constraintmask (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.constraintMask"]], "copy() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.copy"]], "divergence (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.divergence"]], "dot() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.dot"]], "fipy.variables.scharfettergummelfacevariable": [[434, "module-fipy.variables.scharfetterGummelFaceVariable"]], "getsctype() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.getsctype"]], "inbaseunits() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.inUnitsOf"]], "mag (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.mag"]], "max() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.max"]], "min() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.min"]], "rdot() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.rdot"]], "release() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.release"]], "setvalue() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.setValue"]], "shape (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.shape"]], "std() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.std"]], "unit (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.unit"]], "value (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[434, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.value"]], "surfactantconvectionvariable (class in fipy.variables.surfactantconvectionvariable)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable"]], "__abs__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__abs__"]], "__and__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__and__"]], "__array__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__array__"]], "__array_wrap__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__array_wrap__"]], "__bool__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__bool__"]], "__call__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__call__"]], "__eq__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__eq__"]], "__ge__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__ge__"]], "__getitem__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__getitem__"]], "__getstate__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__getstate__"]], "__gt__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__gt__"]], "__hash__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__hash__"]], "__invert__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__invert__"]], "__le__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__le__"]], "__lt__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__lt__"]], "__ne__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__ne__"]], "__new__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable static method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__new__"]], "__nonzero__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__nonzero__"]], "__or__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__or__"]], "__pow__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__pow__"]], "__repr__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__repr__"]], "__setstate__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__setstate__"]], "__str__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__str__"]], "all() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.all"]], "allclose() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.allclose"]], "any() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.any"]], "constrain() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.constrain"]], "constraintmask (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.constraintMask"]], "copy() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.copy"]], "divergence (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.divergence"]], "dot() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.dot"]], "fipy.variables.surfactantconvectionvariable": [[435, "module-fipy.variables.surfactantConvectionVariable"]], "getsctype() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.getsctype"]], "inbaseunits() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.inBaseUnits"]], "inunitsof() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.inUnitsOf"]], "mag (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.mag"]], "max() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.max"]], "min() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.min"]], "rdot() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.rdot"]], "release() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.release"]], "setvalue() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.setValue"]], "shape (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.shape"]], "std() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.std"]], "unit (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.unit"]], "value (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[435, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.value"]], "surfactantvariable (class in fipy.variables.surfactantvariable)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable"]], "__abs__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__abs__"]], "__and__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__and__"]], "__array__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__array__"]], "__array_wrap__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__array_wrap__"]], "__bool__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__bool__"]], "__call__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__call__"]], "__eq__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__eq__"]], "__ge__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__ge__"]], "__getitem__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__getitem__"]], "__getstate__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__getstate__"]], "__gt__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__gt__"]], "__hash__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__hash__"]], "__invert__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__invert__"]], "__le__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__le__"]], "__lt__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__lt__"]], "__ne__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__ne__"]], "__new__() (fipy.variables.surfactantvariable.surfactantvariable static method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__new__"]], "__nonzero__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__nonzero__"]], "__or__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__or__"]], "__pow__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__pow__"]], "__repr__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__repr__"]], "__setstate__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__setstate__"]], "__str__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.__str__"]], "all() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.all"]], "allclose() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.allclose"]], "any() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.any"]], "arithmeticfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.cellVolumeAverage"]], "constrain() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.constrain"]], "constraintmask (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.constraintMask"]], "copy() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.copy"]], "dot() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.dot"]], "facegrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.faceGrad"]], "facegradaverage (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.faceGradAverage"]], "facevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.faceValue"]], "fipy.variables.surfactantvariable": [[436, "module-fipy.variables.surfactantVariable"]], "gaussgrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.gaussGrad"]], "getsctype() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.getsctype"]], "globalvalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.globalValue"]], "grad (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.grad"]], "harmonicfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.inBaseUnits"]], "inunitsof() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.inUnitsOf"]], "interfacevar (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.interfaceVar"]], "leastsquaresgrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.leastSquaresGrad"]], "mag (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.mag"]], "max() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.max"]], "min() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.min"]], "minmodfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.minmodFaceValue"]], "old (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.old"]], "rdot() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.rdot"]], "release() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.release"]], "setvalue() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.setValue"]], "shape (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.shape"]], "std() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.std"]], "unit (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.unit"]], "updateold() (fipy.variables.surfactantvariable.surfactantvariable method)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.updateOld"]], "value (fipy.variables.surfactantvariable.surfactantvariable property)": [[436, "fipy.variables.surfactantVariable.SurfactantVariable.value"]], "fipy.variables.test": [[437, "module-fipy.variables.test"]], "fipy.variables.unaryoperatorvariable": [[438, "module-fipy.variables.unaryOperatorVariable"]], "uniformnoisevariable (class in fipy.variables.uniformnoisevariable)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable"]], "__abs__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__abs__"]], "__and__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__and__"]], "__array__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__bool__"]], "__call__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__call__"]], "__eq__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__eq__"]], "__ge__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__gt__"]], "__hash__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__hash__"]], "__invert__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__invert__"]], "__le__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__le__"]], "__lt__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__lt__"]], "__ne__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__ne__"]], "__new__() (fipy.variables.uniformnoisevariable.uniformnoisevariable static method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__or__"]], "__pow__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__pow__"]], "__repr__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__setstate__"]], "__str__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__str__"]], "all() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.all"]], "allclose() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.allclose"]], "any() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.constrain"]], "constraintmask (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.constraintMask"]], "copy() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.copy"]], "dot() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.dot"]], "facegrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceValue"]], "fipy.variables.uniformnoisevariable": [[439, "module-fipy.variables.uniformNoiseVariable"]], "gaussgrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.getsctype"]], "globalvalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.globalValue"]], "grad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.mag"]], "max() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.max"]], "min() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.min"]], "minmodfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.minmodFaceValue"]], "old (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.old"]], "rdot() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.rdot"]], "release() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.release"]], "scramble() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.scramble"]], "setvalue() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.setValue"]], "shape (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.shape"]], "std() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.std"]], "unit (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.unit"]], "updateold() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.updateOld"]], "value (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[439, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.value"]], "variable (class in fipy.variables.variable)": [[440, "fipy.variables.variable.Variable"]], "__abs__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__abs__"]], "__and__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__and__"]], "__array__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__array__"]], "__array_wrap__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__array_wrap__"]], "__bool__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__bool__"]], "__call__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__call__"]], "__eq__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__eq__"]], "__ge__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__ge__"]], "__getitem__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__getitem__"]], "__getstate__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__getstate__"]], "__gt__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__gt__"]], "__hash__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__hash__"]], "__invert__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__invert__"]], "__le__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__le__"]], "__lt__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__lt__"]], "__ne__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__ne__"]], "__new__() (fipy.variables.variable.variable static method)": [[440, "fipy.variables.variable.Variable.__new__"]], "__nonzero__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__nonzero__"]], "__or__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__or__"]], "__pow__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__pow__"]], "__repr__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__repr__"]], "__setstate__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__setstate__"]], "__str__() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.__str__"]], "all() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.all"]], "allclose() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.allclose"]], "any() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.any"]], "constrain() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.constrain"]], "copy() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.copy"]], "fipy.variables.variable": [[440, "module-fipy.variables.variable"]], "getsctype() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.getsctype"]], "inbaseunits() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.inBaseUnits"]], "inunitsof() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.inUnitsOf"]], "mag (fipy.variables.variable.variable property)": [[440, "fipy.variables.variable.Variable.mag"]], "max() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.max"]], "min() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.min"]], "release() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.release"]], "setvalue() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.setValue"]], "shape (fipy.variables.variable.variable property)": [[440, "fipy.variables.variable.Variable.shape"]], "std() (fipy.variables.variable.variable method)": [[440, "fipy.variables.variable.Variable.std"]], "unit (fipy.variables.variable.variable property)": [[440, "fipy.variables.variable.Variable.unit"]], "value (fipy.variables.variable.variable property)": [[440, "fipy.variables.variable.Variable.value"]], "dummyviewer (class in fipy.viewers)": [[441, "fipy.viewers.DummyViewer"]], "meshdimensionerror": [[441, "fipy.viewers.MeshDimensionError"]], "viewer() (in module fipy.viewers)": [[441, "fipy.viewers.Viewer"]], "__cause__ (fipy.viewers.meshdimensionerror attribute)": [[441, "fipy.viewers.MeshDimensionError.__cause__"]], "__context__ (fipy.viewers.meshdimensionerror attribute)": [[441, "fipy.viewers.MeshDimensionError.__context__"]], "__delattr__() (fipy.viewers.meshdimensionerror method)": [[441, "fipy.viewers.MeshDimensionError.__delattr__"]], "__getattribute__() (fipy.viewers.meshdimensionerror method)": [[441, "fipy.viewers.MeshDimensionError.__getattribute__"]], "__reduce__() (fipy.viewers.meshdimensionerror method)": [[441, "fipy.viewers.MeshDimensionError.__reduce__"]], "__repr__() (fipy.viewers.meshdimensionerror method)": [[441, "fipy.viewers.MeshDimensionError.__repr__"]], "__setattr__() (fipy.viewers.meshdimensionerror method)": [[441, "fipy.viewers.MeshDimensionError.__setattr__"]], "__str__() (fipy.viewers.meshdimensionerror method)": [[441, "fipy.viewers.MeshDimensionError.__str__"]], "add_note() (fipy.viewers.meshdimensionerror method)": [[441, "fipy.viewers.MeshDimensionError.add_note"]], "plot() (fipy.viewers.dummyviewer method)": [[441, "fipy.viewers.DummyViewer.plot"]], "plotmesh() (fipy.viewers.dummyviewer method)": [[441, "fipy.viewers.DummyViewer.plotMesh"]], "setlimits() (fipy.viewers.dummyviewer method)": [[441, "fipy.viewers.DummyViewer.setLimits"]], "title (fipy.viewers.dummyviewer property)": [[441, "fipy.viewers.DummyViewer.title"]], "vars (fipy.viewers.dummyviewer property)": [[441, "fipy.viewers.DummyViewer.vars"]], "with_traceback() (fipy.viewers.meshdimensionerror method)": [[441, "fipy.viewers.MeshDimensionError.with_traceback"]], "matplotlibviewer() (in module fipy.viewers.matplotlibviewer)": [[442, "fipy.viewers.matplotlibViewer.MatplotlibViewer"]], "fipy.viewers.matplotlibviewer": [[442, "module-fipy.viewers.matplotlibViewer"]], "abstractmatplotlib2dviewer (class in fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer)": [[443, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer"]], "axes (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[443, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[443, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[443, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[443, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.fig"]], "fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer": [[443, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"]], "id (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[443, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.id"]], "log (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[443, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[443, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[443, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[443, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[443, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[443, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.vars"]], "abstractmatplotlibviewer (class in fipy.viewers.matplotlibviewer.abstractmatplotlibviewer)": [[444, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer"]], "axes (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[444, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[444, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[444, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[444, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.fig"]], "fipy.viewers.matplotlibviewer.abstractmatplotlibviewer": [[444, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"]], "id (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[444, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.id"]], "log (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[444, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[444, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[444, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[444, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[444, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.title"]], "vars (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[444, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.vars"]], "matplotlib1dviewer (class in fipy.viewers.matplotlibviewer.matplotlib1dviewer)": [[445, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[445, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[445, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[445, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[445, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib1dviewer": [[445, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[445, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.id"]], "lines (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[445, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.lines"]], "log (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[445, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[445, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[445, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[445, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[445, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[445, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.vars"]], "matplotlib2dcontourviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer": [[446, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.id"]], "levels (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.levels"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.vars"]], "matplotlib2dgridcontourviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer)": [[447, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[447, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[447, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[447, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[447, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer": [[447, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[447, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.id"]], "levels (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[447, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.levels"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[447, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[447, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[447, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[447, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[447, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[447, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.vars"]], "matplotlib2dgridviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dgridviewer)": [[448, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dgridviewer": [[448, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[448, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[448, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[448, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[448, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.vars"]], "matplotlib2dviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dviewer)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.cmap"]], "collection (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.collection"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dviewer": [[449, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[449, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.vars"]], "matplotlibsparsematrixviewer (class in fipy.viewers.matplotlibviewer.matplotlibsparsematrixviewer)": [[450, "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer.MatplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibviewer.matplotlibsparsematrixviewer": [[450, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"]], "matplotlibstreamviewer (class in fipy.viewers.matplotlibviewer.matplotlibstreamviewer)": [[451, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[451, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[451, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[451, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[451, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlibstreamviewer": [[451, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[451, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.id"]], "kwargs (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[451, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.kwargs"]], "log (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[451, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[451, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[451, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[451, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[451, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[451, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.vars"]], "matplotlibvectorviewer (class in fipy.viewers.matplotlibviewer.matplotlibvectorviewer)": [[452, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[452, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[452, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[452, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[452, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlibvectorviewer": [[452, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[452, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[452, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[452, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[452, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[452, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[452, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[452, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.vars"]], "fipy.viewers.matplotlibviewer.test": [[453, "module-fipy.viewers.matplotlibViewer.test"]], "mayaviclient (class in fipy.viewers.mayaviviewer)": [[454, "fipy.viewers.mayaviViewer.MayaviClient"]], "fipy.viewers.mayaviviewer": [[454, "module-fipy.viewers.mayaviViewer"]], "fps (fipy.viewers.mayaviviewer.mayaviclient property)": [[454, "fipy.viewers.mayaviViewer.MayaviClient.fps"]], "plot() (fipy.viewers.mayaviviewer.mayaviclient method)": [[454, "fipy.viewers.mayaviViewer.MayaviClient.plot"]], "plotmesh() (fipy.viewers.mayaviviewer.mayaviclient method)": [[454, "fipy.viewers.mayaviViewer.MayaviClient.plotMesh"]], "setlimits() (fipy.viewers.mayaviviewer.mayaviclient method)": [[454, "fipy.viewers.mayaviViewer.MayaviClient.setLimits"]], "title (fipy.viewers.mayaviviewer.mayaviclient property)": [[454, "fipy.viewers.mayaviViewer.MayaviClient.title"]], "vars (fipy.viewers.mayaviviewer.mayaviclient property)": [[454, "fipy.viewers.mayaviViewer.MayaviClient.vars"]], "mayaviclient (class in fipy.viewers.mayaviviewer.mayaviclient)": [[455, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient"]], "fipy.viewers.mayaviviewer.mayaviclient": [[455, "module-fipy.viewers.mayaviViewer.mayaviClient"]], "fps (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[455, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.fps"]], "plot() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[455, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.plot"]], "plotmesh() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[455, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.plotMesh"]], "setlimits() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[455, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.setLimits"]], "title (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[455, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.title"]], "vars (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[455, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.vars"]], "mayavidaemon (class in fipy.viewers.mayaviviewer.mayavidaemon)": [[456, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon"]], "fipy.viewers.mayaviviewer.mayavidaemon": [[456, "module-fipy.viewers.mayaviViewer.mayaviDaemon"]], "main() (in module fipy.viewers.mayaviviewer.mayavidaemon)": [[456, "fipy.viewers.mayaviViewer.mayaviDaemon.main"]], "parse_command_line() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[456, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.parse_command_line"]], "setup_source() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[456, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.setup_source"]], "update_pipeline() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[456, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.update_pipeline"]], "view_data() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[456, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.view_data"]], "fipy.viewers.mayaviviewer.test": [[457, "module-fipy.viewers.mayaviViewer.test"]], "multiviewer (class in fipy.viewers.multiviewer)": [[458, "fipy.viewers.multiViewer.MultiViewer"]], "fipy.viewers.multiviewer": [[458, "module-fipy.viewers.multiViewer"]], "plot() (fipy.viewers.multiviewer.multiviewer method)": [[458, "fipy.viewers.multiViewer.MultiViewer.plot"]], "plotmesh() (fipy.viewers.multiviewer.multiviewer method)": [[458, "fipy.viewers.multiViewer.MultiViewer.plotMesh"]], "setlimits() (fipy.viewers.multiviewer.multiviewer method)": [[458, "fipy.viewers.multiViewer.MultiViewer.setLimits"]], "title (fipy.viewers.multiviewer.multiviewer property)": [[458, "fipy.viewers.multiViewer.MultiViewer.title"]], "vars (fipy.viewers.multiviewer.multiviewer property)": [[458, "fipy.viewers.multiViewer.MultiViewer.vars"]], "fipy.viewers.test": [[459, "module-fipy.viewers.test"]], "fipy.viewers.testinteractive": [[460, "module-fipy.viewers.testinteractive"]], "tsvviewer (class in fipy.viewers.tsvviewer)": [[461, "fipy.viewers.tsvViewer.TSVViewer"]], "fipy.viewers.tsvviewer": [[461, "module-fipy.viewers.tsvViewer"]], "plot() (fipy.viewers.tsvviewer.tsvviewer method)": [[461, "fipy.viewers.tsvViewer.TSVViewer.plot"]], "plotmesh() (fipy.viewers.tsvviewer.tsvviewer method)": [[461, "fipy.viewers.tsvViewer.TSVViewer.plotMesh"]], "setlimits() (fipy.viewers.tsvviewer.tsvviewer method)": [[461, "fipy.viewers.tsvViewer.TSVViewer.setLimits"]], "title (fipy.viewers.tsvviewer.tsvviewer property)": [[461, "fipy.viewers.tsvViewer.TSVViewer.title"]], "vars (fipy.viewers.tsvviewer.tsvviewer property)": [[461, "fipy.viewers.tsvViewer.TSVViewer.vars"]], "abstractviewer (class in fipy.viewers.viewer)": [[462, "fipy.viewers.viewer.AbstractViewer"]], "fipy.viewers.viewer": [[462, "module-fipy.viewers.viewer"]], "plot() (fipy.viewers.viewer.abstractviewer method)": [[462, "fipy.viewers.viewer.AbstractViewer.plot"]], "plotmesh() (fipy.viewers.viewer.abstractviewer method)": [[462, "fipy.viewers.viewer.AbstractViewer.plotMesh"]], "setlimits() (fipy.viewers.viewer.abstractviewer method)": [[462, "fipy.viewers.viewer.AbstractViewer.setLimits"]], "title (fipy.viewers.viewer.abstractviewer property)": [[462, "fipy.viewers.viewer.AbstractViewer.title"]], "vars (fipy.viewers.viewer.abstractviewer property)": [[462, "fipy.viewers.viewer.AbstractViewer.vars"]], "vtkcellviewer (class in fipy.viewers.vtkviewer)": [[463, "fipy.viewers.vtkViewer.VTKCellViewer"]], "vtkfaceviewer (class in fipy.viewers.vtkviewer)": [[463, "fipy.viewers.vtkViewer.VTKFaceViewer"]], "vtkviewer() (in module fipy.viewers.vtkviewer)": [[463, "fipy.viewers.vtkViewer.VTKViewer"]], "fipy.viewers.vtkviewer": [[463, "module-fipy.viewers.vtkViewer"]], "plot() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[463, "fipy.viewers.vtkViewer.VTKCellViewer.plot"]], "plot() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[463, "fipy.viewers.vtkViewer.VTKFaceViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[463, "fipy.viewers.vtkViewer.VTKCellViewer.plotMesh"]], "plotmesh() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[463, "fipy.viewers.vtkViewer.VTKFaceViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[463, "fipy.viewers.vtkViewer.VTKCellViewer.setLimits"]], "setlimits() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[463, "fipy.viewers.vtkViewer.VTKFaceViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkcellviewer property)": [[463, "fipy.viewers.vtkViewer.VTKCellViewer.title"]], "title (fipy.viewers.vtkviewer.vtkfaceviewer property)": [[463, "fipy.viewers.vtkViewer.VTKFaceViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkcellviewer property)": [[463, "fipy.viewers.vtkViewer.VTKCellViewer.vars"]], "vars (fipy.viewers.vtkviewer.vtkfaceviewer property)": [[463, "fipy.viewers.vtkViewer.VTKFaceViewer.vars"]], "fipy.viewers.vtkviewer.test": [[464, "module-fipy.viewers.vtkViewer.test"]], "vtkcellviewer (class in fipy.viewers.vtkviewer.vtkcellviewer)": [[465, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer"]], "fipy.viewers.vtkviewer.vtkcellviewer": [[465, "module-fipy.viewers.vtkViewer.vtkCellViewer"]], "plot() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[465, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[465, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[465, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer property)": [[465, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer property)": [[465, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.vars"]], "vtkfaceviewer (class in fipy.viewers.vtkviewer.vtkfaceviewer)": [[466, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer"]], "fipy.viewers.vtkviewer.vtkfaceviewer": [[466, "module-fipy.viewers.vtkViewer.vtkFaceViewer"]], "plot() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[466, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[466, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[466, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer property)": [[466, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer property)": [[466, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.vars"]], "vtkviewer (class in fipy.viewers.vtkviewer.vtkviewer)": [[467, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer"]], "fipy.viewers.vtkviewer.vtkviewer": [[467, "module-fipy.viewers.vtkViewer.vtkViewer"]], "plot() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[467, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[467, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[467, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkviewer.vtkviewer property)": [[467, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkviewer.vtkviewer property)": [[467, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.vars"]], "appveyor": [[468, "term-AppVeyor"]], "azure": [[468, "term-Azure"]], "buildbot": [[468, "term-Buildbot"]], "circleci": [[468, "term-CircleCI"]], "continuous integration": [[468, "term-Continuous-Integration"]], "github actions": [[468, "term-GitHub-Actions"]], "ipython": [[468, "term-IPython"]], "json": [[468, "term-JSON"]], "mpi": [[468, "term-MPI"]], "matplotlib": [[468, "term-Matplotlib"]], "mayavi": [[468, "term-MayaVi"], [468, "term-Mayavi"]], "numpy": [[468, "term-NumPy"]], "numeric": [[468, "term-Numeric"]], "openmp": [[468, "term-OpenMP"]], "pep 3000": [[468, "index-0"]], "petsc": [[468, "term-PETSc"]], "pyamg": [[468, "term-PyAMG"]], "pypi": [[468, "term-PyPI"]], "pytrilinos": [[468, "term-PyTrilinos"]], "pyrex": [[468, "term-Pyrex"]], "pysparse": [[468, "term-Pysparse"]], "python": [[468, "term-Python"]], "python 3": [[468, "term-Python-3"]], "pyxviewer": [[468, "term-PyxViewer"]], "scientificpython": [[468, "term-ScientificPython"]], "sphinx": [[468, "term-Sphinx"]], "travisci": [[468, "term-TravisCI"]], "trilinos": [[468, "term-Trilinos"]], "weave": [[468, "term-Weave"]], "windows": [[468, "term-Windows"]], "conda": [[468, "term-conda"]], "linux": [[468, "term-linux"]], "macos": [[468, "term-macOS"]], "mpi4py": [[468, "term-mpi4py"]], "numarray": [[468, "term-numarray"]], "pandas": [[468, "term-pandas"]], "petsc4py": [[468, "term-petsc4py"]], "pip": [[468, "term-pip"]], "pyamgx": [[468, "term-pyamgx"]], "package": [[476, "module-package"]], "package.subpackage": [[477, "module-package.subpackage"]], "base (class in package.subpackage.base)": [[478, "package.subpackage.base.Base"]], "method1() (package.subpackage.base.base method)": [[478, "package.subpackage.base.Base.method1"]], "method2() (package.subpackage.base.base method)": [[478, "package.subpackage.base.Base.method2"]], "package.subpackage.base": [[478, "module-package.subpackage.base"]], "object (class in package.subpackage.object)": [[479, "package.subpackage.object.Object"]], "method1() (package.subpackage.object.object method)": [[479, "package.subpackage.object.Object.method1"]], "method2() (package.subpackage.object.object method)": [[479, "package.subpackage.object.Object.method2"]], "package.subpackage.object": [[479, "module-package.subpackage.object"]]}})