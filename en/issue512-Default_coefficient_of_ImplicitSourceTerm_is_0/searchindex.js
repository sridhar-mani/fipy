Search.setIndex({"docnames": ["ADMINISTRATA", "API", "CHANGELOG", "CONTACT", "CREDITS", "DISCLAIMER", "EFFICIENCY", "EXAMPLES", "FAQ", "GIT", "GUIDELINES", "INSTALLATION", "LICENSE", "NIX-README", "PUBLICATIONS", "README", "SOLVERS", "USAGE", "VIEWERS", "VKML", "contents", "design", "external_definitions", "generated/examples", "generated/examples.benchmarking", "generated/examples.benchmarking.benchmarker", "generated/examples.benchmarking.size", "generated/examples.benchmarking.steps", "generated/examples.benchmarking.utils", "generated/examples.benchmarking.versions", "generated/examples.cahnHilliard", "generated/examples.cahnHilliard.mesh2D", "generated/examples.cahnHilliard.mesh2DCoupled", "generated/examples.cahnHilliard.mesh3D", "generated/examples.cahnHilliard.sphere", "generated/examples.cahnHilliard.sphereDaemon", "generated/examples.cahnHilliard.tanh1D", "generated/examples.cahnHilliard.test", "generated/examples.chemotaxis", "generated/examples.chemotaxis.input", "generated/examples.chemotaxis.input2D", "generated/examples.chemotaxis.parameters", "generated/examples.chemotaxis.test", "generated/examples.convection", "generated/examples.convection.advection", "generated/examples.convection.advection.explicitUpwind", "generated/examples.convection.advection.implicitUpwind", "generated/examples.convection.advection.vanLeerUpwind", "generated/examples.convection.exponential1D", "generated/examples.convection.exponential1D.cylindricalMesh1D", "generated/examples.convection.exponential1D.cylindricalMesh1DNonUniform", "generated/examples.convection.exponential1D.mesh1D", "generated/examples.convection.exponential1D.tri2D", "generated/examples.convection.exponential1DBack", "generated/examples.convection.exponential1DBack.mesh1D", "generated/examples.convection.exponential1DSource", "generated/examples.convection.exponential1DSource.mesh1D", "generated/examples.convection.exponential1DSource.tri2D", "generated/examples.convection.exponential2D", "generated/examples.convection.exponential2D.cylindricalMesh2D", "generated/examples.convection.exponential2D.cylindricalMesh2DNonUniform", "generated/examples.convection.exponential2D.mesh2D", "generated/examples.convection.exponential2D.tri2D", "generated/examples.convection.peclet", "generated/examples.convection.powerLaw1D", "generated/examples.convection.powerLaw1D.mesh1D", "generated/examples.convection.powerLaw1D.tri2D", "generated/examples.convection.robin", "generated/examples.convection.source", "generated/examples.convection.test", "generated/examples.diffusion", "generated/examples.diffusion.anisotropy", "generated/examples.diffusion.circle", "generated/examples.diffusion.circleQuad", "generated/examples.diffusion.coupled", "generated/examples.diffusion.electrostatics", "generated/examples.diffusion.explicit", "generated/examples.diffusion.explicit.mesh1D", "generated/examples.diffusion.explicit.mixedelement", "generated/examples.diffusion.explicit.test", "generated/examples.diffusion.explicit.tri2D", "generated/examples.diffusion.mesh1D", "generated/examples.diffusion.mesh20x20", "generated/examples.diffusion.mesh20x20Coupled", "generated/examples.diffusion.nthOrder", "generated/examples.diffusion.nthOrder.input4thOrder1D", "generated/examples.diffusion.nthOrder.input4thOrder_line", "generated/examples.diffusion.nthOrder.test", "generated/examples.diffusion.steadyState", "generated/examples.diffusion.steadyState.mesh1D", "generated/examples.diffusion.steadyState.mesh1D.inputPeriodic", "generated/examples.diffusion.steadyState.mesh1D.tri2Dinput", "generated/examples.diffusion.steadyState.mesh20x20", "generated/examples.diffusion.steadyState.mesh20x20.gmshinput", "generated/examples.diffusion.steadyState.mesh20x20.isotropy", "generated/examples.diffusion.steadyState.mesh20x20.modifiedMeshInput", "generated/examples.diffusion.steadyState.mesh20x20.orthoerror", "generated/examples.diffusion.steadyState.mesh20x20.tri2Dinput", "generated/examples.diffusion.steadyState.mesh50x50", "generated/examples.diffusion.steadyState.mesh50x50.input", "generated/examples.diffusion.steadyState.mesh50x50.tri2Dinput", "generated/examples.diffusion.steadyState.otherMeshes", "generated/examples.diffusion.steadyState.otherMeshes.cubicalProblem", "generated/examples.diffusion.steadyState.otherMeshes.grid3Dinput", "generated/examples.diffusion.steadyState.otherMeshes.prism", "generated/examples.diffusion.steadyState.test", "generated/examples.diffusion.test", "generated/examples.diffusion.variable", "generated/examples.elphf", "generated/examples.elphf.diffusion", "generated/examples.elphf.diffusion.mesh1D", "generated/examples.elphf.diffusion.mesh1Ddimensional", "generated/examples.elphf.diffusion.mesh2D", "generated/examples.elphf.input", "generated/examples.elphf.phase", "generated/examples.elphf.phaseDiffusion", "generated/examples.elphf.poisson", "generated/examples.elphf.test", "generated/examples.flow", "generated/examples.flow.stokesCavity", "generated/examples.flow.test", "generated/examples.levelSet", "generated/examples.levelSet.advection", "generated/examples.levelSet.advection.circle", "generated/examples.levelSet.advection.mesh1D", "generated/examples.levelSet.advection.test", "generated/examples.levelSet.advection.trench", "generated/examples.levelSet.distanceFunction", "generated/examples.levelSet.distanceFunction.circle", "generated/examples.levelSet.distanceFunction.interior", "generated/examples.levelSet.distanceFunction.mesh1D", "generated/examples.levelSet.distanceFunction.square", "generated/examples.levelSet.distanceFunction.test", "generated/examples.levelSet.electroChem", "generated/examples.levelSet.electroChem.adsorbingSurfactantEquation", "generated/examples.levelSet.electroChem.gapFillDistanceVariable", "generated/examples.levelSet.electroChem.gapFillMesh", "generated/examples.levelSet.electroChem.gold", "generated/examples.levelSet.electroChem.howToWriteAScript", "generated/examples.levelSet.electroChem.leveler", "generated/examples.levelSet.electroChem.lines", "generated/examples.levelSet.electroChem.matplotlibSurfactantViewer", "generated/examples.levelSet.electroChem.mayaviSurfactantViewer", "generated/examples.levelSet.electroChem.metalIonDiffusionEquation", "generated/examples.levelSet.electroChem.simpleTrenchSystem", "generated/examples.levelSet.electroChem.surfactantBulkDiffusionEquation", "generated/examples.levelSet.electroChem.test", "generated/examples.levelSet.electroChem.trenchMesh", "generated/examples.levelSet.surfactant", "generated/examples.levelSet.surfactant.circle", "generated/examples.levelSet.surfactant.expandingCircle", "generated/examples.levelSet.surfactant.square", "generated/examples.levelSet.surfactant.test", "generated/examples.levelSet.test", "generated/examples.meshing", "generated/examples.meshing.gmshRefinement", "generated/examples.meshing.inputGrid2D", "generated/examples.meshing.sphere", "generated/examples.meshing.test", "generated/examples.parallel", "generated/examples.phase", "generated/examples.phase.anisotropy", "generated/examples.phase.anisotropyOLD", "generated/examples.phase.binary", "generated/examples.phase.binaryCoupled", "generated/examples.phase.impingement", "generated/examples.phase.impingement.mesh20x20", "generated/examples.phase.impingement.mesh40x1", "generated/examples.phase.impingement.test", "generated/examples.phase.missOrientation", "generated/examples.phase.missOrientation.test", "generated/examples.phase.polyxtal", "generated/examples.phase.polyxtalCoupled", "generated/examples.phase.quaternary", "generated/examples.phase.simple", "generated/examples.phase.symmetry", "generated/examples.phase.test", "generated/examples.reactiveWetting", "generated/examples.reactiveWetting.liquidVapor1D", "generated/examples.reactiveWetting.liquidVapor2D", "generated/examples.reactiveWetting.test", "generated/examples.riemann", "generated/examples.riemann.acoustics", "generated/examples.riemann.test", "generated/examples.test", "generated/examples.updating", "generated/examples.updating.update0_1to1_0", "generated/examples.updating.update1_0to2_0", "generated/examples.updating.update2_0to3_0", "generated/fipy", "generated/fipy.boundaryConditions", "generated/fipy.boundaryConditions.boundaryCondition", "generated/fipy.boundaryConditions.constraint", "generated/fipy.boundaryConditions.fixedFlux", "generated/fipy.boundaryConditions.fixedValue", "generated/fipy.boundaryConditions.nthOrderBoundaryCondition", "generated/fipy.boundaryConditions.test", "generated/fipy.matrices", "generated/fipy.matrices.offsetSparseMatrix", "generated/fipy.matrices.petscMatrix", "generated/fipy.matrices.pysparseMatrix", "generated/fipy.matrices.scipyMatrix", "generated/fipy.matrices.sparseMatrix", "generated/fipy.matrices.test", "generated/fipy.matrices.trilinosMatrix", "generated/fipy.meshes", "generated/fipy.meshes.abstractMesh", "generated/fipy.meshes.builders", "generated/fipy.meshes.builders.abstractGridBuilder", "generated/fipy.meshes.builders.grid1DBuilder", "generated/fipy.meshes.builders.grid2DBuilder", "generated/fipy.meshes.builders.grid3DBuilder", "generated/fipy.meshes.builders.periodicGrid1DBuilder", "generated/fipy.meshes.builders.utilityClasses", "generated/fipy.meshes.cylindricalGrid1D", "generated/fipy.meshes.cylindricalGrid2D", "generated/fipy.meshes.cylindricalNonUniformGrid1D", "generated/fipy.meshes.cylindricalNonUniformGrid2D", "generated/fipy.meshes.cylindricalUniformGrid1D", "generated/fipy.meshes.cylindricalUniformGrid2D", "generated/fipy.meshes.factoryMeshes", "generated/fipy.meshes.gmshMesh", "generated/fipy.meshes.grid1D", "generated/fipy.meshes.grid2D", "generated/fipy.meshes.grid3D", "generated/fipy.meshes.mesh", "generated/fipy.meshes.mesh1D", "generated/fipy.meshes.mesh2D", "generated/fipy.meshes.nonUniformGrid1D", "generated/fipy.meshes.nonUniformGrid2D", "generated/fipy.meshes.nonUniformGrid3D", "generated/fipy.meshes.periodicGrid1D", "generated/fipy.meshes.periodicGrid2D", "generated/fipy.meshes.periodicGrid3D", "generated/fipy.meshes.representations", "generated/fipy.meshes.representations.abstractRepresentation", "generated/fipy.meshes.representations.gridRepresentation", "generated/fipy.meshes.representations.meshRepresentation", "generated/fipy.meshes.skewedGrid2D", "generated/fipy.meshes.sphericalNonUniformGrid1D", "generated/fipy.meshes.sphericalUniformGrid1D", "generated/fipy.meshes.test", "generated/fipy.meshes.topologies", "generated/fipy.meshes.topologies.abstractTopology", "generated/fipy.meshes.topologies.gridTopology", "generated/fipy.meshes.topologies.meshTopology", "generated/fipy.meshes.tri2D", "generated/fipy.meshes.uniformGrid", "generated/fipy.meshes.uniformGrid1D", "generated/fipy.meshes.uniformGrid2D", "generated/fipy.meshes.uniformGrid3D", "generated/fipy.solvers", "generated/fipy.solvers.petsc", "generated/fipy.solvers.petsc.comms", "generated/fipy.solvers.petsc.comms.parallelPETScCommWrapper", "generated/fipy.solvers.petsc.comms.petscCommWrapper", "generated/fipy.solvers.petsc.comms.serialPETScCommWrapper", "generated/fipy.solvers.petsc.dummySolver", "generated/fipy.solvers.petsc.linearBicgSolver", "generated/fipy.solvers.petsc.linearCGSSolver", "generated/fipy.solvers.petsc.linearGMRESSolver", "generated/fipy.solvers.petsc.linearLUSolver", "generated/fipy.solvers.petsc.linearPCGSolver", "generated/fipy.solvers.petsc.petscKrylovSolver", "generated/fipy.solvers.petsc.petscSolver", "generated/fipy.solvers.pyAMG", "generated/fipy.solvers.pyAMG.linearCGSSolver", "generated/fipy.solvers.pyAMG.linearGMRESSolver", "generated/fipy.solvers.pyAMG.linearGeneralSolver", "generated/fipy.solvers.pyAMG.linearLUSolver", "generated/fipy.solvers.pyAMG.linearPCGSolver", "generated/fipy.solvers.pyAMG.preconditioners", "generated/fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner", "generated/fipy.solvers.pyamgx", "generated/fipy.solvers.pyamgx.aggregationAMGSolver", "generated/fipy.solvers.pyamgx.classicalAMGSolver", "generated/fipy.solvers.pyamgx.linearBiCGStabSolver", "generated/fipy.solvers.pyamgx.linearCGSolver", "generated/fipy.solvers.pyamgx.linearFGMRESSolver", "generated/fipy.solvers.pyamgx.linearGMRESSolver", "generated/fipy.solvers.pyamgx.linearLUSolver", "generated/fipy.solvers.pyamgx.preconditioners", "generated/fipy.solvers.pyamgx.preconditioners.preconditioners", "generated/fipy.solvers.pyamgx.pyAMGXSolver", "generated/fipy.solvers.pyamgx.smoothers", "generated/fipy.solvers.pyamgx.smoothers.smoothers", "generated/fipy.solvers.pysparse", "generated/fipy.solvers.pysparse.linearCGSSolver", "generated/fipy.solvers.pysparse.linearGMRESSolver", "generated/fipy.solvers.pysparse.linearJORSolver", "generated/fipy.solvers.pysparse.linearLUSolver", "generated/fipy.solvers.pysparse.linearPCGSolver", "generated/fipy.solvers.pysparse.preconditioners", "generated/fipy.solvers.pysparse.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.pysparse.preconditioners.preconditioner", "generated/fipy.solvers.pysparse.preconditioners.ssorPreconditioner", "generated/fipy.solvers.pysparse.pysparseSolver", "generated/fipy.solvers.pysparseMatrixSolver", "generated/fipy.solvers.scipy", "generated/fipy.solvers.scipy.linearBicgstabSolver", "generated/fipy.solvers.scipy.linearCGSSolver", "generated/fipy.solvers.scipy.linearGMRESSolver", "generated/fipy.solvers.scipy.linearLUSolver", "generated/fipy.solvers.scipy.linearPCGSolver", "generated/fipy.solvers.scipy.scipyKrylovSolver", "generated/fipy.solvers.scipy.scipySolver", "generated/fipy.solvers.solver", "generated/fipy.solvers.test", "generated/fipy.solvers.trilinos", "generated/fipy.solvers.trilinos.comms", "generated/fipy.solvers.trilinos.comms.epetraCommWrapper", "generated/fipy.solvers.trilinos.comms.parallelEpetraCommWrapper", "generated/fipy.solvers.trilinos.comms.serialEpetraCommWrapper", "generated/fipy.solvers.trilinos.linearBicgstabSolver", "generated/fipy.solvers.trilinos.linearCGSSolver", "generated/fipy.solvers.trilinos.linearGMRESSolver", "generated/fipy.solvers.trilinos.linearLUSolver", "generated/fipy.solvers.trilinos.linearPCGSolver", "generated/fipy.solvers.trilinos.preconditioners", "generated/fipy.solvers.trilinos.preconditioners.domDecompPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.icPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.preconditioner", "generated/fipy.solvers.trilinos.trilinosAztecOOSolver", "generated/fipy.solvers.trilinos.trilinosMLTest", "generated/fipy.solvers.trilinos.trilinosNonlinearSolver", "generated/fipy.solvers.trilinos.trilinosSolver", "generated/fipy.steppers", "generated/fipy.steppers.pidStepper", "generated/fipy.steppers.pseudoRKQSStepper", "generated/fipy.steppers.stepper", "generated/fipy.terms", "generated/fipy.terms.abstractBinaryTerm", "generated/fipy.terms.abstractConvectionTerm", "generated/fipy.terms.abstractDiffusionTerm", "generated/fipy.terms.abstractUpwindConvectionTerm", "generated/fipy.terms.advectionTerm", "generated/fipy.terms.asymmetricConvectionTerm", "generated/fipy.terms.binaryTerm", "generated/fipy.terms.cellTerm", "generated/fipy.terms.centralDiffConvectionTerm", "generated/fipy.terms.coupledBinaryTerm", "generated/fipy.terms.diffusionTerm", "generated/fipy.terms.diffusionTermCorrection", "generated/fipy.terms.diffusionTermNoCorrection", "generated/fipy.terms.explicitDiffusionTerm", "generated/fipy.terms.explicitSourceTerm", "generated/fipy.terms.explicitUpwindConvectionTerm", "generated/fipy.terms.exponentialConvectionTerm", "generated/fipy.terms.faceTerm", "generated/fipy.terms.firstOrderAdvectionTerm", "generated/fipy.terms.hybridConvectionTerm", "generated/fipy.terms.implicitDiffusionTerm", "generated/fipy.terms.implicitSourceTerm", "generated/fipy.terms.nonDiffusionTerm", "generated/fipy.terms.powerLawConvectionTerm", "generated/fipy.terms.residualTerm", "generated/fipy.terms.sourceTerm", "generated/fipy.terms.term", "generated/fipy.terms.test", "generated/fipy.terms.transientTerm", "generated/fipy.terms.unaryTerm", "generated/fipy.terms.upwindConvectionTerm", "generated/fipy.terms.vanLeerConvectionTerm", "generated/fipy.testFiPy", "generated/fipy.tests", "generated/fipy.tests.doctestPlus", "generated/fipy.tests.lateImportTest", "generated/fipy.tests.test", "generated/fipy.tests.testProgram", "generated/fipy.tools", "generated/fipy.tools.comms", "generated/fipy.tools.comms.commWrapper", "generated/fipy.tools.comms.dummyComm", "generated/fipy.tools.debug", "generated/fipy.tools.decorators", "generated/fipy.tools.dimensions", "generated/fipy.tools.dimensions.DictWithDefault", "generated/fipy.tools.dimensions.NumberDict", "generated/fipy.tools.dimensions.physicalField", "generated/fipy.tools.dump", "generated/fipy.tools.inline", "generated/fipy.tools.logging", "generated/fipy.tools.numerix", "generated/fipy.tools.parser", "generated/fipy.tools.sharedtempfile", "generated/fipy.tools.test", "generated/fipy.tools.vector", "generated/fipy.tools.version", "generated/fipy.tools.vitals", "generated/fipy.variables", "generated/fipy.variables.addOverFacesVariable", "generated/fipy.variables.arithmeticCellToFaceVariable", "generated/fipy.variables.betaNoiseVariable", "generated/fipy.variables.binaryOperatorVariable", "generated/fipy.variables.cellToFaceVariable", "generated/fipy.variables.cellVariable", "generated/fipy.variables.constant", "generated/fipy.variables.constraintMask", "generated/fipy.variables.coupledCellVariable", "generated/fipy.variables.distanceVariable", "generated/fipy.variables.exponentialNoiseVariable", "generated/fipy.variables.faceGradContributionsVariable", "generated/fipy.variables.faceGradVariable", "generated/fipy.variables.faceVariable", "generated/fipy.variables.gammaNoiseVariable", "generated/fipy.variables.gaussCellGradVariable", "generated/fipy.variables.gaussianNoiseVariable", "generated/fipy.variables.harmonicCellToFaceVariable", "generated/fipy.variables.histogramVariable", "generated/fipy.variables.interfaceAreaVariable", "generated/fipy.variables.interfaceFlagVariable", "generated/fipy.variables.leastSquaresCellGradVariable", "generated/fipy.variables.levelSetDiffusionVariable", "generated/fipy.variables.meshVariable", "generated/fipy.variables.minmodCellToFaceVariable", "generated/fipy.variables.modCellGradVariable", "generated/fipy.variables.modCellToFaceVariable", "generated/fipy.variables.modFaceGradVariable", "generated/fipy.variables.modPhysicalField", "generated/fipy.variables.modularVariable", "generated/fipy.variables.noiseVariable", "generated/fipy.variables.operatorVariable", "generated/fipy.variables.scharfetterGummelFaceVariable", "generated/fipy.variables.surfactantConvectionVariable", "generated/fipy.variables.surfactantVariable", "generated/fipy.variables.test", "generated/fipy.variables.unaryOperatorVariable", "generated/fipy.variables.uniformNoiseVariable", "generated/fipy.variables.variable", "generated/fipy.viewers", "generated/fipy.viewers.matplotlibViewer", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlibViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib1DViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DContourViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibStreamViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibVectorViewer", "generated/fipy.viewers.matplotlibViewer.test", "generated/fipy.viewers.mayaviViewer", "generated/fipy.viewers.mayaviViewer.mayaviClient", "generated/fipy.viewers.mayaviViewer.mayaviDaemon", "generated/fipy.viewers.mayaviViewer.test", "generated/fipy.viewers.multiViewer", "generated/fipy.viewers.test", "generated/fipy.viewers.testinteractive", "generated/fipy.viewers.tsvViewer", "generated/fipy.viewers.viewer", "generated/fipy.viewers.vtkViewer", "generated/fipy.viewers.vtkViewer.test", "generated/fipy.viewers.vtkViewer.vtkCellViewer", "generated/fipy.viewers.vtkViewer.vtkFaceViewer", "generated/fipy.viewers.vtkViewer.vtkViewer", "glossary", "introduction", "manual", "numerical/discret", "numerical/equation", "numerical/index", "numerical/scheme", "references", "tutorial/generated/package", "tutorial/generated/package.subpackage", "tutorial/generated/package.subpackage.base", "tutorial/generated/package.subpackage.object", "tutorial/index"], "filenames": ["ADMINISTRATA.rst", "API.rst", "CHANGELOG.rst", "CONTACT.rst", "CREDITS.rst", "DISCLAIMER.rst", "EFFICIENCY.rst", "EXAMPLES.rst", "FAQ.rst", "GIT.rst", "GUIDELINES.rst", "INSTALLATION.rst", "LICENSE.rst", "NIX-README.rst", "PUBLICATIONS.rst", "README.rst", "SOLVERS.rst", "USAGE.rst", "VIEWERS.rst", "VKML.rst", "contents.rst", "design.rst", "external_definitions.rst", "generated/examples.rst", "generated/examples.benchmarking.rst", "generated/examples.benchmarking.benchmarker.rst", "generated/examples.benchmarking.size.rst", "generated/examples.benchmarking.steps.rst", "generated/examples.benchmarking.utils.rst", "generated/examples.benchmarking.versions.rst", "generated/examples.cahnHilliard.rst", "generated/examples.cahnHilliard.mesh2D.rst", "generated/examples.cahnHilliard.mesh2DCoupled.rst", "generated/examples.cahnHilliard.mesh3D.rst", "generated/examples.cahnHilliard.sphere.rst", "generated/examples.cahnHilliard.sphereDaemon.rst", "generated/examples.cahnHilliard.tanh1D.rst", "generated/examples.cahnHilliard.test.rst", "generated/examples.chemotaxis.rst", "generated/examples.chemotaxis.input.rst", "generated/examples.chemotaxis.input2D.rst", "generated/examples.chemotaxis.parameters.rst", "generated/examples.chemotaxis.test.rst", "generated/examples.convection.rst", "generated/examples.convection.advection.rst", "generated/examples.convection.advection.explicitUpwind.rst", "generated/examples.convection.advection.implicitUpwind.rst", "generated/examples.convection.advection.vanLeerUpwind.rst", "generated/examples.convection.exponential1D.rst", "generated/examples.convection.exponential1D.cylindricalMesh1D.rst", "generated/examples.convection.exponential1D.cylindricalMesh1DNonUniform.rst", "generated/examples.convection.exponential1D.mesh1D.rst", "generated/examples.convection.exponential1D.tri2D.rst", "generated/examples.convection.exponential1DBack.rst", "generated/examples.convection.exponential1DBack.mesh1D.rst", "generated/examples.convection.exponential1DSource.rst", "generated/examples.convection.exponential1DSource.mesh1D.rst", "generated/examples.convection.exponential1DSource.tri2D.rst", "generated/examples.convection.exponential2D.rst", "generated/examples.convection.exponential2D.cylindricalMesh2D.rst", "generated/examples.convection.exponential2D.cylindricalMesh2DNonUniform.rst", "generated/examples.convection.exponential2D.mesh2D.rst", "generated/examples.convection.exponential2D.tri2D.rst", "generated/examples.convection.peclet.rst", "generated/examples.convection.powerLaw1D.rst", "generated/examples.convection.powerLaw1D.mesh1D.rst", "generated/examples.convection.powerLaw1D.tri2D.rst", "generated/examples.convection.robin.rst", "generated/examples.convection.source.rst", "generated/examples.convection.test.rst", "generated/examples.diffusion.rst", "generated/examples.diffusion.anisotropy.rst", "generated/examples.diffusion.circle.rst", "generated/examples.diffusion.circleQuad.rst", "generated/examples.diffusion.coupled.rst", "generated/examples.diffusion.electrostatics.rst", "generated/examples.diffusion.explicit.rst", "generated/examples.diffusion.explicit.mesh1D.rst", "generated/examples.diffusion.explicit.mixedelement.rst", "generated/examples.diffusion.explicit.test.rst", "generated/examples.diffusion.explicit.tri2D.rst", "generated/examples.diffusion.mesh1D.rst", "generated/examples.diffusion.mesh20x20.rst", "generated/examples.diffusion.mesh20x20Coupled.rst", "generated/examples.diffusion.nthOrder.rst", "generated/examples.diffusion.nthOrder.input4thOrder1D.rst", "generated/examples.diffusion.nthOrder.input4thOrder_line.rst", "generated/examples.diffusion.nthOrder.test.rst", "generated/examples.diffusion.steadyState.rst", "generated/examples.diffusion.steadyState.mesh1D.rst", "generated/examples.diffusion.steadyState.mesh1D.inputPeriodic.rst", "generated/examples.diffusion.steadyState.mesh1D.tri2Dinput.rst", "generated/examples.diffusion.steadyState.mesh20x20.rst", "generated/examples.diffusion.steadyState.mesh20x20.gmshinput.rst", "generated/examples.diffusion.steadyState.mesh20x20.isotropy.rst", "generated/examples.diffusion.steadyState.mesh20x20.modifiedMeshInput.rst", "generated/examples.diffusion.steadyState.mesh20x20.orthoerror.rst", "generated/examples.diffusion.steadyState.mesh20x20.tri2Dinput.rst", "generated/examples.diffusion.steadyState.mesh50x50.rst", "generated/examples.diffusion.steadyState.mesh50x50.input.rst", "generated/examples.diffusion.steadyState.mesh50x50.tri2Dinput.rst", "generated/examples.diffusion.steadyState.otherMeshes.rst", "generated/examples.diffusion.steadyState.otherMeshes.cubicalProblem.rst", "generated/examples.diffusion.steadyState.otherMeshes.grid3Dinput.rst", "generated/examples.diffusion.steadyState.otherMeshes.prism.rst", "generated/examples.diffusion.steadyState.test.rst", "generated/examples.diffusion.test.rst", "generated/examples.diffusion.variable.rst", "generated/examples.elphf.rst", "generated/examples.elphf.diffusion.rst", "generated/examples.elphf.diffusion.mesh1D.rst", "generated/examples.elphf.diffusion.mesh1Ddimensional.rst", "generated/examples.elphf.diffusion.mesh2D.rst", "generated/examples.elphf.input.rst", "generated/examples.elphf.phase.rst", "generated/examples.elphf.phaseDiffusion.rst", "generated/examples.elphf.poisson.rst", "generated/examples.elphf.test.rst", "generated/examples.flow.rst", "generated/examples.flow.stokesCavity.rst", "generated/examples.flow.test.rst", "generated/examples.levelSet.rst", "generated/examples.levelSet.advection.rst", "generated/examples.levelSet.advection.circle.rst", "generated/examples.levelSet.advection.mesh1D.rst", "generated/examples.levelSet.advection.test.rst", "generated/examples.levelSet.advection.trench.rst", "generated/examples.levelSet.distanceFunction.rst", "generated/examples.levelSet.distanceFunction.circle.rst", "generated/examples.levelSet.distanceFunction.interior.rst", "generated/examples.levelSet.distanceFunction.mesh1D.rst", "generated/examples.levelSet.distanceFunction.square.rst", "generated/examples.levelSet.distanceFunction.test.rst", "generated/examples.levelSet.electroChem.rst", "generated/examples.levelSet.electroChem.adsorbingSurfactantEquation.rst", "generated/examples.levelSet.electroChem.gapFillDistanceVariable.rst", "generated/examples.levelSet.electroChem.gapFillMesh.rst", "generated/examples.levelSet.electroChem.gold.rst", "generated/examples.levelSet.electroChem.howToWriteAScript.rst", "generated/examples.levelSet.electroChem.leveler.rst", "generated/examples.levelSet.electroChem.lines.rst", "generated/examples.levelSet.electroChem.matplotlibSurfactantViewer.rst", "generated/examples.levelSet.electroChem.mayaviSurfactantViewer.rst", "generated/examples.levelSet.electroChem.metalIonDiffusionEquation.rst", "generated/examples.levelSet.electroChem.simpleTrenchSystem.rst", "generated/examples.levelSet.electroChem.surfactantBulkDiffusionEquation.rst", "generated/examples.levelSet.electroChem.test.rst", "generated/examples.levelSet.electroChem.trenchMesh.rst", "generated/examples.levelSet.surfactant.rst", "generated/examples.levelSet.surfactant.circle.rst", "generated/examples.levelSet.surfactant.expandingCircle.rst", "generated/examples.levelSet.surfactant.square.rst", "generated/examples.levelSet.surfactant.test.rst", "generated/examples.levelSet.test.rst", "generated/examples.meshing.rst", "generated/examples.meshing.gmshRefinement.rst", "generated/examples.meshing.inputGrid2D.rst", "generated/examples.meshing.sphere.rst", "generated/examples.meshing.test.rst", "generated/examples.parallel.rst", "generated/examples.phase.rst", "generated/examples.phase.anisotropy.rst", "generated/examples.phase.anisotropyOLD.rst", "generated/examples.phase.binary.rst", "generated/examples.phase.binaryCoupled.rst", "generated/examples.phase.impingement.rst", "generated/examples.phase.impingement.mesh20x20.rst", "generated/examples.phase.impingement.mesh40x1.rst", "generated/examples.phase.impingement.test.rst", "generated/examples.phase.missOrientation.rst", "generated/examples.phase.missOrientation.test.rst", "generated/examples.phase.polyxtal.rst", "generated/examples.phase.polyxtalCoupled.rst", "generated/examples.phase.quaternary.rst", "generated/examples.phase.simple.rst", "generated/examples.phase.symmetry.rst", "generated/examples.phase.test.rst", "generated/examples.reactiveWetting.rst", "generated/examples.reactiveWetting.liquidVapor1D.rst", "generated/examples.reactiveWetting.liquidVapor2D.rst", "generated/examples.reactiveWetting.test.rst", "generated/examples.riemann.rst", "generated/examples.riemann.acoustics.rst", "generated/examples.riemann.test.rst", "generated/examples.test.rst", "generated/examples.updating.rst", "generated/examples.updating.update0_1to1_0.rst", "generated/examples.updating.update1_0to2_0.rst", "generated/examples.updating.update2_0to3_0.rst", "generated/fipy.rst", "generated/fipy.boundaryConditions.rst", "generated/fipy.boundaryConditions.boundaryCondition.rst", "generated/fipy.boundaryConditions.constraint.rst", "generated/fipy.boundaryConditions.fixedFlux.rst", "generated/fipy.boundaryConditions.fixedValue.rst", "generated/fipy.boundaryConditions.nthOrderBoundaryCondition.rst", "generated/fipy.boundaryConditions.test.rst", "generated/fipy.matrices.rst", "generated/fipy.matrices.offsetSparseMatrix.rst", "generated/fipy.matrices.petscMatrix.rst", "generated/fipy.matrices.pysparseMatrix.rst", "generated/fipy.matrices.scipyMatrix.rst", "generated/fipy.matrices.sparseMatrix.rst", "generated/fipy.matrices.test.rst", "generated/fipy.matrices.trilinosMatrix.rst", "generated/fipy.meshes.rst", "generated/fipy.meshes.abstractMesh.rst", "generated/fipy.meshes.builders.rst", "generated/fipy.meshes.builders.abstractGridBuilder.rst", "generated/fipy.meshes.builders.grid1DBuilder.rst", "generated/fipy.meshes.builders.grid2DBuilder.rst", "generated/fipy.meshes.builders.grid3DBuilder.rst", "generated/fipy.meshes.builders.periodicGrid1DBuilder.rst", "generated/fipy.meshes.builders.utilityClasses.rst", "generated/fipy.meshes.cylindricalGrid1D.rst", "generated/fipy.meshes.cylindricalGrid2D.rst", "generated/fipy.meshes.cylindricalNonUniformGrid1D.rst", "generated/fipy.meshes.cylindricalNonUniformGrid2D.rst", "generated/fipy.meshes.cylindricalUniformGrid1D.rst", "generated/fipy.meshes.cylindricalUniformGrid2D.rst", "generated/fipy.meshes.factoryMeshes.rst", "generated/fipy.meshes.gmshMesh.rst", "generated/fipy.meshes.grid1D.rst", "generated/fipy.meshes.grid2D.rst", "generated/fipy.meshes.grid3D.rst", "generated/fipy.meshes.mesh.rst", "generated/fipy.meshes.mesh1D.rst", "generated/fipy.meshes.mesh2D.rst", "generated/fipy.meshes.nonUniformGrid1D.rst", "generated/fipy.meshes.nonUniformGrid2D.rst", "generated/fipy.meshes.nonUniformGrid3D.rst", "generated/fipy.meshes.periodicGrid1D.rst", "generated/fipy.meshes.periodicGrid2D.rst", "generated/fipy.meshes.periodicGrid3D.rst", "generated/fipy.meshes.representations.rst", "generated/fipy.meshes.representations.abstractRepresentation.rst", "generated/fipy.meshes.representations.gridRepresentation.rst", "generated/fipy.meshes.representations.meshRepresentation.rst", "generated/fipy.meshes.skewedGrid2D.rst", "generated/fipy.meshes.sphericalNonUniformGrid1D.rst", "generated/fipy.meshes.sphericalUniformGrid1D.rst", "generated/fipy.meshes.test.rst", "generated/fipy.meshes.topologies.rst", "generated/fipy.meshes.topologies.abstractTopology.rst", "generated/fipy.meshes.topologies.gridTopology.rst", "generated/fipy.meshes.topologies.meshTopology.rst", "generated/fipy.meshes.tri2D.rst", "generated/fipy.meshes.uniformGrid.rst", "generated/fipy.meshes.uniformGrid1D.rst", "generated/fipy.meshes.uniformGrid2D.rst", "generated/fipy.meshes.uniformGrid3D.rst", "generated/fipy.solvers.rst", "generated/fipy.solvers.petsc.rst", "generated/fipy.solvers.petsc.comms.rst", "generated/fipy.solvers.petsc.comms.parallelPETScCommWrapper.rst", "generated/fipy.solvers.petsc.comms.petscCommWrapper.rst", "generated/fipy.solvers.petsc.comms.serialPETScCommWrapper.rst", "generated/fipy.solvers.petsc.dummySolver.rst", "generated/fipy.solvers.petsc.linearBicgSolver.rst", "generated/fipy.solvers.petsc.linearCGSSolver.rst", "generated/fipy.solvers.petsc.linearGMRESSolver.rst", "generated/fipy.solvers.petsc.linearLUSolver.rst", "generated/fipy.solvers.petsc.linearPCGSolver.rst", "generated/fipy.solvers.petsc.petscKrylovSolver.rst", "generated/fipy.solvers.petsc.petscSolver.rst", "generated/fipy.solvers.pyAMG.rst", "generated/fipy.solvers.pyAMG.linearCGSSolver.rst", "generated/fipy.solvers.pyAMG.linearGMRESSolver.rst", "generated/fipy.solvers.pyAMG.linearGeneralSolver.rst", "generated/fipy.solvers.pyAMG.linearLUSolver.rst", "generated/fipy.solvers.pyAMG.linearPCGSolver.rst", "generated/fipy.solvers.pyAMG.preconditioners.rst", "generated/fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner.rst", "generated/fipy.solvers.pyamgx.rst", "generated/fipy.solvers.pyamgx.aggregationAMGSolver.rst", "generated/fipy.solvers.pyamgx.classicalAMGSolver.rst", "generated/fipy.solvers.pyamgx.linearBiCGStabSolver.rst", "generated/fipy.solvers.pyamgx.linearCGSolver.rst", "generated/fipy.solvers.pyamgx.linearFGMRESSolver.rst", "generated/fipy.solvers.pyamgx.linearGMRESSolver.rst", "generated/fipy.solvers.pyamgx.linearLUSolver.rst", "generated/fipy.solvers.pyamgx.preconditioners.rst", "generated/fipy.solvers.pyamgx.preconditioners.preconditioners.rst", "generated/fipy.solvers.pyamgx.pyAMGXSolver.rst", "generated/fipy.solvers.pyamgx.smoothers.rst", "generated/fipy.solvers.pyamgx.smoothers.smoothers.rst", "generated/fipy.solvers.pysparse.rst", "generated/fipy.solvers.pysparse.linearCGSSolver.rst", "generated/fipy.solvers.pysparse.linearGMRESSolver.rst", "generated/fipy.solvers.pysparse.linearJORSolver.rst", "generated/fipy.solvers.pysparse.linearLUSolver.rst", "generated/fipy.solvers.pysparse.linearPCGSolver.rst", "generated/fipy.solvers.pysparse.preconditioners.rst", "generated/fipy.solvers.pysparse.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.pysparse.preconditioners.preconditioner.rst", "generated/fipy.solvers.pysparse.preconditioners.ssorPreconditioner.rst", "generated/fipy.solvers.pysparse.pysparseSolver.rst", "generated/fipy.solvers.pysparseMatrixSolver.rst", "generated/fipy.solvers.scipy.rst", "generated/fipy.solvers.scipy.linearBicgstabSolver.rst", "generated/fipy.solvers.scipy.linearCGSSolver.rst", "generated/fipy.solvers.scipy.linearGMRESSolver.rst", "generated/fipy.solvers.scipy.linearLUSolver.rst", "generated/fipy.solvers.scipy.linearPCGSolver.rst", "generated/fipy.solvers.scipy.scipyKrylovSolver.rst", "generated/fipy.solvers.scipy.scipySolver.rst", "generated/fipy.solvers.solver.rst", "generated/fipy.solvers.test.rst", "generated/fipy.solvers.trilinos.rst", "generated/fipy.solvers.trilinos.comms.rst", "generated/fipy.solvers.trilinos.comms.epetraCommWrapper.rst", "generated/fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.rst", "generated/fipy.solvers.trilinos.comms.serialEpetraCommWrapper.rst", "generated/fipy.solvers.trilinos.linearBicgstabSolver.rst", "generated/fipy.solvers.trilinos.linearCGSSolver.rst", "generated/fipy.solvers.trilinos.linearGMRESSolver.rst", "generated/fipy.solvers.trilinos.linearLUSolver.rst", "generated/fipy.solvers.trilinos.linearPCGSolver.rst", "generated/fipy.solvers.trilinos.preconditioners.rst", "generated/fipy.solvers.trilinos.preconditioners.domDecompPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.icPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.preconditioner.rst", "generated/fipy.solvers.trilinos.trilinosAztecOOSolver.rst", "generated/fipy.solvers.trilinos.trilinosMLTest.rst", "generated/fipy.solvers.trilinos.trilinosNonlinearSolver.rst", "generated/fipy.solvers.trilinos.trilinosSolver.rst", "generated/fipy.steppers.rst", "generated/fipy.steppers.pidStepper.rst", "generated/fipy.steppers.pseudoRKQSStepper.rst", "generated/fipy.steppers.stepper.rst", "generated/fipy.terms.rst", "generated/fipy.terms.abstractBinaryTerm.rst", "generated/fipy.terms.abstractConvectionTerm.rst", "generated/fipy.terms.abstractDiffusionTerm.rst", "generated/fipy.terms.abstractUpwindConvectionTerm.rst", "generated/fipy.terms.advectionTerm.rst", "generated/fipy.terms.asymmetricConvectionTerm.rst", "generated/fipy.terms.binaryTerm.rst", "generated/fipy.terms.cellTerm.rst", "generated/fipy.terms.centralDiffConvectionTerm.rst", "generated/fipy.terms.coupledBinaryTerm.rst", "generated/fipy.terms.diffusionTerm.rst", "generated/fipy.terms.diffusionTermCorrection.rst", "generated/fipy.terms.diffusionTermNoCorrection.rst", "generated/fipy.terms.explicitDiffusionTerm.rst", "generated/fipy.terms.explicitSourceTerm.rst", "generated/fipy.terms.explicitUpwindConvectionTerm.rst", "generated/fipy.terms.exponentialConvectionTerm.rst", "generated/fipy.terms.faceTerm.rst", "generated/fipy.terms.firstOrderAdvectionTerm.rst", "generated/fipy.terms.hybridConvectionTerm.rst", "generated/fipy.terms.implicitDiffusionTerm.rst", "generated/fipy.terms.implicitSourceTerm.rst", "generated/fipy.terms.nonDiffusionTerm.rst", "generated/fipy.terms.powerLawConvectionTerm.rst", "generated/fipy.terms.residualTerm.rst", "generated/fipy.terms.sourceTerm.rst", "generated/fipy.terms.term.rst", "generated/fipy.terms.test.rst", "generated/fipy.terms.transientTerm.rst", "generated/fipy.terms.unaryTerm.rst", "generated/fipy.terms.upwindConvectionTerm.rst", "generated/fipy.terms.vanLeerConvectionTerm.rst", "generated/fipy.testFiPy.rst", "generated/fipy.tests.rst", "generated/fipy.tests.doctestPlus.rst", "generated/fipy.tests.lateImportTest.rst", "generated/fipy.tests.test.rst", "generated/fipy.tests.testProgram.rst", "generated/fipy.tools.rst", "generated/fipy.tools.comms.rst", "generated/fipy.tools.comms.commWrapper.rst", "generated/fipy.tools.comms.dummyComm.rst", "generated/fipy.tools.debug.rst", "generated/fipy.tools.decorators.rst", "generated/fipy.tools.dimensions.rst", "generated/fipy.tools.dimensions.DictWithDefault.rst", "generated/fipy.tools.dimensions.NumberDict.rst", "generated/fipy.tools.dimensions.physicalField.rst", "generated/fipy.tools.dump.rst", "generated/fipy.tools.inline.rst", "generated/fipy.tools.logging.rst", "generated/fipy.tools.numerix.rst", "generated/fipy.tools.parser.rst", "generated/fipy.tools.sharedtempfile.rst", "generated/fipy.tools.test.rst", "generated/fipy.tools.vector.rst", "generated/fipy.tools.version.rst", "generated/fipy.tools.vitals.rst", "generated/fipy.variables.rst", "generated/fipy.variables.addOverFacesVariable.rst", "generated/fipy.variables.arithmeticCellToFaceVariable.rst", "generated/fipy.variables.betaNoiseVariable.rst", "generated/fipy.variables.binaryOperatorVariable.rst", "generated/fipy.variables.cellToFaceVariable.rst", "generated/fipy.variables.cellVariable.rst", "generated/fipy.variables.constant.rst", "generated/fipy.variables.constraintMask.rst", "generated/fipy.variables.coupledCellVariable.rst", "generated/fipy.variables.distanceVariable.rst", "generated/fipy.variables.exponentialNoiseVariable.rst", "generated/fipy.variables.faceGradContributionsVariable.rst", "generated/fipy.variables.faceGradVariable.rst", "generated/fipy.variables.faceVariable.rst", "generated/fipy.variables.gammaNoiseVariable.rst", "generated/fipy.variables.gaussCellGradVariable.rst", "generated/fipy.variables.gaussianNoiseVariable.rst", "generated/fipy.variables.harmonicCellToFaceVariable.rst", "generated/fipy.variables.histogramVariable.rst", "generated/fipy.variables.interfaceAreaVariable.rst", "generated/fipy.variables.interfaceFlagVariable.rst", "generated/fipy.variables.leastSquaresCellGradVariable.rst", "generated/fipy.variables.levelSetDiffusionVariable.rst", "generated/fipy.variables.meshVariable.rst", "generated/fipy.variables.minmodCellToFaceVariable.rst", "generated/fipy.variables.modCellGradVariable.rst", "generated/fipy.variables.modCellToFaceVariable.rst", "generated/fipy.variables.modFaceGradVariable.rst", "generated/fipy.variables.modPhysicalField.rst", "generated/fipy.variables.modularVariable.rst", "generated/fipy.variables.noiseVariable.rst", "generated/fipy.variables.operatorVariable.rst", "generated/fipy.variables.scharfetterGummelFaceVariable.rst", "generated/fipy.variables.surfactantConvectionVariable.rst", "generated/fipy.variables.surfactantVariable.rst", "generated/fipy.variables.test.rst", "generated/fipy.variables.unaryOperatorVariable.rst", "generated/fipy.variables.uniformNoiseVariable.rst", "generated/fipy.variables.variable.rst", "generated/fipy.viewers.rst", "generated/fipy.viewers.matplotlibViewer.rst", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.rst", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib1DViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibStreamViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibVectorViewer.rst", "generated/fipy.viewers.matplotlibViewer.test.rst", "generated/fipy.viewers.mayaviViewer.rst", "generated/fipy.viewers.mayaviViewer.mayaviClient.rst", "generated/fipy.viewers.mayaviViewer.mayaviDaemon.rst", "generated/fipy.viewers.mayaviViewer.test.rst", "generated/fipy.viewers.multiViewer.rst", "generated/fipy.viewers.test.rst", "generated/fipy.viewers.testinteractive.rst", "generated/fipy.viewers.tsvViewer.rst", "generated/fipy.viewers.viewer.rst", "generated/fipy.viewers.vtkViewer.rst", "generated/fipy.viewers.vtkViewer.test.rst", "generated/fipy.viewers.vtkViewer.vtkCellViewer.rst", "generated/fipy.viewers.vtkViewer.vtkFaceViewer.rst", "generated/fipy.viewers.vtkViewer.vtkViewer.rst", "glossary.rst", "introduction.rst", "manual.rst", "numerical/discret.rst", "numerical/equation.rst", "numerical/index.rst", "numerical/scheme.rst", "references.rst", "tutorial/generated/package.rst", "tutorial/generated/package.subpackage.rst", "tutorial/generated/package.subpackage.base.rst", "tutorial/generated/package.subpackage.object.rst", "tutorial/index.rst"], "titles": ["Git practices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fipy</span></code> Package Documentation", "Change Log", "Contact", "Contributors", "Disclaimer", "Efficiency", "Examples", "Frequently Asked Questions", "Git usage", "Development Guidelines", "Installation", "Terms of Use", "Nix Installation", "Publications", "Overview", "Solvers", "Using FiPy", "Viewers", "Virtual Kinetics of Materials Laboratory", "FiPy Contents", "Design and Implementation", "External Command-line Flags", "examples", "examples.benchmarking", "examples.benchmarking.benchmarker", "examples.benchmarking.size", "examples.benchmarking.steps", "examples.benchmarking.utils", "examples.benchmarking.versions", "examples.cahnHilliard", "examples.cahnHilliard.mesh2D", "examples.cahnHilliard.mesh2DCoupled", "examples.cahnHilliard.mesh3D", "examples.cahnHilliard.sphere", "examples.cahnHilliard.sphereDaemon", "examples.cahnHilliard.tanh1D", "examples.cahnHilliard.test", "examples.chemotaxis", "examples.chemotaxis.input", "examples.chemotaxis.input2D", "examples.chemotaxis.parameters", "examples.chemotaxis.test", "examples.convection", "examples.convection.advection", "examples.convection.advection.explicitUpwind", "examples.convection.advection.implicitUpwind", "examples.convection.advection.vanLeerUpwind", "examples.convection.exponential1D", "examples.convection.exponential1D.cylindricalMesh1D", "examples.convection.exponential1D.cylindricalMesh1DNonUniform", "examples.convection.exponential1D.mesh1D", "examples.convection.exponential1D.tri2D", "examples.convection.exponential1DBack", "examples.convection.exponential1DBack.mesh1D", "examples.convection.exponential1DSource", "examples.convection.exponential1DSource.mesh1D", "examples.convection.exponential1DSource.tri2D", "examples.convection.exponential2D", "examples.convection.exponential2D.cylindricalMesh2D", "examples.convection.exponential2D.cylindricalMesh2DNonUniform", "examples.convection.exponential2D.mesh2D", "examples.convection.exponential2D.tri2D", "examples.convection.peclet", "examples.convection.powerLaw1D", "examples.convection.powerLaw1D.mesh1D", "examples.convection.powerLaw1D.tri2D", "examples.convection.robin", "examples.convection.source", "examples.convection.test", "examples.diffusion", "examples.diffusion.anisotropy", "examples.diffusion.circle", "examples.diffusion.circleQuad", "examples.diffusion.coupled", "examples.diffusion.electrostatics", "examples.diffusion.explicit", "examples.diffusion.explicit.mesh1D", "examples.diffusion.explicit.mixedelement", "examples.diffusion.explicit.test", "examples.diffusion.explicit.tri2D", "examples.diffusion.mesh1D", "examples.diffusion.mesh20x20", "examples.diffusion.mesh20x20Coupled", "examples.diffusion.nthOrder", "examples.diffusion.nthOrder.input4thOrder1D", "examples.diffusion.nthOrder.input4thOrder_line", "examples.diffusion.nthOrder.test", "examples.diffusion.steadyState", "examples.diffusion.steadyState.mesh1D", "examples.diffusion.steadyState.mesh1D.inputPeriodic", "examples.diffusion.steadyState.mesh1D.tri2Dinput", "examples.diffusion.steadyState.mesh20x20", "examples.diffusion.steadyState.mesh20x20.gmshinput", "examples.diffusion.steadyState.mesh20x20.isotropy", "examples.diffusion.steadyState.mesh20x20.modifiedMeshInput", "examples.diffusion.steadyState.mesh20x20.orthoerror", "examples.diffusion.steadyState.mesh20x20.tri2Dinput", "examples.diffusion.steadyState.mesh50x50", "examples.diffusion.steadyState.mesh50x50.input", "examples.diffusion.steadyState.mesh50x50.tri2Dinput", "examples.diffusion.steadyState.otherMeshes", "examples.diffusion.steadyState.otherMeshes.cubicalProblem", "examples.diffusion.steadyState.otherMeshes.grid3Dinput", "examples.diffusion.steadyState.otherMeshes.prism", "examples.diffusion.steadyState.test", "examples.diffusion.test", "examples.diffusion.variable", "examples.elphf", "examples.elphf.diffusion", "examples.elphf.diffusion.mesh1D", "examples.elphf.diffusion.mesh1Ddimensional", "examples.elphf.diffusion.mesh2D", "examples.elphf.input", "examples.elphf.phase", "examples.elphf.phaseDiffusion", "examples.elphf.poisson", "examples.elphf.test", "examples.flow", "examples.flow.stokesCavity", "examples.flow.test", "examples.levelSet", "examples.levelSet.advection", "examples.levelSet.advection.circle", "examples.levelSet.advection.mesh1D", "examples.levelSet.advection.test", "examples.levelSet.advection.trench", "examples.levelSet.distanceFunction", "examples.levelSet.distanceFunction.circle", "examples.levelSet.distanceFunction.interior", "examples.levelSet.distanceFunction.mesh1D", "examples.levelSet.distanceFunction.square", "examples.levelSet.distanceFunction.test", "examples.levelSet.electroChem", "examples.levelSet.electroChem.adsorbingSurfactantEquation", "examples.levelSet.electroChem.gapFillDistanceVariable", "examples.levelSet.electroChem.gapFillMesh", "examples.levelSet.electroChem.gold", "examples.levelSet.electroChem.howToWriteAScript", "examples.levelSet.electroChem.leveler", "examples.levelSet.electroChem.lines", "examples.levelSet.electroChem.matplotlibSurfactantViewer", "examples.levelSet.electroChem.mayaviSurfactantViewer", "examples.levelSet.electroChem.metalIonDiffusionEquation", "examples.levelSet.electroChem.simpleTrenchSystem", "examples.levelSet.electroChem.surfactantBulkDiffusionEquation", "examples.levelSet.electroChem.test", "examples.levelSet.electroChem.trenchMesh", "examples.levelSet.surfactant", "examples.levelSet.surfactant.circle", "examples.levelSet.surfactant.expandingCircle", "examples.levelSet.surfactant.square", "examples.levelSet.surfactant.test", "examples.levelSet.test", "examples.meshing", "examples.meshing.gmshRefinement", "examples.meshing.inputGrid2D", "examples.meshing.sphere", "examples.meshing.test", "examples.parallel", "examples.phase", "examples.phase.anisotropy", "examples.phase.anisotropyOLD", "examples.phase.binary", "examples.phase.binaryCoupled", "examples.phase.impingement", "examples.phase.impingement.mesh20x20", "examples.phase.impingement.mesh40x1", "examples.phase.impingement.test", "examples.phase.missOrientation", "examples.phase.missOrientation.test", "examples.phase.polyxtal", "examples.phase.polyxtalCoupled", "examples.phase.quaternary", "examples.phase.simple", "examples.phase.symmetry", "examples.phase.test", "examples.reactiveWetting", "examples.reactiveWetting.liquidVapor1D", "examples.reactiveWetting.liquidVapor2D", "examples.reactiveWetting.test", "examples.riemann", "examples.riemann.acoustics", "examples.riemann.test", "examples.test", "examples.updating", "examples.updating.update0_1to1_0", "examples.updating.update1_0to2_0", "examples.updating.update2_0to3_0", "fipy", "fipy.boundaryConditions", "fipy.boundaryConditions.boundaryCondition", "fipy.boundaryConditions.constraint", "fipy.boundaryConditions.fixedFlux", "fipy.boundaryConditions.fixedValue", "fipy.boundaryConditions.nthOrderBoundaryCondition", "fipy.boundaryConditions.test", "fipy.matrices", "fipy.matrices.offsetSparseMatrix", "fipy.matrices.petscMatrix", "fipy.matrices.pysparseMatrix", "fipy.matrices.scipyMatrix", "fipy.matrices.sparseMatrix", "fipy.matrices.test", "fipy.matrices.trilinosMatrix", "fipy.meshes", "fipy.meshes.abstractMesh", "fipy.meshes.builders", "fipy.meshes.builders.abstractGridBuilder", "fipy.meshes.builders.grid1DBuilder", "fipy.meshes.builders.grid2DBuilder", "fipy.meshes.builders.grid3DBuilder", "fipy.meshes.builders.periodicGrid1DBuilder", "fipy.meshes.builders.utilityClasses", "fipy.meshes.cylindricalGrid1D", "fipy.meshes.cylindricalGrid2D", "fipy.meshes.cylindricalNonUniformGrid1D", "fipy.meshes.cylindricalNonUniformGrid2D", "fipy.meshes.cylindricalUniformGrid1D", "fipy.meshes.cylindricalUniformGrid2D", "fipy.meshes.factoryMeshes", "fipy.meshes.gmshMesh", "fipy.meshes.grid1D", "fipy.meshes.grid2D", "fipy.meshes.grid3D", "fipy.meshes.mesh", "fipy.meshes.mesh1D", "fipy.meshes.mesh2D", "fipy.meshes.nonUniformGrid1D", "fipy.meshes.nonUniformGrid2D", "fipy.meshes.nonUniformGrid3D", "fipy.meshes.periodicGrid1D", "fipy.meshes.periodicGrid2D", "fipy.meshes.periodicGrid3D", "fipy.meshes.representations", "fipy.meshes.representations.abstractRepresentation", "fipy.meshes.representations.gridRepresentation", "fipy.meshes.representations.meshRepresentation", "fipy.meshes.skewedGrid2D", "fipy.meshes.sphericalNonUniformGrid1D", "fipy.meshes.sphericalUniformGrid1D", "fipy.meshes.test", "fipy.meshes.topologies", "fipy.meshes.topologies.abstractTopology", "fipy.meshes.topologies.gridTopology", "fipy.meshes.topologies.meshTopology", "fipy.meshes.tri2D", "fipy.meshes.uniformGrid", "fipy.meshes.uniformGrid1D", "fipy.meshes.uniformGrid2D", "fipy.meshes.uniformGrid3D", "fipy.solvers", "fipy.solvers.petsc", "fipy.solvers.petsc.comms", "fipy.solvers.petsc.comms.parallelPETScCommWrapper", "fipy.solvers.petsc.comms.petscCommWrapper", "fipy.solvers.petsc.comms.serialPETScCommWrapper", "fipy.solvers.petsc.dummySolver", "fipy.solvers.petsc.linearBicgSolver", "fipy.solvers.petsc.linearCGSSolver", "fipy.solvers.petsc.linearGMRESSolver", "fipy.solvers.petsc.linearLUSolver", "fipy.solvers.petsc.linearPCGSolver", "fipy.solvers.petsc.petscKrylovSolver", "fipy.solvers.petsc.petscSolver", "fipy.solvers.pyAMG", "fipy.solvers.pyAMG.linearCGSSolver", "fipy.solvers.pyAMG.linearGMRESSolver", "fipy.solvers.pyAMG.linearGeneralSolver", "fipy.solvers.pyAMG.linearLUSolver", "fipy.solvers.pyAMG.linearPCGSolver", "fipy.solvers.pyAMG.preconditioners", "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner", "fipy.solvers.pyamgx", "fipy.solvers.pyamgx.aggregationAMGSolver", "fipy.solvers.pyamgx.classicalAMGSolver", "fipy.solvers.pyamgx.linearBiCGStabSolver", "fipy.solvers.pyamgx.linearCGSolver", "fipy.solvers.pyamgx.linearFGMRESSolver", "fipy.solvers.pyamgx.linearGMRESSolver", "fipy.solvers.pyamgx.linearLUSolver", "fipy.solvers.pyamgx.preconditioners", "fipy.solvers.pyamgx.preconditioners.preconditioners", "fipy.solvers.pyamgx.pyAMGXSolver", "fipy.solvers.pyamgx.smoothers", "fipy.solvers.pyamgx.smoothers.smoothers", "fipy.solvers.pysparse", "fipy.solvers.pysparse.linearCGSSolver", "fipy.solvers.pysparse.linearGMRESSolver", "fipy.solvers.pysparse.linearJORSolver", "fipy.solvers.pysparse.linearLUSolver", "fipy.solvers.pysparse.linearPCGSolver", "fipy.solvers.pysparse.preconditioners", "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner", "fipy.solvers.pysparse.preconditioners.preconditioner", "fipy.solvers.pysparse.preconditioners.ssorPreconditioner", "fipy.solvers.pysparse.pysparseSolver", "fipy.solvers.pysparseMatrixSolver", "fipy.solvers.scipy", "fipy.solvers.scipy.linearBicgstabSolver", "fipy.solvers.scipy.linearCGSSolver", "fipy.solvers.scipy.linearGMRESSolver", "fipy.solvers.scipy.linearLUSolver", "fipy.solvers.scipy.linearPCGSolver", "fipy.solvers.scipy.scipyKrylovSolver", "fipy.solvers.scipy.scipySolver", "fipy.solvers.solver", "fipy.solvers.test", "fipy.solvers.trilinos", "fipy.solvers.trilinos.comms", "fipy.solvers.trilinos.comms.epetraCommWrapper", "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper", "fipy.solvers.trilinos.comms.serialEpetraCommWrapper", "fipy.solvers.trilinos.linearBicgstabSolver", "fipy.solvers.trilinos.linearCGSSolver", "fipy.solvers.trilinos.linearGMRESSolver", "fipy.solvers.trilinos.linearLUSolver", "fipy.solvers.trilinos.linearPCGSolver", "fipy.solvers.trilinos.preconditioners", "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner", "fipy.solvers.trilinos.preconditioners.icPreconditioner", "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner", "fipy.solvers.trilinos.preconditioners.preconditioner", "fipy.solvers.trilinos.trilinosAztecOOSolver", "fipy.solvers.trilinos.trilinosMLTest", "fipy.solvers.trilinos.trilinosNonlinearSolver", "fipy.solvers.trilinos.trilinosSolver", "fipy.steppers", "fipy.steppers.pidStepper", "fipy.steppers.pseudoRKQSStepper", "fipy.steppers.stepper", "fipy.terms", "fipy.terms.abstractBinaryTerm", "fipy.terms.abstractConvectionTerm", "fipy.terms.abstractDiffusionTerm", "fipy.terms.abstractUpwindConvectionTerm", "fipy.terms.advectionTerm", "fipy.terms.asymmetricConvectionTerm", "fipy.terms.binaryTerm", "fipy.terms.cellTerm", "fipy.terms.centralDiffConvectionTerm", "fipy.terms.coupledBinaryTerm", "fipy.terms.diffusionTerm", "fipy.terms.diffusionTermCorrection", "fipy.terms.diffusionTermNoCorrection", "fipy.terms.explicitDiffusionTerm", "fipy.terms.explicitSourceTerm", "fipy.terms.explicitUpwindConvectionTerm", "fipy.terms.exponentialConvectionTerm", "fipy.terms.faceTerm", "fipy.terms.firstOrderAdvectionTerm", "fipy.terms.hybridConvectionTerm", "fipy.terms.implicitDiffusionTerm", "fipy.terms.implicitSourceTerm", "fipy.terms.nonDiffusionTerm", "fipy.terms.powerLawConvectionTerm", "fipy.terms.residualTerm", "fipy.terms.sourceTerm", "fipy.terms.term", "fipy.terms.test", "fipy.terms.transientTerm", "fipy.terms.unaryTerm", "fipy.terms.upwindConvectionTerm", "fipy.terms.vanLeerConvectionTerm", "fipy.testFiPy", "fipy.tests", "fipy.tests.doctestPlus", "fipy.tests.lateImportTest", "fipy.tests.test", "fipy.tests.testProgram", "fipy.tools", "fipy.tools.comms", "fipy.tools.comms.commWrapper", "fipy.tools.comms.dummyComm", "fipy.tools.debug", "fipy.tools.decorators", "fipy.tools.dimensions", "fipy.tools.dimensions.DictWithDefault", "fipy.tools.dimensions.NumberDict", "fipy.tools.dimensions.physicalField", "fipy.tools.dump", "fipy.tools.inline", "fipy.tools.logging", "fipy.tools.numerix", "fipy.tools.parser", "fipy.tools.sharedtempfile", "fipy.tools.test", "fipy.tools.vector", "fipy.tools.version", "fipy.tools.vitals", "fipy.variables", "fipy.variables.addOverFacesVariable", "fipy.variables.arithmeticCellToFaceVariable", "fipy.variables.betaNoiseVariable", "fipy.variables.binaryOperatorVariable", "fipy.variables.cellToFaceVariable", "fipy.variables.cellVariable", "fipy.variables.constant", "fipy.variables.constraintMask", "fipy.variables.coupledCellVariable", "fipy.variables.distanceVariable", "fipy.variables.exponentialNoiseVariable", "fipy.variables.faceGradContributionsVariable", "fipy.variables.faceGradVariable", "fipy.variables.faceVariable", "fipy.variables.gammaNoiseVariable", "fipy.variables.gaussCellGradVariable", "fipy.variables.gaussianNoiseVariable", "fipy.variables.harmonicCellToFaceVariable", "fipy.variables.histogramVariable", "fipy.variables.interfaceAreaVariable", "fipy.variables.interfaceFlagVariable", "fipy.variables.leastSquaresCellGradVariable", "fipy.variables.levelSetDiffusionVariable", "fipy.variables.meshVariable", "fipy.variables.minmodCellToFaceVariable", "fipy.variables.modCellGradVariable", "fipy.variables.modCellToFaceVariable", "fipy.variables.modFaceGradVariable", "fipy.variables.modPhysicalField", "fipy.variables.modularVariable", "fipy.variables.noiseVariable", "fipy.variables.operatorVariable", "fipy.variables.scharfetterGummelFaceVariable", "fipy.variables.surfactantConvectionVariable", "fipy.variables.surfactantVariable", "fipy.variables.test", "fipy.variables.unaryOperatorVariable", "fipy.variables.uniformNoiseVariable", "fipy.variables.variable", "fipy.viewers", "fipy.viewers.matplotlibViewer", "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer", "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer", "fipy.viewers.matplotlibViewer.matplotlib1DViewer", "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer", "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer", "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer", "fipy.viewers.matplotlibViewer.matplotlib2DViewer", "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer", "fipy.viewers.matplotlibViewer.matplotlibStreamViewer", "fipy.viewers.matplotlibViewer.matplotlibVectorViewer", "fipy.viewers.matplotlibViewer.test", "fipy.viewers.mayaviViewer", "fipy.viewers.mayaviViewer.mayaviClient", "fipy.viewers.mayaviViewer.mayaviDaemon", "fipy.viewers.mayaviViewer.test", "fipy.viewers.multiViewer", "fipy.viewers.test", "fipy.viewers.testinteractive", "fipy.viewers.tsvViewer", "fipy.viewers.viewer", "fipy.viewers.vtkViewer", "fipy.viewers.vtkViewer.test", "fipy.viewers.vtkViewer.vtkCellViewer", "fipy.viewers.vtkViewer.vtkFaceViewer", "fipy.viewers.vtkViewer.vtkViewer", "Glossary", "Introduction", "FiPy Manual", "Finite Volume Method", "General Conservation Equation", "Theoretical and Numerical Background", "Numerical Schemes", "References", "package", "package.subpackage", "package.subpackage.base", "package.subpackage.object", "How to Read the Modules Documentation"], "terms": {"refer": [0, 2, 8, 15, 20, 21, 71, 81, 119, 174, 178, 188, 231, 246, 465, 473, 474], "usag": [0, 5, 6, 20, 464], "current": [0, 2, 8, 9, 11, 13, 15, 17, 19, 47, 137, 138, 139, 144, 178, 187, 189, 330, 333, 372, 376, 395, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 466], "convent": [0, 20, 464, 467], "whether": [0, 8, 10, 12, 19, 21, 74, 139, 141, 142, 144, 372, 376, 385, 386, 389, 391, 406, 435, 438, 439, 440, 441, 442, 443, 444, 446, 447], "fix": [0, 8, 9, 11, 20, 72, 73, 75, 81, 90, 116, 161, 171, 172, 174, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 464], "bug": [0, 2, 3, 8, 21, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "ad": [0, 2, 4, 9, 11, 17, 21, 114, 119, 166, 167, 171, 172, 174, 186, 193, 194, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 351, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 473], "featur": [0, 3, 8, 21, 119, 463, 470], "all": [0, 2, 3, 6, 8, 9, 10, 11, 12, 15, 16, 17, 18, 20, 21, 31, 32, 75, 81, 96, 102, 106, 110, 116, 138, 141, 142, 144, 153, 156, 158, 161, 163, 164, 171, 172, 178, 180, 184, 186, 187, 188, 206, 221, 257, 263, 264, 268, 269, 280, 296, 302, 306, 311, 329, 331, 332, 342, 372, 374, 376, 380, 385, 389, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 463, 466, 467, 469, 473, 474], "work": [0, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 47, 63, 74, 81, 119, 162, 163, 164, 174, 178, 186, 187, 189, 330, 335, 366, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463, 464, 466, 473], "fipi": [0, 2, 3, 4, 6, 9, 10, 13, 14, 15, 16, 18, 19, 21, 23, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 91, 94, 95, 104, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 137, 138, 139, 141, 142, 144, 156, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 187, 188, 463, 464, 466, 467, 468, 469, 471, 472, 473, 475], "should": [0, 2, 6, 8, 9, 10, 11, 15, 17, 47, 72, 73, 74, 81, 91, 137, 144, 163, 164, 174, 178, 186, 187, 188, 221, 251, 289, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 376, 381, 385, 389, 390, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 473, 474], "conduct": [0, 8, 81, 466, 469], "pull": [0, 20, 464], "request": [0, 2, 3, 11, 16], "If": [0, 3, 7, 8, 11, 14, 16, 17, 21, 34, 36, 49, 50, 51, 56, 59, 60, 65, 72, 73, 74, 75, 77, 78, 81, 85, 110, 111, 112, 113, 114, 115, 116, 123, 137, 138, 139, 141, 142, 144, 162, 163, 164, 166, 167, 173, 174, 186, 187, 188, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 306, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 380, 381, 385, 386, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 466, 473, 474], "i": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 56, 57, 59, 60, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 93, 94, 95, 97, 99, 100, 104, 107, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 131, 136, 137, 138, 139, 144, 149, 150, 156, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 187, 188, 189, 191, 193, 195, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 270, 274, 275, 276, 277, 278, 279, 280, 287, 288, 290, 291, 294, 296, 299, 300, 301, 302, 303, 306, 311, 313, 314, 315, 316, 317, 328, 329, 330, 332, 333, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 374, 375, 376, 380, 381, 385, 386, 389, 390, 391, 393, 394, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 438, 439, 441, 443, 444, 446, 447, 451, 456, 457, 463, 464, 466, 467, 468, 469, 470, 473, 474], "alreadi": [0, 3, 10, 186, 376, 385], "report": [0, 2, 3, 17, 372], "github": [0, 2, 8, 9, 11, 13, 15, 20, 171, 172, 463], "issu": [0, 2, 8, 9, 11, 15, 17, 20, 21, 163, 164, 187, 188, 381, 406, 446], "name": [0, 2, 5, 8, 10, 11, 17, 20, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 104, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 138, 141, 142, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 188, 206, 221, 225, 251, 306, 337, 372, 376, 381, 385, 386, 391, 395, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 473, 474], "accordingli": 0, "issue12345": 0, "summary_of_what_branch_address": 0, "checkout": [0, 9, 11], "b": [0, 2, 14, 17, 21, 31, 32, 103, 139, 163, 164, 166, 174, 221, 268, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 466, 470], "edit": [0, 2, 138, 335, 470], "add": [0, 2, 11, 14, 17, 20, 56, 113, 114, 174, 193, 194, 195, 206, 221, 225, 251, 306, 337, 362, 376, 385, 436, 451], "emac": 0, "commit": 0, "m": [0, 11, 13, 14, 17, 20, 74, 111, 113, 139, 141, 144, 161, 162, 171, 172, 173, 174, 178, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 334, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 456, 464, 470], "refactoring_stage_a": 0, "refactoring_stage_b": 0, "sure": [0, 9, 11, 16, 17, 187], "up": [0, 2, 3, 6, 8, 11, 13, 14, 16, 17, 18, 21, 31, 32, 72, 73, 119, 138, 162, 173, 221, 436, 451, 466], "date": [0, 2], "fetch": [0, 9, 11], "origin": [0, 2, 21, 166, 171, 172, 216, 217, 218, 219, 220, 239, 240, 248, 249, 250, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "state": [0, 2, 8, 9, 11, 12, 31, 32, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 72, 73, 75, 81, 82, 83, 85, 91, 94, 107, 114, 138, 144, 174, 178, 186, 467, 468], "diff": [0, 36, 187, 188], "resolv": [0, 2, 8, 11, 186, 342], "ani": [0, 2, 7, 8, 9, 10, 11, 12, 15, 16, 17, 20, 21, 31, 32, 75, 116, 138, 139, 141, 142, 144, 174, 186, 187, 188, 195, 221, 231, 251, 342, 374, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 463, 466, 467, 473, 474], "conflict": [0, 2, 11], "test": [0, 2, 4, 6, 7, 8, 9, 11, 13, 16, 20, 23, 32, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 68, 72, 73, 77, 78, 80, 81, 82, 83, 91, 93, 95, 96, 97, 99, 100, 102, 103, 104, 107, 110, 114, 116, 119, 123, 124, 126, 128, 129, 130, 131, 138, 149, 150, 162, 163, 164, 166, 167, 175, 182, 186, 189, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 251, 330, 342, 345, 346, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369, 370, 376, 385, 386, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 440, 442, 443, 444, 446, 447, 449, 450, 455, 463, 464], "python": [0, 2, 3, 6, 7, 8, 13, 14, 15, 16, 18, 20, 22, 81, 91, 137, 138, 139, 141, 142, 144, 156, 161, 171, 172, 173, 174, 178, 187, 189, 306, 376, 385, 390, 394, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 449, 450, 451, 463, 464, 466, 470, 473, 474], "setup": [0, 2, 7, 11, 13, 17, 81, 108, 110, 114, 116, 123, 124, 128, 130, 138, 189, 374], "py": [0, 2, 6, 7, 10, 11, 13, 15, 17, 34, 78, 80, 81, 90, 91, 93, 94, 95, 100, 104, 107, 111, 113, 137, 138, 139, 144, 156, 171, 172, 174, 186, 189, 306, 449, 450, 451, 473], "necessari": [0, 2, 8, 11, 16, 17, 21, 67, 77, 80, 81, 161, 162, 163, 164, 167, 171, 172, 178, 186, 187, 188, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446, 467, 473], "fork": 0, "repositori": [0, 2, 8, 9, 11, 21, 376, 395, 463], "remot": 0, "link": [0, 2, 3, 9, 11, 21], "your": [0, 2, 3, 7, 8, 9, 10, 11, 13, 14, 17, 19, 74, 81, 186, 187, 188, 306, 385, 389, 463, 473], "myfork": 0, "myforkurl": 0, "push": 0, "now": [0, 2, 3, 8, 9, 11, 13, 17, 32, 63, 72, 73, 75, 81, 110, 111, 112, 116, 119, 138, 162, 163, 164, 174, 186, 187, 188, 463, 466], "creat": [0, 2, 6, 8, 11, 12, 17, 34, 36, 49, 50, 51, 59, 60, 71, 72, 73, 77, 81, 82, 83, 85, 110, 111, 112, 113, 114, 115, 126, 130, 138, 141, 142, 157, 161, 162, 166, 167, 171, 172, 173, 174, 175, 186, 187, 191, 195, 216, 217, 218, 219, 220, 221, 228, 229, 231, 232, 233, 238, 239, 240, 246, 248, 249, 257, 263, 264, 268, 269, 280, 290, 293, 294, 295, 296, 302, 306, 311, 319, 320, 321, 322, 323, 324, 325, 328, 329, 331, 332, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 361, 363, 364, 366, 368, 369, 372, 376, 385, 389, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 446, 447, 449, 450, 451, 456, 457, 458, 460, 461, 462, 463, 466, 473, 474], "against": [0, 6, 17, 49, 50, 51, 54, 56, 59, 60, 61, 65, 68, 77, 78, 81, 162, 163, 164, 166, 174, 186, 376, 385, 437], "usnistgov": [0, 3, 8, 9, 11], "The": [0, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 31, 32, 33, 34, 36, 47, 49, 50, 51, 52, 56, 57, 59, 60, 62, 66, 67, 68, 72, 73, 74, 75, 77, 78, 80, 81, 85, 90, 91, 94, 95, 97, 99, 100, 104, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 136, 137, 138, 139, 141, 142, 144, 149, 150, 151, 156, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 186, 187, 188, 189, 193, 194, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 258, 259, 260, 261, 262, 263, 266, 267, 268, 270, 274, 275, 276, 277, 278, 279, 280, 287, 288, 289, 290, 291, 296, 299, 300, 301, 302, 303, 306, 313, 314, 315, 316, 317, 328, 333, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 381, 385, 389, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 475], "initi": [0, 2, 8, 11, 21, 31, 32, 49, 50, 51, 56, 59, 60, 71, 77, 81, 82, 83, 85, 90, 112, 119, 123, 126, 130, 137, 138, 141, 142, 144, 150, 151, 162, 163, 164, 166, 167, 173, 174, 178, 186, 187, 221, 326, 327, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 402, 406, 410, 420, 426, 427, 429, 431], "autom": [0, 2, 4, 6, 21, 187, 463], "check": [0, 2, 9, 10, 11, 17, 21, 47, 78, 81, 111, 126, 151, 221, 386, 394, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "statu": [0, 9, 11, 16], "absolut": [0, 8, 95, 111, 126, 376, 385, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "document": [0, 2, 3, 5, 7, 9, 11, 12, 17, 20, 21, 81, 330, 376, 389, 390, 395, 463, 465, 473], "failur": [0, 2, 8, 45, 46, 81, 372, 373], "still": [0, 2, 6, 8, 11, 74, 114, 174, 186, 187, 374, 389, 466], "an": [0, 2, 3, 6, 7, 9, 11, 12, 14, 15, 16, 17, 19, 20, 21, 31, 32, 36, 49, 50, 59, 60, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 91, 108, 110, 111, 112, 113, 114, 115, 116, 119, 129, 137, 138, 150, 157, 161, 162, 163, 164, 167, 171, 172, 174, 178, 186, 187, 189, 195, 221, 258, 259, 260, 261, 262, 266, 267, 268, 270, 274, 275, 276, 277, 278, 279, 299, 300, 301, 303, 313, 314, 315, 316, 317, 342, 372, 376, 385, 386, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 441, 442, 443, 458, 463, 464, 466, 467, 469, 470, 473, 474], "experiment": [0, 2, 81, 137, 138, 139, 144, 161, 171, 172], "you": [0, 2, 3, 7, 8, 9, 10, 11, 13, 14, 17, 19, 20, 31, 32, 33, 34, 74, 81, 137, 139, 144, 161, 162, 171, 172, 186, 187, 188, 221, 306, 389, 464, 473, 474], "would": [0, 10, 11, 15, 17, 31, 33, 34, 81, 119, 163, 164, 174, 187, 189, 376, 391, 466], "like": [0, 6, 8, 11, 15, 17, 19, 21, 56, 81, 119, 174, 186, 195, 376, 385, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 451, 463, 466, 467, 473, 474], "its": [0, 2, 6, 11, 12, 16, 17, 19, 21, 47, 81, 130, 138, 161, 171, 172, 187, 191, 195, 221, 263, 264, 294, 296, 306, 328, 329, 332, 333, 345, 355, 363, 364, 376, 385, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 439, 446, 457, 466, 473], "impact": 0, "mai": [0, 3, 6, 8, 9, 11, 12, 14, 15, 16, 17, 21, 47, 81, 163, 164, 187, 188, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 251, 306, 374, 381, 389, 466, 474], "prepend": 0, "wip": 0, "titl": [0, 2, 12, 20, 39, 40, 141, 142, 161, 171, 172, 334, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "thi": [0, 2, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 31, 32, 34, 36, 45, 46, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 91, 93, 94, 95, 96, 97, 99, 100, 104, 107, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 136, 137, 138, 139, 144, 149, 150, 151, 156, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 186, 187, 188, 189, 191, 193, 194, 195, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 251, 263, 264, 289, 290, 294, 296, 306, 328, 329, 330, 332, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 374, 375, 376, 381, 385, 389, 390, 391, 393, 395, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 451, 457, 463, 464, 466, 468, 469, 473, 474], "prevent": [0, 6, 16, 139, 178, 373, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 473], "being": [0, 9, 11, 12, 17, 49, 50, 51, 59, 60, 77, 81, 94, 95, 99, 100, 104, 174, 186, 246, 406, 463, 466, 473, 474], "befor": [0, 2, 8, 9, 10, 11, 16, 17, 22, 31, 32, 81, 163, 164, 173, 186, 187, 198, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 380, 474], "": [0, 2, 3, 4, 6, 7, 10, 11, 14, 16, 17, 20, 21, 31, 32, 39, 67, 72, 73, 81, 108, 111, 113, 116, 138, 139, 141, 144, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 178, 186, 187, 194, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 438, 439, 441, 442, 443, 444, 446, 447, 463, 464, 468, 470, 473], "allow": [0, 2, 6, 8, 11, 16, 17, 19, 21, 86, 96, 116, 174, 372, 385, 390, 463, 469], "run": [0, 2, 6, 7, 9, 10, 11, 16, 18, 19, 20, 21, 36, 49, 50, 51, 56, 59, 60, 65, 72, 73, 75, 77, 81, 85, 91, 96, 106, 110, 111, 112, 113, 114, 115, 116, 137, 138, 139, 144, 153, 156, 158, 162, 166, 167, 173, 174, 180, 184, 186, 189, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 372, 375, 376, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 449, 450, 451, 463, 464], "pleas": [0, 2, 3, 7, 8, 11, 14, 15, 186, 187, 188], "respect": [0, 2, 108, 113, 115, 162, 163, 164, 167, 173, 178, 195, 466, 467], "resourc": [0, 2, 3, 11, 17, 189], "do": [0, 2, 3, 7, 9, 10, 11, 17, 20, 21, 47, 81, 129, 131, 138, 139, 174, 178, 186, 187, 188, 195, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 257, 335, 376, 391, 393, 436, 451, 456, 464, 473, 474], "bulk": [0, 137, 138, 144, 163, 164], "local": [0, 11, 13, 19, 72, 73, 81, 95, 150, 221, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 395, 463], "machin": [0, 17, 19, 21], "own": [0, 7, 9, 11, 13, 16, 17, 21, 81, 186, 187, 385, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 471, 472, 475], "account": [0, 3, 11, 17, 137, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "have": [0, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 21, 32, 68, 71, 77, 78, 80, 81, 86, 108, 110, 111, 112, 113, 114, 115, 119, 130, 137, 139, 144, 161, 163, 164, 171, 172, 173, 174, 186, 187, 188, 195, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 257, 342, 374, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 446, 456, 466, 467, 473], "lot": [0, 96, 372], "enabl": [0, 2, 11, 15, 16, 17, 21, 189, 373], "servic": [0, 12], "can": [0, 2, 3, 6, 7, 9, 10, 11, 13, 15, 16, 17, 18, 19, 20, 21, 31, 32, 34, 36, 49, 50, 51, 56, 59, 60, 65, 68, 71, 72, 73, 74, 77, 81, 82, 83, 85, 90, 107, 108, 110, 111, 112, 114, 115, 119, 123, 124, 126, 128, 130, 139, 144, 149, 150, 156, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 178, 186, 187, 188, 189, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 291, 306, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 389, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 446, 463, 464, 466, 467, 468, 469, 471, 472, 473, 474, 475], "avoid": [0, 2, 11, 119, 186, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "individu": [0, 2, 7, 8, 21, 188], "skip": [0, 17, 372], "ci": [0, 2, 463], "messag": [0, 3, 16, 17, 20, 81, 381, 463, 464], "when": [0, 2, 6, 7, 8, 9, 11, 13, 15, 16, 17, 19, 21, 81, 110, 119, 126, 138, 139, 163, 164, 174, 186, 187, 188, 206, 220, 221, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 376, 390, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446, 466, 467, 474], "readi": [0, 9, 11, 221], "successfulli": [0, 9, 11], "pass": [0, 2, 9, 11, 16, 17, 51, 119, 186, 187, 188, 189, 330, 372, 376, 385, 441, 442, 446, 463, 473], "send": [0, 3], "mail": [0, 2, 8, 15, 17, 20, 187, 188], "list": [0, 2, 8, 9, 10, 11, 13, 14, 15, 20, 21, 22, 72, 73, 81, 110, 111, 112, 141, 142, 187, 188, 189, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 311, 385, 399, 402, 406, 407, 410, 411, 413, 415, 426, 427, 429, 430, 431, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 463, 466, 474], "about": [0, 2, 3, 6, 7, 8, 9, 11, 13, 14, 17, 21, 31, 32, 33, 34, 36, 81, 156, 161, 163, 164, 174, 186, 187, 189, 306, 330, 342, 376, 395], "develop": [0, 2, 3, 4, 9, 12, 14, 15, 17, 19, 20, 189, 464, 470], "automat": [0, 2, 7, 8, 11, 17, 21, 31, 32, 33, 34, 81, 82, 83, 163, 164, 178, 186, 187, 376, 386, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 441, 442, 451, 473, 474], "see": [0, 2, 3, 6, 7, 11, 16, 17, 18, 19, 20, 21, 22, 36, 72, 73, 81, 82, 83, 110, 111, 112, 119, 137, 139, 144, 161, 162, 163, 164, 166, 167, 171, 172, 174, 186, 187, 188, 192, 268, 330, 346, 353, 354, 357, 361, 368, 372, 390, 446, 451, 463, 464, 466, 468], "respond": 0, "without": [0, 2, 6, 11, 12, 17, 19, 21, 68, 81, 166, 167, 171, 172, 178, 187, 372, 373, 376, 385, 391, 426, 446, 473], "further": [0, 2, 3, 10, 11, 17, 21, 47, 119, 144, 346, 353, 354, 357, 361, 368], "action": [0, 21, 138, 156, 166, 390, 463, 473], "part": [0, 8, 9, 11, 13, 19, 21, 36, 81, 108, 137, 178, 221, 246, 466], "administr": [0, 14], "onli": [0, 2, 6, 7, 9, 10, 11, 16, 17, 18, 19, 20, 21, 33, 34, 74, 75, 81, 112, 114, 116, 119, 136, 137, 139, 141, 142, 162, 163, 164, 174, 178, 186, 193, 194, 221, 238, 342, 345, 348, 349, 350, 351, 355, 356, 364, 366, 372, 376, 385, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 430, 431, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 463, 466, 469], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 14, 15, 16, 18, 20, 21, 31, 32, 33, 34, 36, 47, 51, 52, 57, 65, 66, 68, 71, 72, 73, 74, 78, 80, 81, 82, 83, 85, 86, 90, 93, 94, 95, 104, 107, 111, 119, 123, 124, 130, 136, 137, 138, 139, 141, 142, 144, 161, 162, 163, 164, 166, 167, 173, 174, 178, 186, 187, 188, 189, 195, 198, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 251, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 270, 280, 287, 288, 289, 290, 291, 296, 299, 300, 301, 302, 303, 306, 313, 314, 315, 317, 326, 327, 331, 332, 333, 334, 336, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 376, 381, 385, 386, 389, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474], "interfac": [0, 2, 4, 7, 8, 11, 14, 16, 17, 19, 21, 108, 126, 137, 138, 149, 150, 151, 161, 163, 164, 171, 172, 174, 258, 259, 260, 261, 262, 266, 267, 268, 270, 274, 275, 276, 277, 278, 279, 282, 285, 299, 300, 301, 303, 313, 314, 315, 316, 317, 391, 406, 431, 463, 470], "particularli": [0, 9, 11, 72, 73, 81], "long": [0, 2, 17, 47, 111, 163, 164, 187, 374, 376, 385, 389, 474], "histori": 0, "consid": [0, 2, 8, 11, 68, 75, 81, 119, 161, 171, 172, 173, 187, 306, 466], "squash": 0, "we": [0, 2, 3, 6, 8, 9, 10, 11, 14, 15, 17, 21, 31, 32, 33, 34, 36, 47, 49, 50, 51, 54, 56, 59, 60, 61, 65, 67, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 110, 111, 112, 113, 114, 115, 116, 119, 129, 131, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 186, 187, 188, 221, 231, 335, 366, 385, 389, 393, 399, 406, 407, 411, 413, 434, 466, 473, 474], "azur": [0, 2, 463], "cloud": [0, 2, 463], "These": [0, 2, 6, 7, 8, 10, 11, 17, 19, 21, 31, 32, 72, 73, 115, 119, 467, 471, 472, 473, 475], "ar": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 21, 32, 36, 39, 40, 47, 52, 57, 68, 72, 73, 74, 75, 81, 82, 83, 91, 108, 110, 111, 112, 113, 114, 115, 116, 119, 137, 138, 139, 144, 150, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 178, 186, 187, 188, 189, 194, 221, 232, 233, 238, 246, 250, 251, 255, 306, 310, 330, 342, 345, 348, 349, 350, 351, 355, 356, 364, 366, 372, 374, 376, 378, 385, 389, 393, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 440, 446, 463, 466, 467, 468, 469, 473, 474], "configur": [0, 2, 3, 17, 282, 283, 285], "fipysourc": [0, 17], "pipelin": [0, 2, 4, 451], "yml": 0, "workflow": 0, "nistthedocs2death": 0, "nix": [0, 2, 20, 464], "log": [0, 20, 115, 141, 163, 164, 173, 178, 179, 376, 385, 438, 439, 440, 441, 442, 443, 444, 446, 447, 464, 465], "changelog": [0, 2], "txt": [0, 2, 376, 391], "rel": [0, 2, 17, 21, 31, 32, 111, 178, 376, 385, 389], "new": [0, 2, 6, 8, 11, 13, 21, 71, 81, 114, 115, 138, 144, 167, 174, 187, 188, 217, 221, 227, 229, 232, 238, 246, 372, 376, 381, 385, 386, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463, 474], "after": [0, 2, 10, 11, 13, 17, 21, 32, 47, 113, 115, 119, 174, 187, 374, 376, 381, 385, 389, 406], "x": [0, 2, 7, 8, 9, 11, 13, 15, 16, 17, 18, 20, 22, 36, 40, 51, 54, 56, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 94, 95, 97, 99, 100, 104, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 138, 141, 142, 149, 150, 156, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 186, 187, 188, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 440, 442, 443, 444, 446, 447, 449, 450, 451, 456, 463], "y": [0, 7, 8, 9, 11, 14, 15, 17, 18, 20, 40, 52, 57, 71, 72, 73, 82, 83, 94, 112, 119, 123, 126, 128, 129, 131, 138, 141, 142, 149, 150, 157, 161, 162, 166, 171, 172, 174, 175, 187, 188, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 440, 442, 443, 444, 446, 447, 449, 450, 456, 463], "mileston": 0, "z": [0, 9, 11, 20, 157, 161, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 385, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 449, 450], "obtain": [0, 2, 7, 8, 9, 17, 20, 31, 33, 34, 75, 81, 116, 119, 138, 139, 156, 162, 163, 164, 174, 186, 188, 221, 413, 426, 464, 466, 468, 469], "rest": [0, 138], "format": [0, 2, 16, 17, 32, 36, 376, 385, 386, 395, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 456, 458, 460, 461, 462, 463], "everi": [0, 19, 21, 81, 137, 144, 311, 376, 385, 389], "close": [0, 2, 11, 13, 19, 21, 74, 81, 119, 178, 221, 376, 391, 446], "sinc": [0, 2, 6, 21, 110, 111, 112, 114, 116, 174, 187, 188, 231, 335, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 469], "last": [0, 2, 8, 119, 178, 186, 187, 188, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 346, 353, 354, 357, 361, 368, 369, 376, 385, 389, 395, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "major": [0, 2, 8, 178], "curat": [0, 7], "output": [0, 2, 15, 16, 19, 31, 32, 33, 34, 36, 119, 221, 306, 330, 389, 456], "so": [0, 3, 6, 10, 11, 13, 17, 19, 20, 21, 31, 33, 34, 67, 74, 113, 115, 119, 138, 141, 142, 161, 163, 164, 166, 171, 172, 174, 178, 186, 187, 221, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 376, 385, 389, 406, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 464, 466, 469, 474], "clear": [0, 2, 17, 21], "what": [0, 2, 10, 17, 20, 21, 81, 178, 187, 330, 389, 393, 464, 473], "big": 0, "deal": [0, 10, 11, 17, 21, 136], "sometim": [0, 2, 8, 72, 73], "redund": [0, 21], "e": [0, 2, 8, 10, 11, 14, 15, 17, 19, 54, 56, 57, 61, 66, 74, 75, 81, 108, 113, 114, 116, 138, 163, 164, 167, 174, 178, 179, 186, 188, 251, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 441, 442, 456, 466, 467, 468, 470, 471, 472, 475], "g": [0, 8, 10, 11, 14, 15, 17, 19, 39, 72, 73, 81, 95, 108, 113, 114, 163, 164, 173, 174, 188, 221, 251, 334, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 441, 442, 456, 466, 468, 470, 471, 472, 475], "issue123": 0, "blah": 0, "prefer": [0, 2, 8, 10, 11, 17, 72, 73, 466], "given": [0, 2, 6, 7, 11, 15, 17, 21, 36, 49, 50, 51, 52, 57, 59, 60, 62, 66, 67, 71, 75, 77, 78, 81, 100, 108, 115, 119, 128, 129, 131, 137, 138, 139, 144, 150, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 186, 187, 193, 194, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369, 372, 376, 381, 385, 386, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446, 451, 466, 467, 471, 472, 475], "correspond": [0, 15, 67, 81, 139, 144, 193, 194, 195, 221, 376, 385, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "under": [0, 2, 14, 16, 20, 21, 31, 32, 81, 161, 171, 172, 173, 178, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 395, 464, 474], "altern": [0, 7, 11, 17, 141, 142, 220, 291, 389, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 473], "item": [0, 187, 188], "remov": [0, 2, 8, 9, 11, 19, 119, 139, 161, 386, 393, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446], "appropri": [0, 2, 8, 11, 17, 81, 85, 113, 115, 166, 173, 174, 186, 195, 219, 335, 376, 385, 466, 473], "move": [0, 2, 7, 8, 11, 14, 81, 93, 119, 141, 142, 163, 164, 174, 186], "thank": [0, 2, 17, 119], "mention": [0, 11, 81, 469], "recogn": 0, "outsid": [0, 157, 231, 456], "contributor": [0, 20, 464, 465], "requir": [0, 2, 6, 8, 15, 16, 17, 18, 19, 20, 21, 32, 49, 50, 59, 60, 68, 74, 77, 80, 81, 91, 119, 137, 138, 139, 144, 157, 163, 164, 166, 167, 171, 172, 174, 178, 187, 188, 220, 221, 231, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 289, 290, 296, 299, 300, 301, 302, 303, 306, 313, 314, 315, 316, 317, 329, 330, 331, 332, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463, 464, 466, 474], "pygithub": 0, "panda": [0, 17, 463], "doesn": [0, 2, 3, 17, 20, 31, 32, 33, 34, 178, 221, 257, 436, 464], "t": [0, 2, 3, 9, 10, 11, 14, 17, 20, 21, 31, 32, 33, 34, 36, 71, 72, 73, 74, 77, 78, 81, 108, 110, 114, 123, 124, 138, 139, 144, 149, 150, 161, 162, 163, 164, 167, 171, 172, 173, 174, 178, 187, 188, 221, 251, 257, 337, 342, 356, 366, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 464, 467, 468, 470, 473, 474], "show": [0, 2, 3, 6, 17, 45, 46, 119, 139, 141, 142, 144, 166, 426], "green": [0, 2], "box": [0, 2, 19, 81, 161, 171, 172, 175, 186, 246, 268], "note": [0, 3, 11, 13, 21, 31, 32, 67, 81, 161, 174, 206, 221, 225, 251, 306, 337, 374, 413, 436], "readm": [0, 2], "instal": [0, 2, 5, 8, 9, 10, 16, 17, 19, 20, 21, 22, 137, 144, 161, 171, 172, 463, 464, 465, 470], "tag": [0, 2, 3, 9, 11], "abov": [0, 6, 8, 10, 15, 17, 21, 36, 81, 119, 138, 139, 144, 174, 175, 246, 342, 376, 385, 473], "annot": [0, 380], "upon": [0, 12, 17, 21, 72, 73], "success": [0, 6, 8, 9, 11, 74, 291], "system": [0, 2, 9, 11, 13, 15, 16, 17, 74, 81, 110, 111, 112, 115, 137, 161, 162, 166, 167, 171, 172, 173, 174, 178, 193, 194, 195, 230, 250, 251, 268, 280, 287, 288, 289, 290, 291, 302, 325, 330, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463, 466, 467, 468, 470], "build": [0, 2, 6, 9, 11, 16, 17, 18, 21, 77, 119, 138, 156, 162, 166, 173, 174, 221, 251, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "product": [0, 2, 5, 11, 17, 21, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "artifact": 0, "place": [0, 2, 8, 10, 11, 21, 32, 335, 374, 376, 385, 386, 389, 440], "dist": [0, 2, 374], "linux": [0, 2, 11, 13, 19, 22, 110, 463], "none": [0, 2, 10, 33, 34, 72, 73, 110, 111, 112, 113, 115, 116, 138, 141, 142, 161, 164, 171, 172, 178, 179, 192, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 258, 259, 260, 262, 263, 268, 269, 274, 275, 280, 283, 287, 290, 299, 300, 301, 302, 303, 306, 316, 331, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 374, 375, 376, 381, 385, 386, 389, 390, 391, 395, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 474], "whl": 0, "tar": 0, "gz": [0, 138, 162, 166, 167, 386, 402], "windows_nt": 0, "zip": [0, 171, 172, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "doc": [0, 2, 17, 372, 390, 463, 470], "pdf": [0, 2, 14, 17, 470], "html": [0, 3, 8, 11, 13, 17, 330, 390], "directori": [0, 6, 7, 8, 9, 11, 13, 15, 17, 22, 81, 91, 137, 138, 139, 144, 156, 174, 471, 472, 475], "unpack": [0, 2, 11, 17], "xzf": 0, "c": [0, 2, 6, 11, 14, 16, 17, 21, 67, 81, 103, 138, 139, 144, 161, 162, 163, 164, 171, 172, 178, 335, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463, 470], "attach": [0, 2, 473], "associ": [0, 17, 21, 137, 138, 163, 164], "pypi": [0, 2, 463], "twine": 0, "fipy_vers": 0, "web": [0, 2, 11, 19], "site": [0, 3, 11, 138, 139, 144], "ctcm": [0, 8, 189, 463], "export": [0, 2, 4, 17, 20, 72, 73, 221, 464], "fipy_wwwhost": 0, "bunter": [0, 2], "u": [0, 2, 3, 7, 8, 14, 17, 20, 21, 49, 50, 51, 52, 54, 56, 57, 59, 60, 81, 119, 123, 124, 149, 163, 164, 174, 178, 179, 186, 187, 188, 342, 346, 353, 354, 356, 357, 361, 368, 406, 410, 429, 430, 464, 467, 468, 473], "www": [0, 3, 8, 11, 16, 17, 34, 47, 463, 470], "wd15": [0, 11, 13], "fipy_wwwactiv": 0, "updatewww": 0, "upload_product": 0, "some": [0, 2, 6, 8, 9, 10, 11, 15, 16, 17, 21, 31, 32, 33, 34, 39, 40, 72, 73, 81, 90, 119, 138, 166, 178, 187, 188, 251, 255, 306, 310, 342, 356, 376, 378, 395, 463, 470], "version": [0, 6, 7, 9, 10, 11, 13, 15, 16, 17, 19, 20, 21, 81, 119, 179, 186, 187, 188, 221, 231, 388, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 464], "rsync": 0, "mac": [0, 2, 11, 13, 19, 22], "o": [0, 2, 4, 11, 13, 17, 22, 71, 72, 73, 138, 162, 166, 167], "caus": [0, 2, 8, 15, 17, 119, 161, 171, 172, 186, 187, 206, 221, 225, 251, 306, 337, 436], "problem": [0, 2, 4, 6, 7, 8, 14, 15, 16, 17, 21, 31, 32, 33, 34, 36, 49, 50, 51, 52, 56, 57, 59, 60, 62, 65, 66, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 93, 94, 95, 96, 97, 99, 100, 102, 104, 110, 111, 112, 113, 114, 115, 116, 123, 124, 128, 130, 138, 157, 161, 163, 164, 167, 171, 172, 173, 174, 178, 186, 187, 189, 306, 324, 342, 356, 406, 463, 467], "thei": [0, 3, 8, 10, 11, 15, 17, 21, 74, 81, 163, 164, 187, 188, 189, 342, 372, 385, 474], "try": [0, 2, 9, 11, 16, 34, 49, 50, 59, 60, 72, 73, 78, 81, 119, 138, 161, 163, 164, 171, 172, 174, 187, 376, 385], "erron": 0, "rsrc": 0, "2": [0, 6, 8, 10, 11, 14, 15, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 59, 60, 63, 65, 66, 67, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 95, 104, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 138, 139, 141, 142, 144, 149, 150, 151, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 187, 188, 189, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 323, 333, 335, 342, 345, 346, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369, 372, 376, 385, 386, 389, 390, 393, 394, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 440, 442, 444, 446, 447, 449, 450, 456, 464, 466, 467, 469, 470], "6": [0, 6, 8, 9, 11, 14, 15, 17, 20, 31, 32, 33, 34, 36, 47, 52, 72, 73, 81, 85, 95, 110, 111, 112, 113, 115, 119, 126, 138, 139, 141, 142, 144, 149, 161, 163, 164, 166, 167, 171, 172, 173, 174, 178, 179, 187, 189, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 356, 376, 385, 393, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 456, 464, 469, 470], "doe": [0, 2, 9, 11, 16, 17, 18, 20, 21, 63, 81, 113, 115, 119, 174, 186, 195, 221, 246, 330, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 389, 390, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446, 463, 464, 466, 473], "onc": [0, 3, 6, 11, 13, 75, 81, 113, 115, 130, 156, 173, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385], "receiv": [0, 2, 17], "amend": 0, "ask": [0, 2, 3, 10, 15, 20, 187, 188, 464, 465], "maintain": [0, 17, 110, 111, 112, 187, 188, 406, 431], "process": [0, 2, 6, 11, 14, 15, 17, 19, 20, 21, 31, 32, 161, 171, 172, 173, 189, 221, 311, 334, 385, 449, 450, 463, 464, 467, 468], "hour": [0, 17, 19, 21, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "don": [0, 2, 10, 17, 20, 161, 171, 172, 174, 187, 188, 251, 342, 464, 473, 474], "wish": [0, 7, 8, 11, 17, 67, 71, 137, 139, 144, 162, 175, 187], "wait": [0, 21, 163, 164], "trigger": [0, 435], "reason": [0, 2, 8, 11, 16, 17, 21, 32, 78, 81, 119, 138, 174, 187, 306, 376, 385, 456, 466], "manual": [0, 2, 7, 8, 11, 19, 20, 31, 32, 33, 34, 72, 73, 186, 413, 464, 470, 474], "gener": [0, 2, 6, 9, 11, 14, 16, 17, 20, 21, 81, 96, 116, 138, 163, 164, 174, 186, 187, 188, 191, 195, 220, 221, 225, 226, 227, 268, 287, 288, 289, 290, 374, 381, 385, 391, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 436, 437, 458, 463, 464, 466, 468, 469, 473], "revis": [0, 2, 9, 11], "number": [0, 2, 8, 9, 11, 13, 16, 17, 21, 51, 63, 75, 78, 80, 81, 86, 107, 110, 111, 112, 115, 116, 119, 137, 138, 139, 141, 144, 156, 173, 174, 186, 187, 217, 220, 221, 227, 229, 230, 232, 233, 238, 246, 249, 250, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 289, 290, 296, 299, 300, 301, 302, 303, 306, 313, 314, 315, 316, 317, 326, 327, 329, 330, 331, 332, 333, 337, 348, 366, 376, 380, 385, 389, 399, 402, 407, 410, 411, 413, 415, 420, 426, 427, 429, 434, 438, 439, 440, 441, 442, 443, 444, 446, 447, 466, 467, 469], "sha256": 0, "openssl": 0, "dgst": 0, "path": [0, 10, 15, 17, 71, 138, 162, 166, 167, 221, 449, 450], "reset": [0, 81, 144, 162, 166], "0": [0, 6, 8, 10, 11, 16, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 102, 104, 107, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 138, 139, 141, 142, 144, 149, 150, 156, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 182, 186, 187, 188, 194, 195, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 289, 334, 335, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 376, 385, 389, 391, 393, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 456, 464, 466, 469], "nist": [0, 2, 3, 6, 8, 11, 12, 17, 189, 385, 463], "gov": [0, 3, 8, 11, 16, 17, 330, 463], "how": [1, 2, 3, 7, 11, 17, 20, 21, 31, 32, 67, 72, 73, 81, 138, 156, 157, 163, 164, 166, 186, 187, 188, 372, 426, 464, 465, 473], "read": [1, 2, 3, 11, 20, 21, 166, 186, 187, 188, 221, 376, 386, 391, 402, 464, 465], "modul": [1, 2, 4, 7, 8, 10, 11, 15, 16, 17, 19, 20, 21, 23, 24, 30, 38, 43, 44, 48, 53, 55, 58, 64, 70, 76, 84, 88, 89, 92, 98, 101, 108, 109, 118, 121, 122, 127, 133, 148, 154, 160, 165, 169, 177, 181, 185, 186, 187, 188, 189, 190, 197, 205, 207, 234, 242, 251, 252, 253, 265, 271, 273, 280, 281, 284, 286, 292, 298, 302, 308, 309, 318, 333, 337, 370, 371, 372, 374, 375, 376, 377, 382, 385, 389, 390, 391, 396, 399, 407, 411, 413, 427, 436, 437, 449, 458, 465, 466, 470, 471, 472, 473], "mainten": 2, "releas": [2, 6, 9, 11, 17, 20, 21, 161, 171, 172, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 464, 465], "compat": [2, 17, 111, 187, 188, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "recent": [2, 6, 9, 11, 21, 186, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 346, 353, 354, 357, 361, 368, 369, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "petsc": [2, 17, 20, 32, 85, 110, 463, 464], "numpi": [2, 16, 20, 21, 31, 32, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463, 464, 466], "25": [2, 17, 31, 32, 33, 119, 123, 161, 162, 171, 172, 173, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 335, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 456, 470], "930": 2, "get": [2, 3, 8, 17, 18, 20, 21, 119, 163, 164, 389, 406], "again": [2, 72, 73, 75, 77, 78, 80, 81, 93, 95, 97, 99, 100, 104, 111, 112, 113, 115, 116, 119, 163, 164, 173, 174, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 356], "925": 2, "discourag": 2, "stackoverflow": [2, 15, 20], "876": 2, "875": [2, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "791": 2, "896": 2, "poor": [2, 17, 115, 467], "garbag": 2, "collect": [2, 11, 20, 161, 396, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 440, 444, 453, 463], "petsc4pi": [2, 11, 16, 17, 255, 463], "18": [2, 81, 107, 171, 172, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 385, 430, 467, 470], "wa": [2, 4, 6, 8, 10, 12, 16, 17, 21, 63, 81, 162, 163, 164, 166, 167, 186, 187, 372, 374, 376, 385, 393, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463], "memori": [2, 6, 32, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "leak": 2, "term": [2, 15, 17, 20, 21, 31, 32, 33, 34, 36, 49, 50, 51, 59, 60, 68, 74, 78, 86, 113, 114, 119, 137, 138, 139, 163, 164, 166, 167, 171, 172, 174, 178, 186, 187, 189, 194, 195, 198, 464, 467, 468, 469], "justerrorvector": [2, 20, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "isn": [2, 20, 464], "strictli": 2, "exampl": [2, 3, 6, 8, 10, 11, 13, 15, 16, 17, 19, 20, 21, 189, 372, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 451, 465, 466, 467, 474], "contribut": [2, 4, 17, 21, 74, 193, 194, 195, 342, 351, 356], "jon83carvalho": 2, "clarifi": 2, "mani": [2, 7, 8, 9, 11, 17, 19, 21, 77, 78, 80, 81, 119, 163, 164, 174, 186, 187, 189, 372, 463, 468, 473], "point": [2, 7, 8, 10, 17, 21, 34, 71, 72, 73, 75, 81, 90, 95, 116, 119, 138, 157, 161, 163, 164, 171, 172, 174, 187, 221, 238, 385, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 466], "migrat": [2, 3, 7], "continu": [2, 8, 9, 11, 15, 17, 20, 68, 75, 90, 113, 116, 119, 187, 463, 464, 465, 466], "integr": [2, 7, 9, 11, 17, 20, 21, 163, 164, 334, 376, 385, 463, 464, 465, 466], "updat": [2, 4, 8, 20, 36, 81, 119, 137, 141, 142, 144, 178, 289, 374, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 463, 464], "wheel": 2, "distribut": [2, 11, 12, 15, 17, 19, 21, 75, 116, 399, 407, 411, 413, 415, 427, 434, 451, 463], "substanti": [2, 6], "refactor": [2, 4, 20, 221, 464], "matric": [2, 17, 20, 21, 189, 195, 251, 466], "more": [2, 3, 6, 7, 9, 10, 11, 16, 17, 20, 21, 31, 33, 34, 49, 50, 51, 59, 60, 72, 73, 74, 81, 86, 113, 115, 123, 137, 139, 144, 163, 164, 174, 178, 186, 187, 188, 220, 221, 342, 356, 376, 385, 390, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 440, 441, 442, 456, 464, 466, 473], "consist": [2, 7, 8, 115, 136, 221, 466, 468], "across": [2, 311, 446, 466], "solver": [2, 4, 6, 8, 11, 14, 17, 20, 21, 31, 33, 34, 36, 47, 52, 54, 56, 57, 61, 66, 80, 81, 82, 83, 85, 86, 90, 110, 111, 113, 119, 138, 163, 164, 166, 173, 174, 186, 187, 189, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 463, 464, 465, 466], "863": 2, "refin": [2, 8, 221], "851": 2, "debug": [2, 17, 20, 21, 372], "848": 2, "contact": [2, 7, 14, 15, 20, 186, 464, 470], "inform": [2, 11, 17, 156, 171, 172, 186, 330, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 395, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463], "singl": [2, 8, 10, 17, 19, 21, 31, 32, 33, 34, 74, 75, 110, 114, 116, 163, 164, 174, 178, 216, 217, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 246, 333, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 453], "page": [2, 11, 13, 17, 334], "847": 2, "set": [2, 4, 8, 13, 15, 16, 17, 19, 20, 21, 32, 68, 71, 72, 73, 75, 81, 83, 107, 108, 116, 119, 123, 124, 126, 128, 129, 130, 131, 138, 139, 141, 142, 150, 156, 162, 163, 164, 166, 167, 174, 175, 187, 188, 189, 198, 206, 221, 225, 248, 251, 306, 330, 337, 374, 375, 376, 385, 386, 389, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 463, 464, 466, 468, 470, 473], "822": 2, "replac": [2, 17, 81, 119, 174, 187, 188, 189, 221, 389, 393, 456], "deprec": [2, 3, 8, 17, 20, 141, 142, 381, 394, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "type": [2, 7, 8, 11, 15, 17, 18, 21, 49, 50, 51, 59, 60, 81, 91, 137, 138, 139, 144, 156, 166, 174, 186, 194, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 381, 385, 386, 389, 390, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446, 463], "798": 2, "trilino": [2, 4, 11, 13, 17, 20, 32, 86, 189, 463, 464], "py3k": [2, 463], "797": 2, "7": [2, 6, 11, 15, 17, 31, 34, 72, 73, 95, 100, 110, 111, 112, 115, 119, 138, 139, 144, 157, 163, 164, 166, 178, 189, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 356, 376, 385, 389, 393, 394, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 470], "conda": [2, 11, 17, 20, 463, 464], "environ": [2, 8, 14, 16, 20, 21, 188, 376, 395, 436, 463, 464, 468], "795": 2, "stop": [2, 16, 373], "divid": [2, 17, 20, 246, 376, 385, 389, 431, 446, 466, 468], "zero": [2, 8, 17, 67, 68, 81, 82, 83, 126, 130, 137, 174, 175, 178, 251, 257, 342, 356, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 441, 442], "warn": [2, 8, 16, 17, 111, 187, 306, 374, 375, 381], "lu": [2, 6, 85, 261, 280, 290, 302, 466], "790": 2, "introduc": [2, 21, 63, 67, 111, 112, 119, 161, 171, 172, 187, 188], "sharedtemporaryfil": [2, 20, 376, 391], "bi": 2, "769": 2, "rais": [2, 10, 11, 113, 206, 221, 372, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "importerror": [2, 49, 50, 59, 60, 72, 73, 78, 81, 161, 163, 164, 171, 172, 174, 186], "768": 2, "disabl": 2, "tvtk": [2, 10, 17, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 372], "prerequisit": [2, 9, 11, 16, 17], "aren": 2, "met": 2, "764": 2, "tabul": 2, "depend": [2, 6, 9, 11, 17, 19, 20, 21, 72, 73, 81, 115, 119, 138, 150, 163, 164, 174, 187, 194, 221, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 374, 388, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 435, 463, 464, 466, 469, 473], "763": 2, "749": 2, "stoke": [2, 119], "caviti": [2, 119], "non": [2, 8, 11, 12, 17, 31, 32, 33, 34, 36, 47, 50, 60, 72, 73, 81, 93, 95, 96, 137, 161, 163, 164, 171, 172, 178, 225, 226, 227, 287, 288, 289, 290, 324, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 386, 413, 466], "newtonian": 2, "748": 2, "721": 2, "862": 2, "could": [2, 6, 8, 15, 17, 72, 73, 116, 163, 164, 173, 178, 186, 187, 406], "load": [2, 95, 104, 386, 463], "qt": [2, 385], "platform": [2, 8, 9, 11, 17, 18, 463], "plugin": 2, "xcb": 2, "858": 2, "856": 2, "facevari": [2, 17, 20, 67, 81, 110, 111, 112, 113, 115, 119, 187, 191, 193, 194, 195, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 361, 364, 366, 368, 369, 399, 402, 406, 407, 411, 413, 415, 426, 427, 430, 431, 434, 446, 447, 456, 458, 460, 461, 462, 464, 466], "accumul": [2, 137, 373], "properli": [2, 8, 11, 17, 178, 187, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "parallel": [2, 4, 10, 11, 16, 20, 189, 220, 221, 255, 310, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 376, 378, 463, 464], "850": 2, "switch": [2, 6, 119, 189, 463], "849": 2, "py27": 2, "pyspars": [2, 11, 17, 20, 21, 32, 36, 86, 187, 463, 464, 466], "fail": [2, 10, 16, 17, 186, 376, 385, 406], "841": 2, "matplotlib2dview": [2, 20, 442, 447], "accept": [2, 8, 9, 11, 187, 342, 345, 348, 349, 350, 351, 355, 356, 364, 366, 385], "color": [2, 10, 171, 172, 437, 438, 439, 441, 442, 443, 444, 446], "map": [2, 17, 167, 221, 372], "string": [2, 16, 221, 258, 259, 260, 262, 263, 372, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 474], "836": 2, "coupl": [2, 7, 8, 14, 15, 20, 21, 32, 83, 108, 119, 161, 162, 163, 164, 167, 171, 172, 178, 189, 334, 464, 466, 468], "high": [2, 4, 20, 23, 86, 119, 391, 463, 464], "order": [2, 3, 5, 8, 9, 11, 16, 17, 20, 21, 31, 32, 33, 34, 36, 45, 46, 72, 73, 74, 81, 85, 86, 93, 119, 128, 129, 131, 138, 144, 161, 163, 164, 174, 178, 186, 187, 193, 194, 195, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 348, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 441, 442, 467, 468, 474], "diffus": [2, 4, 14, 15, 17, 19, 20, 31, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 108, 113, 115, 116, 119, 136, 138, 139, 144, 157, 161, 163, 164, 171, 172, 173, 174, 186, 189, 334, 342, 345, 348, 349, 350, 351, 355, 356, 364, 366, 464, 467, 468, 469], "incompat": [2, 11, 186, 187, 188, 376, 385], "833": 2, "tool": [2, 3, 11, 14, 17, 20, 21, 31, 32, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 77, 78, 81, 82, 83, 95, 111, 114, 115, 116, 119, 123, 124, 126, 128, 130, 138, 156, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 187, 188, 189, 221, 366, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 463, 466], "dump": [2, 8, 20, 166, 402], "undocu": 2, "alwai": [2, 7, 8, 9, 11, 15, 17, 31, 32, 33, 34, 81, 191, 220, 263, 264, 294, 296, 306, 328, 329, 332, 345, 355, 363, 364, 374, 389, 420, 427, 435, 439, 457, 466, 473], "gzip": [2, 386], "828": [2, 6], "colorbar": [2, 20, 119, 141, 171, 172, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447], "true": [2, 8, 17, 21, 31, 32, 63, 67, 68, 71, 74, 81, 95, 110, 113, 128, 137, 139, 144, 157, 161, 163, 164, 171, 172, 173, 174, 178, 179, 182, 186, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 374, 375, 376, 380, 385, 386, 389, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 440, 442, 443, 444, 446, 447], "longer": [2, 6, 9, 11, 18, 21, 81, 174, 186, 187, 333, 463], "flow": [2, 8, 17, 20, 174, 178, 324, 334, 467, 470], "826": 2, "gmsh": [2, 4, 10, 20, 71, 72, 73, 104, 137, 139, 144, 188, 221, 372, 463, 464], "818": 2, "gridnd": 2, "mesh": [2, 4, 8, 10, 11, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 96, 97, 99, 100, 104, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 136, 137, 138, 139, 141, 142, 144, 149, 150, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 187, 188, 194, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 386, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 452, 453, 456, 457, 458, 459, 460, 461, 462, 464, 466, 470], "cartesian": [2, 161, 171, 172, 220, 246, 399, 407, 411, 413, 434, 468], "811": [2, 385], "In": [2, 3, 7, 8, 9, 11, 13, 15, 16, 17, 19, 21, 47, 71, 72, 73, 74, 77, 78, 80, 81, 86, 93, 108, 111, 119, 137, 161, 162, 163, 164, 166, 167, 171, 172, 174, 178, 186, 372, 406, 427, 466, 467, 471, 472, 473, 475], "9": [2, 6, 8, 9, 11, 14, 72, 73, 81, 82, 83, 95, 99, 107, 111, 113, 138, 139, 144, 161, 162, 163, 164, 171, 172, 178, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 335, 376, 385, 389, 393, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 437, 442, 443, 444, 449, 450, 470], "__repr__": [2, 20, 191, 192, 193, 194, 195, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 287, 288, 289, 290, 291, 296, 299, 300, 301, 302, 303, 306, 310, 311, 312, 313, 314, 315, 316, 317, 329, 330, 331, 332, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 378, 379, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436], "throw": [2, 8, 72, 73, 374], "except": [2, 10, 34, 49, 50, 59, 60, 72, 73, 78, 81, 138, 161, 163, 164, 171, 172, 174, 206, 221, 225, 251, 306, 337, 372, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 473], "ab": [2, 36, 71, 81, 95, 119, 124, 128, 129, 131, 163, 164, 174, 178, 179, 221, 342, 356, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "801": 2, "circleci": [2, 463], "36": 2, "serial": [2, 10, 11, 16, 17, 220, 221, 238, 372, 376], "extrem": [2, 17, 187, 306], "slow": [2, 8, 11, 17, 31, 32, 33, 34, 163, 164, 187, 469], "800": [2, 138, 161], "conda2_env": 2, "realli": [2, 8, 19, 293, 295, 335], "end": [2, 3, 7, 17, 36, 49, 51, 56, 59, 60, 71, 74, 75, 81, 113, 115, 116, 129, 131, 137, 138, 139, 144, 161, 163, 164, 166, 167, 171, 172, 173, 174, 186, 372, 386, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 469, 474], "796": 2, "phase": [2, 4, 6, 8, 14, 15, 17, 19, 20, 21, 31, 32, 36, 108, 110, 112, 113, 115, 178, 187, 189, 467, 470], "polyxt": [2, 7, 8, 20], "freez": [2, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "scipi": [2, 8, 10, 17, 20, 21, 49, 50, 59, 60, 72, 73, 77, 78, 81, 163, 164, 174, 266, 267, 270, 280, 372, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446, 463, 464, 466], "792": 2, "circlequad": [2, 20], "781": 2, "matplolibview": 2, "ax": [2, 8, 20, 52, 57, 141, 161, 162, 171, 172, 268, 389, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 453], "properti": [2, 4, 12, 21, 31, 32, 137, 138, 139, 141, 142, 144, 171, 172, 188, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 395, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "778": 2, "binder": [2, 20, 464], "762": 2, "equat": [2, 14, 16, 20, 21, 31, 32, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 128, 129, 130, 131, 137, 138, 139, 144, 149, 150, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 186, 188, 189, 193, 194, 195, 220, 221, 280, 287, 288, 289, 290, 291, 302, 331, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 463, 464, 468, 469], "websit": [2, 9, 11], "right": [2, 8, 17, 20, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 67, 68, 71, 75, 81, 82, 83, 85, 108, 114, 116, 119, 123, 126, 129, 131, 137, 138, 139, 149, 161, 162, 163, 164, 167, 171, 172, 173, 174, 178, 186, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 464, 467, 468], "742": 2, "No": [2, 11, 81, 186, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 463], "variabl": [2, 4, 6, 7, 11, 16, 20, 21, 32, 36, 49, 50, 51, 56, 59, 60, 63, 72, 73, 81, 82, 83, 85, 90, 94, 95, 104, 111, 119, 123, 124, 126, 128, 130, 138, 141, 142, 149, 161, 162, 163, 164, 166, 167, 171, 172, 174, 178, 186, 187, 188, 192, 333, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 389, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 463, 464, 466, 467, 468], "mag": [2, 20, 166, 167, 171, 172, 178, 179, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "735": 2, "pip": [2, 17, 20, 463], "734": 2, "residu": [2, 8, 20, 81, 113, 119, 163, 164, 174, 178, 179, 288, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "688": [2, 470], "need": [2, 3, 8, 9, 10, 11, 17, 19, 21, 31, 32, 33, 34, 47, 51, 74, 81, 112, 119, 138, 161, 163, 164, 171, 172, 174, 178, 186, 187, 188, 198, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 251, 254, 255, 310, 311, 337, 378, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 451, 470, 473, 474], "circl": [2, 7, 8, 17, 20, 34, 73, 157, 166, 167, 171, 172, 221, 406, 426], "viewer": [2, 11, 17, 19, 20, 21, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 138, 139, 141, 142, 144, 156, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 187, 399, 407, 411, 413, 434, 463, 464, 465], "676": 2, "default": [2, 6, 11, 13, 19, 20, 22, 63, 67, 81, 82, 83, 137, 138, 141, 142, 156, 163, 166, 171, 172, 186, 187, 220, 258, 259, 260, 262, 266, 267, 270, 274, 275, 276, 277, 278, 279, 291, 299, 300, 301, 303, 313, 314, 315, 317, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 374, 376, 381, 385, 389, 390, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 464, 474], "flux": [2, 8, 20, 31, 33, 34, 67, 81, 119, 161, 163, 164, 171, 172, 174, 178, 464, 466], "condit": [2, 10, 16, 20, 21, 31, 32, 36, 49, 50, 51, 56, 59, 60, 67, 68, 72, 73, 74, 77, 81, 82, 83, 85, 86, 90, 102, 112, 119, 128, 130, 138, 141, 142, 163, 164, 166, 167, 174, 178, 186, 187, 188, 190, 191, 193, 194, 195, 196, 221, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 391, 406, 464, 467, 468], "explicitli": [2, 8, 11, 77, 81, 116, 161, 163, 164, 171, 172, 174, 186, 389], "609": 2, "clearli": [2, 8, 21, 163, 164], "400": [2, 6, 110, 114, 115, 163, 164, 166, 173, 174], "globalvalu": [2, 17, 20, 31, 47, 103, 119, 174, 182, 342, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 430, 431, 434], "method": [2, 6, 8, 10, 16, 17, 19, 20, 21, 74, 80, 81, 119, 130, 156, 163, 164, 174, 178, 186, 187, 188, 189, 287, 288, 289, 290, 291, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 374, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 464, 467, 468, 470, 473, 474], "assort": 2, "convect": [2, 15, 17, 20, 108, 163, 164, 173, 186, 189, 324, 334, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 361, 364, 366, 368, 369, 430, 464, 467, 468, 469], "boundari": [2, 20, 21, 36, 49, 50, 51, 56, 59, 60, 67, 68, 72, 73, 74, 77, 81, 82, 83, 85, 90, 102, 113, 115, 119, 128, 130, 136, 137, 138, 139, 141, 142, 144, 163, 164, 166, 167, 173, 174, 178, 186, 187, 188, 190, 191, 193, 194, 195, 196, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 464, 468], "spheric": [2, 220, 239, 240], "There": [2, 11, 13, 17, 137, 163, 164, 174, 187, 406], "known": [2, 7, 8, 17, 21, 31, 32, 161, 163, 164, 171, 172, 406, 466, 468], "vtk": [2, 18, 436, 451, 458, 460, 461, 462], "bitrot": 2, "ha": [2, 6, 7, 8, 11, 13, 17, 18, 19, 21, 31, 32, 33, 34, 47, 50, 60, 63, 72, 73, 74, 75, 81, 90, 112, 113, 114, 115, 116, 119, 137, 138, 139, 141, 156, 166, 167, 173, 174, 187, 188, 189, 195, 306, 374, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 438, 439, 440, 441, 442, 443, 444, 446, 447, 463, 466], "start": [2, 9, 17, 20, 31, 32, 33, 34, 113, 115, 119, 161, 162, 163, 164, 171, 172, 173, 175, 187, 246, 372, 393, 451], "demis": 2, "also": [2, 3, 4, 6, 8, 11, 13, 16, 17, 18, 19, 21, 31, 32, 72, 73, 74, 81, 82, 83, 119, 137, 139, 141, 142, 144, 149, 163, 164, 178, 187, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 376, 381, 385, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 463, 466, 467], "nonuniformgrid1d": [2, 20, 216, 220, 231, 239], "figur": [2, 6, 17, 141, 161, 171, 172, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 466], "out": [2, 11, 12, 17, 67, 161, 163, 171, 172, 178, 246, 268, 372, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 466], "747": 2, "spherical1d": 2, "uniform": [2, 75, 81, 110, 111, 112, 114, 115, 116, 161, 163, 164, 166, 171, 172, 173, 250, 386, 399, 407, 411, 413, 434], "nonuniform": [2, 470], "732": 2, "klkuhlm": 2, "neumann": [2, 20, 82, 83, 193, 464], "bc": [2, 36, 85, 86], "constraint": [2, 17, 20, 68, 138, 173, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "719": 2, "atism": 2, "vertex": [2, 20, 93, 217, 221, 227, 229, 232, 238, 246, 464, 468], "index": [2, 8, 11, 163, 164, 250, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463], "invers": [2, 376, 385, 411], "716": 2, "726": 2, "mayavicli": [2, 20, 34, 157, 449], "663": 2, "datamin": [2, 31, 32, 33, 34, 36, 40, 71, 72, 73, 81, 82, 83, 90, 110, 111, 112, 113, 115, 123, 124, 126, 128, 130, 138, 141, 142, 161, 162, 163, 164, 166, 167, 171, 172, 173, 175, 187, 399, 407, 411, 413, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "datamax": [2, 31, 32, 33, 34, 36, 40, 71, 72, 73, 81, 82, 83, 90, 110, 111, 112, 113, 115, 123, 124, 126, 128, 130, 138, 141, 142, 161, 162, 163, 164, 166, 167, 171, 172, 173, 175, 187, 399, 407, 411, 413, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "argument": [2, 8, 16, 119, 137, 139, 141, 142, 144, 156, 187, 188, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 390, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 473, 474], "ignor": [2, 17, 163, 164, 173, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 261, 290, 316, 333, 342, 390], "662": 2, "scale": [2, 17, 21, 111, 113, 119, 141, 163, 164, 247, 411, 438, 439, 440, 441, 442, 443, 444, 446, 447], "arg": [2, 174, 189, 216, 217, 218, 219, 221, 231, 232, 233, 238, 239, 240, 257, 264, 287, 288, 291, 296, 332, 333, 372, 380, 381, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 438, 439, 441, 443, 444, 446, 447, 451], "primarili": [2, 7, 17, 81, 375, 466], "711": 2, "broken": [2, 9, 11, 21, 138], "plm_rsh_agent": 2, "error": [2, 11, 12, 17, 20, 21, 36, 72, 73, 81, 93, 95, 96, 114, 119, 149, 150, 186, 221, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 289, 290, 296, 299, 300, 301, 302, 303, 306, 313, 314, 315, 316, 317, 329, 330, 331, 332, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 374, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 464, 466], "710": 2, "708": 2, "703": [2, 470], "fortran": [2, 6, 21, 161, 162, 166, 167, 463], "arrai": [2, 6, 8, 17, 21, 36, 52, 71, 91, 103, 123, 128, 129, 131, 138, 163, 164, 171, 172, 179, 189, 250, 333, 342, 345, 346, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369, 376, 385, 389, 393, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463], "support": [2, 4, 8, 11, 16, 17, 18, 20, 178, 186, 187, 221, 257, 264, 268, 269, 280, 296, 302, 306, 330, 331, 332, 374, 385, 396, 436, 464, 466, 474], "solv": [2, 6, 14, 16, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 93, 94, 95, 97, 99, 100, 103, 104, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 138, 149, 150, 151, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 178, 186, 187, 188, 251, 261, 268, 280, 287, 288, 289, 290, 291, 302, 330, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 463, 464, 466, 467, 468], "701": 2, "while": [2, 4, 6, 8, 17, 21, 31, 32, 33, 34, 63, 67, 71, 74, 81, 113, 138, 163, 164, 171, 172, 174, 178, 179, 376, 385, 466, 469], "700": 2, "print": [2, 15, 16, 17, 20, 21, 31, 32, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 103, 104, 107, 110, 111, 113, 115, 116, 119, 124, 126, 128, 129, 130, 131, 138, 149, 150, 151, 162, 163, 164, 166, 167, 173, 174, 178, 179, 182, 186, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369, 372, 376, 380, 385, 386, 389, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "statement": [2, 186], "processor": [2, 10, 17, 110, 376, 391, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 463], "write": [2, 8, 20, 21, 72, 73, 74, 81, 119, 138, 144, 163, 164, 166, 178, 186, 187, 221, 376, 386, 391, 402], "timetest": 2, "forg": [2, 11, 17, 20, 464], "upload": [2, 20, 464], "option": [2, 6, 8, 10, 17, 20, 22, 141, 142, 189, 266, 267, 270, 274, 275, 276, 277, 278, 279, 282, 283, 287, 288, 291, 330, 372, 374, 376, 381, 385, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 464, 474], "fipy_display_matrix": [2, 17], "legaci": [2, 9, 11], "matplotlib": [2, 8, 11, 17, 20, 141, 171, 172, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 463, 464], "built": [2, 9, 11, 21, 123, 138, 156, 162, 166, 167, 171, 172, 225, 226, 227], "symlog": 2, "clean": [2, 221, 372], "benchmark": [2, 20], "8": [2, 6, 10, 11, 34, 72, 73, 80, 81, 90, 95, 97, 107, 119, 138, 139, 144, 157, 161, 163, 164, 173, 174, 178, 179, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 366, 376, 385, 389, 393, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 470], "699": [2, 470], "stipul": 2, "forc": [2, 11, 16, 17], "miniconda": [2, 11], "url": [2, 470], "_cellvolumeaveragevari": 2, "class": [2, 4, 8, 10, 16, 17, 21, 85, 110, 111, 112, 113, 114, 115, 116, 119, 141, 142, 161, 171, 172, 186, 187, 188, 191, 192, 193, 194, 195, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 299, 300, 301, 302, 303, 306, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 373, 374, 375, 376, 378, 379, 385, 389, 395, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 473, 474], "express": [2, 6, 8, 11, 12, 13, 17, 21, 32, 36, 110, 119, 161, 163, 164, 171, 172, 174, 178, 221, 337, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 466], "bad": [2, 3], "call": [2, 15, 17, 21, 81, 138, 178, 186, 187, 188, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 263, 285, 329, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 374, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446, 473, 474], "stack": [2, 11], "make": [2, 6, 7, 10, 11, 13, 17, 20, 21, 31, 33, 34, 36, 71, 108, 115, 119, 163, 164, 171, 172, 173, 174, 178, 186, 187, 188, 221, 351, 375, 376, 385, 402, 406, 410, 413, 415, 420, 426, 429, 430, 431, 435, 463, 464, 465, 466, 473], "698": 2, "nick": [2, 468], "croft": [2, 468, 470], "thesi": [2, 468, 470], "681": 2, "header": 2, "footer": 2, "680": 2, "nixpkg": [2, 11, 13], "661": 2, "recip": [2, 11, 13, 335, 470], "658": 2, "692": 2, "copi": [2, 3, 7, 9, 11, 12, 17, 20, 81, 110, 111, 112, 113, 114, 115, 116, 178, 179, 311, 372, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463], "script": [2, 7, 15, 17, 20, 23, 31, 32, 72, 73, 81, 123, 124, 128, 130, 138, 144, 173, 178, 186, 187, 188, 221, 371, 374, 449, 450, 451, 463, 464, 473], "command": [2, 7, 8, 9, 11, 13, 15, 16, 20, 81, 91, 123, 128, 130, 137, 138, 139, 144, 156, 174, 189, 374, 375, 390, 451, 464], "line": [2, 8, 10, 11, 15, 16, 20, 21, 34, 72, 73, 78, 81, 90, 91, 95, 137, 138, 139, 144, 156, 157, 161, 174, 189, 221, 246, 374, 375, 389, 390, 436, 440, 441, 442, 446, 451, 464, 466], "669": 2, "input": [2, 7, 8, 15, 19, 20, 21, 32, 40, 41, 63, 68, 72, 73, 75, 77, 78, 80, 81, 82, 83, 90, 93, 94, 95, 97, 100, 104, 107, 116, 137, 138, 139, 144, 163, 164, 174, 178, 179, 186, 376, 385, 389], "deadlock": 2, "643": 2, "bring": 2, "from": [2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 94, 95, 104, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 136, 137, 138, 139, 141, 142, 144, 149, 150, 151, 156, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 187, 188, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 263, 311, 320, 329, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 373, 374, 376, 385, 386, 389, 390, 391, 393, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 446, 447, 449, 450, 456, 464, 466, 469, 470, 473, 474], "same": [2, 8, 17, 19, 32, 74, 80, 81, 90, 95, 97, 99, 100, 104, 111, 112, 113, 114, 115, 138, 139, 163, 164, 166, 173, 174, 186, 189, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 374, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446, 456, 466], "sourc": [2, 7, 9, 11, 14, 15, 17, 18, 20, 32, 56, 57, 67, 71, 74, 108, 113, 114, 119, 138, 161, 163, 164, 166, 167, 171, 172, 173, 174, 187, 189, 362, 363, 427, 451, 463, 464, 467, 468], "translat": [2, 6, 21, 163, 164, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "pya": [2, 17], "woodscn": [2, 17], "thing": [2, 3, 8, 10, 11, 17, 186, 187, 466, 473, 474], "spell": [2, 17], "657": 2, "window": [2, 11, 17, 19, 141, 142, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 456, 457, 458, 460, 461, 462, 463], "648": 2, "sphinx": [2, 17, 463], "647": 2, "645": 2, "gmshmesh": [2, 20], "644": 2, "xfong": 2, "655": 2, "mayavi": [2, 8, 11, 17, 20, 137, 142, 144, 436, 449, 450, 451, 463, 464], "wont": 2, "hendrik410": 2, "646": 2, "branch": [2, 20, 161, 171, 172, 464], "601": 2, "content": [2, 221, 456, 471, 472, 475], "rst": 2, "recurs": [2, 466], "mess": 2, "597": 2, "compress": [2, 11, 386, 470], "archiv": [2, 9, 11, 15, 17, 20], "557": 2, "facegradaverag": [2, 20, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "stupid": 2, "552": 2, "458": 2, "wrong": [2, 8, 187], "preced": [2, 16, 17], "lx": [2, 74, 77, 80, 90, 91, 94, 95, 97, 99, 100, 104, 126, 128, 141, 142, 167, 178, 179, 187, 220, 385], "dx": [2, 17, 31, 32, 33, 36, 39, 40, 51, 52, 54, 56, 57, 63, 65, 66, 67, 68, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 97, 99, 100, 104, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 138, 141, 142, 150, 156, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 187, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 346, 353, 354, 356, 357, 361, 368, 369, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 437, 442, 443, 444, 446, 447, 449, 450, 456], "nonuniformgrid": 2, "457": 2, "special": [2, 12, 17, 21, 49, 50, 59, 60, 72, 73, 77, 78, 81, 161, 163, 164, 171, 172, 362, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 473, 474], "includ": [2, 4, 7, 11, 12, 13, 15, 17, 19, 68, 119, 137, 161, 163, 164, 171, 172, 173, 187, 188, 189, 221, 456, 466, 467, 473], "432": 2, "340": 2, "packag": [2, 8, 10, 16, 17, 18, 20, 21, 23, 72, 73, 141, 142, 161, 171, 172, 263, 329, 330, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 394, 406, 439, 449, 450, 463, 464, 465, 475], "just": [2, 7, 8, 17, 21, 78, 81, 163, 164, 173, 174, 293, 295, 374, 376, 385, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 441, 442, 468], "master": [2, 9, 11, 13, 20, 464], "predominantli": 2, "devop": 2, "focu": [2, 173], "been": [2, 6, 7, 8, 11, 13, 15, 17, 21, 63, 75, 81, 130, 137, 138, 139, 144, 156, 173, 186, 187, 188, 189, 221, 374, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 466], "easier": [2, 8, 21, 178, 186, 187, 188, 221], "It": [2, 3, 6, 8, 11, 16, 17, 18, 19, 31, 32, 49, 50, 59, 60, 74, 81, 96, 119, 138, 139, 163, 164, 174, 186, 187, 195, 221, 246, 263, 329, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 451, 456, 463], "possibl": [2, 8, 10, 17, 21, 74, 81, 111, 163, 164, 174, 221, 330, 372, 374, 376, 385, 437, 446, 467], "minim": [2, 3, 6, 8, 288, 324, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "base": [2, 6, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 81, 91, 119, 137, 138, 139, 141, 142, 144, 156, 162, 174, 189, 191, 192, 193, 194, 195, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 299, 300, 301, 302, 303, 306, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 374, 375, 376, 378, 379, 385, 395, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 463, 464, 466, 470, 474], "maco": [2, 110, 463], "travisci": [2, 463], "appveyor": [2, 463], "badg": 2, "636": 2, "robin": [2, 7, 20, 464], "615": 2, "issue555": 2, "inclus": [2, 17, 434], "licens": [2, 11, 21], "613": [2, 470], "607": 2, "600": [2, 413], "explain": [2, 7, 8, 11, 17, 138], "where": [2, 10, 15, 17, 19, 20, 21, 31, 32, 33, 34, 36, 63, 67, 71, 75, 78, 81, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 137, 138, 139, 141, 142, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 178, 179, 186, 187, 191, 192, 193, 194, 195, 333, 342, 346, 351, 353, 354, 357, 359, 361, 366, 368, 376, 385, 389, 393, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 464, 466, 467, 469], "596": 2, "correct": [2, 8, 10, 17, 36, 75, 81, 112, 114, 116, 119, 150, 166, 167, 171, 172, 178, 221, 385, 386, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 437, 458, 466], "en_u": [2, 17], "dictionari": [2, 17, 372, 388], "594": 2, "smoothedaggregationsolv": 2, "593": 2, "585": 2, "tarbal": 2, "582": 2, "navier": [2, 119], "viscou": [2, 119], "limit": [2, 8, 12, 16, 17, 81, 119, 141, 142, 161, 163, 164, 171, 172, 174, 178, 187, 189, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "580": 2, "stokescav": [2, 7, 8, 20], "579": 2, "rowin": 2, "inlin": [2, 4, 6, 8, 11, 17, 20, 189, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463], "578": 2, "577": 2, "epetra": [2, 310, 311], "vector": [2, 8, 20, 32, 72, 73, 74, 119, 186, 187, 194, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 333, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 389, 406, 447, 464, 466], "numarrai": [2, 463], "574": 2, "codaci": 2, "572": 2, "pytrilino": [2, 16, 17, 463, 466], "unavail": [2, 11, 13, 49, 50, 59, 60, 174, 394], "570": 2, "shwina": 2, "569": 2, "gpu": [2, 16, 463], "via": [2, 8, 11, 14, 17, 136, 466], "pyamgx": [2, 17, 20, 36, 463, 464], "567": 2, "dedic": 2, "public": [2, 8, 12, 18, 20, 21, 385, 463, 464, 465, 470], "domain": [2, 17, 21, 31, 32, 36, 71, 72, 73, 75, 78, 81, 82, 90, 91, 110, 111, 112, 116, 119, 130, 138, 161, 162, 163, 164, 166, 167, 171, 172, 174, 175, 178, 205, 220, 221, 319, 322, 323, 446, 466, 468], "556": 2, "550": 2, "546": 2, "ensur": [2, 81, 376, 380, 385], "dtype": 2, "float": [2, 10, 21, 50, 60, 71, 141, 142, 187, 191, 193, 194, 195, 220, 246, 257, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 289, 290, 296, 299, 300, 301, 302, 303, 306, 313, 314, 315, 316, 317, 329, 330, 331, 332, 333, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "matrix": [2, 6, 8, 11, 16, 17, 20, 21, 71, 74, 81, 86, 119, 161, 163, 164, 171, 172, 174, 178, 179, 187, 194, 251, 287, 288, 289, 290, 291, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 463, 466, 467], "multipli": [2, 20, 21, 337, 342, 345, 346, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369, 376, 385], "544": 2, "revert": [2, 221], "issue534": 2, "physic": [2, 8, 14, 19, 21, 74, 111, 138, 174, 178, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 467, 469, 470], "field": [2, 4, 6, 8, 14, 15, 17, 19, 20, 21, 36, 68, 74, 81, 108, 112, 113, 114, 115, 119, 138, 139, 144, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 178, 187, 189, 342, 376, 385, 389, 402, 446, 467, 470], "mishandl": 2, "compound": 2, "unit": [2, 12, 20, 21, 111, 119, 126, 138, 139, 144, 163, 164, 371, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "536": 2, "532": 2, "race": [2, 391], "524": 2, "max": [2, 4, 16, 20, 31, 47, 71, 74, 95, 113, 119, 129, 138, 150, 157, 178, 179, 182, 187, 311, 342, 356, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446], "min": [2, 20, 31, 32, 33, 34, 36, 113, 128, 157, 178, 179, 187, 311, 342, 356, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446], "global": [2, 14, 17, 21, 150, 151, 372], "520": 2, "gitter": 2, "chat": 2, "516": 2, "badger": 2, "489": 2, "631": 2, "628": 2, "627": 2, "omp_num_thread": [2, 17], "625": [2, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "import": [2, 4, 8, 10, 16, 17, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 94, 95, 104, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 138, 141, 142, 149, 150, 151, 156, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 187, 188, 189, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 311, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 373, 376, 385, 386, 389, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 440, 442, 443, 444, 446, 447, 449, 450, 456, 473], "623": 2, "621": 2, "plot": [2, 17, 18, 20, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 91, 94, 95, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 137, 138, 139, 141, 142, 144, 156, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 399, 407, 411, 413, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 463, 464], "617": 2, "pick": 2, "1st": 2, "valu": [2, 6, 7, 8, 10, 19, 20, 21, 31, 32, 36, 39, 40, 52, 54, 57, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 104, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 137, 138, 139, 141, 142, 144, 150, 156, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 187, 191, 192, 193, 194, 195, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 251, 306, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 374, 376, 385, 389, 390, 396, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 464, 466, 469, 474], "1d": [2, 18, 36, 49, 50, 51, 56, 59, 60, 77, 78, 80, 81, 85, 93, 94, 95, 96, 99, 100, 104, 107, 110, 111, 113, 114, 115, 116, 141, 142, 156, 163, 164, 173, 174, 179, 186, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 406, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 463], "cellvari": [2, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 104, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 138, 141, 156, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 187, 221, 231, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 389, 399, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 456, 457, 458, 460, 461, 462, 464], "611": 2, "coeffici": [2, 4, 17, 20, 32, 36, 49, 50, 51, 59, 60, 67, 71, 77, 81, 94, 108, 110, 114, 119, 137, 138, 139, 144, 161, 162, 163, 164, 171, 172, 174, 186, 194, 195, 287, 288, 289, 290, 291, 333, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 430, 464, 466, 467, 469], "cannot": [2, 6, 8, 9, 11, 16, 17, 21, 32, 74, 119, 163, 187, 206, 216, 217, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 246, 337, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446, 463, 466], "610": 2, "anisotropi": [2, 6, 7, 8, 17, 19, 20, 162, 171, 172], "contour": [2, 18, 91, 139, 141, 142, 161, 441, 442, 444, 463], "displai": [2, 17, 18, 20, 21, 36, 72, 73, 81, 96, 113, 115, 137, 138, 139, 141, 142, 144, 161, 171, 172, 380, 381, 389, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 463], "legend": [2, 17, 437, 440], "608": 2, "var": [2, 8, 17, 20, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 103, 104, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 138, 141, 142, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 187, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 374, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "object": [2, 4, 6, 8, 14, 16, 17, 20, 68, 72, 73, 81, 91, 95, 123, 124, 128, 130, 136, 138, 141, 142, 156, 161, 171, 172, 174, 175, 186, 187, 189, 191, 192, 195, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 257, 264, 266, 267, 268, 269, 270, 272, 280, 282, 285, 288, 291, 293, 294, 295, 296, 302, 306, 311, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 336, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 374, 375, 376, 378, 385, 386, 389, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 463, 464, 466, 473], "callabl": 2, "603": 2, "basic": [2, 8, 11, 16, 17, 19, 21, 156, 221, 390], "602": 2, "592": 2, "590": 2, "pyamgsolv": 2, "584": 2, "anim": [2, 141, 142], "jupyt": [2, 11], "notebook": [2, 11], "566": 2, "565": 2, "empti": [2, 171, 172, 372], "env": 2, "564": 2, "board": 2, "561": 2, "cast": [2, 8, 376, 385, 466, 470], "data": [2, 16, 18, 20, 21, 36, 138, 141, 142, 162, 166, 167, 189, 221, 385, 386, 389, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 463, 464, 473], "int64": 2, "int32": 2, "accord": [2, 174], "rule": [2, 34, 157, 163, 164], "safe": [2, 67, 374], "555": 2, "551": 2, "spew": 2, "545": 2, "543": 2, "integ": [2, 81, 187, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "539": 2, "explicit": [2, 8, 17, 20, 32, 45, 74, 81, 138, 162, 163, 164, 167, 174, 178, 187, 188, 337, 346, 353, 354, 357, 361, 362, 368, 369, 466, 469], "mixedel": [2, 20], "538": 2, "534": 2, "physicalfield": [2, 20, 111, 113, 376, 435], "533": 2, "531": 2, "drop_tol": 2, "spars": [2, 11, 16, 174, 189, 197, 251, 280, 302, 463, 466], "linalg": [2, 280, 302], "splu": [2, 280, 302], "gone": 2, "530": 2, "instruct": [2, 7, 9, 11, 17, 473, 474], "528": 2, "525": [2, 112], "guyer": [2, 4, 14, 108, 470], "osx": 2, "513": 2, "give": [2, 8, 11, 16, 17, 21, 113, 115, 144, 173, 174, 221, 342, 372, 406], "510": 2, "weav": [2, 8, 11, 17, 21, 463], "509": 2, "unabl": 2, "506": 2, "spatial": [2, 8, 20, 31, 33, 34, 81, 119, 464], "vari": [2, 8, 20, 21, 72, 73, 81, 90, 166, 446, 464], "anisotrop": [2, 4, 19, 20, 71, 161, 171, 172, 464], "488": 2, "break": [2, 10, 17, 31, 113, 178, 179], "gmshgrid": 2, "435": 2, "fatal": 2, "spmatrix": 2, "h": [2, 14, 17, 171, 172, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 467, 470], "file": [2, 7, 9, 10, 11, 13, 15, 17, 20, 21, 39, 40, 41, 72, 73, 77, 78, 80, 93, 94, 95, 96, 97, 99, 100, 104, 137, 138, 139, 141, 142, 144, 162, 166, 167, 221, 374, 376, 386, 391, 399, 407, 411, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 473], "found": [2, 7, 9, 11, 17, 21, 49, 50, 51, 59, 60, 81, 91, 119, 139, 161, 163, 164, 171, 172, 174, 186, 187, 188, 463, 471, 472, 473, 475], "434": 2, "ez_setup": 2, "502": 2, "gmane": [2, 3, 8], "defunct": [2, 3, 463], "recvobj": 2, "allgath": [2, 20, 311], "sendobj": [2, 311], "492": 2, "restor": 2, "trail": 2, "whitespac": 2, "expect": [2, 7, 8, 17, 77, 78, 81, 163, 164, 174, 389, 466], "485": 2, "pep": [2, 10, 463], "440": 2, "483": 2, "provid": [2, 3, 6, 8, 9, 11, 12, 15, 16, 17, 19, 21, 86, 90, 110, 111, 112, 138, 189, 221, 263, 329, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 389, 391, 456, 463, 466, 473, 474], "_facetocelldistanceratio": [2, 17], "why": [2, 17, 20, 372, 464], "scalar": [2, 17, 187, 216, 217, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 246, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "481": 2, "strip": 2, "white": 2, "space": [2, 21, 50, 60, 81, 139, 144, 157, 163, 164, 174, 187, 219, 220, 249, 250, 413, 467], "eof": 2, "r": [2, 14, 19, 31, 32, 33, 34, 39, 40, 49, 50, 59, 60, 68, 71, 81, 119, 138, 139, 141, 144, 150, 157, 161, 163, 164, 171, 172, 173, 178, 179, 221, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 449, 450, 470], "479": 2, "uniformgrid3d": [2, 20, 220], "_celltocellid": 2, "concaten": [2, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "478": 2, "pkgw": 2, "incorrect": [2, 81, 337, 389], "axi": [2, 8, 19, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 126, 186, 187, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 385, 389, 393, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 440], "477": 2, "472": 2, "471": 2, "sort": 2, "entri": [2, 17, 193, 194, 385], "469": 2, "syntax": [2, 11, 15, 17, 21, 163, 164, 186, 187, 188], "466": 2, "465": 2, "implement": [2, 6, 11, 14, 15, 16, 17, 20, 119, 144, 162, 163, 164, 189, 193, 194, 195, 206, 221, 225, 241, 251, 306, 330, 337, 374, 432, 436, 448, 452, 454, 459, 464, 465], "cahnhilliard": [2, 6, 7, 8, 17, 20], "mesh2dcoupl": [2, 7, 8, 17, 20], "463": [2, 14], "typeset": 2, "analyt": [2, 8, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 81, 85, 91, 107, 113, 114, 115, 116, 174, 186, 366], "solut": [2, 6, 8, 15, 16, 17, 21, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 104, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 128, 130, 150, 161, 162, 163, 164, 166, 167, 171, 172, 174, 186, 187, 189, 195, 306, 333, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 463, 466, 468, 469], "460": 2, "pdflatex": 2, "head": [2, 6], "459": [2, 385], "purg": 2, "gist": 2, "456": [2, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369], "duplic": [2, 3, 372, 376, 385, 402, 406, 410, 415, 420, 426, 429, 430, 431, 435], "ufunc": [2, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "454": 2, "452": 2, "getter": [2, 188], "setter": [2, 188], "450": 2, "448": 2, "render": [2, 8, 15, 21, 81, 189, 431, 458, 460, 461, 462], "ipython": [2, 17, 463], "447": 2, "proper": [2, 119, 221], "446": 2, "robust": [2, 251], "distutil": [2, 394], "strictvers": 2, "442": 2, "compar": [2, 6, 11, 17, 36, 47, 71, 81, 91, 139, 161, 162, 166, 167, 174, 221, 366, 376, 385, 389, 399, 407, 411, 413], "tupl": [2, 8, 110, 111, 112, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 386, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446, 466], "441": 2, "two": [2, 8, 10, 11, 17, 19, 21, 31, 32, 74, 82, 83, 99, 110, 111, 112, 113, 115, 119, 128, 129, 131, 161, 163, 164, 166, 167, 171, 172, 173, 178, 186, 188, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 385, 389, 406, 430, 466, 470, 473], "439": 2, "alfrenardi": 2, "issue426": 2, "typo": 2, "431": 2, "raybsmith": 2, "429": 2, "matplotlibview": [2, 8, 20, 171, 172], "428": 2, "period": [2, 47, 90, 167, 231, 232, 233], "3d": [2, 18, 33, 113, 157, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 463], "424": 2, "419": 2, "498": 2, "nonlinear": [2, 8], "496": 2, "linearbicgstabsolv": [2, 20], "take": [2, 6, 17, 20, 21, 77, 81, 113, 126, 161, 163, 164, 171, 172, 173, 174, 178, 187, 188, 217, 221, 227, 229, 232, 238, 246, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 464], "494": 2, "493": 2, "review": [2, 14, 20, 464, 470], "io": [2, 11, 13, 16, 376, 391, 463], "access": [2, 17, 19, 21, 161, 171, 172, 187, 376, 391, 473], "leav": [2, 11, 19, 81, 119, 163, 164], "comment": [2, 11, 17, 21], "491": 2, "mpi4pi": [2, 11, 16, 17, 311, 463], "484": 2, "482": 2, "compliant": 2, "476": 2, "setuptool": 2, "suit": [2, 3, 11, 16, 17, 138, 189, 257, 264, 268, 269, 280, 296, 302, 306, 331, 332, 370, 463, 466], "475": 2, "grid3d": [2, 20, 33, 102, 103, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 449, 450], "470": 2, "mesh3d": [2, 20], "celltocellid": 2, "467": 2, "sequenc": [2, 21, 376, 385, 389], "462": 2, "incorrectli": 2, "455": 2, "445": 2, "dendriteview": [2, 161], "put": [2, 17, 20, 31, 33, 34, 187, 376, 385, 389, 393, 464], "over": [2, 10, 17, 21, 31, 32, 33, 34, 36, 63, 81, 90, 110, 119, 130, 161, 163, 164, 173, 174, 187, 188, 289, 291, 389, 427, 441, 442, 466, 468, 469], "bar": [2, 171, 172, 173, 178, 374, 385, 437, 438, 439, 441, 442, 443, 444], "443": 2, "api": [2, 8], "nice": [2, 441, 442, 463], "438": 2, "437": 2, "mislead": 2, "433": 2, "430": 2, "427": 2, "425": [2, 171, 172], "warren": [2, 4, 14, 108, 161, 162, 166, 167, 171, 172, 470], "421": 2, "matplotlib2dgridview": [2, 20, 161, 171, 172], "function": [2, 8, 10, 11, 17, 19, 21, 31, 32, 36, 72, 73, 81, 108, 112, 123, 124, 130, 136, 138, 139, 144, 149, 163, 164, 166, 173, 174, 178, 187, 188, 189, 198, 217, 220, 221, 227, 229, 232, 238, 246, 285, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 376, 380, 381, 385, 386, 388, 389, 390, 391, 393, 406, 427, 436, 437, 451, 458, 466, 467, 468, 473], "416": 2, "reflect": [2, 376, 385, 402, 406, 410, 415, 420, 426, 429, 430, 431, 435], "415": 2, "matplotlibgrid2dview": 2, "414": 2, "periodicgrid3d": [2, 20], "413": 2, "remind": 2, "user": [2, 3, 8, 9, 11, 13, 15, 16, 17, 19, 21, 31, 32, 33, 34, 81, 161, 171, 172, 174, 186, 187, 188, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 431, 434, 435, 469], "differ": [2, 8, 9, 11, 16, 17, 19, 21, 31, 32, 33, 34, 47, 72, 73, 77, 80, 81, 94, 95, 96, 99, 100, 104, 108, 110, 111, 112, 115, 137, 139, 144, 163, 164, 166, 167, 174, 175, 186, 187, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 337, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 446, 453, 466, 468, 470], "conserv": [2, 8, 17, 20, 31, 32, 74, 81, 138, 150, 151, 161, 163, 164, 171, 172, 178, 427, 431, 464, 468], "412": 2, "pickl": [2, 8, 166, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 251, 254, 255, 256, 306, 310, 311, 312, 337, 378, 379, 386, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436], "commun": [2, 3, 15, 16, 17, 21, 71, 124, 126, 128, 130, 138, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 254, 255, 310, 311, 376, 378, 386, 391, 406], "unnecessari": 2, "grid": [2, 17, 81, 119, 163, 164, 167, 174, 216, 217, 218, 219, 220, 228, 229, 231, 232, 233, 238, 239, 240, 248, 249, 250, 430, 446, 463, 468], "408": 2, "407": 2, "strang": 2, "loop": [2, 34, 72, 73, 77, 80, 81, 82, 83, 95, 119, 138, 157, 173, 221], "reshap": [2, 20, 161, 171, 172, 376, 385, 389], "404": 2, "never": [2, 9, 11, 174, 473], "401": 2, "sweep": [2, 17, 20, 67, 71, 74, 81, 113, 114, 119, 163, 164, 174, 178, 179, 187, 188, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 464], "instead": [2, 3, 8, 9, 11, 17, 19, 21, 81, 119, 137, 163, 164, 167, 174, 186, 187, 188, 333, 336, 381, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463, 473], "295": 2, "must": [2, 6, 10, 11, 16, 17, 21, 31, 32, 51, 75, 81, 111, 114, 116, 119, 161, 163, 164, 166, 167, 171, 172, 174, 186, 187, 188, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 337, 346, 353, 354, 357, 361, 368, 369, 374, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 441, 442, 446, 456, 466, 469, 474], "zizou": 2, "signific": [2, 6, 9, 11, 16, 189], "level": [2, 4, 15, 17, 20, 23, 123, 124, 126, 128, 129, 130, 131, 189, 322, 323, 326, 327, 376, 391, 395, 406, 441, 442, 463, 464, 470], "handl": [2, 11, 21, 49, 50, 51, 59, 60, 163, 164, 186, 221], "lsmlib": [2, 10, 17, 20, 406, 464], "scikit": [2, 17, 20, 406, 464], "fmm": [2, 17, 20, 406, 464], "librari": [2, 11, 16, 17, 21, 22, 49, 50, 59, 60, 72, 73, 78, 81, 163, 164, 174, 390, 463, 466], "magnitud": [2, 17, 31, 32, 81, 108, 342, 356, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446, 447], "faster": [2, 6, 17, 21, 174, 469], "than": [2, 3, 6, 8, 10, 15, 16, 17, 21, 47, 65, 66, 81, 91, 139, 163, 164, 166, 174, 186, 187, 188, 221, 342, 356, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 441, 442, 466, 473], "prototyp": 2, "streamplot": [2, 446], "control": [2, 14, 19, 31, 32, 33, 34, 138, 139, 144, 156, 178, 334, 335, 446, 466], "git": [2, 20, 187, 188, 464, 465, 470], "much": [2, 3, 7, 8, 17, 21, 31, 32, 81, 163, 164, 174, 186, 187, 473], "particip": 2, "398": [2, 470], "home": [2, 22], "redirect": [2, 8], "397": 2, "sphinxcontrib": [2, 17], "bibtex": [2, 17], "396": 2, "googl": [2, 3, 16, 463], "395": 2, "ubuntu": 2, "393": 2, "cylindricalnonuniformgrid2d": [2, 20, 220], "exteriorfac": [2, 17, 20, 72, 73, 104, 119, 178, 179, 187, 218, 231, 232, 233, 240, 248], "392": 2, "exit_nist": 2, "cgi": 2, "391": 2, "p\u00e9clet": [2, 51, 63, 186, 187], "inequ": [2, 469], "sign": [2, 3, 20, 187, 376, 385, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "388": 2, "64": 2, "int": [2, 123, 126, 138, 156, 166, 178, 195, 217, 220, 221, 227, 229, 232, 238, 246, 257, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 289, 290, 296, 299, 300, 301, 302, 303, 306, 313, 314, 315, 316, 317, 329, 330, 331, 332, 334, 337, 376, 389, 391, 402, 410, 415, 420, 426, 427, 429, 435, 441, 442, 447], "384": 2, "382": 2, "381": 2, "377": 2, "vanleerconvectionterm": [2, 20, 47, 178, 179, 466, 469], "minmod": 2, "slope": 2, "376": 2, "committicketupdat": 2, "375": [2, 112, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 470], "_formatinteg": 2, "373": 2, "372": 2, "cylindr": [2, 49, 50, 59, 60, 216, 217, 218, 219, 220], "371": 2, "binari": [2, 6, 7, 9, 10, 11, 14, 20, 21, 115, 164, 173, 198, 221, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 470], "370": 2, "368": 2, "well": [2, 3, 8, 9, 11, 15, 17, 21, 31, 32, 108, 163, 164, 173, 174, 186, 187, 189, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 467], "367": 2, "promot": 2, "366": 2, "unop": [2, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "365": 2, "renam": [2, 186, 187], "instanc": [2, 7, 17, 51, 187, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 458], "364": 2, "factori": [2, 81, 173, 186, 220, 436, 437, 458], "360": 2, "css": 2, "356": 2, "353": 2, "ohloh": 2, "repo": 2, "352": 2, "getvers": 2, "350": 2, "element": [2, 6, 15, 36, 72, 73, 78, 108, 136, 156, 221, 225, 226, 227, 334, 342, 376, 385, 389, 393, 395, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463, 466, 468, 470], "347": 2, "activ": [2, 9, 11, 17, 21], "frame": [2, 8, 449, 450], "front": [2, 102, 161, 171, 172, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 431], "339": 2, "loki": 2, "337": 2, "interact": [2, 3, 7, 11, 15, 17, 19, 21, 36, 49, 50, 51, 56, 59, 60, 65, 75, 77, 81, 85, 110, 111, 112, 113, 114, 115, 116, 138, 162, 163, 164, 166, 167, 173, 174, 186, 376, 385, 455], "between": [2, 17, 20, 21, 31, 32, 81, 108, 110, 137, 139, 161, 163, 164, 167, 171, 172, 174, 178, 186, 187, 220, 238, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 374, 385, 389, 406, 426, 463, 464, 466, 469], "336": 2, "clash": 2, "334": 2, "citat": [2, 17], "go": [2, 21, 110, 111, 112, 161, 162, 163, 164, 166, 167, 171, 172], "doi": [2, 14, 470], "333": 2, "seem": [2, 17, 186, 446, 473], "331": 2, "330": 2, "facevalu": [2, 20, 163, 164, 173, 178, 179, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "facecent": [2, 17, 72, 73, 81, 82, 83, 104, 119, 163, 164, 173, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "329": 2, "background": [2, 8, 20, 21, 221, 464, 465], "326": 2, "gmsh2d": [2, 17, 20, 71, 72, 73, 95, 136, 188, 221], "323": 2, "getfacecent": [2, 187], "return": [2, 17, 32, 72, 73, 81, 82, 83, 110, 111, 112, 113, 114, 115, 116, 128, 129, 131, 163, 164, 166, 171, 172, 173, 174, 178, 179, 186, 187, 191, 192, 193, 194, 195, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 287, 288, 289, 290, 291, 296, 299, 300, 301, 302, 303, 306, 310, 311, 312, 313, 314, 315, 316, 317, 329, 330, 331, 332, 333, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 376, 378, 379, 381, 385, 386, 388, 389, 390, 391, 395, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 451, 458], "319": 2, "transientterm": [2, 8, 17, 20, 31, 32, 33, 34, 36, 39, 40, 63, 71, 72, 73, 74, 77, 78, 81, 82, 83, 90, 110, 111, 112, 113, 114, 115, 123, 124, 126, 128, 130, 138, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 178, 179, 187, 188, 337, 346, 353, 354, 357, 361, 368, 369, 466], "dt": [2, 8, 17, 31, 32, 33, 34, 36, 39, 40, 47, 63, 71, 72, 73, 74, 77, 78, 80, 81, 82, 83, 90, 110, 111, 112, 113, 114, 115, 123, 124, 126, 138, 149, 150, 151, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 178, 179, 188, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 399, 411], "318": 2, "311": 2, "305": 2, "mpirun": [2, 17], "np": [2, 17], "wd": 2, "hang": 2, "sandbox": 2, "buildbot": [2, 4, 463], "297": 2, "gnuplot": 2, "291": [2, 342, 345, 346, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369], "efficiency_test": 2, "choke": 2, "liquidvapor2d": [2, 20], "289": [2, 470], "diffusionterm": [2, 8, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 81, 82, 83, 85, 90, 91, 94, 95, 97, 99, 100, 103, 104, 107, 110, 111, 112, 113, 114, 115, 116, 119, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 178, 179, 186, 187, 342, 345, 346, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 366, 368, 369, 466], "_test": 2, "287": 2, "275": 2, "274": 2, "norm2": 2, "272": 2, "269": 2, "gridxd": 2, "255": 2, "5": [2, 6, 8, 11, 14, 15, 17, 21, 31, 32, 33, 34, 36, 57, 67, 71, 72, 73, 74, 75, 81, 90, 95, 102, 113, 114, 115, 116, 119, 124, 126, 128, 130, 138, 139, 144, 150, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 182, 189, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 330, 342, 345, 346, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369, 376, 385, 389, 393, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 444, 446, 447, 449, 450, 456, 466, 469, 470], "mask": [2, 8, 17, 128, 187, 191, 193, 194, 195, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "253": 2, "promin": 2, "245": [2, 144], "_binaryterm": 2, "228": 2, "attempt": [2, 11, 17, 18, 21, 81, 186, 189, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 449, 450], "mpi": [2, 16, 20, 220, 254, 255, 310, 311, 376, 378, 380, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 463, 464], "225": 2, "mostli": [2, 220, 221], "209": [2, 119], "rhie": [2, 119], "chow": [2, 119], "180": [2, 171, 172], "arithmet": [2, 8, 21, 167, 171, 172, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 463], "face": [2, 8, 17, 21, 31, 33, 34, 36, 68, 72, 73, 81, 85, 119, 156, 163, 164, 166, 167, 171, 172, 178, 186, 187, 191, 193, 194, 195, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 447, 466], "cell": [2, 6, 8, 14, 17, 19, 20, 21, 31, 33, 34, 50, 60, 67, 71, 72, 73, 81, 82, 83, 107, 119, 139, 144, 156, 163, 164, 178, 187, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 444, 446, 447, 456, 464, 468, 470], "distanc": [2, 17, 123, 124, 130, 138, 149, 178, 406, 466], "calcul": [2, 6, 8, 11, 13, 17, 18, 19, 21, 31, 33, 34, 51, 72, 73, 81, 90, 91, 119, 130, 138, 163, 164, 178, 186, 187, 189, 225, 226, 227, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 466], "128": 2, "123": [2, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369, 389], "numerix": [2, 8, 17, 20, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 77, 78, 81, 82, 83, 95, 103, 107, 111, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 138, 149, 150, 151, 156, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 187, 188, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 393, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 440, 442, 443, 444, 446, 447, 449, 450, 466], "dot": [2, 17, 20, 71, 113, 114, 115, 119, 137, 138, 139, 150, 162, 187, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "tensor": [2, 20, 94, 161, 171, 172, 464], "103": 2, "subscrib": [2, 3], "_markstal": 2, "attributeerror": [2, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "61": 2, "implicitdiffusionterm": [2, 20, 186, 187, 195, 466], "simpl": [2, 7, 8, 17, 19, 20, 21, 31, 32, 72, 73, 81, 107, 110, 113, 114, 116, 119, 139, 163, 164, 166, 167, 173, 342, 356, 385, 406, 430, 431, 451, 468], "mesh1d": [2, 7, 8, 15, 17, 20, 52, 57, 61, 62, 66, 78, 80, 93, 94, 95, 99, 100, 104, 111, 112, 115, 163, 164, 228, 466], "346": 2, "text": [2, 7, 8, 15, 17, 21, 32, 36, 49, 51, 56, 59, 60, 75, 81, 85, 108, 110, 114, 115, 116, 126, 129, 131, 138, 141, 142, 163, 164, 166, 167, 171, 172, 173, 174, 186, 193, 194, 195, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 391, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 463, 466, 467, 469], "trunk": 2, "342": 2, "transient": [2, 15, 17, 20, 72, 73, 77, 78, 81, 82, 83, 108, 162, 173, 174, 189, 464, 467, 468], "implicit": [2, 8, 11, 17, 32, 46, 81, 82, 83, 85, 162, 163, 164, 166, 167, 173, 174, 186, 337, 359, 362, 363, 466], "338": 2, "svntogit": 2, "bump": [2, 14], "increas": [2, 8, 21, 31, 32, 33, 34, 63, 74, 81, 178, 221, 441, 442, 466, 469], "capabl": [2, 6, 8, 11, 16, 17, 18, 21, 254, 255, 310, 311, 378, 466], "eas": 2, "few": [2, 17, 19, 21, 75, 137, 406, 471, 472, 473, 475], "exist": [2, 3, 9, 10, 11, 21, 138, 144, 161, 171, 172, 186, 187, 189, 221, 372, 376, 385, 426, 463, 467, 473], "A": [2, 8, 9, 11, 12, 14, 17, 18, 21, 31, 32, 67, 71, 77, 80, 90, 91, 107, 110, 114, 116, 119, 138, 139, 141, 142, 144, 156, 161, 162, 163, 164, 166, 167, 171, 172, 174, 179, 187, 188, 189, 206, 221, 261, 323, 333, 334, 342, 366, 372, 375, 376, 385, 386, 389, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 463, 466, 467, 468, 470], "mechan": [2, 8, 14, 17, 21, 137, 144, 166, 463, 470], "specifi": [2, 5, 10, 17, 19, 78, 80, 81, 187, 188, 193, 194, 195, 220, 221, 291, 337, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 463, 466, 473, 474], "most": [2, 6, 7, 8, 9, 11, 16, 17, 18, 21, 49, 50, 51, 59, 60, 71, 81, 137, 186, 187, 188, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 346, 353, 354, 357, 361, 368, 369, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446, 463, 466, 473], "partit": [2, 4, 17, 187, 221], "pyamg": [2, 17, 20, 463, 464], "pervas": [2, 4, 10], "full": [2, 4, 11, 21, 108, 139, 173, 186, 189, 473], "namespac": [2, 17, 187, 188, 376, 395], "update2_0to3_0": [2, 7, 20], "detail": [2, 8, 11, 15, 16, 17, 21, 49, 50, 51, 59, 60, 72, 73, 119, 163, 164, 166, 167, 171, 172, 186, 268, 330, 346, 353, 354, 357, 361, 368, 372, 390], "contain": [2, 7, 8, 11, 21, 22, 115, 119, 138, 175, 187, 188, 225, 226, 227, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 471, 472, 475], "timestep": [2, 20, 81, 85, 113, 161, 163, 164, 171, 172, 174, 178, 179, 186, 187, 188, 334, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 413, 464], "brought": 2, "unavoid": 2, "guidanc": [2, 8], "332": 2, "x86_64": [2, 11], "324": 2, "constrain": [2, 17, 20, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 94, 95, 104, 113, 116, 119, 138, 173, 178, 179, 188, 192, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436], "implicitsourceterm": [2, 17, 20, 31, 32, 39, 40, 67, 68, 113, 114, 115, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 178, 179, 187, 366, 466], "317": [2, 14], "gmshimport": [2, 10], "due": [2, 6, 8, 16, 67, 72, 73, 86, 139, 161, 163, 164, 171, 172, 178, 372, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 466], "share": [2, 19, 376, 391], "316": 2, "313": 2, "307": 2, "306": [2, 470], "302": 2, "301": 2, "pycomm": 2, "debian": 2, "300": [2, 119, 411], "mesh2d": [2, 6, 20, 33, 34, 217, 221, 229, 232, 238, 246], "299": 2, "298": [2, 113, 138, 139, 144], "consumpt": [2, 137, 139], "growth": [2, 6, 19, 21, 162, 171, 172, 470], "repeat": [2, 174], "especi": [2, 19, 21, 469], "294": 2, "293": 2, "sphere": [2, 7, 8, 20], "segfault": 2, "292": 2, "290": 2, "improv": [2, 4, 6, 11, 16, 17, 74, 119, 174, 186, 188, 389, 463, 466, 469], "inconsequenti": 2, "288": 2, "themselv": 2, "286": 2, "285": 2, "284": 2, "transpos": [2, 71], "281": 2, "nthorderdiffusionterm": 2, "280": 2, "convectionterm": [2, 8, 17, 63, 68, 163, 178, 179, 186, 187], "277": 2, "step": [2, 6, 8, 11, 13, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 72, 73, 74, 77, 78, 80, 81, 82, 83, 91, 112, 113, 114, 123, 124, 126, 137, 138, 139, 144, 149, 150, 151, 161, 162, 163, 164, 166, 167, 174, 178, 179, 186, 187, 221, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 289, 290, 296, 299, 300, 301, 302, 303, 306, 313, 314, 315, 316, 317, 329, 330, 331, 332, 333, 335, 336, 366, 406, 413, 466], "273": 2, "diffusiontermnocorrect": [2, 20, 348], "270": [2, 171, 172], "too": [2, 8, 11, 17, 31, 33, 34], "267": [2, 470], "reduc": [2, 6, 21, 81, 114, 163, 164, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 466, 468], "time": [2, 6, 8, 9, 11, 15, 17, 19, 21, 22, 31, 32, 33, 34, 71, 74, 77, 78, 80, 81, 82, 83, 91, 110, 114, 123, 124, 137, 138, 139, 144, 161, 162, 163, 164, 166, 167, 171, 172, 174, 178, 179, 187, 194, 217, 221, 227, 229, 232, 238, 246, 333, 336, 366, 413, 436, 466, 467, 469], "chemotaxi": [2, 20], "264": 2, "input2d": [2, 20], "261": 2, "260": 2, "259": 2, "shorthand": [2, 473], "cellcent": [2, 8, 20, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 80, 81, 85, 86, 90, 91, 94, 95, 97, 99, 100, 104, 107, 110, 111, 112, 113, 114, 115, 116, 123, 124, 126, 128, 130, 138, 141, 142, 150, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 187, 188, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 440, 442, 443, 444, 446, 447, 449, 450], "etc": [2, 187, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "258": [2, 470], "gmshexport": 2, "252": 2, "benni": [2, 119], "interpol": [2, 31, 33, 34, 119, 139, 163, 164, 174, 178, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 446, 466, 468], "patch": [2, 3, 8, 82, 83, 446], "250": [2, 138, 139, 144], "tex": 2, "quaternari": [2, 7, 20, 115], "247": 2, "var1": [2, 17, 47, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "var0": [2, 17, 456], "sensibli": 2, "243": [2, 386], "reconstrain": 2, "242": 2, "240": 2, "profil": [2, 39, 75, 77, 78, 81, 116], "merg": [2, 9, 11, 20, 372, 464], "237": 2, "236": 2, "mix": [2, 225, 226, 227, 337, 463], "235": 2, "propag": 2, "231": [2, 334], "factorymesh": [2, 20], "keyword": [2, 8, 139, 141, 142, 144, 372, 374, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "223": [2, 437], "218": 2, "absenc": [2, 16], "enthought": [2, 10, 18, 463], "216": 2, "fresh": [2, 9, 11, 17], "213": 2, "206": 2, "gnuplot1d": 2, "205": 2, "normal": [2, 17, 138, 232, 233, 333, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 446, 466], "203": 2, "help": [2, 3, 7, 8, 11, 16, 17, 186, 187, 188, 189, 372, 451], "202": 2, "manipul": [2, 7, 187, 473], "lead": [2, 17, 137, 161, 171, 172, 466, 469], "201": [2, 334], "veloc": [2, 8, 14, 68, 119, 123, 124, 126, 138, 150, 163, 164, 174, 178, 466], "faq": [2, 3, 8, 187], "200": [2, 63, 75, 81, 113, 116, 126, 139, 141, 171, 172], "195": 2, "multipl": [2, 6, 8, 10, 17, 21, 72, 73, 81, 116, 173, 195, 385, 436, 463, 466], "result": [2, 6, 7, 8, 10, 12, 16, 17, 18, 31, 32, 33, 34, 36, 47, 49, 50, 51, 54, 56, 59, 60, 61, 65, 68, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 95, 97, 99, 100, 104, 107, 110, 111, 112, 113, 115, 116, 119, 123, 124, 128, 130, 137, 138, 139, 144, 149, 161, 163, 164, 171, 172, 174, 175, 178, 186, 187, 189, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 366, 376, 385, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 446, 463, 466, 469], "163": [2, 470], "infinit": [2, 8, 36, 75, 78, 81, 116, 174], "162": [2, 119], "ones": [2, 8, 11, 156, 171, 172, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "130": 2, "86": 2, "ly": [2, 126, 128, 141, 142, 187, 220], "lz": [2, 220], "77": [2, 6, 47, 389], "hasold": [2, 8, 39, 40, 71, 74, 81, 113, 115, 123, 124, 126, 128, 130, 138, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 178, 179, 366, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "self": [2, 10, 11, 108, 110, 111, 112, 113, 114, 115, 116, 141, 142, 161, 171, 172, 191, 192, 193, 194, 195, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 285, 287, 288, 289, 290, 291, 296, 299, 300, 301, 302, 303, 306, 310, 311, 312, 313, 314, 315, 316, 317, 329, 330, 331, 332, 337, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 374, 376, 378, 379, 385, 395, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 473, 474], "old": [2, 8, 17, 20, 32, 81, 161, 162, 163, 164, 166, 167, 171, 174, 178, 179, 187, 188, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 386, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 466], "44": [2, 376, 385], "282": 2, "279": 2, "nummesh": [2, 188], "submodul": 2, "278": 2, "form": [2, 15, 17, 20, 21, 31, 32, 33, 34, 36, 71, 74, 81, 90, 114, 119, 136, 139, 163, 164, 167, 173, 174, 178, 187, 188, 348, 362, 376, 385, 464, 466, 467, 469, 473], "268": 2, "slave": 2, "262": 2, "256": 2, "grid1d": [2, 17, 20, 36, 39, 51, 54, 56, 63, 65, 67, 68, 74, 75, 77, 81, 85, 91, 110, 111, 113, 114, 115, 116, 124, 130, 163, 164, 167, 173, 174, 178, 186, 187, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 386, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 440, 449, 450, 456], "251": 2, "241": 2, "238": 2, "predict": [2, 14, 119, 163, 164, 469, 470], "233": 2, "treat": [2, 8, 21, 174, 453], "upwind": [2, 17, 45, 46, 342, 353, 356, 368, 469], "224": [2, 437], "align": [2, 8, 17, 36, 74, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "222": 2, "__add__": [2, 20, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 385], "221": [2, 437], "219": 2, "matforg": 2, "hammer": 2, "208": 2, "207": 2, "ndarrai": [2, 333, 389, 435], "196": 2, "won": [2, 9, 11, 17, 161, 171, 172, 474], "152": 2, "re": [2, 8, 21, 67, 71, 81, 115, 116, 164, 173, 174, 335, 376, 385], "138": 2, "100": [2, 6, 10, 19, 31, 32, 33, 34, 36, 39, 40, 49, 50, 59, 60, 67, 74, 77, 78, 81, 113, 119, 141, 156, 157, 162, 163, 164, 166, 167, 171, 172, 178, 179, 376, 385, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 437, 440, 442, 443, 446, 447, 449, 450], "80": [2, 119], "idl": [2, 17], "46": [2, 470], "45": [2, 110, 111, 112, 138, 144, 376, 385, 456, 470], "slice": [2, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "produc": [2, 8, 17, 390, 415, 463], "effici": [2, 16, 17, 20, 21, 49, 50, 51, 59, 60, 186, 464, 465, 466], "diagnost": [2, 17], "232": 2, "becaus": [2, 8, 10, 11, 17, 21, 31, 32, 33, 34, 63, 75, 81, 115, 116, 119, 161, 163, 164, 167, 171, 172, 174, 178, 186, 187, 250, 342, 372, 406], "sighup": 2, "230": 2, "226": 2, "backend": [2, 8], "flush_ev": 2, "217": 2, "unpickl": [2, 386], "191": 2, "spheredaemon": [2, 20, 34], "miss": [2, 10], "187": 2, "garbl": 2, "complet": [2, 11, 16, 17, 20, 21, 139, 187, 188, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 464, 466], "independ": [2, 8, 11, 17, 21, 163, 164, 178, 466], "199": 2, "dummi": [2, 17, 115], "notimplementederror": [2, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 337], "instanti": [2, 16, 17, 21, 66, 138, 186, 198, 337, 385, 399, 402, 406, 407, 411, 413, 415, 427, 431, 434], "abstract": [2, 8, 21, 186, 191, 263, 264, 294, 296, 306, 328, 329, 332, 337, 345, 355, 363, 364, 420, 427, 439, 457, 473], "198": 2, "cylindricalgrid1d": [2, 20, 49, 50, 220], "197": 2, "tell": [2, 20, 31, 32, 33, 34, 138, 186, 464], "194": [2, 470], "larg": [2, 6, 8, 11, 16, 17, 21, 81, 136, 163, 164, 342, 372, 390, 413], "valueerror": [2, 8, 10, 216, 217, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 246, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "193": 2, "192": 2, "typeerror": [2, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 337, 376, 385], "small": [2, 8, 31, 32, 81, 138, 144, 161, 162, 171, 172, 178, 376, 385, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "beli": 2, "advanc": [2, 8, 81], "did": [2, 161, 171, 172], "increment": [2, 186], "er": 2, "older": [2, 3, 7, 8], "simul": [2, 6, 11, 14, 17, 19, 31, 32, 33, 34, 90, 137, 138, 139, 144, 161, 166, 167, 171, 172, 189, 220, 221, 334, 413, 470], "entir": [2, 17, 34, 157, 161, 171, 172, 178], "avail": [2, 5, 9, 11, 12, 13, 16, 17, 18, 34, 72, 73, 78, 81, 138, 163, 164, 174, 189, 451, 463, 466, 469, 473], "our": [2, 3, 8, 9, 11, 16, 17, 81, 174, 186, 187, 188, 189], "itself": [2, 17, 186, 187, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "190": 2, "rang": [2, 8, 36, 39, 40, 47, 71, 72, 73, 74, 77, 78, 80, 81, 82, 83, 110, 111, 112, 113, 114, 115, 119, 123, 124, 126, 138, 141, 142, 149, 150, 151, 161, 162, 163, 164, 166, 167, 173, 174, 175, 221, 311, 366, 410, 413, 429, 430, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 463, 467], "182": 2, "binop": [2, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "2_0": [2, 187], "179": [2, 119], "easy_instal": 2, "177": 2, "169": 2, "webpag": 2, "internet": 2, "explor": [2, 11, 21], "156": 2, "153": [2, 14, 470], "math": [2, 3, 162], "direct": [2, 10, 12, 16, 17, 31, 32, 33, 34, 93, 187, 195, 219, 220, 221, 238, 246, 261, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 446, 463, 473], "symmetri": [2, 19, 20, 161, 171, 172, 219], "getcel": [2, 187], "enforc": 2, "both": [2, 7, 8, 11, 13, 17, 18, 21, 49, 50, 51, 59, 60, 78, 81, 115, 119, 139, 163, 164, 186, 187, 251, 311, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463, 467], "clearer": [2, 8, 186, 187], "levelset": [2, 6, 7, 8, 20], "distancefunct": [2, 7, 20, 141, 142], "comparison": [2, 20, 119, 162, 163, 164, 464], "subtl": 2, "unlik": [2, 81, 186, 473], "affect": [2, 8, 17], "veri": [2, 6, 8, 9, 11, 16, 17, 21, 136, 163, 164, 171, 172, 173, 174, 187, 188, 372, 406, 473], "188": 2, "smtpsenderrefus": 2, "553": 2, "trac": [2, 463], "matdl": 2, "osi": 2, "org": [2, 3, 8, 11, 16, 17, 72, 73, 390, 463, 470], "sender": 2, "address": [2, 3, 11, 21], "184": [2, 385], "exportasmesh": 2, "183": 2, "linearjorsolv": [2, 20], "__init__": [2, 10, 110, 111, 112, 113, 115, 116, 161, 171, 172, 474], "rather": [2, 8, 10, 17, 21, 65, 66, 81, 91, 166, 174, 186, 187, 376, 385, 431, 466, 471, 472, 473, 475], "pysparsesolv": [2, 20, 287, 288, 289, 290, 291], "181": 2, "151": [2, 470], "mayavi2": [2, 451], "13": [2, 6, 110, 161, 162, 167, 171, 172, 174, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 385, 470], "176": 2, "win32": 2, "175": [2, 334], "offset": [2, 187, 376, 385, 413, 415, 434], "170": 2, "__invert__": [2, 20, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "154": [2, 14], "update1_0to2_0": [2, 7, 20], "hold": [2, 12, 17, 81, 138, 192, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "rank": [2, 8, 20, 71, 119, 179, 187, 311, 346, 353, 354, 357, 361, 368, 369, 376, 380, 389, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 446, 447, 456, 458, 464, 466], "simpler": [2, 21, 186], "determin": [2, 8, 21, 31, 32, 174, 178, 221, 333, 348, 385, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 438, 439, 441, 442, 443, 444, 446, 447, 466, 467], "diagon": [2, 8, 17, 119, 174, 178, 187, 246, 251, 257], "hand": [2, 8, 21, 31, 32, 68, 81, 114, 187, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "side": [2, 17, 19, 68, 75, 81, 102, 114, 116, 163, 164, 221, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "simplifi": [2, 10, 116, 163, 164, 173, 187, 188], "167": 2, "166": 2, "vectorcel": 2, "vectorfac": 2, "165": 2, "section": [2, 6, 8, 11, 12, 17, 72, 73, 81, 162, 178, 186, 335, 466], "149": 2, "143": 2, "141": 2, "toolset": 2, "140": [2, 470], "136": 2, "135": 2, "127": 2, "fragil": 2, "54": [2, 376, 385], "161": 2, "160": 2, "157": 2, "temp": 2, "widow": 2, "155": 2, "appear": [2, 3, 8, 12, 15, 17, 81, 91, 137, 141, 142, 144, 174, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 466], "150": [2, 470], "pythonxi": 2, "148": 2, "147": 2, "cg": [2, 262, 266, 287, 300, 303, 314, 317], "145": [2, 14, 470], "144": 2, "intermitt": 2, "142": [2, 376, 385], "139": 2, "bitten": 2, "137": [2, 14], "backport": 2, "manuscript": 2, "131": [2, 17], "extens": [2, 8, 11, 16, 138, 166, 189, 386, 402, 406, 463], "126": 2, "125": [2, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "emb": [2, 21], "obsolet": [2, 333], "124": 2, "121": [2, 171, 172], "simpletrenchsystem": [2, 6, 20, 137, 138, 139], "120": [2, 434], "118": [2, 178, 179], "117": 2, "getfacesbottom": [2, 186], "getfacestop": [2, 186], "lack": 2, "descript": [2, 139, 144, 221], "115": 2, "view": [2, 8, 11, 15, 17, 18, 34, 49, 50, 51, 56, 59, 60, 65, 75, 77, 81, 85, 116, 141, 156, 161, 166, 186, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 463], "cahn": [2, 17, 19, 20, 31, 32, 33, 34, 36, 161, 171, 172, 174, 348, 466, 467, 470], "hilliard": [2, 17, 20, 31, 32, 33, 34, 36, 161, 171, 172, 348, 466, 467, 470], "113": [2, 470], "macbook": 2, "pro": [2, 9, 11, 470], "intel": 2, "112": 2, "111": [2, 113], "grid2d": [2, 20, 31, 32, 40, 61, 66, 78, 82, 83, 93, 94, 112, 119, 123, 126, 128, 136, 138, 141, 142, 156, 161, 162, 166, 171, 172, 175, 179, 186, 187, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 346, 353, 354, 356, 357, 361, 368, 369, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 442, 443, 444, 446, 447, 449, 450, 456], "110": 2, "numer": [2, 4, 6, 8, 10, 14, 16, 20, 36, 49, 50, 51, 59, 60, 74, 81, 91, 162, 174, 178, 186, 187, 189, 334, 335, 346, 353, 354, 357, 361, 368, 376, 385, 393, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 432, 434, 435, 448, 452, 459, 463, 464, 465, 466, 470], "dimensionless": [2, 75, 111, 116, 161, 171, 172, 376, 385], "elphf": [2, 20], "109": [2, 470], "doctest": [2, 7, 10, 15, 17, 21, 81, 189, 372], "__array__": [2, 20, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "108": 2, "107": [2, 470], "106": [2, 14], "105": [2, 12], "useless": 2, "102": 2, "dict": [2, 141, 142, 283, 330, 372, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 463], "99": [2, 221, 376, 385], "97": 2, "nan": [2, 72, 73, 456], "correctli": [2, 32, 47, 119, 342, 366], "96": [2, 119], "95": 2, "code": [2, 4, 6, 7, 9, 10, 11, 12, 16, 17, 18, 20, 21, 68, 72, 73, 74, 81, 119, 124, 149, 156, 161, 162, 163, 164, 166, 167, 175, 186, 263, 329, 374, 376, 385, 389, 446, 463, 464], "92": 2, "pygist": 2, "dead": 2, "offici": [2, 9, 11], "84": 2, "83": 2, "zerodivisionerror": 2, "cellterm": [2, 20, 363, 366], "getold": 2, "79": [2, 6, 14, 389], "67": [2, 385], "unstructur": [2, 18, 463, 466, 470], "43": [2, 6, 470], "tsvviewer": [2, 8, 20, 72, 73, 113], "shape": [2, 20, 21, 32, 47, 161, 171, 172, 216, 217, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 246, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "34": [2, 385], "infin": [2, 8, 389], "122": [2, 171, 172], "119": 2, "116": 2, "104": 2, "matplotlibvectorview": [2, 20], "_plot": [2, 161, 171, 172], "101": 2, "autoscal": [2, 141, 142, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "93": 2, "91": [2, 470], "76": [2, 138, 144], "75": [2, 17, 376, 385, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 430, 431, 434, 456], "auto": [2, 438, 439, 441, 442, 443, 444, 446, 447], "docstr": [2, 372, 381], "74": [2, 14], "combin": [2, 8, 15, 17, 21, 115, 178, 189, 376, 385, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 466, 467], "51": [2, 95, 470], "__pos__": 2, "50": [2, 14, 39, 40, 81, 90, 100, 119, 161, 437, 442, 443, 446, 447, 449, 450], "39": [2, 163, 164], "72": [2, 456], "19": [2, 6, 81, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 385, 467, 470], "98": [2, 14], "case": [2, 6, 8, 10, 11, 13, 15, 17, 21, 39, 40, 47, 49, 50, 51, 56, 59, 60, 63, 71, 74, 75, 77, 78, 80, 81, 102, 103, 106, 107, 115, 116, 129, 131, 138, 139, 153, 158, 161, 163, 164, 166, 167, 171, 172, 173, 174, 178, 180, 184, 186, 187, 188, 220, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 381, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 469, 471, 472, 473, 474, 475], "94": [2, 239], "90": [2, 81, 119, 171, 172, 437, 440, 449, 450], "87": [2, 6, 470], "length": [2, 10, 21, 72, 73, 81, 85, 91, 162, 174, 220, 221, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 446, 447], "convert": [2, 8, 21, 161, 171, 172, 186, 376, 385, 389, 390, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446], "needless": 2, "rebuild": [2, 17], "66": 2, "guid": [2, 6], "variou": [2, 9, 11, 17, 21, 108, 138, 469], "62": [2, 6, 139], "unrecogn": 2, "token": 2, "13c": 2, "55": [2, 113, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "intern": [2, 20, 21, 187, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 464], "52": [2, 14, 470], "facevectorvari": 2, "48": 2, "inherit": [2, 10, 21, 187, 473], "hidden": [2, 21], "42": [2, 17, 163, 164], "model": [2, 4, 6, 7, 9, 11, 14, 15, 16, 19, 20, 21, 31, 32, 39, 40, 108, 115, 137, 138, 139, 141, 142, 144, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 189, 463, 464, 467, 470], "addoverfacesvari": [2, 20], "gross": 2, "41": [2, 456], "iter": [2, 6, 16, 20, 21, 36, 47, 52, 54, 56, 57, 61, 66, 81, 82, 83, 110, 111, 112, 113, 115, 119, 161, 162, 166, 167, 171, 172, 173, 174, 186, 187, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 289, 290, 296, 299, 300, 301, 302, 303, 306, 313, 314, 315, 316, 317, 329, 330, 331, 332, 333, 336, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 413, 463, 464, 466], "norm": [2, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 389, 446], "21": [2, 113, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 385, 467, 470], "dimens": [2, 11, 20, 21, 32, 51, 72, 73, 75, 81, 83, 111, 119, 124, 128, 129, 130, 131, 161, 163, 164, 166, 167, 171, 172, 173, 174, 187, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 389, 402, 406, 410, 413, 420, 426, 427, 429, 430, 435, 436, 437, 458, 466, 469], "wai": [2, 7, 11, 12, 17, 19, 20, 21, 36, 74, 80, 81, 95, 97, 99, 100, 104, 113, 114, 138, 156, 161, 162, 163, 164, 166, 167, 171, 172, 174, 187, 189, 230, 232, 233, 246, 250, 342, 376, 385, 464, 466, 473], "significantli": [2, 6, 8, 11, 187], "cach": [2, 17, 20, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 435, 464], "intermedi": [2, 6, 8, 16, 31, 32, 119], "uniformgrid": [2, 20, 248, 249, 250, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "geometr": [2, 31, 33, 34, 194, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "fly": [2, 21], "present": [2, 6, 7, 8, 11, 17, 19, 20, 111, 137, 139, 149, 163, 164, 389, 464, 465, 469], "made": [2, 8, 11, 12, 13, 15, 21, 119, 126, 174, 187, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 385, 402, 406, 410, 415, 420, 426, 429, 430, 431, 435], "consider": [2, 3, 17, 186, 189], "construct": [2, 7, 16, 17, 21, 72, 73, 123, 124, 128, 130, 137, 139, 161, 162, 163, 164, 167, 171, 172, 173, 221, 342, 356, 374, 376, 385, 406, 463, 466], "execut": [2, 6, 9, 10, 11, 16, 17, 21, 22, 77, 80, 91, 123, 124, 130, 372, 373, 375], "subclass": [2, 8, 34, 191, 263, 264, 294, 296, 306, 328, 329, 332, 345, 355, 363, 364, 420, 427, 439, 457, 473], "sensibl": [2, 17], "answer": [2, 3, 20, 36, 78, 80, 81, 86, 107, 123, 124, 126, 149, 150, 174, 342, 356, 399, 402, 406, 407, 411, 413, 415, 426, 427, 430, 431, 434, 464], "For": [2, 7, 8, 9, 11, 16, 17, 21, 31, 33, 34, 63, 72, 73, 81, 85, 108, 144, 156, 163, 164, 173, 174, 187, 189, 330, 342, 346, 353, 354, 357, 361, 368, 389, 413, 436, 446, 463, 466, 467, 468, 473], "vectorcellvari": [2, 187], "periodicgrid": 2, "howev": [2, 6, 8, 17, 81, 91, 119, 466, 469], "rewritten": [2, 36, 178], "serv": [2, 7, 21, 221], "tutori": [2, 11, 13, 17, 138, 186, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 470], "sever": [2, 11, 15, 16, 17, 21, 114, 187, 188, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "elabor": [2, 8], "multicompon": [2, 110], "multidimension": 2, "superfil": [2, 14, 137, 138, 139, 144, 470], "better": [2, 3, 8, 17, 18, 21, 47, 162, 163, 164, 173, 174, 186, 188, 406, 463, 467], "fluid": [2, 20, 21, 119, 324, 334, 467, 468, 470], "classic": [2, 163, 164, 173, 178, 275, 323, 325], "lid": [2, 119], "distinct": [2, 20, 21, 31, 32, 187, 464], "linear": [2, 8, 16, 17, 20, 21, 31, 32, 33, 34, 36, 81, 113, 114, 119, 139, 161, 163, 164, 166, 167, 171, 172, 174, 178, 187, 251, 280, 287, 288, 289, 290, 291, 302, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 463, 464, 468], "explan": [2, 8, 17, 138, 144, 372, 381], "concept": [2, 17, 470, 473], "involv": [2, 6, 20, 21, 81, 166, 167, 171, 172, 174, 464, 467, 473], "frequent": [2, 6, 15, 16, 20, 163, 164, 174, 389, 463, 464, 465], "question": [2, 3, 15, 20, 115, 333, 464, 465], "multiview": [2, 20, 138, 161, 171, 172, 437], "group": [2, 3, 4, 8], "togeth": [2, 8, 17, 136, 178, 372, 385, 453], "couldn": 2, "abbrevi": 2, "promis": 2, "actual": [2, 8, 21, 81, 119, 174, 186, 251, 330, 372, 431, 473], "fulli": [2, 11, 17, 21, 81, 174, 178, 468], "qualifi": 2, "cv": [2, 346, 353, 354, 357, 361, 368, 369, 466], "subvers": 2, "sourceforg": [2, 8, 16, 18, 463], "materi": [2, 4, 14, 20, 21, 81, 108, 119, 137, 139, 144, 161, 171, 172, 189, 464, 465, 470], "digit": [2, 389], "pathwai": 2, "pde": [2, 8, 11, 14, 15, 21, 32, 161, 171, 172, 174, 187, 189, 467, 468], "subtract": [2, 6, 20, 114, 167, 186, 376, 385, 426], "job": [2, 10, 47, 119], "suppli": [2, 8, 15, 16, 21, 163, 164, 186, 187, 221, 372, 376, 385, 415, 466, 473, 474], "fipy_view": [2, 17, 436], "them": [2, 3, 8, 10, 11, 13, 17, 21, 32, 74, 81, 96, 112, 114, 166, 186, 187, 188, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 373, 474], "choic": [2, 8, 16, 17, 18, 163, 164, 174, 178, 268], "noisevari": [2, 20, 399, 407, 411, 413, 434], "pyx": 2, "layout": 2, "getlaplacian": 2, "effect": [2, 3, 6, 17, 31, 32, 81, 161, 171, 172, 173, 174, 195, 366, 470], "getfacegrad": [2, 187], "getdiverg": 2, "which": [2, 3, 6, 8, 9, 10, 11, 13, 15, 16, 17, 18, 21, 22, 75, 78, 81, 93, 113, 114, 116, 119, 138, 163, 164, 166, 174, 178, 186, 187, 194, 220, 268, 372, 376, 381, 385, 389, 390, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 446, 463, 466, 468, 473, 474], "deepli": 2, "nest": [2, 8], "find": [2, 8, 9, 11, 16, 17, 81, 91, 163, 164, 187, 188, 389, 436, 437, 458], "situat": 2, "earlier": [2, 72, 73, 163, 164, 186, 389], "update0_1to1_0": [2, 7, 8, 20], "49": [2, 113], "47": [2, 334], "coeff": [2, 8, 17, 31, 32, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 94, 107, 110, 111, 112, 113, 114, 115, 116, 119, 139, 163, 164, 172, 173, 174, 178, 179, 186, 187, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 466], "40": [2, 36, 110, 111, 112, 139, 162, 167], "38": 2, "one": [2, 3, 8, 10, 11, 14, 16, 17, 19, 21, 47, 51, 72, 73, 75, 81, 85, 91, 110, 111, 112, 113, 114, 115, 116, 124, 130, 161, 163, 164, 167, 171, 172, 173, 174, 187, 191, 221, 250, 263, 264, 294, 296, 306, 328, 332, 345, 355, 362, 363, 364, 373, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 439, 440, 446, 456, 457, 463, 466, 471, 472, 473, 474, 475], "37": [2, 6], "electrochem": [2, 4, 6, 8, 14, 15, 20, 21, 108, 189, 470], "35": [2, 115, 119, 456], "33": [2, 163, 164, 174, 470], "32": [2, 17, 22, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 470], "conflict_handl": 2, "valid": [2, 17, 463], "31": [2, 174, 385, 470], "notat": [2, 8, 17, 20, 119, 178, 463, 464, 473], "29": [2, 144, 470], "invok": [2, 7, 8, 15, 17, 21, 156, 289, 306, 473, 474], "26": [2, 119, 138, 144, 376, 385, 470], "extract": [2, 72, 73, 81, 162, 166, 167, 221], "distancevari": [2, 20, 123, 124, 126, 128, 130, 138, 141, 142, 149, 150, 151, 430, 431], "reconcil": 2, "crystal": [2, 14, 21, 467, 470], "surfact": [2, 20, 138, 139, 144, 431], "depositionratevar": 2, "extensionveloc": 2, "axisymmetr": 2, "2d": [2, 17, 18, 19, 59, 60, 61, 97, 112, 114, 128, 141, 142, 157, 161, 162, 166, 171, 172, 179, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 406, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 463, 466], "wizard": 2, "xp": 2, "other": [3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 21, 31, 32, 81, 102, 113, 138, 139, 163, 164, 173, 175, 187, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 274, 275, 276, 277, 278, 279, 282, 283, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 373, 374, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463, 467], "encourag": 3, "follow": [3, 6, 7, 9, 10, 11, 15, 16, 17, 36, 68, 72, 73, 74, 108, 112, 116, 123, 124, 126, 128, 130, 137, 138, 139, 144, 149, 150, 156, 162, 166, 167, 171, 172, 175, 178, 186, 187, 188, 342, 366, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 467], "mode": [3, 11, 15, 221, 372, 376, 391], "monitor": 3, "post": [3, 8, 221, 463], "want": [3, 9, 11, 17, 19, 20, 72, 73, 81, 163, 164, 174, 464], "http": [3, 8, 9, 11, 13, 16, 17, 18, 34, 47, 72, 73, 171, 172, 330, 385, 390, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 463, 470], "catb": 3, "esr": 3, "smart": 3, "troubl": [3, 16], "abl": [3, 11, 161, 221, 251], "offer": [3, 15, 21], "reproduc": [3, 11, 13], "com": [3, 8, 9, 11, 13, 16, 17, 18, 34, 171, 172, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 463, 470], "suitabl": [3, 17, 81, 186, 324, 325, 376, 385, 463], "open": [3, 10, 11, 14, 17, 20, 119, 162, 166, 167, 221, 376, 391, 463, 464], "convers": [3, 16, 17, 21, 187, 376, 385], "troubleshoot": 3, "off": [3, 8, 119], "highlight": [3, 10, 119], "easi": [3, 16, 18, 31, 33, 34, 81, 463], "submiss": 3, "probabl": [3, 8, 10, 11, 17, 18, 67, 187, 399, 407, 411, 413, 463, 467, 473], "definit": [3, 10, 32, 187, 291, 325, 474], "back": [3, 9, 11, 17, 19, 21, 102, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 426, 470], "forth": 3, "tend": [3, 21, 31, 32, 81], "delet": [3, 81, 221, 376, 391], "mean": [3, 17, 20, 21, 31, 32, 33, 34, 81, 376, 385, 389, 407, 413, 446, 464], "d": [3, 14, 17, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 67, 72, 73, 77, 78, 81, 82, 83, 114, 126, 128, 129, 138, 139, 144, 149, 161, 162, 163, 164, 171, 172, 174, 175, 178, 186, 220, 342, 356, 372, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 466, 470], "expend": 3, "effort": [3, 8, 15, 17], "inferior": 3, "ve": [3, 81, 163, 164], "written": [3, 6, 7, 8, 10, 11, 17, 21, 74, 81, 119, 128, 161, 162, 163, 164, 166, 167, 173, 178, 186, 187, 188, 463, 466], "serious": 3, "subscript": 3, "email": 3, "mailto": 3, "simpli": [3, 8, 11, 16, 17, 81, 110, 111, 112, 163, 164, 178, 186, 473], "To": [3, 7, 8, 10, 11, 13, 17, 81, 91, 119, 137, 138, 139, 144, 156, 161, 163, 164, 171, 172, 174, 178, 187, 466, 469], "unsubscrib": 3, "learn": [3, 9, 11, 17], "chang": [3, 10, 11, 17, 20, 21, 31, 32, 81, 137, 138, 139, 144, 163, 164, 186, 187, 188, 230, 250, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 440, 442, 443, 444, 446, 447, 451, 463, 464, 465], "host": 3, "sent": 3, "store": [3, 32, 138, 156, 166, 221, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 390, 463, 466], "histor": [3, 9, 11, 74], "dir": [3, 376, 391], "comp": [3, 8], "jon": 4, "member": [4, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "research": [4, 14, 21, 470], "staff": 4, "scienc": [4, 14, 17, 21, 81, 189], "engin": [4, 14, 189, 463], "divis": [4, 39, 40, 189, 389], "measur": [4, 6, 21, 81, 163, 164, 189], "laboratori": [4, 20, 189, 464, 465], "nation": [4, 5, 12, 21, 189], "institut": [4, 5, 12, 21, 189], "standard": [4, 5, 11, 12, 15, 16, 21, 72, 73, 108, 173, 178, 189, 246, 342, 374, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463], "technologi": [4, 5, 12, 21, 189], "comput": [4, 8, 11, 14, 16, 17, 19, 21, 96, 139, 144, 186, 189, 463, 469, 470], "interest": [4, 8, 9, 11, 15, 21, 31, 32, 33, 34, 81, 110, 112, 114, 116, 157, 174, 221, 306, 466, 467], "orient": [4, 14, 19, 20, 71, 161, 166, 167, 171, 172, 189, 389, 437, 438, 439, 441, 443, 444, 464, 473], "design": [4, 6, 7, 8, 9, 11, 17, 20, 110, 111, 112, 464, 465], "electrochemistri": [4, 470], "daniel": [4, 470], "wheeler": [4, 14, 178, 470], "guest": 4, "finit": [4, 11, 14, 20, 21, 67, 81, 163, 164, 174, 189, 334, 463, 464, 468, 470], "volum": [4, 11, 14, 20, 21, 67, 119, 138, 139, 144, 156, 163, 164, 173, 178, 189, 221, 334, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 447, 464, 468, 470], "techniqu": [4, 8, 21, 162, 167, 468], "treatment": [4, 15, 17, 173, 189], "jim": 4, "leader": 4, "thermodynam": [4, 31, 32, 113, 115, 163, 164, 178], "kinet": [4, 8, 20, 174, 464, 465], "director": 4, "center": [4, 8, 14, 17, 20, 21, 31, 33, 34, 67, 71, 72, 73, 81, 113, 119, 141, 142, 161, 162, 171, 172, 178, 187, 189, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 464, 468], "theoret": [4, 8, 20, 21, 189, 464, 465], "varieti": [4, 8, 9, 11, 17, 21, 163, 164, 189], "solidif": [4, 19, 161, 162, 166, 171, 172, 174, 470], "polycrystallin": [4, 15, 19, 189, 470], "solid": [4, 19, 113, 115, 161, 162, 163, 164, 166, 167, 171, 172, 173], "alex": 4, "mont": 4, "pyxview": [4, 463], "he": [4, 19], "student": 4, "montgomeri": 4, "blair": 4, "school": 4, "kati": 4, "travi": [4, 463], "optim": [4, 17, 21, 81, 163, 164, 174], "she": [4, 19], "surf": 4, "smith": 4, "colleg": 4, "gibianski": 4, "harvei": 4, "mudd": 4, "andrew": 4, "reev": 4, "sabbat": 4, "univers": [4, 14, 19, 467, 470], "main": [4, 9, 11, 17, 20, 21, 166, 167, 171, 172, 375, 451, 466, 471, 472, 473, 475], "olivia": 4, "buzek": 4, "maryland": 4, "stile": 4, "jame": [4, 470], "beirn": 4, "greatli": [4, 6, 11, 16], "deploy": 4, "server": 4, "certain": [5, 7, 21, 221, 473, 474], "commerci": [5, 8, 11, 21], "firm": 5, "trade": 5, "identifi": [5, 17, 21], "procedur": [5, 21, 173], "adequ": [5, 16, 220, 221], "Such": 5, "identif": 5, "intend": [5, 15, 17, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 251], "impli": [5, 12], "recommend": [5, 16, 17, 20, 187, 188, 385, 464, 466, 474], "endors": [5, 11], "nor": [5, 8], "relat": [5, 17, 21, 163, 164, 174, 406], "necessarili": [5, 11], "best": [5, 8, 11, 16, 17, 18, 174, 187, 268, 330], "purpos": [5, 8, 9, 11, 12, 49, 50, 59, 60, 220, 221, 466], "evalu": [6, 17, 21, 119, 163, 164, 166, 167, 171, 172, 174, 178, 342, 389, 396, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "program": [6, 20, 81, 186, 375, 463, 464, 468, 473], "greater": [6, 10, 221, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "intrins": [6, 21, 163, 164, 167], "ineffici": [6, 21], "dure": [6, 17, 21, 138, 470], "languag": [6, 11, 20, 173, 189, 463, 464, 473], "hous": 6, "grain": [6, 19, 166, 167, 171, 172], "subsequ": [6, 17, 19, 171, 172], "imping": [6, 7, 8, 19, 20, 171, 172], "mesh20x20": [6, 7, 8, 17, 20], "numberofel": [6, 138, 156, 166], "10000": [6, 47, 52, 54, 56, 57, 61, 78, 110, 112, 115, 138, 161, 162, 173, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "numberofstep": [6, 137, 138, 139, 144, 166], "1000": [6, 31, 33, 34, 36, 52, 54, 56, 57, 63, 65, 66, 85, 111, 128, 173, 186, 258, 259, 260, 262, 263, 268, 269, 280, 289, 302, 306, 313, 314, 315, 317, 329, 331, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 442, 443, 444, 449, 450], "ryo": [6, 162, 166, 167, 174, 470], "kobayashi": [6, 161, 162, 166, 167, 171, 172, 174, 470], "raw": [6, 166], "cpu": [6, 17], "10": [6, 14, 17, 20, 31, 32, 33, 36, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 78, 80, 81, 82, 83, 86, 91, 95, 102, 107, 113, 114, 119, 123, 124, 129, 130, 137, 138, 139, 141, 144, 149, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 258, 259, 260, 261, 262, 263, 268, 269, 274, 275, 276, 277, 278, 279, 280, 283, 289, 290, 302, 306, 313, 314, 315, 316, 317, 326, 327, 329, 330, 331, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 389, 393, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 440, 442, 443, 444, 446, 447, 449, 450, 456, 464, 469, 470], "tabl": [6, 119, 139, 144, 385], "second": [6, 8, 119, 136, 163, 164, 178, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 449, 450], "kilobyt": 6, "kib": 6, "30": [6, 17, 20, 108, 112, 113, 114, 115, 141, 163, 164, 173, 174, 376, 385, 411, 413, 464, 470], "0009": 6, "39316": 6, "772": 6, "0031": 6, "39664": 6, "1600": 6, "1": [6, 8, 10, 11, 14, 15, 16, 17, 18, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 103, 104, 107, 108, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 137, 138, 139, 141, 142, 144, 149, 150, 151, 156, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 187, 188, 189, 193, 195, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 274, 275, 276, 277, 278, 279, 289, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 374, 375, 376, 385, 389, 391, 393, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 464, 466, 467, 469, 470], "4": [6, 8, 9, 11, 14, 15, 17, 20, 21, 34, 36, 47, 56, 63, 67, 71, 72, 73, 74, 81, 85, 95, 107, 110, 112, 113, 114, 115, 119, 123, 126, 128, 129, 131, 138, 139, 141, 142, 144, 149, 157, 161, 162, 163, 164, 171, 172, 173, 174, 175, 178, 182, 189, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 356, 372, 376, 385, 389, 393, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 440, 442, 443, 444, 449, 450, 456, 464, 466, 470], "65": 6, "017": 6, "40656": 6, "1044": 6, "6400": 6, "3": [6, 8, 9, 11, 13, 14, 15, 16, 17, 20, 21, 31, 34, 36, 47, 49, 50, 59, 60, 63, 67, 68, 72, 73, 74, 77, 81, 85, 95, 107, 110, 111, 112, 113, 115, 119, 123, 126, 128, 129, 131, 136, 138, 139, 141, 142, 144, 149, 150, 157, 163, 164, 166, 171, 172, 173, 174, 178, 179, 187, 188, 189, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 322, 342, 356, 372, 376, 385, 389, 393, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 440, 449, 450, 456, 463, 464, 466, 467, 469, 470], "46124": 6, "1880": 6, "25600": 6, "60840": 6, "5188": 6, "102400": 6, "145820": 6, "18436": 6, "plain": [6, 17, 81, 138], "oper": [6, 9, 10, 11, 17, 21, 161, 166, 167, 171, 172, 187, 238, 376, 378, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463, 466], "around": [6, 10, 21, 47, 81, 136, 426, 466], "17": [6, 12, 20, 233, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 464, 468, 470], "slower": [6, 21, 187], "penalti": 6, "hope": [6, 187, 188], "futur": [6, 9, 11, 17, 162, 166, 167, 186, 463], "gain": [6, 17], "particular": [6, 7, 8, 9, 11, 12, 17, 21, 75, 81, 86, 186], "analysi": [6, 8, 17, 463, 470], "shown": [6, 7, 8, 19, 108, 163, 164, 174, 186], "As": [6, 7, 8, 10, 17, 21, 72, 73, 74, 81, 144, 163, 164, 173, 178, 186, 187, 189, 376, 385, 391, 474], "record": 6, "each": [6, 7, 8, 17, 21, 31, 33, 34, 49, 50, 51, 59, 60, 72, 73, 78, 80, 81, 93, 96, 110, 111, 112, 139, 163, 164, 166, 173, 175, 186, 187, 230, 246, 250, 311, 366, 372, 376, 380, 385, 389, 402, 410, 420, 426, 427, 429, 446, 456, 466, 468, 471, 472, 475], "approxim": [6, 8, 17, 78, 119, 173, 174, 466, 468], "maximum": [6, 10, 36, 138, 163, 164, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 289, 290, 296, 299, 300, 301, 302, 303, 306, 313, 314, 315, 316, 317, 326, 327, 329, 330, 331, 332, 342, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "spike": 6, "hard": [6, 21, 161, 171, 172, 187, 463], "dynam": [6, 11, 22, 174, 468, 470], "alloc": [6, 21], "rough": [6, 163, 164], "exact": [6, 81, 119, 162, 174, 469], "complex": [6, 16, 17, 21, 137, 144, 163, 164, 376, 385, 463, 467], "largest": [6, 81, 376, 385, 436], "mainli": [6, 21, 47], "below": [6, 8, 11, 17, 119, 137, 144, 161, 171, 172, 186], "per": [6, 11, 17, 81, 163, 164, 174, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 449, 450], "multigrid": [6, 16, 86], "benefici": 6, "overhead": [6, 17], "cost": 6, "perform": [6, 8, 11, 17, 19, 21, 31, 32, 33, 34, 85, 150, 163, 164, 174, 251, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 289, 290, 296, 299, 300, 301, 302, 303, 306, 313, 314, 315, 316, 317, 329, 330, 331, 332, 376, 385, 389, 463], "equival": [6, 15, 17, 21, 81, 189, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 385, 466, 468], "precondit": [6, 16, 277, 288, 291, 299, 300, 301, 303, 463], "enough": [6, 17, 161, 171, 172, 221], "speedup": [6, 17], "specif": [6, 8, 12, 16, 21, 32, 72, 73, 188, 189, 427, 436, 446, 463, 473], "someth": [7, 8, 15, 17, 19, 81, 138, 161, 171, 172, 187, 188, 385, 451, 456, 474], "least": [7, 8, 11, 17, 174, 188, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "four": [7, 17, 19, 113, 166, 173, 175, 246], "demonstr": [7, 17, 21, 23, 47, 67, 72, 73, 82, 83, 108, 111, 123, 124, 128, 130, 137, 138, 139, 144, 156, 157, 166, 167, 466], "applic": [7, 9, 11, 16, 19, 21, 72, 73, 451, 463, 466, 468], "finish": [7, 39, 40, 68, 78, 91, 95, 137, 138, 139, 144, 166, 174, 178, 179], "left": [7, 8, 15, 17, 20, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 67, 68, 71, 75, 81, 82, 83, 85, 108, 114, 116, 119, 123, 126, 129, 131, 137, 138, 139, 149, 156, 161, 162, 163, 164, 167, 171, 172, 173, 174, 175, 178, 186, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 348, 356, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 440, 464, 467, 468], "shell": [7, 11, 13, 15, 17, 34, 157, 463], "At": [7, 11, 17, 21, 78, 138, 189], "enter": [7, 15], "queri": [7, 427], "session": [7, 14, 15, 17, 21], "directli": [7, 8, 17, 19, 21, 72, 73, 81, 82, 83, 178, 186, 187, 188, 289, 372, 473, 474], "block": [7, 15, 74, 81, 178], "final": [7, 8, 75, 81, 91, 113, 115, 116, 163, 164, 167, 178, 221, 250, 366, 374], "importantli": 7, "templat": 7, "emphasi": [7, 10], "comprehens": [7, 21], "framework": [7, 15, 21, 189, 473], "steadyst": [7, 15, 20, 77, 80], "succinct": [7, 8, 11, 13], "prompt": [7, 15, 17, 81, 174, 189], "copy_script": [7, 81, 138], "addit": [7, 17, 20, 74, 81, 139, 376, 381, 385, 389, 395, 463], "those": [7, 8, 9, 11, 17, 21, 81, 86, 137, 138, 139, 144, 163, 164, 186, 463, 473, 474], "dozen": 7, "understand": [7, 8, 17, 139, 187], "illustr": [7, 8, 21, 81, 466], "electrostat": [7, 20, 108, 112, 113, 114, 115, 116], "nthorder": [7, 20], "input4thorder1d": [7, 20], "exponential1d": [7, 20, 54, 56, 57, 61, 62, 65, 66, 186], "exponential1dsourc": [7, 20], "allen": [7, 17, 161, 171, 172, 174], "binarycoupl": [7, 8, 17, 20], "mesh40x1": [7, 8, 20, 166], "polyxtalcoupl": [7, 17, 20], "advect": [7, 20, 67, 138, 149, 151, 163, 164, 342, 356], "spinod": [7, 19, 31, 32, 33, 34], "decomposit": [7, 19, 31, 32, 319, 322, 323, 466], "multi": [7, 463], "evolut": [7, 8, 21, 31, 32, 33, 34, 81, 137, 161, 164, 171, 172, 173, 467, 470], "reactivewet": [7, 20], "liquidvapor1d": [7, 20], "canon": [8, 31, 32, 33, 34, 163, 164, 173, 389], "govern": [8, 12, 74, 81, 114, 137, 138, 139, 144, 149, 150, 161, 162, 163, 164, 171, 172, 178], "underbrac": [8, 108, 173, 467], "frac": [8, 17, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 67, 68, 71, 74, 75, 77, 81, 85, 108, 110, 114, 116, 119, 123, 124, 130, 137, 138, 139, 149, 150, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 178, 186, 333, 342, 351, 356, 366, 399, 402, 406, 407, 410, 411, 413, 415, 426, 427, 429, 430, 431, 434, 466, 467, 469], "partial": [8, 14, 16, 17, 20, 31, 32, 33, 34, 36, 67, 68, 71, 74, 77, 81, 85, 108, 110, 114, 123, 124, 130, 138, 149, 161, 162, 163, 164, 167, 171, 172, 173, 174, 178, 189, 290, 337, 342, 356, 366, 463, 464, 467, 468], "rho": [8, 20, 75, 81, 116, 173, 178, 179, 366, 464, 467, 468], "_": [8, 17, 32, 71, 74, 81, 108, 119, 163, 164, 173, 174, 193, 194, 195, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 389, 391, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 467], "vphantom": [8, 108, 173, 467], "nabla": [8, 17, 20, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 74, 75, 77, 81, 108, 110, 114, 116, 119, 123, 124, 128, 129, 131, 138, 149, 161, 162, 163, 164, 167, 171, 172, 173, 174, 186, 195, 342, 346, 348, 351, 353, 354, 356, 357, 361, 368, 399, 402, 406, 407, 410, 411, 413, 415, 426, 427, 429, 430, 431, 434, 464, 467, 468], "cdot": [8, 17, 20, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 75, 77, 81, 108, 110, 116, 119, 123, 124, 138, 149, 161, 162, 163, 164, 167, 171, 172, 173, 186, 193, 195, 346, 348, 351, 353, 354, 357, 361, 368, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 464, 467, 468], "vec": [8, 17, 20, 49, 50, 51, 52, 54, 56, 57, 59, 60, 81, 119, 123, 124, 149, 163, 164, 174, 179, 186, 193, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 464, 467, 468], "gamma_i": [8, 466, 467], "n": [8, 14, 17, 19, 75, 81, 108, 110, 111, 114, 116, 119, 123, 138, 139, 144, 156, 161, 162, 163, 164, 166, 171, 172, 173, 175, 193, 195, 220, 346, 353, 354, 357, 361, 368, 376, 385, 389, 393, 399, 402, 406, 407, 410, 411, 413, 415, 426, 427, 429, 430, 431, 434, 441, 442, 466, 467, 470], "s_": [8, 174, 466, 467], "discuss": [8, 10, 15, 20, 21, 32, 464, 469], "discret": [8, 17, 20, 47, 81, 119, 161, 166, 167, 171, 172, 178, 220, 221, 337, 351, 353, 354, 357, 361, 368, 464, 468], "pose": [8, 74], "ratio": [8, 71, 139, 144, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 438, 439, 441, 442, 443, 444, 446, 447, 469], "along": [8, 11, 17, 21, 31, 32, 81, 144, 161, 171, 172, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "coordin": [8, 72, 73, 91, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 446, 456], "partial_x": 8, "notic": [8, 12, 15, 187, 473], "within": [8, 11, 13, 17, 21, 71, 119, 178, 221, 230, 246, 250, 389, 466, 471, 472, 475], "first": [8, 11, 16, 17, 21, 36, 45, 46, 72, 73, 74, 75, 81, 114, 115, 116, 119, 123, 124, 136, 138, 149, 150, 162, 163, 164, 166, 174, 175, 178, 186, 187, 188, 217, 221, 229, 230, 232, 233, 238, 246, 249, 250, 335, 342, 372, 376, 385, 386, 389, 395, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 436, 437, 458, 466, 474], "higher": [8, 16, 17, 20, 119, 163, 164, 178, 195, 220, 221, 342, 348, 467, 468, 469], "although": [8, 9, 11, 16, 17, 21, 31, 32, 81, 108, 112, 114, 162, 163, 164, 174, 186, 187, 406, 466, 467], "confus": [8, 463], "interpret": [8, 15, 17, 21, 473, 474], "examin": [8, 21, 75, 116, 163, 164, 466], "short": [8, 138], "represent": [8, 20, 81, 137, 141, 142, 174, 206, 225, 226, 227, 228, 229, 230, 246, 247, 248, 249, 250, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "assum": [8, 15, 119, 139, 161, 163, 164, 171, 172, 178, 376, 385, 389, 406, 466], "fourth": [8, 85], "isotrop": [8, 94], "nomin": 8, "anomal": 8, "equiv": [8, 17, 163, 164, 173, 174, 469], "conveni": [8, 11, 375, 376, 385], "appli": [8, 14, 20, 21, 67, 81, 82, 83, 119, 138, 163, 164, 174, 188, 191, 193, 194, 195, 289, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 464, 470], "rotat": [8, 34, 71, 157, 162], "realiz": [8, 186], "even": [8, 10, 17, 20, 21, 31, 33, 34, 94, 114, 164, 173, 186, 195, 342, 356, 372, 464, 467], "though": [8, 94, 114, 164, 174], "superfici": 8, "resembl": [8, 74, 137, 144], "d_1": [8, 348], "d_2": [8, 348], "xi": [8, 108, 112, 113, 114, 115, 162, 173, 333], "third": [8, 11, 19, 136, 376, 385, 463], "d2": [8, 348], "facegrad": [8, 17, 20, 67, 68, 74, 81, 85, 110, 111, 112, 113, 115, 161, 162, 163, 164, 166, 167, 171, 172, 173, 178, 179, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 446, 447, 466], "diverg": [8, 17, 20, 67, 74, 119, 162, 163, 164, 166, 167, 171, 399, 407, 410, 411, 413, 427, 429, 430, 466], "grad": [8, 20, 72, 73, 113, 114, 115, 119, 166, 167, 171, 172, 178, 179, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 446, 447, 456], "arithmeticfacevalu": [8, 20, 31, 33, 34, 36, 119, 163, 164, 166, 167, 171, 172, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "rate": [8, 31, 32, 138, 139, 144, 150, 161, 171, 172, 174, 399, 411], "rho_1": 8, "rho_2": 8, "manner": [8, 17, 21, 166, 167, 173, 178, 466], "rho1": 8, "rho2": 8, "perspect": 8, "might": [8, 19, 21, 163, 164, 466], "mobil": [8, 108, 113, 114, 115, 163, 164, 173, 413], "counter": [8, 108, 173], "eq": [8, 31, 32, 33, 34, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 77, 80, 81, 82, 83, 85, 86, 90, 114, 163, 164, 172, 174, 178, 186, 187, 366], "d1": [8, 348], "With": [8, 21, 81, 161, 163, 164, 171, 172, 187, 446, 473], "advent": 8, "gamma_1": [8, 20, 464, 467, 468], "gamma_0": 8, "diffterm": [8, 186, 187], "gamma0": [8, 17], "converg": [8, 74, 81, 163, 164, 166, 174, 366], "plan": 8, "restart": [8, 166], "stage": [8, 9, 11, 14, 21, 81, 413, 470], "ll": [8, 11, 17, 81, 114, 139, 144, 161, 163, 164, 171, 172, 173, 174, 187, 188], "howtowriteascript": [8, 20], "On": [8, 11, 21, 22, 163, 164, 174, 466], "littl": [8, 21, 163, 164, 187, 473], "anyth": [8, 17, 21, 31, 32, 33, 34, 257, 436], "besid": 8, "anoth": [8, 11, 13, 21, 72, 73, 81, 113, 136, 163, 164, 167, 174, 342, 356, 362, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446, 473], "piec": [8, 17, 21], "softwar": [8, 11, 12, 16, 19, 21, 137, 144, 463], "qualiti": [8, 18, 335, 463], "graph": [8, 96], "multiscal": 8, "ascii": 8, "tab": [8, 11, 72, 73, 456], "separ": [8, 11, 15, 17, 21, 22, 31, 32, 72, 73, 74, 110, 111, 112, 113, 114, 115, 173, 174, 178, 376, 385, 389, 395, 449, 450, 456, 466], "button": 8, "filenam": [8, 17, 72, 73, 113, 141, 142, 166, 221, 386, 402, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "myimag": 8, "ext": [8, 138, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "ep": [8, 166, 167, 171, 172], "jpg": 8, "joint": 8, "photograph": 8, "expert": 8, "png": [8, 17], "portabl": [8, 16, 463], "network": 8, "graphic": [8, 17, 19], "chosen": [8, 17, 21, 113, 115, 441, 442, 447, 469], "yet": [8, 166, 463], "knowledg": [8, 17, 21, 473], "agg": 8, "cairo": 8, "net": [8, 16, 18, 463], "facil": [8, 111, 163, 164, 463], "previou": [8, 17, 32, 81, 161, 163, 164, 171, 172, 174, 186, 376, 385, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 466], "stitch": 8, "free": [8, 12, 18, 19, 21, 31, 32, 36, 108, 163, 164, 173, 174, 178, 179, 187, 188, 463, 470], "sharewar": 8, "adapt": [8, 16, 21, 161, 171, 172, 334, 335, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 463], "utilitarian": [8, 161, 171, 172], "let": [8, 17, 81, 119, 161, 163, 164, 171, 172, 174, 186, 366], "minimum": [8, 17, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 435, 446], "tri": [8, 17, 81, 441, 442, 456], "plotter": 8, "common": [8, 17, 18, 21, 137, 174, 206, 463, 466, 473], "often": [8, 11, 17, 81, 138, 161, 171, 172, 413, 467], "supplement": 8, "underli": [8, 74, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "come": [8, 11, 17, 19, 21, 187, 385], "closest": [8, 389, 406], "overrid": [8, 16, 17, 374, 451], "wan": 8, "heavi": [8, 17], "lift": 8, "custom": [8, 17, 21, 34, 161, 189, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "differenti": [8, 14, 16, 189, 337, 463, 468], "benefit": [8, 17, 21, 31, 33, 34, 49, 50, 51, 59, 60, 174, 186], "repetit": 8, "achiev": [8, 11, 17, 81, 85, 110, 112, 178, 469], "similar": [8, 81, 91], "three": [8, 10, 11, 16, 17, 19, 21, 111, 112, 115, 139, 175, 178, 187, 221, 470], "layer": [8, 136, 137, 138, 139, 144, 217, 221, 227, 229, 232, 238, 246], "lowest": 8, "spend": [8, 189], "think": [8, 10, 17, 21, 163, 164], "practic": [8, 10, 11, 17, 20, 74, 163, 164, 174, 187, 463, 464, 465, 473], "exactli": [8, 15, 17, 67, 163, 164, 174, 376, 385], "thu": [8, 21, 51, 81, 137, 139, 167, 174, 374, 466, 469], "emploi": [8, 11, 16, 17, 174, 468], "until": [8, 17, 21, 81, 333], "satisfactorili": [8, 75], "choos": [8, 11, 16, 17, 71, 81, 163, 164, 174, 441, 442], "toler": [8, 9, 11, 16, 17, 36, 47, 54, 56, 57, 61, 66, 81, 91, 110, 111, 113, 163, 164, 166, 173, 178, 179, 186, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 289, 290, 296, 299, 300, 301, 302, 303, 306, 313, 314, 315, 316, 317, 329, 330, 331, 332, 376, 385, 389], "desir": [8, 9, 11, 21, 163, 164, 173, 174, 186, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 385, 438, 439, 441, 442, 443, 444, 446, 447], "mysolv": 8, "linearpcgsolv": [8, 20, 163, 186, 187, 277, 342], "1234": 8, "5e": [8, 32, 138, 161, 162, 163, 164, 171, 172, 174, 178, 179, 399, 407, 411, 413], "favor": 8, "role": [8, 21], "middl": [8, 163, 164, 221], "concentr": [8, 52, 54, 57, 61, 62, 65, 66, 74, 75, 77, 78, 108, 110, 111, 112, 113, 115, 116, 138, 139, 144, 163, 164, 173, 186, 431, 467], "temperatur": [8, 14, 81, 138, 139, 144, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 178, 179, 413, 467], "thermal": [8, 19, 81, 161, 171, 172, 413], "perfect": 8, "good": [8, 47, 59, 60, 81, 119, 174, 468], "elaps": [8, 31, 32, 33, 34, 113, 171, 172, 174], "despit": [8, 17], "evolv": [8, 10], "quasi": 8, "static": [8, 198, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "steadi": [8, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 72, 73, 75, 81, 82, 83, 85, 91, 94, 107, 114, 174, 186], "distinguish": [8, 17], "cycl": [8, 21, 463], "done": [8, 9, 11, 17, 187, 374], "modifi": [8, 11, 12, 13, 15, 21, 144, 178, 473], "myvar": 8, "updateold": [8, 20, 39, 40, 71, 74, 81, 111, 113, 115, 123, 124, 126, 138, 149, 150, 151, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 178, 179, 366, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "repeatedli": [8, 81, 82, 83, 189, 333], "stabl": [8, 9, 11, 21, 81, 163, 164, 174, 469], "truli": 8, "desiredresidu": 8, "outermost": 8, "goal": [8, 21], "studi": [8, 14, 21, 108, 116], "moreov": [8, 17, 19], "equilibrium": [8, 36, 75, 77, 78, 80, 81, 110, 111, 112, 113, 114, 115, 116, 163, 164, 173, 174, 178, 186], "fundament": [8, 21, 385], "becom": [8, 11, 17, 90, 110, 111, 112, 139, 161, 171, 172, 178, 406, 466, 467], "either": [8, 9, 11, 12, 16, 17, 21, 74, 81, 157, 163, 164, 174, 187, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 406, 413, 436, 466, 473, 474], "unstabl": [8, 90, 161, 171, 172], "inaccur": [8, 86, 466], "stabil": [8, 9, 11, 74, 81, 174, 313, 466], "accuraci": [8, 17, 39, 40, 71, 81, 138, 342, 406], "distinctli": 8, "said": 8, "blow": 8, "radic": 8, "perfectli": [8, 81, 186], "disagre": 8, "smaller": [8, 163, 164], "larger": [8, 81, 174, 413, 430, 466], "interv": 8, "234e": 8, "elapsedtim": 8, "totalelapsedtim": 8, "somefunctionofvariablesandtim": 8, "myvar1": 8, "myvar2": 8, "notabl": 8, "interfaci": [8, 114, 174], "gradual": 8, "down": [8, 17, 31, 32, 81, 174], "describ": [8, 17, 21, 31, 32, 52, 54, 57, 61, 62, 65, 66, 72, 73, 81, 115, 119, 139, 161, 171, 172, 174, 178, 376, 391, 466, 468, 471, 472, 474, 475], "substitut": [8, 17, 108, 110, 111, 112, 113, 114, 115, 116, 119, 173, 178, 436], "undesir": 8, "consequ": [8, 11, 119], "averag": [8, 81, 90, 119, 163, 164, 173, 178, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 466], "f": [8, 17, 31, 32, 33, 34, 36, 81, 138, 139, 144, 161, 163, 164, 166, 173, 174, 178, 179, 334, 346, 353, 354, 357, 361, 368, 376, 385, 386, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 466], "neq": [8, 108, 110, 173], "smoothli": 8, "dramat": [8, 74, 81], "sharp": [8, 31, 32, 113, 115, 163, 164, 173], "drop": [8, 11, 13, 17, 81, 119, 221], "harmon": [8, 31, 33, 34, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "experi": [8, 14, 16, 17, 138, 470], "excess": [8, 469], "vice": 8, "versa": 8, "ma": [8, 389], "maerror": 8, "locat": [8, 17, 22, 221, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 466, 471, 472, 475], "pm": [8, 171, 172], "infti": [8, 17, 114, 137, 138, 139, 144, 333, 389, 399, 411, 469], "repair": 8, "catalog": 8, "kei": [8, 63, 68, 75, 90, 113, 116], "flag": [8, 11, 16, 20, 161, 162, 171, 172, 372, 464], "mailinglist": 8, "mailman": 8, "fn": [8, 333, 473], "dev": [8, 463], "2005": [8, 14, 20, 334, 464], "june": [8, 14], "003010": 8, "23": [8, 17, 20, 47, 108, 173, 385, 389, 464, 470], "neither": [8, 376, 385], "sloppi": 8, "thread": [8, 20, 464], "scientif": [8, 11, 14, 16, 18, 21, 463, 470], "4349": 8, "experienc": 8, "upgrad": [8, 11], "brows": [9, 11, 17], "through": [9, 11, 17, 19, 72, 73, 81, 163, 164, 166, 174, 186, 291, 330, 413], "download": [9, 11, 20, 464], "Be": [9, 11, 16, 17, 187], "pre": [9, 20, 119, 464], "scm": [9, 11, 470], "latest": [9, 11, 17], "subject": [9, 11, 12, 17, 74, 186, 376, 385, 389], "behav": [9, 11, 81, 195], "degre": [9, 11, 17, 119, 162, 163, 164], "indic": [9, 11, 15, 16, 17, 187, 188, 376, 385, 389, 393, 466], "decid": [9, 11], "risk": [9, 11, 385], "track": [9, 11, 21], "clone": [9, 11], "shift": [9, 11, 39, 40, 163, 164, 393], "past": [9, 11], "gcbc0b38ea": [9, 11, 20, 464], "x_y_z": [9, 11], "retain": [9, 11, 17, 81, 163, 164], "guarante": [9, 11, 385, 469], "kept": [9, 11], "synchron": [9, 11], "altogeth": [9, 11, 81], "who": [9, 11, 21], "wide": [9, 11, 16, 18, 463, 467], "onlin": [9, 11, 17], "book": [9, 11, 470], "cours": [10, 17, 136, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "strai": 10, "peril": 10, "forbidden": 10, "greatest": 10, "extent": [10, 12], "had": [10, 81, 174, 186, 187], "great": [10, 19, 163, 164, 187], "knew": [10, 21], "rectangl": 10, "blob": [10, 11, 13, 171, 172], "def": [10, 110, 111, 112, 113, 114, 115, 116, 128, 129, 131, 161, 163, 164, 166, 171, 172, 173, 174, 178, 179, 187], "width": [10, 171, 172, 446, 466], "height": [10, 47, 126, 163, 164, 174], "black": [10, 186], "red": 10, "strong": 10, "sorri": 10, "lose": 10, "mixedcas": 10, "lowercas": 10, "lower_case_with_underscor": 10, "deviat": [10, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 469], "unsur": 10, "anybodi": 10, "willing": 10, "seen": [10, 81, 163, 164], "unittest": [10, 21, 374, 375], "heavili": [10, 451], "care": [10, 15, 17, 81, 174, 186], "taken": [10, 15, 21, 77, 78, 80, 81, 161, 171, 172, 385, 390], "defin": [10, 21, 47, 49, 50, 51, 56, 59, 60, 67, 72, 73, 81, 113, 137, 138, 161, 163, 164, 166, 167, 171, 172, 178, 186, 221, 231, 389, 399, 402, 406, 407, 410, 411, 413, 420, 426, 427, 429, 434, 446, 466, 469, 473, 474], "parallel_2": 10, "processor_0": [10, 372], "id": [10, 17, 20, 36, 141, 187, 389, 393, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 438, 439, 440, 441, 442, 443, 444, 446, 447, 470], "processor_0_of_2": [10, 372], "processor_1_of_2": [10, 372], "processor_0_of_3": [10, 372], "processor_1_of_3": [10, 372], "processor_2_of_3": [10, 372], "register_skipp": [10, 20, 372], "pertain": 10, "reli": [11, 72, 73, 446, 466, 473], "parti": [11, 19, 463], "begin": [11, 15, 17, 21, 36, 49, 51, 56, 59, 60, 71, 74, 75, 81, 115, 116, 129, 131, 138, 139, 144, 161, 163, 164, 166, 167, 171, 172, 173, 174, 186, 221, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 469, 474], "By": [11, 17, 119, 174, 372, 406], "select": [11, 20, 21, 220, 221, 334, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 389, 465, 469], "webspac": 11, "infer": 11, "drawn": 11, "referenc": 11, "concur": 11, "fact": [11, 81, 186, 187, 372, 406], "rudimentari": [11, 18, 119, 336], "introduct": [11, 20, 465, 468, 470], "expedi": [11, 21], "manag": [11, 13, 17, 463], "virtual": [11, 20, 464, 465], "keep": [11, 31, 32, 33, 34, 138, 162], "suffici": [11, 163, 164, 187, 188, 376, 386, 391], "privileg": 11, "channel": [11, 17], "dai": [11, 21], "everyth": [11, 187], "myfipyenv": 11, "pythonvers": 11, "popul": 11, "anaconda": 11, "mpich": 11, "traitsui": 11, "x86_32": 11, "bit": [11, 72, 73, 163, 164, 174], "rot": 11, "One": [11, 17, 81, 90, 110, 112, 156, 163, 164, 174, 178, 186, 446, 466], "vtkviewer": [11, 20], "remedi": 11, "quit": [11, 467], "mamba": 11, "speed": [11, 119], "pretti": 11, "visual": [11, 18, 451, 463], "fewer": [11, 174], "amongst": 11, "freeli": [11, 15, 21, 189], "mind": [11, 17], "preserv": [11, 47, 123, 124, 389], "courag": 11, "impati": 11, "quickli": [11, 18, 139, 230, 250, 463], "formal": 11, "confid": [11, 119], "requisit": 11, "alter": [11, 17, 21], "admin": 11, "termin": [11, 17, 81, 91, 137, 138, 139, 144, 174], "15": [11, 14, 20, 36, 54, 56, 57, 61, 66, 67, 81, 113, 115, 163, 164, 166, 171, 172, 173, 174, 186, 233, 266, 267, 270, 299, 300, 301, 303, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 456, 464, 468, 470], "copyright": [11, 12], "credit": 11, "geuz": [11, 463], "creation": [11, 72, 73, 186, 473], "irregular": [11, 72, 73, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437], "analyz": [11, 72, 73], "judici": [11, 17], "compon": [11, 19, 31, 32, 74, 75, 110, 111, 112, 113, 114, 115, 116, 163, 164, 173, 178, 470], "fast": [11, 16, 21, 406, 470], "march": [11, 14, 406, 470], "ktchu": 11, "serendipityresearch": 11, "surfac": [11, 17, 19, 34, 72, 73, 95, 139, 157, 161, 171, 172, 174, 221, 466], "curv": [11, 174], "addition": [11, 19, 119], "pylsmlib": 11, "tree": [11, 436, 437, 458], "violat": 11, "tamper": 11, "util": [11, 20, 162, 166, 167, 221, 333, 336, 376, 393, 463], "stow": 11, "virtualenv": 11, "buildout": 11, "cd": [11, 385], "power": [11, 13, 17, 21, 173, 189, 361, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 469, 473], "unix": [11, 13, 17], "reliabl": [11, 13, 187], "blog": [11, 13], "hpc": [11, 13], "team": [11, 13], "gricad": [11, 13], "tuto": [11, 13], "2017": [11, 13, 20, 464], "07": [11, 13, 385], "04": [11, 13, 20, 150, 464, 470], "my": [11, 13, 17, 20, 187, 464], "md": [11, 13], "pure": [11, 13, 17, 74, 108, 163, 164, 173], "nativebuildinput": [11, 13], "know": [11, 13, 17, 21, 114, 186, 187], "toolz": [11, 13], "persist": [11, 13, 19, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "employe": 12, "agenc": 12, "feder": [12, 21], "pursuant": 12, "protect": 12, "foreign": 12, "permiss": 12, "countri": 12, "deriv": [12, 15, 17, 31, 32, 33, 34, 68, 74, 81, 163, 164, 173, 178, 195, 334, 385, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 466, 467, 468, 469, 473, 474], "fee": 12, "herebi": 12, "grant": [12, 19], "exclus": [12, 17], "basi": [12, 470], "disclaim": 12, "warranti": 12, "THE": 12, "AS": 12, "OF": 12, "kind": 12, "OR": 12, "statutori": 12, "BUT": 12, "NOT": 12, "TO": 12, "THAT": 12, "WILL": 12, "conform": 12, "merchant": 12, "fit": [12, 21, 174], "FOR": 12, "AND": [12, 389], "freedom": 12, "infring": 12, "BE": 12, "IN": 12, "NO": 12, "event": [12, 163, 164, 427], "shall": 12, "liabl": 12, "damag": 12, "indirect": 12, "consequenti": 12, "aris": 12, "connect": [12, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "WITH": 12, "contract": 12, "tort": 12, "otherwis": [12, 90, 141, 142, 161, 171, 172, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "injuri": 12, "sustain": 12, "BY": 12, "person": 12, "loss": [12, 16], "aros": 12, "hereund": 12, "cite": 14, "j": [14, 21, 75, 81, 108, 110, 113, 114, 116, 137, 138, 139, 144, 149, 163, 164, 166, 167, 171, 172, 173, 174, 175, 193, 334, 376, 385, 389, 470], "11": [14, 17, 20, 47, 71, 72, 73, 95, 113, 119, 128, 141, 142, 178, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 385, 389, 464, 470], "pp": [14, 342], "2009": [14, 20, 464, 470], "1109": 14, "mcse": 14, "w": [14, 114, 139, 144, 163, 164, 167, 171, 172, 174, 221, 376, 385, 391, 470], "boetting": [14, 108, 470], "earli": [14, 21, 78, 470], "reactiv": [14, 15, 20, 189, 470], "wet": [14, 15, 20, 166, 167, 189, 470], "82": [14, 178, 179, 470], "051601": [14, 470], "2010": [14, 20, 464, 470], "1103": [14, 470], "physrev": [14, 470], "mohanti": 14, "sohn": 14, "gradient": [14, 20, 31, 32, 39, 82, 83, 108, 114, 119, 161, 163, 164, 166, 167, 171, 172, 174, 178, 258, 259, 287, 291, 313, 342, 356, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 464, 466], "journal": [14, 334, 470], "034912": 14, "1063": [14, 470], "3190607": 14, "pusztai": 14, "l": [14, 17, 36, 39, 40, 51, 52, 54, 56, 57, 61, 62, 63, 65, 66, 68, 75, 78, 81, 82, 83, 85, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 128, 129, 130, 131, 139, 144, 149, 150, 163, 164, 166, 173, 174, 175, 178, 186, 220, 333, 334, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 470], "k": [14, 17, 21, 81, 108, 110, 113, 138, 139, 144, 150, 163, 164, 173, 174, 366, 385, 437, 440, 442, 443, 444, 446, 447, 449, 450, 470], "\u00f6": [14, 467], "rnyei": 14, "gr": 14, "\u00e1": 14, "sy": [14, 372, 389, 399, 407, 411, 413], "approach": [14, 19, 20, 81, 163, 164, 174, 189, 221, 464, 466, 467], "heterogen": 14, "nucleat": [14, 31, 32], "alloi": [14, 31, 32, 163, 164, 470], "014204": 14, "physrevb": 14, "p": [14, 16, 17, 67, 108, 113, 114, 119, 163, 164, 167, 171, 172, 173, 174, 178, 334, 366, 376, 385, 463, 466, 469, 470], "moffat": [14, 470], "kim": [14, 470], "josel": [14, 470], "curvatur": [14, 138, 139, 470], "enhanc": [14, 463, 470], "adsorb": [14, 139, 470], "coverag": [14, 137, 138, 139, 144, 149, 150, 470], "bottom": [14, 82, 83, 119, 171, 172, 175, 186, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "damascen": 14, "electrochimica": 14, "acta": [14, 470], "53": 14, "2007": [14, 20, 464], "1016": [14, 470], "electacta": 14, "03": [14, 20, 72, 78, 440, 449, 450, 464, 470], "025": [14, 94, 95, 114, 115, 161, 171, 172, 174], "campbel": 14, "mcfadden": [14, 108, 470], "kirkendal": [14, 470], "displac": [14, 174, 217, 221, 227, 229, 232, 238, 246, 385], "dimension": [14, 19, 81, 82, 99, 111, 167, 174, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 311, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 470], "proceed": [14, 380], "royal": 14, "societi": [14, 470], "mathemat": [14, 17, 435, 463, 466, 470], "2088": 14, "3347": 14, "3373": 14, "1098": 14, "rspa": 14, "1904": 14, "cickovski": 14, "ara": 14, "swat": 14, "merk": 14, "glimm": 14, "hentschel": 14, "alber": 14, "glazier": 14, "newman": 14, "izaguirr": 14, "gene": 14, "organ": 14, "multicellular": 14, "60": [14, 113, 114, 115, 139, 174, 376, 385], "saylor": [14, 470], "theori": [14, 47], "letter": [14, 470], "035703": 14, "physrevlett": [14, 470], "mazur": 14, "soil": 14, "solar": [14, 470], "radiat": 14, "de": 14, "physiqu": 14, "iv": 14, "franc": 14, "320": 14, "2006": [14, 20, 464, 470], "1051": 14, "jp4": 14, "2006137061": 14, "electrodeposit": [14, 15, 144, 173, 189, 470], "c127": [14, 470], "c132": [14, 470], "1149": [14, 470], "2165580": [14, 470], "gold": [14, 20, 470], "submicromet": [14, 470], "trench": [14, 20, 136, 137, 138, 139, 144, 470], "c11": [14, 470], "c18": [14, 470], "2128765": [14, 470], "were": [14, 17, 21, 372, 389], "honor": 14, "invit": 14, "deliv": 14, "keynot": 14, "confer": 14, "caltech": 14, "august": 14, "talk": 14, "georg": 14, "mason": 14, "depart": 14, "octob": 14, "devic": 14, "radiolog": 14, "health": 14, "food": 14, "drug": [14, 15, 189, 470], "ge": [14, 126, 342], "siam": 14, "tm": [14, 39, 40, 174], "annual": [14, 470], "meet": [14, 138], "februari": 14, "educ": 14, "luncheon": 14, "roundtabl": 14, "transform": [14, 15, 108, 163, 164, 173, 174, 189, 466], "microstructologi": 14, "iii": [14, 221, 470], "birmingham": 14, "al": [14, 166, 167, 171, 172, 178], "2004": [14, 20, 113, 464, 470], "mr": 14, "fall": [14, 119], "novemb": 14, "arbitrari": [15, 17, 19, 110, 111, 112, 187, 189, 268, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 467], "ellipt": [15, 189], "hyperbol": [15, 174, 189, 376, 385], "parabol": [15, 189], "dendrit": [15, 19, 21, 161, 162, 171, 172, 189, 470], "elut": [15, 189, 470], "stent": [15, 189], "photovolta": [15, 189], "redistribut": 15, "bear": 15, "welcom": [15, 21], "collabor": [15, 19], "project": [15, 18, 72, 73, 376, 395, 463], "driven": 15, "editor": 15, "tcsh": 15, "bash": 15, "throughout": [15, 138, 162], "keyboard": 15, "denot": [15, 108, 119, 166, 178, 466], "12": [15, 17, 20, 21, 47, 81, 113, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 385, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 435, 464, 470], "twelv": 15, "primari": [15, 21], "secondari": 15, "remain": [15, 17, 34, 81, 113, 115, 119, 157, 162, 163, 164, 173, 187, 188, 389, 469], "margin": [15, 17], "sensit": 15, "indent": 15, "posix": 15, "seriou": [15, 16, 32, 123, 124], "less": [16, 81, 163, 164, 342, 356, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 466], "popular": [16, 468], "viabl": 16, "defaultsolv": [16, 20, 33, 34, 36, 251], "lineargmressolv": [16, 20, 63], "fipy_solv": [16, 17], "linearlusolv": [16, 20, 31, 36, 63, 111, 113, 164, 186, 356], "regardless": [16, 161, 171, 172, 220], "mc": [16, 163, 164, 463], "anl": [16, 463], "toolkit": [16, 463], "structur": [16, 18, 20, 81, 463, 464, 466, 470], "routin": [16, 174, 189, 463], "scalabl": [16, 463], "precodition": 16, "pctype": 16, "precon": [16, 33, 34, 85, 110, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 287, 288, 290, 291, 293, 295, 296, 299, 300, 301, 302, 303, 306, 313, 314, 315, 316, 317, 329, 331, 332], "declar": [16, 33, 34, 81, 119, 163, 164, 413, 473], "storag": [16, 161, 171, 172, 221, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 463, 466], "precondition": [16, 17, 20, 86, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 287, 288, 290, 291, 296, 299, 300, 301, 302, 303, 306, 313, 314, 315, 317, 329, 330, 331, 332, 463], "factor": [16, 17, 32, 119, 163, 216, 217, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 246, 280, 290, 302, 385, 446, 466], "krylov": [16, 263], "conjunct": [16, 17, 21, 195], "readthedoc": [16, 463], "nvidia": [16, 463], "amgx": [16, 274, 275, 276, 277, 278, 279, 282, 283, 463], "sandia": [16, 330, 463], "difficult": [16, 18, 81, 187, 189, 463], "alongsid": 16, "compil": [16, 17, 21, 463], "suppress": [16, 389], "commonli": [16, 187], "encount": [16, 390], "gen_prolong": 16, "eigen": 16, "aztec": [16, 327, 330], "az_loss": 16, "precis": [16, 376, 385, 389], "difficulti": 16, "usual": [16, 21, 174, 178, 186, 230, 232, 233, 246, 250, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 389], "az_ill_cond": 16, "gmre": [16, 260, 267, 279, 288, 301, 315], "hessenberg": 16, "ill": 16, "accur": [16, 31, 33, 34, 81, 86, 123, 174, 342], "az_breakdown": 16, "breakdown": 16, "reach": [16, 17, 21, 77, 78, 80, 139, 163, 164, 174], "restrict": [16, 17, 192, 385, 466], "sens": 17, "strongli": [17, 186], "proce": [17, 32, 72, 73, 81, 82, 83, 163, 164, 174, 178], "assumpt": [17, 139, 163, 164], "seri": 17, "familiar": 17, "yourself": [17, 473, 474], "excel": 17, "dive": [17, 470], "Into": [17, 470], "deeper": [17, 406], "insight": 17, "getlogg": 17, "consol": 17, "streamhandl": 17, "setlevel": 17, "info": 17, "addhandl": 17, "verbos": [17, 372, 374, 375], "save": [17, 20, 138, 141, 142, 166, 386, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 463, 464], "logfil": 17, "filehandl": 17, "filter": [17, 187, 306], "addfilt": 17, "fipy_log_config": 17, "mpilog": 17, "mpiscatteredfilehandl": 17, "filepattern": 17, "mpirank": 17, "d_of_": 17, "mpisiz": 17, "uniqu": [17, 21], "egg_info": 17, "investig": [17, 96], "tracker": 17, "dashboard": 17, "core": [17, 21], "behavior": [17, 20, 21, 139, 188, 389, 464, 473, 474], "insensit": 17, "myfipyscript": 17, "someflag": 17, "lazili": [17, 435], "recalcul": [17, 130, 178, 179, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 435], "skfmm": 17, "compos": [17, 21, 163, 164, 473], "fipy_inlin": 17, "fipy_inline_com": 17, "context": [17, 206, 221, 225, 251, 306, 337, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436], "json": [17, 463], "config": [17, 374], "dictconfig": 17, "fipy_verbose_solv": 17, "lineargeneralsolv": [17, 20], "fipy_include_numerix_al": [17, 188], "fipy_cach": 17, "petsc_opt": 17, "tri2d": [17, 20, 78, 91, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 247, 248, 249, 250, 437, 444, 446, 447, 449, 450], "skewedgrid2d": [17, 20, 93, 96], "advis": 17, "myscript": [17, 138, 306], "slurm": 17, "task": [17, 21], "manufactur": 17, "hire": 17, "bigger": 17, "versu": 17, "style": [17, 446], "observ": [17, 162], "exhibit": [17, 108, 413, 467], "law": [17, 21, 163, 164, 178, 361, 469], "slab": 17, "compact": 17, "carri": 17, "fairli": [17, 161, 166, 167, 171, 172], "lag": 17, "wors": 17, "discrep": 17, "obviou": [17, 163, 174], "endeavor": 17, "20": [17, 20, 21, 31, 32, 47, 71, 82, 83, 94, 95, 104, 112, 113, 144, 161, 162, 164, 171, 172, 175, 178, 179, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 385, 406, 435, 464, 467, 470], "modest": 17, "caveat": 17, "architectur": [17, 463], "easiest": 17, "confirm": [17, 81, 113, 115, 166, 173, 251], "half": [17, 166, 188], "look": [17, 20, 81, 163, 164, 464], "69815": 17, "freed": 17, "69814": 17, "69813": 17, "essenti": [17, 49, 50, 51, 59, 60, 81, 138, 163, 164, 186, 376, 385, 389, 466, 468], "sub": [17, 246, 466, 471, 472, 475], "somewhat": [17, 21, 31, 33, 34, 342, 356], "xterm": 17, "ipdb": 17, "spawn": 17, "intent": 17, "node": [17, 221, 376, 395], "cluster": 17, "child": [17, 376, 395], "compet": [17, 31, 32, 163, 164], "ghost": [17, 221], "exchang": [17, 138, 139, 144], "lock": 17, "gil": 17, "bind": [17, 453, 463, 473], "parent": 17, "suffer": 17, "launch": [17, 81], "minut": [17, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "unrestrict": [17, 21], "degrad": 17, "conceiv": 17, "unfett": 17, "slot": 17, "msg03393": 17, "notfun": 17, "polygon": 17, "wrapper": [17, 221, 254, 255, 280, 287, 288, 290, 291, 293, 295, 302, 310, 311, 378, 386, 390, 463], "gmsh3d": [17, 20, 188, 221], "geometri": [17, 21, 72, 73, 137, 138, 139, 144, 157, 186, 194, 205, 221, 231, 247, 248, 402, 406, 410, 420, 426, 427, 429], "geo": [17, 221], "msh": [17, 71, 221], "occur": [17, 34, 166, 174, 178, 186, 376, 385, 406], "whenev": [17, 306, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "compromis": [17, 81], "highli": [17, 21, 324], "orthogon": [17, 21, 93, 95, 96, 246, 466], "tighter": 17, "tempor": 17, "eqn0": [17, 74], "eqn1": [17, 74], "coupledeqn": [17, 178, 179], "quadrant": [17, 175], "act": [17, 21], "term00": 17, "term01": 17, "source0": 17, "term10": 17, "term11": 17, "source1": 17, "ttfamili": 17, "hline": [17, 139, 144], "decis": 17, "regard": 17, "column": [17, 72, 73], "upper": [17, 436, 440], "revers": [17, 52, 57, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "decompos": [17, 31, 33, 34, 74], "2nd": [17, 32, 335, 348, 470], "pair": [17, 74, 108, 389], "4th": [17, 86, 348], "phi": [17, 20, 21, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 68, 71, 72, 73, 75, 77, 78, 81, 82, 83, 85, 108, 112, 113, 114, 115, 116, 123, 124, 126, 128, 129, 130, 131, 138, 149, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 186, 187, 194, 195, 342, 346, 348, 351, 353, 354, 356, 357, 359, 361, 362, 363, 366, 368, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 464, 467, 468], "kappa_c": [17, 163, 164], "kappa_": [17, 108, 114, 163, 164, 173, 174], "mu": [17, 119, 166, 167, 171, 172, 173, 178, 179, 385, 407, 413], "hat": [17, 51, 81, 138, 193, 195, 410, 429, 430, 466], "qquad": [17, 36, 67, 108, 114, 131, 163, 164, 173, 342], "facestop": [17, 20, 52, 57, 82, 83, 119, 138, 179, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "fixedvalu": [17, 20, 186, 187, 188, 195], "facenorm": [17, 231, 232, 233], "exterior": [17, 68, 72, 73, 81, 156, 221], "firstli": [17, 72, 73, 123, 124, 128, 130, 156, 178, 406], "diffcoeff": [17, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 107, 186, 187], "convcoeff": [17, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 186, 187], "extra": [17, 372], "eqn": [17, 39, 40, 71, 74, 78], "diffusioncoeff": [17, 36, 39, 40, 67, 77, 138, 166, 167, 186], "exteriorflux": 17, "fixedflux": [17, 20, 186, 188, 195], "unless": [17, 19, 31, 32, 33, 34, 220, 376, 391], "xy": [17, 230, 250, 342], "quad": [17, 85, 174], "elsewher": 17, "repres": [17, 20, 21, 31, 32, 49, 50, 59, 60, 68, 74, 77, 81, 110, 112, 113, 114, 115, 130, 138, 139, 150, 161, 162, 171, 172, 174, 186, 194, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 346, 348, 359, 366, 385, 399, 402, 407, 411, 413, 434, 440, 444, 464, 466, 467], "portion": [17, 21], "s_r": 17, "int_v": [17, 346, 351, 353, 354, 357, 359, 361, 366, 368, 466], "dv": [17, 163, 164, 178, 346, 351, 353, 354, 357, 359, 361, 366, 368, 466], "int_": [17, 163, 164, 466], "notin": 17, "setvalu": [17, 20, 21, 31, 33, 34, 67, 72, 73, 75, 81, 85, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 138, 141, 142, 150, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 440, 442, 443, 444, 446, 447, 449, 450], "powerlawconvectionterm": [17, 20, 49, 50, 51, 59, 60, 63, 65, 66, 67, 68, 110, 111, 112, 113, 115, 163, 172, 173, 186, 187, 342, 345, 346, 353, 354, 355, 356, 357, 359, 362, 363, 366, 368, 369, 466], "onto": [17, 31, 33, 34, 187], "natur": [17, 74, 139, 187, 376, 385, 466], "interven": [17, 81], "neighbor": [17, 342, 406, 466, 469], "phi_f": [17, 346, 353, 354, 357, 361, 368, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 466], "approx": [17, 163, 164, 174, 410, 429, 430], "phi_p": [17, 342, 346, 351, 353, 354, 356, 357, 359, 361, 366, 368, 466, 469], "pf": [17, 113], "_f": [17, 119, 178, 346, 353, 354, 357, 361, 368, 410, 429, 430, 466], "adjoin": 17, "g_f": 17, "b_f": 17, "turn": [17, 186], "gamma": [17, 71, 144, 166, 167, 171, 172, 187, 351, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 466, 467], "sum_f": [17, 119, 351, 399, 402, 406, 407, 410, 411, 413, 415, 426, 427, 429, 430, 431, 434, 466], "gamma_f": [17, 351, 466], "a_f": [17, 119, 178, 179, 346, 351, 353, 354, 357, 361, 368, 399, 402, 406, 407, 410, 411, 413, 415, 426, 427, 429, 430, 431, 434, 466], "sum_": [17, 75, 108, 110, 114, 116, 139, 173, 346, 353, 354, 357, 361, 368, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 466], "modif": 17, "dpf": 17, "celldistancevector": 17, "robincoeff": 17, "similarli": [17, 139], "heat": [17, 81, 161, 163, 164, 171, 172, 174, 470], "t_": 17, "posit": [17, 72, 73, 81, 126, 130, 138, 150, 151, 187, 291, 325, 415, 440, 441, 442, 469], "largevalu": 17, "paramet": [17, 20, 21, 31, 32, 39, 40, 72, 73, 78, 80, 81, 113, 115, 119, 123, 124, 128, 130, 137, 138, 139, 141, 142, 144, 162, 163, 164, 166, 167, 174, 178, 186, 191, 193, 194, 195, 217, 220, 221, 227, 229, 232, 238, 246, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 282, 283, 287, 288, 289, 290, 291, 296, 299, 300, 301, 302, 303, 306, 313, 314, 315, 316, 317, 329, 330, 331, 332, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 374, 376, 381, 385, 386, 389, 390, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 467, 469, 473, 474], "domin": 17, "rh": [17, 36, 119, 194, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "typic": [17, 119, 163, 164, 348], "boolean": [17, 174, 376, 385], "noth": [17, 110, 111, 112, 157, 372], "believ": [17, 186], "intuit": 17, "pathologi": 17, "attent": [17, 221], "implicitli": [17, 91, 174, 178], "nx": [17, 31, 32, 33, 36, 39, 40, 47, 51, 52, 54, 56, 57, 61, 62, 63, 65, 66, 67, 68, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 94, 97, 99, 100, 104, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 138, 141, 142, 156, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 386, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 440, 442, 443, 444, 446, 447, 449, 450, 456], "rvert_": [17, 81, 174], "facesright": [17, 20, 36, 49, 50, 51, 54, 56, 59, 60, 61, 62, 63, 65, 66, 67, 68, 74, 78, 81, 82, 83, 85, 94, 95, 113, 119, 179, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "1e": [17, 33, 34, 36, 39, 40, 47, 49, 50, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 74, 80, 81, 82, 83, 85, 90, 91, 97, 99, 100, 107, 110, 111, 112, 113, 114, 115, 126, 129, 138, 149, 150, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 187, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 289, 290, 299, 300, 301, 302, 303, 306, 313, 314, 315, 316, 317, 329, 330, 331, 342, 356, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "unexpect": [17, 372], "everywher": [17, 112, 114, 138, 166, 167, 174], "januari": [17, 113], "2020": [17, 20, 464], "pledg": 17, "later": [17, 19, 112, 166, 402], "priorit": 17, "awar": 17, "rapidli": [17, 21], "impract": 17, "hopefulli": 17, "latexpdf": 17, "plu": [17, 81, 466], "v7": 17, "bibliograph": 17, "numpydoc": 17, "embed": [17, 19, 21, 157], "imagemagick": 17, "siunit": 17, "sty": 17, "texliv": 17, "pyspel": 17, "hunspel": 17, "libreoffic": 17, "wget": 17, "aff": 17, "cgit": 17, "freedesktop": 17, "en": [17, 463], "a4473e06b56bfe35187e302754f6baaa8d75e54f": 17, "dic": 17, "far": [18, 81, 113, 115, 138, 139, 144, 173, 406], "vkml": 19, "aspect": [19, 119, 139, 144, 167, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 438, 439, 441, 442, 443, 444, 446, 447], "semin": 19, "michael": 19, "water": 19, "prof": 19, "edwin": 19, "garcia": 19, "purdu": 19, "coarsen": 19, "random": [19, 31, 32, 33, 34, 93, 161, 171, 172, 178, 179, 238, 399, 407, 411, 413, 427, 434], "crystallograph": 19, "nuclei": [19, 171, 172], "radiu": [19, 34, 72, 73, 123, 150, 157, 161, 162, 171, 172, 221], "size": [19, 20, 32, 78, 80, 100, 113, 138, 139, 144, 178, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 391, 415, 446, 466], "homogen": [19, 31, 32], "dispers": 19, "wall": [19, 119], "seed": [19, 161, 162, 171, 172, 178, 179, 399, 407, 411, 413, 427], "fold": 19, "undercool": [19, 161, 171, 172, 174], "liquid": [19, 113, 115, 161, 162, 163, 164, 166, 171, 172, 173, 178], "strength": [19, 466, 469], "tension": 19, "segreg": [19, 31, 32, 75, 113, 115, 116, 173], "chemic": [19, 108, 163, 164, 173, 178, 467, 470], "john": [19, 470], "browser": 19, "assess": 19, "potenti": [19, 75, 108, 112, 113, 114, 115, 116, 163, 164, 173, 178, 179, 467], "word": [19, 91, 137, 138, 139, 144, 174], "michigan": 19, "boston": 19, "japan": 19, "england": 19, "wherev": 19, "cowork": 19, "planet": 19, "him": 19, "temporari": [19, 376, 386, 391, 393], "travel": 19, "privat": [19, 372], "publicli": 19, "peopl": 19, "world": 19, "regist": 19, "registr": 19, "nanohub": 19, "overview": [20, 21, 372, 464, 465], "client": [20, 464], "submit": [20, 464], "feedstock": [20, 464], "announc": [20, 464], "openmp": [20, 463, 464], "v": [20, 34, 74, 119, 137, 138, 139, 141, 144, 149, 163, 164, 173, 174, 178, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 440, 456, 464, 470], "dirichlet": [20, 82, 83, 194, 464], "outlet": [20, 464], "inlet": [20, 464], "partial_i": [20, 71, 178, 464], "gamma_": [20, 71, 464], "ij": [20, 71, 464], "partial_j": [20, 71, 178, 464], "imag": [20, 137, 139, 141, 142, 144, 171, 172, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462, 464], "screen": [20, 137, 139, 144, 389], "movi": [20, 464], "oh": [20, 187, 464], "anymor": [20, 464], "here": [20, 21, 39, 40, 52, 57, 81, 91, 119, 129, 131, 137, 139, 162, 166, 167, 187, 188, 221, 342, 356, 389, 406, 464, 469], "fvm": [20, 21, 464, 468], "cc": [20, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 128, 129, 131, 186, 464, 468], "vc": [20, 464, 468], "scheme": [20, 45, 46, 49, 50, 51, 59, 60, 81, 123, 124, 171, 172, 174, 178, 346, 353, 354, 357, 361, 368, 406, 464, 466, 468], "2022": [20, 464], "06": [20, 385, 464], "08": [20, 71, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 464], "01": [20, 31, 32, 33, 34, 74, 75, 78, 110, 113, 114, 115, 116, 126, 166, 167, 171, 172, 173, 178, 179, 221, 334, 376, 385, 399, 434, 437, 442, 443, 446, 447, 449, 450, 464], "02": [20, 80, 150, 161, 162, 166, 167, 171, 172, 221, 464, 470], "14": [20, 178, 179, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 456, 464, 466, 468, 470], "2019": [20, 464], "28": [20, 39, 139, 163, 164, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 385, 464, 470], "22": [20, 108, 173, 464, 470], "2016": [20, 464], "24": [20, 81, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 385, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 464, 470], "2015": [20, 464], "2013": [20, 464], "09": [20, 385, 464, 470], "2012": [20, 179, 464], "16": [20, 178, 179, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 335, 464, 468, 470], "2011": [20, 178, 464, 470], "05": [20, 72, 73, 113, 161, 171, 172, 178, 179, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 456, 464], "2008": [20, 464], "glossari": [20, 464, 465], "subpackag": [20, 471, 475], "method1": [20, 473, 474], "method2": [20, 473, 474], "doctest_raw_input": [20, 189], "boundarycondit": [20, 21, 36, 85, 86, 186, 187, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 410, 420, 430, 435], "nthorderboundarycondit": [20, 36, 85], "offsetsparsematrix": 20, "petscmatrix": 20, "pysparsematrix": 20, "scipymatrix": 20, "sparsematrix": [20, 198, 342, 356], "trilinosmatrix": 20, "abstractmesh": [20, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "vtkcelldataset": [20, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "vtkfacedataset": [20, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "__div__": [20, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 385], "__getstate__": [20, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 254, 255, 256, 310, 311, 312, 378, 379, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__radd__": [20, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 385], "__sub__": [20, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 385], "__truediv__": [20, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 385], "aspect2d": [20, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "cellfaceid": [20, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "facesback": [20, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "facesbottom": [20, 52, 57, 82, 83, 119, 179, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "facesdown": [20, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "facesfront": [20, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "facesleft": [20, 36, 49, 50, 51, 54, 56, 59, 60, 61, 62, 63, 65, 66, 67, 68, 74, 75, 77, 78, 81, 82, 83, 85, 94, 95, 113, 116, 119, 156, 179, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "facesup": [20, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "meshadditionerror": [20, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "__cause__": [20, 206, 221, 225, 251, 306, 337, 436], "__context__": [20, 206, 221, 225, 251, 306, 337, 436], "__delattr__": [20, 206, 221, 225, 251, 306, 337, 436], "__getattribute__": [20, 206, 221, 225, 251, 306, 337, 436], "__reduce__": [20, 206, 221, 225, 251, 306, 337, 436], "__setattr__": [20, 206, 221, 225, 251, 306, 337, 436], "__str__": [20, 206, 221, 225, 251, 306, 337, 376, 385, 395, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436], "add_not": [20, 206, 221, 225, 251, 306, 337, 436], "with_traceback": [20, 206, 221, 225, 251, 306, 337, 436], "builder": [20, 228], "abstractgridbuild": 20, "grid1dbuild": [20, 228], "grid2dbuild": 20, "grid3dbuild": 20, "periodicgrid1dbuild": 20, "utilityclass": 20, "cylindricalgrid2d": [20, 59, 60, 220], "cylindricalnonuniformgrid1d": [20, 220], "__mul__": [20, 216, 217, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 246, 342, 345, 346, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369, 376, 385], "__rmul__": [20, 216, 217, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 246, 342, 345, 346, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369, 376, 385], "extrud": [20, 34, 157, 217, 221, 227, 229, 232, 238, 246], "cylindricaluniformgrid1d": [20, 220], "cylindricaluniformgrid2d": [20, 220], "sphericalgrid1d": [20, 220], "gmsh2din3dspac": [20, 34, 157, 188, 221], "gmshexcept": [20, 221], "gmshfile": [20, 221], "gmshgrid2d": [20, 221], "gmshgrid3d": [20, 104, 221], "mshfile": [20, 221], "makemapvari": [20, 221], "meshexporterror": [20, 221], "posfil": [20, 221], "gmshversion": [20, 221], "openmshfil": [20, 221], "openposfil": [20, 221], "nonuniformgrid2d": [20, 217, 220, 221, 227, 232, 238, 246], "nonuniformgrid3d": [20, 220], "periodicgrid1d": [20, 90], "periodicgrid2d": 20, "periodicgrid2dleftright": [20, 232], "periodicgrid2dtopbottom": [20, 232], "periodicgrid3dfrontback": [20, 233], "periodicgrid3dleftright": [20, 233], "periodicgrid3dleftrightfrontback": [20, 233], "periodicgrid3dleftrighttopbottom": [20, 233], "periodicgrid3dtopbottom": [20, 233], "periodicgrid3dtopbottomfrontback": [20, 233], "abstractrepresent": [20, 206, 247], "gridrepresent": [20, 228, 229, 230, 246, 248, 249, 250], "meshrepresent": [20, 225, 226, 227], "physicalshap": [20, 238, 246], "sphericalnonuniformgrid1d": [20, 220], "sphericaluniformgrid1d": [20, 220], "topologi": [20, 205, 206, 225, 226, 227, 228, 229, 230, 246, 247, 248, 249, 250, 466, 470], "abstracttopologi": [20, 206, 247], "gridtopologi": [20, 228, 229, 230, 248, 249, 250], "meshtopologi": [20, 225, 226, 227, 246], "uniformgrid1d": [20, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 249, 250, 346, 353, 354, 357, 361, 368, 369], "uniformgrid2d": [20, 219, 220, 346, 353, 354, 357, 361, 368, 369], "defaultasymmetricsolv": [20, 47, 52, 54, 56, 57, 61, 66, 110, 163, 173, 251], "dummysolv": [20, 174, 251, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "generalsolv": [20, 85, 138, 166, 167, 251], "serialsolvererror": [20, 251], "comm": 20, "parallelpetsccommwrapp": 20, "petsccommwrapp": [20, 254, 256], "serialpetsccommwrapp": 20, "linearbicgsolv": 20, "linearcgssolv": [20, 63], "petsckrylovsolv": [20, 258, 259, 260, 262], "petscsolv": [20, 257, 261, 263], "smoothedaggregationprecondition": [20, 266, 267, 270], "aggregationamgsolv": 20, "classicalamgsolv": 20, "linearcgsolv": 20, "linearfgmressolv": 20, "__call__": [20, 282, 285, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "pyamgxsolv": [20, 274, 275, 276, 277, 278, 279], "smoother": [20, 274, 275, 283, 327, 330], "jacobiprecondition": [20, 288, 313, 329], "ssorprecondition": [20, 291], "pysparsematrixsolv": 20, "scipykrylovsolv": 20, "scipysolv": 20, "illconditionedpreconditionerwarn": [20, 306], "matrixillconditionedwarn": [20, 306], "maximumiterationwarn": [20, 306], "preconditionernotpositivedefinitewarn": [20, 306], "preconditionerwarn": [20, 306], "scalarquantityoutofrangewarn": [20, 306], "solverconvergencewarn": [20, 306], "stagnatedsolverwarn": [20, 306], "epetracommwrapp": [20, 311, 312], "parallelepetracommwrapp": 20, "maxal": [20, 311], "minal": [20, 311], "serialepetracommwrapp": 20, "domdecompprecondition": 20, "icprecondition": 20, "multilevelddmlprecondition": 20, "multilevelddprecondition": [20, 314, 315, 317], "multilevelnssaprecondition": 20, "multilevelsaprecondition": 20, "multilevelsgsprecondition": [20, 314, 317], "multilevelsolversmootherprecondition": 20, "trilinosaztecoosolv": [20, 313, 314, 315, 317], "trilinosmltest": 20, "trilinosnonlinearsolv": 20, "trilinossolv": [20, 316, 329, 330, 331], "stepper": 20, "l1error": [20, 333], "l2error": [20, 333], "linferror": [20, 333], "sweepmonoton": [20, 333], "pidstepp": 20, "pseudorkqsstepp": 20, "abstractbaseclasserror": [20, 337], "explicitvariableerror": [20, 337], "incorrectsolutionvari": [20, 337], "solutionvariablenumbererror": [20, 337], "solutionvariablerequirederror": [20, 337], "termmultiplyerror": [20, 337], "transienttermerror": [20, 337, 346, 353, 354, 357, 361, 368, 369], "vectorcoefferror": [20, 337, 346, 353, 354, 357, 361, 368, 369], "abstractbinaryterm": 20, "abstractconvectionterm": 20, "abstractdiffusionterm": 20, "abstractupwindconvectionterm": 20, "advectionterm": [20, 123, 124, 126, 128, 130, 138], "rhsvector": [20, 119, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "__eq__": [20, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__hash__": [20, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__neg__": [20, 342, 345, 346, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369, 376, 385], "cachematrix": [20, 119, 178, 179, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "cacherhsvector": [20, 119, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "justresidualvector": [20, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "residualvectorandnorm": [20, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "asymmetricconvectionterm": 20, "binaryterm": 20, "centraldiffconvectionterm": 20, "centraldifferenceconvectionterm": [20, 178, 179, 346, 466], "coupledbinaryterm": 20, "diffusiontermcorrect": [20, 71], "explicitdiffusionterm": [20, 77, 78, 81, 162, 166, 167, 466], "explicitsourceterm": 20, "explicitupwindconvectionterm": [20, 346, 354, 357, 361, 368, 369, 466], "exponentialconvectionterm": [20, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 186, 466], "faceterm": 20, "firstorderadvectionterm": [20, 123, 124, 126, 128, 130, 342], "hybridconvectionterm": [20, 466], "nondiffusionterm": 20, "residualterm": 20, "sourceterm": [20, 359, 362], "unaryterm": 20, "upwindconvectionterm": [20, 466], "testfipi": 20, "doctestplu": 20, "execbutnotest": [20, 372], "report_skip": [20, 372], "testmod": [20, 372], "lateimporttest": 20, "deprecationerroringtestprogram": [20, 374], "finalize_opt": [20, 374], "initialize_opt": [20, 374], "testprogram": [20, 374], "serialcomm": [20, 71, 124, 126, 128, 130, 138, 220, 221, 376, 406], "parallelcomm": [20, 220, 221, 376, 391], "__abs__": [20, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__array_wrap__": [20, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__bool__": [20, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__float__": [20, 376, 385], "__ge__": [20, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__getitem__": [20, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__gt__": [20, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__le__": [20, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__lt__": [20, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__mod__": [20, 376, 385], "__ne__": [20, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__nonzero__": [20, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__pow__": [20, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__setitem__": [20, 376, 385], "allclos": [20, 32, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 103, 104, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 129, 130, 131, 138, 149, 150, 151, 156, 162, 163, 164, 166, 167, 173, 174, 175, 178, 186, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 356, 366, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "allequ": [20, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "arcco": [20, 376, 385], "arccosh": [20, 376, 385], "arcsin": [20, 72, 73, 376, 385], "arctan": [20, 161, 162, 171, 172, 376, 385], "arctan2": [20, 161, 162, 171, 172, 376, 385], "arctanh": [20, 376, 385], "ceil": [20, 376, 385], "conjug": [20, 82, 83, 259, 287, 291, 376, 385, 466], "converttounit": [20, 376, 385], "co": [20, 39, 71, 72, 73, 141, 376, 385, 437, 440, 449, 450], "cosh": [20, 113, 376, 385], "floor": [20, 376, 385], "getsctyp": [20, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "inbaseunit": [20, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "indimensionless": [20, 376, 385], "inradian": [20, 376, 385], "insiunit": [20, 376, 385], "inunitsof": [20, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "itemset": [20, 376, 385], "log10": [20, 376, 385], "numericvalu": [20, 376, 385], "sin": [20, 71, 81, 141, 187, 376, 385, 437, 440, 442, 443, 444, 446, 447, 449, 450, 466], "sinh": [20, 376, 385], "sqrt": [20, 36, 40, 67, 71, 72, 73, 77, 78, 81, 114, 123, 126, 128, 129, 131, 138, 149, 150, 156, 157, 166, 174, 221, 342, 356, 366, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "sum": [20, 71, 149, 150, 151, 220, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "tan": [20, 161, 162, 171, 172, 376, 385, 389], "tanh": [20, 114, 174, 376, 385], "tostr": [20, 376, 385, 389], "vital": [20, 376], "appendinfo": [20, 376, 395], "documentel": [20, 376, 395], "firstchild": [20, 376, 395], "lastchild": [20, 376, 395], "localnam": [20, 376, 395], "commwrapp": [20, 220, 221, 255, 310, 376, 379, 386, 391], "dummycomm": [20, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 232, 233, 239, 240, 248, 249, 250, 376, 386, 391], "decor": 20, "dictwithdefault": 20, "numberdict": 20, "physicalunit": [20, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__rdiv__": [20, 385], "__rtruediv__": [20, 385], "conversionfactorto": [20, 385], "conversiontupleto": [20, 385], "isangl": [20, 385], "iscompat": [20, 385], "isdimensionless": [20, 385], "isdimensionlessorangl": [20, 385], "isinverseangl": [20, 385], "setnam": [20, 385], "package_info": [20, 388], "l1norm": [20, 333, 389], "l2norm": [20, 389], "linfnorm": [20, 389], "getshap": [20, 389], "getunit": [20, 389], "isclos": [20, 389], "nearest": [20, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "sqrtdot": [20, 389], "parser": [20, 138, 156, 166], "pars": [20, 138, 156, 166, 221, 390, 451], "sharedtempfil": 20, "prune": [20, 393], "putadd": [20, 393], "arithmeticcelltofacevari": 20, "betanoisevari": 20, "__and__": [20, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__new__": [20, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__or__": [20, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__setstate__": [20, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "cellvolumeaverag": [20, 39, 40, 71, 163, 164, 178, 179, 221, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "constraintmask": [20, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "gaussgrad": [20, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "harmonicfacevalu": [20, 110, 111, 112, 113, 115, 163, 164, 173, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "leastsquaresgrad": [20, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "minmodfacevalu": [20, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "rdot": [20, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "scrambl": [20, 399, 407, 411, 413, 427, 434], "std": [20, 221, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "binaryoperatorvari": [20, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "celltofacevari": 20, "constant": [20, 31, 32, 50, 56, 57, 60, 68, 81, 112, 138, 139, 144, 163, 164, 173, 187, 219, 249, 372, 385, 389, 466], "coupledcellvari": 20, "calcdistancefunct": [20, 124, 126, 128, 129, 130, 131, 138, 141, 142, 151, 406], "cellinterfacearea": [20, 149, 406], "extendvari": [20, 138, 150, 406], "exponentialnoisevari": 20, "facegradcontributionsvari": 20, "facegradvari": [20, 119], "gammanoisevari": 20, "gausscellgradvari": 20, "gaussiannoisevari": [20, 31, 32, 33, 34], "harmoniccelltofacevari": 20, "histogramvari": [20, 399, 407, 411, 413, 434], "interfaceareavari": 20, "interfaceflagvari": 20, "leastsquarescellgradvari": 20, "levelsetdiffusionvari": 20, "meshvari": [20, 187, 221, 389, 399, 402, 406, 407, 410, 411, 413, 415, 426, 427, 429, 430, 431, 434, 438, 446, 447, 456, 458, 460, 461, 462], "minmodcelltofacevari": 20, "modcellgradvari": 20, "modcelltofacevari": 20, "modfacegradvari": 20, "modphysicalfield": 20, "modularvari": [20, 166, 167, 171, 172], "facegradnomod": [20, 166, 167, 171, 172, 426], "operatorvari": 20, "scharfettergummelfacevari": 20, "surfactantconvectionvari": 20, "surfactantvari": [20, 138, 149, 150, 151], "interfacevar": [20, 138, 150, 431], "unaryoperatorvari": [20, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "uniformnoisevari": 20, "dummyview": [20, 436], "plotmesh": [20, 72, 73, 141, 142, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "setlimit": [20, 141, 142, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "meshdimensionerror": [20, 436], "abstractmatplotlib2dview": [20, 441, 442, 443, 444, 446, 447], "cmap": [20, 141, 161, 171, 172, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447], "fig": [20, 141, 171, 172, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447], "abstractmatplotlibview": [20, 141, 438, 440], "matplotlib1dview": 20, "matplotlib2dcontourview": 20, "matplotlib2dgridcontourview": 20, "matplotlibsparsematrixview": 20, "matplotlibstreamview": 20, "kwarg": [20, 216, 217, 218, 219, 231, 232, 233, 238, 239, 240, 257, 264, 274, 275, 276, 277, 278, 279, 282, 283, 285, 287, 288, 291, 296, 332, 333, 376, 381, 395, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 446, 451], "mayaviview": 20, "fp": [20, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 440, 442, 443, 444, 446, 447, 449, 450], "mayavidaemon": [20, 34, 449, 450], "parse_command_lin": [20, 451], "setup_sourc": [20, 451], "update_pipelin": [20, 451], "view_data": [20, 451], "testinteract": 20, "abstractview": [20, 142, 436, 439, 449, 450, 453, 456, 457, 462], "vtkcellview": [20, 458], "vtkfaceview": [20, 458], "tanh1d": 20, "explicitupwind": 20, "implicitupwind": 20, "vanleerupwind": 20, "cylindricalmesh1d": 20, "cylindricalmesh1dnonuniform": 20, "exponential1dback": 20, "exponential2d": 20, "cylindricalmesh2d": 20, "cylindricalmesh2dnonuniform": 20, "peclet": 20, "powerlaw1d": 20, "mesh20x20coupl": 20, "input4thorder_lin": 20, "inputperiod": 20, "tri2dinput": 20, "gmshinput": 20, "isotropi": 20, "modifiedmeshinput": 20, "orthoerror": 20, "mesh50x50": 20, "othermesh": 20, "cubicalproblem": 20, "grid3dinput": 20, "prism": [20, 230, 250], "mesh1ddimension": 20, "phasediffus": 20, "poisson": [20, 75, 108, 113], "interior": [20, 93, 162], "squar": [20, 45, 46, 47, 78, 82, 119, 174, 175, 221, 259, 287, 376, 385, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "adsorbingsurfactantequ": [20, 138], "gapfilldistancevari": 20, "gapfillmesh": 20, "matplotlibsurfactantview": [20, 138], "mayavisurfactantview": [20, 138], "metaliondiffusionequ": [20, 138], "surfactantbulkdiffusionequ": [20, 138], "trenchmesh": 20, "expandingcircl": 20, "gmshrefin": 20, "inputgrid2d": 20, "anisotropyold": 20, "missorient": 20, "riemann": 20, "acoust": 20, "customiz": 21, "poli": 21, "deposit": [21, 138, 139, 144], "unusu": 21, "philosophi": 21, "algorithm": [21, 119, 175, 335, 470], "deform": 21, "tractabl": 21, "li": [21, 470], "encapsul": [21, 144, 206, 254, 255, 310, 311, 378, 466, 473], "tight": 21, "extend": [21, 163, 164, 406, 470], "reus": [21, 166], "overridden": [21, 374], "categori": [21, 246], "lower": [21, 163, 164, 410, 429, 430, 436], "aim": [21, 466], "tier": 21, "batteri": 21, "reassur": 21, "breakag": 21, "aid": 21, "dissemin": 21, "year": [21, 187, 188, 334], "movement": [21, 174], "matter": [21, 31, 32], "furthermor": 21, "broadli": 21, "lump": 21, "human": [21, 376, 385], "readabl": [21, 188, 376, 385, 402, 410, 420, 426, 427, 429, 435], "provok": 21, "happen": [21, 47, 81], "real": [21, 161, 171, 172, 389], "low": [21, 466, 469], "closer": 21, "programm": 21, "awai": [21, 119, 406], "extern": 21, "acol": 21, "brow": 21, "malloc": 21, "sizeof": 21, "bcol": 21, "arow": 21, "worri": [21, 187], "needn": 21, "paramount": 21, "concern": [21, 306], "scenario": 21, "draft": 21, "hundr": 21, "recompil": 21, "relink": 21, "eventu": [21, 137, 144, 162], "imposs": 21, "rememb": [21, 413], "scientist": [21, 189, 463], "begun": 21, "unfortun": [21, 187, 390], "expertis": 21, "spent": 21, "contrast": [21, 31, 32], "tcl": 21, "java": 21, "rubi": 21, "vener": 21, "immedi": [21, 139], "someon": 21, "fledg": 21, "ground": 21, "runtim": 21, "unquestion": 21, "proport": [21, 138, 161, 171, 172, 334], "month": 21, "diagnos": 21, "critic": [21, 31, 32], "palat": 21, "prove": 21, "acknowledg": 21, "remark": [21, 467], "usabl": 21, "mathematician": 21, "scientificpython": [21, 385, 463], "easili": [21, 81, 115, 173, 463], "blitz": 21, "pyrex": [21, 463], "brief": [21, 372], "terminologi": 21, "quantiti": [21, 72, 73, 108, 111, 137, 174, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 467], "relationship": [21, 96, 174], "assign": [21, 81, 374, 376, 385, 474], "lazi": [21, 396], "elimin": [21, 74, 81, 178], "entiti": 21, "beyond": 21, "bound": [21, 187], "vertic": [21, 72, 73, 119, 217, 220, 225, 226, 227, 229, 230, 232, 233, 238, 246, 249, 250, 389, 437, 441, 442, 443, 444, 466], "_sparsematrix": [21, 333, 445], "invert": 21, "fashion": 21, "footnot": [21, 163, 164], "neglect": [21, 163, 164], "byte": 21, "prefix": [22, 81, 376, 385, 391], "ld_library_path": 22, "colon": 22, "search": [22, 187, 436, 437, 458], "elf": 22, "dyld_library_path": 22, "linker": 22, "phenomenon": [31, 32, 34], "spontan": [31, 32, 174], "mixtur": [31, 32, 81], "region": [31, 32, 129, 130, 136, 138, 151, 161, 162, 166, 171, 172, 174, 175, 441, 442], "spin": [31, 32], "barrierless": [31, 32], "fluctuat": [31, 32, 33, 34, 161, 171, 172], "grow": [31, 32, 161, 171, 172], "exce": [31, 32], "surviv": [31, 32], "ginsberg": [31, 32, 161, 171, 172], "landau": [31, 32, 161, 171, 172], "hohenberg": [31, 32, 161, 171, 172], "halperin": [31, 32, 161, 171, 172], "epsilon": [31, 32, 33, 34, 36, 75, 108, 114, 116, 166, 167, 171, 172, 178, 179], "possibli": [31, 32, 376, 378, 395, 436], "composit": [31, 32, 136, 163, 164], "doubl": [31, 32, 108, 173, 174], "energi": [31, 32, 36, 108, 114, 163, 164, 173, 174, 178, 179, 324, 470], "penal": [31, 32], "abrupt": [31, 32], "smooth": [31, 32, 138, 141, 142, 161, 171, 172, 323, 324, 325, 326], "transit": [31, 32, 136, 470], "weight": [31, 32, 163, 164, 166, 193, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 447, 466, 468], "augment": [31, 32, 389], "__name__": [31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 138, 156, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 372, 399, 407, 411, 413, 434], "__main__": [31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 107, 110, 111, 112, 113, 114, 115, 116, 119, 123, 124, 126, 128, 130, 138, 156, 157, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 178, 179, 186, 372, 374, 375, 399, 407, 411, 413, 434], "ny": [31, 32, 33, 40, 52, 57, 61, 62, 78, 80, 82, 83, 94, 100, 104, 112, 119, 123, 126, 128, 138, 141, 142, 156, 161, 162, 166, 171, 172, 175, 179, 186, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 346, 353, 354, 356, 357, 361, 368, 369, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 442, 443, 444, 446, 447, 449, 450, 456], "els": [31, 32, 33, 34, 36, 39, 40, 67, 78, 85, 112, 113, 119, 138, 161, 163, 164, 171, 172, 174, 178, 179, 372, 451], "dy": [31, 32, 33, 40, 52, 57, 78, 80, 82, 83, 104, 112, 119, 123, 126, 128, 129, 131, 138, 141, 142, 156, 161, 162, 166, 171, 172, 175, 179, 187, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 346, 353, 354, 356, 357, 361, 368, 369, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 437, 442, 443, 444, 446, 447, 449, 450, 456], "varianc": [31, 32, 33, 34, 413], "microstructur": [31, 32, 33, 34, 470], "exponenti": [31, 32, 33, 34, 137, 354, 385, 407, 469], "dexp": [31, 32, 33, 34, 36], "durat": [31, 32, 33, 34], "exp": [31, 32, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 138, 139, 163, 164, 166, 167, 171, 172, 186, 187, 188, 407, 411, 413, 469], "elif": 31, "formul": [32, 74, 469], "trivial": [32, 342, 356], "enorm": [32, 81], "amount": [32, 238], "psi": [32, 75, 116, 161, 162, 171, 172, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "nois": [32, 161, 171, 172, 178, 399, 407, 411, 413, 427, 434], "taylor": [32, 174, 470], "expans": [32, 150, 174], "phi_": [32, 174, 342, 366, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 466], "dfdphi": 32, "dfdphi_": 32, "d2fdphi2": 32, "eq1": [32, 47, 74], "eq2": [32, 47], "eq3": 32, "press": [32, 63, 68, 72, 73, 75, 81, 82, 83, 90, 113, 116, 163, 164, 174, 178, 470], "elementshap": [32, 74, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "v0": [32, 74, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "impcoeff": 32, "cube": 33, "nz": [33, 59, 60, 104, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 449, 450, 463], "dz": [33, 59, 60, 104, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 449, 450], "vesicl": 34, "youtub": 34, "watch": 34, "kdsfp67_zse": 34, "cellsiz": [34, 72, 73, 95, 138, 139, 144, 157, 221], "inner": [34, 81, 157, 221], "t1": [34, 157], "pi": [34, 39, 71, 157, 161, 162, 166, 167, 171, 172, 376, 385, 406, 413, 426, 437, 440, 449, 450], "duplicata": [34, 157], "t2": [34, 157], "t3": [34, 157], "t4": [34, 157], "t5": [34, 157], "t6": [34, 157], "t7": [34, 157], "outer": [34, 157, 163, 164, 221], "overlap": [34, 206, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 466], "extrudefunc": [34, 157, 217, 221, 227, 229, 232, 238, 246], "lambda": [34, 157, 217, 221, 227, 229, 232, 238, 246], "daemon_fil": [34, 449, 450], "xmin": [34, 119, 141, 142, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "zmax": [34, 141, 142, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "asq": 36, "facevar": 36, "freeenergydoublederiv": 36, "diffterm2": 36, "diffterm4": 36, "eqch": 36, "solver_suit": [36, 85], "progress": [36, 413], "builtin": [36, 39, 40, 47, 63, 71, 72, 73, 74, 77, 78, 80, 81, 82, 83, 110, 111, 112, 113, 114, 115, 119, 123, 124, 126, 138, 141, 149, 150, 151, 161, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 221, 311, 366, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 442, 443, 444, 446, 447, 449, 450], "maxarg": 36, "argmax": 36, "atol": [36, 39, 40, 47, 49, 50, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 75, 77, 78, 81, 82, 83, 86, 94, 95, 100, 104, 107, 110, 111, 112, 113, 114, 115, 116, 123, 126, 129, 163, 164, 166, 173, 174, 175, 186, 342, 356, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__future__": [39, 40], "param": [39, 40], "kmvar": [39, 40], "km": [39, 40, 376, 385], "kcvar": [39, 40], "kc": [39, 40], "tmvar": [39, 40], "tcvar": [39, 40], "tc": [39, 40], "p3var": [39, 40], "p3": [39, 40], "p2var": [39, 40], "p2": [39, 40], "rvar": [39, 40], "pn": [39, 40], "kmsccoeff": [39, 40], "chik": [39, 40], "kmspcoeff": [39, 40], "lambdak": [39, 40], "kappak": [39, 40], "kmeq": [39, 40], "tmsccoeff": [39, 40], "chit": [39, 40], "tmspcoeff": [39, 40], "lambdat": [39, 40], "zetat": [39, 40], "tmeq": [39, 40], "tcsccoeff": [39, 40], "tcspcoeff": [39, 40], "lambdatstar": [39, 40], "tceq": [39, 40], "pip2pitp": [39, 40], "kappam": [39, 40], "kappac": [39, 40], "zetapitp": [39, 40], "p3spcoeff": [39, 40], "lambda3": [39, 40], "zeta3t": [39, 40], "p3sccoeff": [39, 40], "chi3": [39, 40], "kappa3": [39, 40], "zeta3pitp": [39, 40], "zeta3": [39, 40], "p3eq": [39, 40], "p2sccoeff": [39, 40], "sccoeff": [39, 40], "chi2": [39, 40], "p2spcoeff": [39, 40], "lambda2": [39, 40], "zeta2t": [39, 40], "p2eq": [39, 40], "kcsccoeff": [39, 40], "alphakstar": [39, 40], "kcspcoeff": [39, 40], "lambdakstar": [39, 40], "kappakstar": [39, 40], "kceq": [39, 40], "pnview": [39, 40], "kmview": [39, 40], "tmview": [39, 40], "naem": [39, 40], "kmviewer": [39, 40], "stimulu": 39, "pnviewer": 40, "tmviewer": 40, "puls": [45, 46], "gre": [47, 470], "ac": [47, 463, 470], "uk": [47, 470], "physica": 47, "phy2": 47, "node173": 47, "htm": 47, "wave": [47, 74], "van": [47, 178, 470], "leer": 47, "twice": 47, "wrap": [47, 247, 426], "var2": [47, 103, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 456], "lost": 47, "annulu": [49, 50, 59, 60], "r0": [49, 50, 59, 60], "r1": [49, 50, 59, 60, 126], "nr": [49, 50, 59, 60, 220], "dr": [49, 50, 59, 60, 220], "valueleft": [49, 50, 51, 54, 56, 59, 60, 61, 62, 63, 65, 66, 77, 78, 80, 81, 90, 91, 94, 95, 97, 99, 100, 104, 186], "valueright": [49, 50, 51, 54, 56, 59, 60, 61, 62, 63, 65, 66, 78, 80, 81, 90, 91, 94, 95, 97, 99, 100, 104, 186], "impos": [49, 50, 51, 56, 59, 60, 85, 123, 149, 186, 191, 193, 194, 195, 342], "r_0": [49, 50, 59, 60, 150], "r_1": [49, 50, 59, 60], "drawback": [49, 50, 51, 59, 60, 186], "ei": [49, 50, 59, 60], "expi": [49, 50, 59, 60], "aa": [49, 50, 56, 57, 59, 60, 128, 129, 131, 342], "bb": [49, 50, 56, 57, 59, 60, 128, 129, 131], "analyticalarrai": [49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 77, 91, 94, 95, 97, 99, 100, 104, 114, 116, 174, 186], "rratio": [50, 60], "arang": [50, 60, 113, 126, 171, 172, 342, 356, 393, 399, 406, 407, 411, 413, 440, 446, 447, 449, 450], "imath": 51, "u_x": [51, 56, 179, 186], "dd": [51, 52, 54, 56, 57, 61, 62, 63, 65, 66, 186], "valuebottom": [52, 57], "valuetop": [52, 57], "rtol": [52, 54, 56, 61, 62, 63, 65, 66, 67, 75, 80, 81, 85, 90, 97, 99, 107, 110, 111, 112, 113, 114, 115, 116, 138, 166, 173, 174, 186, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "s_0": [56, 174, 466], "sourcecoeff": [56, 57, 166, 167], "s_c": 57, "pseudo": [59, 60], "allcloselist": 63, "str": [63, 113, 141, 142, 206, 221, 225, 251, 306, 337, 372, 376, 381, 385, 386, 389, 390, 391, 395, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462], "1e4": 63, "arg0": 63, "arg1": [63, 473, 474], "append": [63, 189, 221, 376, 386, 390, 395], "2000": [66, 166, 186, 266, 267, 270, 274, 275, 276, 277, 278, 279, 283, 299, 300, 301, 303], "4d": 67, "precaut": 67, "convectioncoeff": [67, 110, 111, 112, 113, 115, 173, 186], "canalyt": 67, "c_": [67, 75, 108, 114, 116, 138, 144, 163, 164, 173], "restol": 67, "anstol": 67, "alpha": [68, 81, 138, 144, 161, 162, 166, 167, 171, 172, 187, 399, 411], "outflow": 68, "artifici": 68, "unitari": 68, "5000": [68, 447], "phi0": [68, 366], "fake": 68, "circular": [71, 72, 73, 123, 149, 150, 161, 162, 166, 171, 172, 342], "pmatrix": 71, "theta": [71, 137, 138, 144, 149, 150, 161, 162, 166, 167, 171, 172, 466], "q": [71, 139, 171, 172, 175, 182, 470], "00": 71, "mass": [71, 119, 163, 164, 178], "previous": [71, 137, 139, 144, 178, 221, 406], "splitext": [71, 162, 166, 167], "__file__": [71, 138, 162, 166, 167], "argmin": [71, 126], "rotationmatrix": 71, "gamma_prim": 71, "001": [71, 113, 385], "cellvolum": [71, 119, 149, 150, 156, 216, 221, 239, 413], "00025": 71, "triangl": [72, 246], "edg": [72, 73, 119], "plane": [72, 73, 95, 221], "timestepdur": [72, 73, 77, 78, 80, 81, 82, 83, 123, 124, 126, 149, 150, 151, 162, 166, 167], "mytsv": [72, 73], "tsv": [72, 73, 113, 436], "variable_grad_x": [72, 73], "variable_grad_i": [72, 73], "975559734792414": [72, 73], "0755414402612554": [72, 73], "964844363287199": [72, 73], "229687917881182": [72, 73], "00757854476106331": [72, 73], "0442864953037566": [72, 73], "79191893162384": [72, 73], "0375859836421991": [72, 73], "773936613923853": [72, 73], "205560697612547": [72, 73], "0246775505084069": [72, 73], "771959648896982": [72, 73], "020853932412869": [72, 73], "723540342405813": [72, 73], "182589694334729": [72, 73], "223345558247991": [72, 73], "807931073108895": [72, 73], "203035857140125": [72, 73], "777466238738658": [72, 73], "0401235242511506": [72, 73], "00726763301939488": [72, 73], "775978916110686": [72, 73], "00412895434496877": [72, 73], "650055516507232": [72, 73], "183112882869288": [72, 73], "0220279064527904": [72, 73], "187563765977912": [72, 73], "012771874945585": [72, 73], "35707168379437": [72, 73], "056072788439713": [72, 73], "111223320911545": [72, 73], "679586798311355": [72, 73], "0911595298310758": [72, 73], "613455176718145": [72, 73], "0256182541329463": [72, 73], "78996770899909": [72, 73], "0173672729866294": [72, 73], "693887874335319": [72, 73], "00671109050419": [72, 73], "127611490372511": [72, 73], "703545986179876": [72, 73], "435813500559859": [72, 73], "635004192597412": [72, 73], "896203033957194": [72, 73], "00855563518923689": [72, 73], "888641841567831": [72, 73], "408558914368324": [72, 73], "877939107374768": [72, 73], "32195762184087": [72, 73], "22696791637322": [72, 73], "38212257821916": [72, 73], "51732949653553": [72, 73], "292889724306196": [72, 73], "854466141879776": [72, 73], "199715815696975": [72, 73], "359068256998365": [72, 73], "757882581524374": [72, 73], "323541041763627": [72, 73], "870534227755687": [72, 73], "0792631912863636": [72, 73], "459673905457569": [72, 73], "701526587772079": [72, 73], "417577664032421": [72, 73], "725460726303266": [72, 73], "119132299176163": [72, 73], "338256179134518": [72, 73], "523565732643067": [72, 73], "254030052182524": [72, 73], "923505840608445": [72, 73], "192224240688976": [72, 73], "87498754712638": [72, 73], "174119064688993": [72, 73], "836057900916614": [72, 73], "11590500805745": [72, 73], "211010116496191": [72, 73], "484106960369249": [72, 73], "0705987421869745": [72, 73], "319827850867342": [72, 73], "867894407968447": [72, 73], "051246727010685": [72, 73], "0221203060940465": [72, 73], "216026820080053": [72, 73], "0152729438559779": [72, 73], "341246696530392": [72, 73], "0538476142281317": [72, 73], "complic": [72, 73, 144], "horizont": [72, 73, 217, 220, 229, 232, 233, 238, 246, 249, 389], "phianalyt": [72, 73, 81], "x0": [72, 73, 163, 164], "erf": [72, 73, 77, 78, 81], "ticket": [72, 73, 342, 345, 346, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369, 386], "325": [72, 73], "7e": [72, 73, 81, 123, 163, 164, 174], "equal": [72, 73, 156, 163, 164, 173, 178, 246, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 466, 468], "quadrangl": 73, "recombin": 73, "035": 73, "biharmon": 74, "v_0": 74, "v_1": 74, "cross": [74, 406], "v1": [74, 128, 129, 131, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "eq0": 74, "vi": 74, "res0": 74, "res1": 74, "1e100": 74, "uncoupl": 74, "advantag": [74, 163, 164, 173, 187, 189, 466, 473], "simultan": [74, 161, 164, 171, 172, 453], "dictat": 74, "speci": [74, 108, 110, 113, 114, 115, 116, 138, 163, 164, 173, 467], "obvious": 74, "permitt": [75, 113, 116], "c_j": [75, 108, 110, 114, 116, 173], "th": [75, 110, 116], "valenc": [75, 108, 110, 111, 112, 113, 115, 116], "z_j": [75, 108, 116], "z_": [75, 108, 116], "electron": [75, 108, 113, 116, 173], "charg": [75, 108, 113, 116, 138, 139, 144], "densiti": [75, 81, 116, 137, 138, 139, 144, 163, 164, 173, 178, 179, 221, 431, 446, 470], "admit": [75, 116], "2x": [75, 116], "2e": [75, 77, 81, 110, 115, 116, 163, 164, 174], "next": [75, 81, 113, 116, 150, 389], "le": [75, 81, 115, 116, 126, 129, 131, 138, 167, 171, 172, 173, 174, 175, 342, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "verifi": [75, 110, 111, 112, 114, 116, 163, 164, 178, 366], "attain": [75, 114, 116, 178], "initialvalu": 77, "epsi": 77, "triangular": [78, 95, 97, 104, 246], "gridmesh": 78, "trimesh": [78, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "othergridmesh": 78, "bigmesh": 78, "semi": [78, 81, 166, 167, 173, 174, 221], "late": [78, 374], "straight": [78, 81], "varanalyt": 78, "explicitdiffusionequ": 80, "assembl": [81, 174, 186], "uniti": [81, 468], "somefac": 81, "ever": [81, 187, 474], "differenc": [81, 346, 399, 402, 406, 407, 411, 413, 415, 427, 431, 434, 469], "phi_new": 81, "phi_old": 81, "eqx": 81, "delta": [81, 108, 114, 139, 144, 161, 163, 164, 171, 172, 174, 178, 366, 413, 466], "accomplish": 81, "tester": 81, "eqi": 81, "rerun": [81, 112], "crank": [81, 466], "nicholson": 81, "eqcn": 81, "drive": 81, "3e": [81, 113, 115, 138, 161, 162, 171, 172, 173, 178, 179], "omit": [81, 139, 174, 474], "del": [81, 141, 142, 410, 420, 429, 430, 435], "faceconstraint": 81, "lie": [81, 456, 466], "n_i": 81, "satisfi": [81, 119, 406, 468, 469], "satisfactori": 81, "fluxright": 81, "9l": 81, "And": [81, 113, 119, 376, 385], "transfer": [81, 138, 139, 144, 470], "_p": [81, 119, 342, 356, 466], "capac": 81, "phit": 81, "phif": 81, "relev": [81, 221], "alpha_fals": 81, "eqf": 81, "eqt": 81, "forward": 81, "told": [81, 186], "d_0": 81, "d0": 81, "exit": [81, 374, 375], "criteria": 81, "balanc": 81, "art": [81, 470], "pitfal": 81, "dissip": [81, 178], "stead": 81, "uniformli": 81, "vmatrix": 81, "1em": 81, "ddot": 81, "vdot": 81, "legitim": 81, "1e6": [81, 138], "myexampl": 81, "valuetopleft": [82, 83], "valuebottomright": [82, 83], "top": [82, 83, 138, 141, 142, 186, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 395, 406, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "corner": [82, 83, 112, 119, 166, 221, 246], "facestopleft": [82, 83], "facesbottomright": [82, 83], "500": [85, 113, 161, 162, 447], "alpha_1": 85, "alpha_2": 85, "alpha_3": 85, "alpha_4": 85, "alpha1": 85, "alpha2": 85, "alpha3": 85, "alpha4": 85, "total": [86, 108, 173, 246, 376, 385, 389], "initialarrai": [90, 123, 187], "gather": 91, "errorvar": 95, "nonorthovar": 95, "_nonorthogon": 95, "errorview": 95, "noview": 95, "rm": 96, "ravel": [103, 126], "xface": 104, "000000000000001": 104, "027": 104, "mesh2x1": 107, "paper": 108, "m_": [108, 114, 163, 164, 173, 174], "overbrac": [108, 173], "mu_j": [108, 173], "circ": [108, 114, 173], "w_j": [108, 173], "dielectr": 108, "ldot": [108, 173, 466], "d_": [108, 110, 119, 138, 144, 163, 164, 173, 342, 351, 356, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 466], "substack": [108, 110, 173], "c_k": [108, 110, 173], "c_i": [108, 110, 139, 173], "c_n": [108, 173], "mu_": [108, 114], "jn": [108, 114], "w_": [108, 114], "electromigr": [108, 112, 113, 115], "electrod": [108, 114, 138], "electrolyt": [108, 114, 137, 138, 139], "barrier": [108, 110, 111, 112, 113, 114, 115, 116, 163, 164, 173, 174, 376, 391], "solvent": [108, 110, 111, 112, 113, 114, 115, 173], "unresolv": 108, "stiff": 108, "intract": 108, "jj": 110, "summat": [110, 466], "exclud": [110, 161], "ternari": [110, 111, 112, 115], "componentvari": [110, 111, 112, 113, 114, 115, 116], "standardpotenti": [110, 111, 112, 113, 114, 115, 116, 173], "__class__": [110, 111, 112, 113, 114, 115, 116], "cn": [110, 111, 112, 114, 115, 173], "c1": [110, 111, 112, 115, 173, 410, 420, 429, 430, 435], "c2": [110, 111, 112, 115, 173], "interstiti": [110, 111, 112, 113, 114, 115, 116, 173], "regim": [110, 111, 112, 114], "cj": [110, 111, 112, 113, 115, 116, 173], "cksum": [110, 111, 112, 113, 115, 173], "ckfacesum": [110, 111, 112, 113, 115], "ck": [110, 111, 112, 113, 115, 173], "3200": 110, "h82b89f7_0": 110, "ceas": 110, "ok": [110, 335], "tsupport": 111, "incomplet": [111, 320], "tit": 111, "mm": [111, 128, 129, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "mol": [111, 113, 139, 144, 163, 164, 173, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "pprime": [112, 113, 115, 163, 164, 173], "gprime": [112, 113, 115, 163, 164, 173], "counterdiffus": [112, 113, 115, 173], "phasetransform": [112, 113, 115, 173], "tol": 112, "input1dphasebinari": 113, "elphf0214": 113, "rt": 113, "nav": [113, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "kb": [113, 385], "molarvolum": [113, 138, 139, 144], "80000006366754e": 113, "faradai": [113, 138, 139, 144], "nm": 113, "1200": 113, "gradientenergi": [113, 114, 115, 173], "6e": [113, 138], "h2o": 113, "cnstandardpotenti": 113, "34139": 113, "7265625": 113, "cnbarrier": 113, "6e5": 113, "cnvalenc": 113, "so4": 113, "24276": 113, "6640625": 113, "000010414586295976": 113, "cu": 113, "7231": 113, "81396484375": 113, "5553718417909": 113, "33225": 113, "9453125": 113, "110723815414": 113, "78": 113, "eps0": [113, 385], "permittivityprim": [113, 114, 115], "rich": [113, 115, 173], "000111111503177394": 113, "249944439430068": 113, "249999982581341": 113, "input1d": 113, "setscal": 113, "enthalpi": [113, 114, 115, 163, 164, 173, 174], "mxi": [113, 114, 115, 187], "dmxidxi": [113, 114, 115], "s1": [113, 114, 115, 163, 164, 173, 174, 187], "s0": [113, 114, 115, 163, 164, 173, 174, 187], "phaseview": [113, 162, 166, 167], "concview": 113, "ylog": [113, 440], "potentialview": 113, "residualview": 113, "maxerror": 113, "safeti": [113, 335], "errcon": [113, 335], "89e": 113, "desiredtimestep": 113, "thistimestep": 113, "raw_input": [113, 189], "succeed": 113, "floatingpointerror": 113, "underflow": 113, "rearrang": [114, 187], "mu_n": [114, 173], "w_n": [114, 173], "inf": 114, "equilibr": [114, 174], "thick": [114, 174], "2w_n": 114, "makeequ": 115, "c_1": 115, "recreat": 115, "c3": 115, "reiniti": [115, 138], "c_2": 115, "c_3": 115, "malengi": 119, "bm": 119, "cage": 119, "ugent": 119, "rework": 119, "colloc": 119, "pressur": [119, 178, 470], "viscos": [119, 178, 179], "momentum": [119, 178], "ferzig": [119, 470], "peric": 119, "rossow": [119, 470], "extrapol": 119, "dolfyn": 119, "frequenc": 119, "band": [119, 466], "ident": [119, 162, 163, 164, 385, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "dl": [119, 123, 163, 164, 166, 385], "relax": [119, 174, 178, 179, 289, 291, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "pressurerelax": 119, "velocityrelax": 119, "pressurecorrect": 119, "xveloc": 119, "yveloc": 119, "decoupl": [119, 178], "xvelocityeq": 119, "yvelocityeq": 119, "guess": 119, "ast": 119, "That": 119, "a_p": [119, 466], "a_a": [119, 469], "_a": [119, 466], "v_p": [119, 359, 366, 399, 402, 406, 407, 410, 411, 413, 415, 426, 427, 429, 430, 431, 434, 466], "somehow": 119, "ap": [119, 342, 351, 356, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 466], "_facearea": [119, 178, 179], "_celldist": [119, 178, 179, 231, 232, 233], "pressurecorrectioneq": 119, "stagger": 119, "coloc": 119, "oscil": 119, "diamond": 119, "_l": 119, "_r": 119, "mathrm": 119, "avg": 119, "adjac": [119, 178, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434, 466], "expand": [119, 150, 163, 164], "arriv": 119, "formula": [119, 342, 356, 376, 385], "unphys": 119, "_facegradvari": 119, "contrvolum": 119, "slip": 119, "xmax": [119, 141, 142, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "ymin": [119, 141, 142, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "ymax": [119, 141, 142, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "underrelax": [119, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "star": 119, "xre": 119, "xmat": 119, "yre": 119, "asarrai": [119, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "takediagon": [119, 178, 179], "presgrad": 119, "facepresgrad": 119, "790867927": 119, "265072740929": 119, "150290488304": 119, "cfl": [123, 126, 138, 150, 163, 164, 178, 179], "distancetotravel": [123, 149], "adveqn": [123, 124, 126], "distancetravel": [123, 124], "1001": 123, "02e": 123, "interfaceposit": 124, "advectionequ": [124, 138, 149, 150, 151], "l_y": 126, "l_x": [126, 167], "r2": 126, "len": [126, 141, 142, 156, 216, 228, 239, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "logical_and": 126, "distancemov": 126, "m1": [128, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "evalcel": [128, 129, 131], "phix": [128, 129, 131], "phii": [128, 129, 131], "sqr": [128, 129, 131, 138], "v2": [128, 129, 131, 389, 406, 426], "v3": [128, 131, 389], "v4": [128, 131], "v5": 128, "trialvalu": 128, "succinctli": 130, "neg": [130, 138, 174, 376, 385, 389, 430, 466], "val": 131, "arr": [131, 376, 385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "glue": 136, "fine": 136, "area": [136, 149, 178, 193, 431, 447, 466, 468], "ceac": [137, 144], "roughli": [137, 139, 144, 178], "publish": [137, 139, 144], "27": [137, 385, 470], "rungold": 137, "displayview": [137, 139, 144], "fals": [137, 139, 141, 142, 144, 174, 221, 330, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 374, 375, 376, 385, 386, 389, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 438, 439, 440, 446, 447, 469], "realist": [137, 144, 469], "depth": [137, 138, 139, 144, 220], "metal": [137, 138, 144], "ion": [137, 138, 139, 144, 171, 172, 437], "catalyst": [137, 138, 139, 144], "c_m": [137, 138, 139, 144, 173], "b_0": [137, 138, 144], "b_1": [137, 138, 144], "buri": 137, "k_c": 137, "consumptionrateconst": 137, "slight": 137, "taper": 137, "taperangl": 137, "Their": 138, "faradaysconst": [138, 139, 144], "6e4": 138, "gasconst": [138, 139, 144, 178, 179], "314": [138, 139, 144, 163, 164, 173, 178, 179], "transfercoeffici": [138, 144], "rateconstant0": [138, 144], "rateconstant3": [138, 144], "245e": 138, "catalystdiffus": [138, 139, 144], "sitedens": [138, 139, 144], "8e": 138, "cupric": 138, "metaldiffusioncoeffici": 138, "overpotenti": [138, 139, 144], "bulkmetalconcentr": 138, "catalystconcentr": [138, 144], "catalystcoverag": [138, 144], "flat": [138, 166, 376, 385], "copper": [138, 139], "currentdensity0": [138, 144], "currentdensity1": [138, 144], "cflnumber": 138, "numberofcellsinnarrowband": 138, "cellsbelowtrench": 138, "trenchdepth": [138, 139, 144], "aspectratio": [138, 139, 144], "trenchspac": [138, 139, 144], "boundarylayerdepth": [138, 139, 144], "hydrodynam": 138, "intention": [138, 144], "po": [138, 221], "ycell": 138, "xcell": 138, "buildmetaliondiffusionequ": 138, "narrowbandwidth": 138, "distancevar": [138, 141, 142, 430, 431], "bottomheight": 138, "trenchheight": 138, "trenchwidth": 138, "sidewidth": 138, "mark": [138, 470], "influenc": 138, "catalystvar": 138, "bulkcatalystvar": 138, "metalvar": 138, "depositionratevari": 138, "omega": [138, 139, 144], "molar": [138, 139, 144, 163, 164, 173], "i_0": [138, 139, 144], "eta": [138, 139, 144, 413], "ga": [138, 139, 144, 163, 164, 173], "empir": 138, "expoconst": 138, "tmp": [138, 376, 391, 406], "exchangecurrentdens": 138, "expo": [138, 166, 167, 171, 172], "currentdens": 138, "v_": [138, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "extensionequ": 138, "spread": [138, 174], "extensionvelocityvari": 138, "k_0": [138, 144], "k_3": [138, 144], "surfactantequ": [138, 149, 150, 151], "surfactantvar": [138, 141, 142], "bulkvar": 138, "rateconst": 138, "d_m": [138, 144], "metalequ": 138, "ionvar": 138, "depositionr": 138, "metalionmolarvolum": 138, "jump": 138, "langmuir": 138, "adsorpt": [138, 139], "abil": 138, "buildsurfactantbulkdiffusionequ": 138, "bulkcatalystequ": 138, "zoomfactor": [138, 141, 142], "levelsetupdatefrequ": 138, "distanceequ": 138, "whole": [138, 376, 385], "filepath": 138, "join": [138, 466], "split": 138, "savetxt": 138, "loadtxt": [138, 162, 166, 167], "acceler": [139, 470], "runlevel": 139, "25e": 139, "suppressor": 139, "absorb": 139, "unoccupi": 139, "cover": 139, "affin": 139, "preferenti": 139, "i_j": 139, "theta_j": 139, "alpha_j": 139, "vacant": 139, "substrat": 139, "theta_": 139, "kappa": [139, 163, 164, 174, 466], "theta_l": 139, "k_l": 139, "c_l": [139, 163, 164], "theta_a": 139, "k_a": 139, "c_a": 139, "theta_v": 139, "i_l": 139, "i_": 139, "rise": 139, "k_": 139, "a0": 139, "alpha_k": 139, "b_d": 139, "b_a": 139, "v_d": 139, "b_b": 139, "symbol": [139, 144], "mbox": [139, 144], "tabular": [139, 144], "rllr": [139, 144], "multicolumn": [139, 144], "i_a": 139, "texttt": [139, 144], "i0acceler": 139, "i0level": 139, "alpha_a": 139, "alphaacceler": 139, "alpha_": 139, "alphalevel": 139, "ionconcentr": 139, "d_i": 139, "iondiffus": 139, "acceleratorcoverag": 139, "acceleratorconcentr": 139, "d_a": 139, "gamma_a": 139, "kaccelerator0": 139, "alphaadsorpt": 139, "bd": 139, "levelsetvalu": [141, 142], "kwlimit": [141, 142, 161, 171, 172, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "_promptforopinion": [141, 142, 437, 440, 442, 443, 444, 446, 447, 449, 450], "bool": [141, 142, 191, 193, 194, 195, 221, 330, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 372, 376, 386, 389, 391, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447], "zmin": [141, 142, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 453, 456, 457, 458, 460, 461, 462], "colormap": [141, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447], "logarithm": [141, 376, 385, 438, 439, 440, 441, 442, 443, 444, 446, 447], "runsimpletrenchsystem": 144, "schemat": 144, "metalconcentr": 144, "metaldiffus": 144, "surfactantbefor": [149, 150], "surfactantaft": [149, 150], "initialsurfactantvalu": [149, 150], "initialradiu": [149, 150], "00813776069241": 149, "theta_0": 150, "totaltim": 150, "finalradiu": 150, "outward": 151, "initialsurfact": 151, "getcellvolum": 156, "vol": [156, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "numberofcel": [156, 162, 178, 179, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 386], "insid": [157, 221], "cool": [161, 171, 172], "melt": [161, 163, 164, 171, 172, 174], "supercool": [161, 171, 172], "circumst": [161, 171, 172, 178, 474], "pattern": [161, 171, 172], "lobkovski": [161, 162, 167, 171, 172, 470], "carter": [161, 162, 167, 171, 172, 470], "crystallin": [161, 171, 172], "regular": [161, 163, 164, 171, 172], "latent": [161, 163, 164, 171, 172, 174], "d_t": [161, 162, 171, 172], "heateq": [161, 171, 172], "tau_": [161, 162, 167, 171, 172], "mathsf": [161, 171, 172, 174, 333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "kappa_1": [161, 162, 171, 172], "kappa_2": [161, 162, 171, 172], "beta": [161, 162, 166, 167, 171, 172, 174, 187, 399, 411], "015": [161, 162, 166, 167, 171, 172], "phisq": [161, 162, 171, 172], "dbetadpsi": [161, 171, 172], "ddia": [161, 171, 172], "doff": [161, 171, 172], "i0": [161, 171, 172], "i1": [161, 171, 172], "tau": [161, 162], "kappa1": [161, 162, 171, 172], "kappa2": [161, 162, 171, 172], "phaseeq": [161, 162, 163, 164, 166, 167, 171, 172], "solidifi": [161, 162, 163, 164, 171, 172], "quench": [161, 163, 164, 171, 172, 174], "induc": [161, 163, 164, 171, 172], "granular": [161, 171, 172], "strive": [161, 171, 172, 186], "pylab": 161, "cm": [161, 163, 164, 171, 172, 174, 376, 385, 437, 438, 439, 441, 442, 443, 444], "hot": [161, 171, 172], "arm": [161, 171, 172], "fastest": [161, 171, 172], "steepest": [161, 171, 172], "lucid": 161, "seedcent": 162, "initialtemperatur": 162, "beta_": 162, "phi_i": [162, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "phi_x": [162, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "xi_x": 162, "xi_i": 162, "tempdiffusioncoeff": 162, "mvar": 162, "phasei": 162, "phasex": 162, "betapsi": 162, "dxi": 162, "nineti": 162, "anisotropysourc": 162, "temperatureeq": 162, "temperatureview": 162, "text_to_native_str": [162, 166, 167], "testdata": [162, 166, 167], "straightforward": [163, 164], "helmholtz": [163, 164, 174], "mathcal": [163, 164], "m_c": [163, 164], "f_a": [163, 164], "w_a": [163, 164], "f_b": [163, 164], "ln": [163, 164, 173, 178], "omega_": [163, 164], "omega_l": [163, 164], "calphad": [163, 164], "w_b": [163, 164], "yield": [163, 164, 178], "ideal": [163, 164], "l_a": [163, 164, 342], "t_m": [163, 164, 174], "likewis": [163, 164, 376, 385], "la": [163, 164], "2350": [163, 164, 174], "lb": [163, 164, 376, 385], "1728": [163, 164, 174], "tma": [163, 164], "tmb": [163, 164], "1358": [163, 164], "enthalpya": [163, 164], "enthalpyb": [163, 164], "nonumb": [163, 164, 173, 466], "l_b": [163, 164], "v_m": [163, 164], "mu_b": [163, 164], "mu_a": [163, 164], "vm": [163, 164], "deltaa": [163, 164], "deltab": [163, 164], "sigmaa": [163, 164], "sigmab": [163, 164], "9e": [163, 164], "betaa": [163, 164], "betab": [163, 164], "kappaa": [163, 164], "kappab": [163, 164], "wb": [163, 164, 385], "mphi": [163, 164, 173, 174], "dmphidphi": [163, 164, 173, 174], "deltachempot": [163, 164], "chempota": [163, 164], "chempotb": [163, 164], "henc": [163, 164, 174], "fick": [163, 164], "phasetransformationveloc": [163, 164], "diffusioneq": [163, 164], "deduc": [163, 164], "liquidu": [163, 164, 173], "solidu": [163, 164, 173], "cl": [163, 164, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "fraction": [163, 164, 171, 172, 289], "lever": [163, 164], "cavg": [163, 164], "algebra": [163, 164, 174, 322, 463, 470], "reveal": [163, 164], "unchang": [163, 164, 186, 376, 385], "root": [163, 164, 376, 385, 389, 399, 407, 411, 413], "luck": [163, 164, 406], "jacobian": [163, 164, 331], "equilibriumjacobian": [163, 164], "fsolv": [163, 164], "csroot": [163, 164], "clroot": [163, 164], "func": [163, 164, 381], "fprime": [163, 164], "uncondition": [163, 164], "e5": [163, 164], "asymmetr": [163, 251], "therefor": [163, 469], "phaser": 163, "diffr": 163, "stationari": [163, 164], "overal": [163, 164], "ten": [163, 164], "idea": [163, 164, 473], "neglig": [163, 164], "centi": [163, 164], "meter": [163, 164], "d_c": 164, "dc": 164, "dphi": 164, "initialr": 164, "principl": 164, "phasetransientcoeff": [166, 167], "thetasmallvalu": [166, 167, 171, 172], "1e5": [166, 167, 171, 172], "1e3": [166, 167, 171, 172], "thetatransientcoeff": [166, 167], "008": [166, 167, 171, 172], "held": [166, 167, 178, 431], "isotherm": [166, 167, 470], "randomli": [166, 447], "0001": [166, 171, 172], "thetavalu": 166, "segment": [166, 246], "buildphaseequ": 166, "mphivar": [166, 167], "thetamag": [166, 167, 171, 172], "implicitsourc": [166, 167], "et": [166, 167, 171, 172, 178, 470], "modular": [166, 167, 171, 172, 426], "buildthetaequ": 166, "phasemod": [166, 167, 171, 172], "phasemodsq": [166, 167], "pfunc": [166, 167, 171, 172], "phasefac": [166, 167], "phasesq": [166, 167], "gradmag": [166, 167], "igamma": [166, 167, 171, 172], "thetagraddiff": [166, 167], "thetaeq": [166, 167, 171, 172], "meaning": [166, 187], "thetaprod": 166, "thetaproductview": [166, 167], "disk": [166, 402], "recal": 166, "newphas": 166, "newtheta": 166, "newthetaeq": 166, "newphaseeq": 166, "m_1": 167, "confin": 167, "angl": [167, 376, 385], "halv": 167, "t_0": [171, 172], "tau_phas": [171, 172], "tau_theta": [171, 172], "beta_theta": [171, 172], "gradmagtheta": [171, 172], "v_theta": [171, 172], "d_theta": [171, 172], "numse": [171, 172], "12345": [171, 172, 389], "cx": [171, 172], "cy": [171, 172], "orientationview": [171, 172], "room": [171, 172], "stolen": [171, 172], "make_ax": [171, 172], "ec1cd2567521c105a451ce15e06de10715f8b54d": [171, 172], "lib": [171, 172], "l838": [171, 172], "pb": [171, 172], "get_posit": [171, 172], "frozen": [171, 172], "pad": [171, 172], "x1": [171, 172], "pb1": [171, 172], "pbx": [171, 172], "pbcb": [171, 172], "splitx": [171, 172], "panchor": [171, 172], "set_posit": [171, 172], "set_anchor": [171, 172], "gnomon": [171, 172], "get_figur": [171, 172], "add_ax": [171, 172], "85": [171, 172], "polar": [171, 172], "set_thetagrid": [171, 172], "set_theta_zero_loc": [171, 172], "set_theta_direct": [171, 172], "set_rgrid": [171, 172], "radii": [171, 172], "_orientation_and_phase_to_rgb": [171, 172], "set_facecolor": [171, 172], "set_edgecolor": [171, 172], "_reshap": [171, 172], "staticmethod": [171, 172], "hsv": [171, 172], "hsv_to_rgb": [171, 172], "_data": [171, 172], "rgb": [171, 172], "hue": [171, 172], "set_data": [171, 172], "pyplot": [171, 172, 437], "figaspect": [171, 172, 438, 439, 441, 442, 443, 444, 446, 447], "figsiz": [171, 172], "timer": [171, 172], "3f": [171, 172], "fontsiz": [171, 172], "add_subplot": [171, 172], "total_tim": [171, 172], "save_interv": [171, 172], "002": [171, 172, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "save_at": [171, 172], "set_text": [171, 172], "c_0": 173, "c0": [173, 429], "circ_j": 173, "tilt": 173, "_0": 173, "f_j": 173, "sl": 173, "circ_n": 173, "cook": 173, "rhol": 173, "arrang": [173, 178, 179, 250], "d_j": 173, "l_v": 174, "0025": 174, "lv": 174, "atom": 174, "simplest": 174, "surpris": 174, "inspect": 174, "uninterest": 174, "resolut": 174, "reintroduc": 174, "exploit": [174, 463], "s_1": [174, 466], "advic": 174, "tangent": [174, 376, 385, 389], "appreci": [174, 187, 188], "focus": 174, "recast": 174, "redeclar": 174, "nickel": 174, "sigma": [174, 413], "viewer2": [174, 437], "redefin": 174, "quintic": 174, "polynomi": 174, "chose": 174, "agreement": 174, "tanhresidu": 174, "leastsq": 174, "v_fit": 174, "d_fit": 174, "msg": 174, "symmetr": [175, 251, 287, 288, 289, 290, 291, 324, 325, 326], "quadrilater": 175, "mirror": 175, "testresult": 175, "bottomright": 175, "topleft": 175, "topright": 175, "vapor": 178, "der": 178, "waal": 178, "molarweight": [178, 179], "ee": [178, 179], "455971": [178, 179], "650": [178, 179], "vbar": [178, 179], "liquiddens": [178, 179], "7354": [178, 179], "3402662299995": [178, 179], "vapordens": [178, 179], "855803327810008": [178, 179], "u_j": 178, "u_i": [178, 179], "u_iu_j": 178, "nu": 178, "nc": [178, 179], "densityprevi": [178, 179], "velocityprevi": 178, "potentialnc": [178, 179], "freeenergi": [178, 179], "u_": 178, "d_f": [178, 466, 469], "overlin": 178, "partial_": 178, "overbar": 178, "matrixdiagon": [178, 179], "correctioncoeff": [178, 179], "masseqn": [178, 179], "lh": 178, "momentumeqn": 178, "superscript": [178, 466], "potentialderiv": [178, 179], "potentialnceqn": [178, 179], "quirk": 178, "amplitud": [178, 413], "totalstep": [178, 179], "1e10": 178, "elegantli": 178, "initialresidu": [178, 179], "previousresidu": [178, 179], "5e9": 178, "velocityx": 179, "velocityi": 179, "velocityvector": 179, "velocityxprevi": 179, "velocityyprevi": 179, "matxx": 179, "matyi": 179, "matxi": 179, "matyx": 179, "momentumxeqn": 179, "momentumyeqn": 179, "totalsweep": 179, "stress": [186, 467], "slightli": [186, 406], "inconveni": [186, 187, 188], "walk": 186, "getfacesleft": 186, "getfacesright": 186, "steadyconvectiondiffusionscequ": 186, "stdyconvdiffscequ": 186, "traceback": [186, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 346, 353, 354, 357, 361, 368, 369, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "convectionschem": 186, "nameerror": 186, "getcellcent": [186, 187, 188], "grid2dgistview": 186, "thrown": 186, "biggest": 186, "assembli": 186, "took": 186, "gistview": 186, "gist1dview": 186, "hesit": [186, 187, 188], "agre": [187, 188], "assur": [187, 188], "casual": [187, 188], "superced": [187, 188], "1_2": 187, "summar": [187, 188], "tip": [187, 188], "seemingli": [187, 406], "almost": [187, 466], "blindli": 187, "worth": 187, "reorient": 187, "deltax": 187, "deltai": 187, "vectorfacevari": 187, "vectorfield": 187, "hackish": 187, "_take": 187, "quietli": 187, "getexteriorfac": 187, "getcent": 187, "getarithmeticfacevalu": 187, "convolut": 187, "cellfilt": 187, "positivecel": 187, "getfac": 187, "deprecationwarn": [187, 188, 374, 381], "indefinit": [187, 188], "breviti": 187, "feel": [187, 188], "whichev": [187, 188], "comfort": [187, 188], "clariti": 187, "trump": 187, "orthodoxi": 187, "temptat": 187, "2_1": 188, "3_0": 188, "reconsid": 188, "gmshimporter2d": 188, "gmshimporter3d": 188, "gmshimporter2din3dspac": 188, "fv": [189, 346, 353, 354, 357, 361, 368, 369, 468], "msed": 189, "mml": 189, "ubiquit": 189, "proprietari": 189, "expens": 189, "savvi": 189, "repr": [191, 192, 193, 194, 195, 206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 283, 287, 288, 289, 290, 291, 296, 299, 300, 301, 302, 303, 306, 310, 311, 312, 313, 314, 315, 316, 317, 329, 330, 331, 332, 337, 364, 378, 379, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436], "mathtt": [194, 333, 389], "g_": 194, "odd": 195, "numberofvari": 198, "numberofequ": 198, "equationindex": 198, "varindex": 198, "_representationclass": [206, 225, 226, 227, 228, 229, 230, 246, 247, 248, 249, 250], "_abstractrepresent": [206, 247], "_topologyclass": [206, 225, 226, 227, 228, 229, 230, 246, 247, 248, 249, 250], "_abstracttopologi": [206, 247], "among": 206, "dataset": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 436], "basemesh": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "translatedmesh": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "addedmesh": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "provis": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "consolid": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "triaddedmesh": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "83333333": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "16666667": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "66666667": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "33333333": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "threedbasemesh": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "threedsecondmesh": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "threedaddedmesh": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "invalidmesh": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "match": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 389], "helper": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 251, 254, 255, 256, 306, 310, 311, 312, 337, 378, 379, 436, 451], "unsupport": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "operand": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 376, 385], "nonzero": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250], "attribut": [206, 216, 217, 218, 219, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 250, 251, 376, 386, 391], "delattr": [206, 221, 225, 251, 306, 337, 436], "getattr": [206, 221, 225, 251, 306, 337, 436], "setattr": [206, 221, 225, 251, 306, 337, 436], "tb": [206, 221, 225, 251, 306, 337, 436], "__traceback__": [206, 221, 225, 251, 306, 337, 436], "indexerror": [216, 228, 239, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 436], "dilat": [216, 217, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 246], "dilatedmesh": [216, 217, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 246], "mismatch": [216, 217, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 246, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "broadcast": [216, 217, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 246, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "rectangular": [217, 219, 229, 230, 232, 233, 249, 250], "radial": [219, 220], "axial": 219, "lr": 220, "count": [220, 372, 389, 390], "coorddimens": 221, "nproc": [221, 376, 386, 391], "squaredcircl": 221, "compass": 221, "label": [221, 380], "north": 221, "west": 221, "nw": 221, "parametr": 221, "physicalcel": 221, "physicalfac": 221, "bkg": 221, "monoton": 221, "trisquar": 221, "std1": 221, "std2": 221, "ii": [221, 470], "characterist": [221, 468], "topolog": 221, "fileistemporari": 221, "gmshoutput": 221, "respons": 221, "constructor": 221, "multilin": 221, "todo": 221, "truncat": [221, 436], "cellstovertic": 221, "recov": 221, "vertexcoord": [221, 225, 226, 227], "cellstovertid": 221, "cellstofac": 221, "isol": 221, "nodespath": 221, "elemspath": 221, "namesfil": 221, "physicalnam": 221, "facestovertexid": 221, "cellstofaceid": 221, "cellglobalidmap": 221, "ghostcellglobalidmap": 221, "trust": [221, 473], "retriev": [221, 473], "facevertexid": [225, 226, 227], "_meshrepresent": [225, 226, 227], "_meshtopologi": 225, "_mesh1dtopologi": 226, "_mesh2dtopologi": [227, 246], "_builderclass": 228, "_nonuniformgrid1dbuild": 228, "_grid1drepresent": [228, 248], "_grid1dtopologi": [228, 248], "_grid2drepresent": [229, 246, 249], "_grid2dtopologi": [229, 249], "_grid3drepresent": [230, 250], "_grid3dtopologi": [230, 250], "xz": [230, 250], "yz": [230, 250], "subcategori": [230, 250], "facecellid": [231, 232, 233], "fill": [231, 232, 233], "999": 231, "_celltocelldist": [231, 232, 233], "_cellvertexid": [231, 232, 233], "_baseperiodicgrid2d": 232, "_baseperiodicgrid3d": 233, "rand": 238, "skew": 238, "hereaft": 246, "calc": 248, "machineri": 251, "petsc4py_comm": 255, "comm_world": 255, "intoler": 257, "Not": [257, 264, 268, 269, 280, 296, 302, 306, 331, 332, 335, 376, 385, 426], "biconjug": [258, 287, 313], "_scipysolv": [268, 280, 302], "pcg": [270, 277, 291], "smoothed_aggregation_solv": 272, "max_it": [274, 275, 276, 277, 278, 279], "block_jacobi": [274, 275, 276, 277, 278, 279], "aggreg": [274, 323, 324, 325], "amg": [274, 275], "jacobi": [274, 275, 276, 278, 279, 288, 289, 291, 293, 295, 321], "pbicgstab": 276, "alia": [277, 358, 375], "fgmre": 278, "preconditioner_typ": 282, "config_dict": 283, "smoother_typ": 285, "variant": 287, "bicg": 287, "itsolv": [287, 288, 291], "maxiter": [290, 316], "pivot": 290, "superlu": 290, "ssor": [291, 295], "_pysparsematrixsolv": 296, "_scipykrylovsolv": [299, 300, 301, 303], "bicgstab": 299, "unsatisfactori": 306, "wignor": 306, "abort": 306, "werror": 306, "relr": 306, "linearxsolv": 306, "obj": [311, 474], "m4count": 311, "mpi4py_comm": 311, "get_rank": 311, "get_siz": 311, "assert": 311, "ameso": 316, "klu": 316, "choleski": 320, "ifpack": 320, "multilevel": [322, 323, 325, 326, 327], "nearli": 325, "gauss": [326, 413], "seidel": 326, "aztecoo": 329, "mloption": 330, "testunsupport": 330, "ml": [330, 385], "setparameterlist": 330, "printingopt": 331, "solveropt": 331, "linearsolveropt": 331, "linesearchopt": 331, "directionopt": 331, "newtonopt": 331, "steppyngstoun": [333, 336], "_1": [333, 389], "_2": [333, 342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 389], "prior": 333, "decreas": 333, "vardata": [334, 335, 336], "075": 334, "pid": 334, "articl": 334, "pidpap": 334, "author": 334, "valli": 334, "carei": 334, "coutinho": 334, "strategi": 334, "incompress": [334, 470], "reaction": 334, "meth": [334, 473], "pgrow": 335, "pshrink": 335, "000189": 335, "rkq": 335, "rung": 335, "kutta": 335, "incorpor": 342, "u_p": [342, 356], "sum_a": [342, 356], "phi_a": [342, 346, 351, 353, 354, 356, 357, 361, 368, 466], "l_p": 342, "foral": 342, "_matrixclass": [342, 356], "_buildmatrix": [342, 356], "stand": [342, 356], "harpsichord": [342, 356], "sing": [342, 356], "vel": [342, 356], "quadrat": 342, "__advectionterm": 342, "spot": 342, "123105625618": 342, "0201715476598": 342, "hash": [342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "__nondiffusionterm": [342, 345, 346, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369], "negat": [342, 345, 346, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369], "__unaryterm": [342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 366, 368, 369], "getrhsvector": [342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "residualfn": [342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "sovler": [342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "l2": [342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "cacheresidu": [342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "cacheerror": [342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "residualvector": [342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "errorvector": [342, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369], "_nondiffusionterm": [345, 355, 356], "_abstractconvectionterm": [346, 353, 354, 357, 361, 368, 369], "simeq": [346, 351, 353, 354, 357, 359, 361, 366, 368, 466], "alpha_f": [346, 353, 354, 357, 361, 368, 466, 469], "central": [346, 469], "vcv": [346, 353, 354, 357, 361, 368, 369], "vfv": [346, 353, 354, 357, 361, 368, 369], "__convectionterm": [346, 353, 354, 357, 361, 368, 369], "_arithmeticcelltofacevari": [346, 353, 354, 357, 361, 368, 369], "m2": [346, 353, 354, 357, 361, 368, 369], "cv2": [346, 353, 354, 357, 361, 368, 369], "vcv2": [346, 353, 354, 357, 361, 368, 369], "vfv2": [346, 353, 354, 357, 361, 368, 369], "_abstractdiffusionterm": [349, 350, 351], "_abstractupwindconvectionterm": [353, 368], "_asymmetricconvectionterm": [354, 357, 361], "hybrid": [357, 469], "s_p": 359, "proportioun": 359, "_explicitsourceterm": 362, "newton": 362, "rho_": [366, 466], "phi_0": 366, "relaxationfactor": 366, "skipwarn": 372, "glob": 372, "optionflag": 372, "extraglob": 372, "raise_on_error": 372, "exclude_empti": 372, "_selectivedoctestpars": 372, "reachabl": 372, "__doc__": 372, "__test__": 372, "__dict__": 372, "slate": 372, "stuff": 372, "iff": 372, "argv": [372, 374, 375, 451], "summari": 372, "dont_accept_true_for_1": 372, "dont_accept_blanklin": 372, "normalize_whitespac": 372, "ellipsi": 372, "ignore_exception_detail": 372, "report_udiff": 372, "report_cdiff": 372, "report_ndiff": 372, "report_only_first_failur": 372, "postmortem": 372, "defaulttest": [374, 375], "testrunn": [374, 375], "testload": [374, 375], "loader": [374, 375], "failfast": [374, 375], "catchbreak": [374, 375], "buffer": [374, 375, 376, 391], "tb_local": [374, 375], "inabl": 374, "kw": 374, "ie": 374, "foo": 374, "bunch": 374, "konrad": [376, 385], "hinsen": [376, 385], "physicalquant": [376, 385], "angular": [376, 385], "radian": [376, 385], "deg": [376, 385], "03490659": [376, 385], "05235988": [376, 385], "06981317": [376, 385], "08726646": [376, 385], "003": [376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "004": [376, 385], "005": [376, 385], "isinst": [376, 385, 389], "facilit": [376, 385], "inch": [376, 385], "round": [376, 385], "034907": [376, 385], "ft": [376, 385], "remaind": [376, 385], "hz": [376, 385], "ev": [376, 385], "8288": [376, 385], "cosin": [376, 385], "57079632679": [376, 385], "rad": [376, 385, 406], "31695789692": [376, 385], "sine": [376, 385], "arctang": [376, 385], "785398": [376, 385], "380506": [376, 385], "549306144334": [376, 385], "smallest": [376, 385], "3j": [376, 385], "ohm": [376, 385], "adjust": [376, 385, 426], "hartre": [376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "kcal": [376, 385], "1694": [376, 385], "27557621": [376, 385], "sctype": [376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "obj2sctyp": [376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "si": [376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "7088849": [376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "01085": [376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "kg": [376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "degc": [376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "degf": [376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "314159": [376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "59": [376, 385, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "302585": [376, 385], "0254": [376, 385], "opposit": [376, 385, 389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "typecod": [376, 385], "0762": [376, 385], "0508": [376, 385], "illeg": [376, 385], "expon": [376, 385, 467], "761594155956": [376, 385], "max_line_width": [376, 385, 389], "suppress_smal": [376, 385, 389], "14159": [376, 385], "encod": [376, 391], "newlin": [376, 391], "suffix": [376, 391], "namedtemporaryfil": [376, 391], "tmpfile": [376, 391], "procid": [376, 386, 391], "seek": [376, 391], "mkstemp": [376, 391], "duck": [376, 386, 391], "tempfil": [376, 386, 391], "xml": [376, 395], "svnpath": [376, 395], "svn": [376, 395], "stall": 380, "old_nam": 381, "new_nam": 381, "old_func": 381, "dirac": [385, 463], "cnr": [385, 463], "orlean": [385, 463], "fr": [385, 463], "2002": [385, 470], "codata": 385, "british": 385, "appendix": 385, "sr": 385, "da": 385, "bq": 385, "gy": 385, "lm": 385, "pa": 385, "sv": 385, "60217653e": 385, "acr": 385, "4046": 385, "8564224": 385, "amu": 385, "6605402e": 385, "ang": 385, "atm": 385, "101325": 385, "100000": 385, "bohr": 385, "291772081145378e": 385, "btui": 385, "1055": 385, "05585262": 385, "299792458": 385, "cal": 385, "cali": 385, "1868": 385, "0000000000000003e": 385, "cup": 385, "00023658825600000004": 385, "86400": 385, "017453292519943295": 385, "5555555555555556": 385, "degr": 385, "00010000000000000003": 385, "dyn": 385, "85418781762039e": 385, "erg": 385, "floz": 385, "9573532000000005e": 385, "3048": 385, "galuk": 385, "004546090000000002": 385, "galu": 385, "0037854120960000006": 385, "gn": 385, "80665": 385, "grav": 385, "6742e": 385, "3600": 385, "35974417680088e": 385, "hbar": 385, "0545716823644548e": 385, "hpel": 385, "746": 385, "hplanck": 385, "6260693e": 385, "hpuk": 385, "745": 385, "025400000000000002": 385, "invcm": 385, "9864456023253395e": 385, "3806505e": 385, "4184": 385, "kcali": 385, "4186": 385, "ken": 385, "0010000000000000002": 385, "45359237": 385, "lyr": 385, "9460730472580800": 385, "me": 385, "1093826e": 385, "mi": 385, "1609": 385, "344": 385, "0000000000000002e": 385, "mp": 385, "67262171e": 385, "mu0": 385, "2566370614359173e": 385, "0221415e": 385, "nmi": 385, "1852": 385, "oz": 385, "028349523125": 385, "6894": 385, "75729316836": 385, "pt": 385, "0004731765120000001": 385, "0009463530240000002": 385, "tbsp": 385, "4786766000000002e": 385, "ton": 385, "907": 385, "18474": 385, "torr": 385, "133": [385, 470], "32236842105263": 385, "tsp": 385, "9289220000000005e": 385, "wk": 385, "604800": 385, "yd": 385, "9144000000000001": 385, "yr": 385, "31536000": 385, "yrjul": 385, "31557600": 385, "yrsid": 385, "31558152": 385, "959999997": 385, "array_lik": [385, 389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 441, 442, 446], "nine": 385, "_findunit": 385, "555556": 385, "meterpersecond": 385, "fileobject": 386, "mesh_unmangl": 386, "cpickl": 386, "decompress": 386, "improp": 386, "taxicab": 389, "manhattan": 389, "_j": 389, "euclidean": 389, "underset": 389, "logic": [389, 399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "flatten": 389, "a1": 389, "a2": 389, "_variableclass": 389, "max_mem": 389, "100000000": 389, "m0": [389, 399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "maskvalu": 389, "999999": 389, "masked_valu": 389, "mayb": 389, "3x3": 389, "fill_valu": 389, "array_output": 389, "textual": 389, "bracket": 389, "subset": [389, 468], "rightmost": 389, "estat": 389, "2345": 389, "23345": 389, "123456": 389, "charact": 389, "output_line_width": 389, "decim": 389, "float_output_precis": 389, "float_output_suppress_smal": 389, "unus": 389, "optpars": 390, "store_tru": 390, "store_fals": 390, "store_const": 390, "callback": 390, "argpars": 390, "absent": [390, 393], "fear": 391, "inexplic": 393, "additionvector": 393, "thought": [393, 468], "shim": 394, "kwd": [399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "int_0": [399, 411], "sake": [399, 407, 411, 413], "determinist": [399, 407, 411, 413], "histogram": [399, 407, 411, 413, 415, 434], "gaussian": [399, 407, 411, 413], "betadist": 399, "histoplot": [399, 407, 411, 413, 434], "stderr": [399, 407, 411], "fab": [399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "weird": [399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "truth": [399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "ambigu": [399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "nearestcellid": [399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "ncell": [399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "npoint": [399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "whose": [399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435, 474], "sliceabl": [399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "1000000000000000000": [399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "phi_1": [399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "phi_2": [399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "f2": [399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "interiorfac": [399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "opshap": [399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "operatorclass": [399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "otim": [399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "461538461538": [399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "phi1": [399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "phi2": [399, 402, 406, 407, 411, 413, 415, 426, 427, 431, 434], "mpitutori": [399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "allreduc": [399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434], "assertionerror": [399, 402, 406, 407, 411, 413, 415, 427, 431, 434], "longhand": [399, 402, 406, 407, 410, 411, 413, 415, 420, 426, 427, 429, 430, 431, 434, 435], "unpickledvar": 402, "dim": [402, 410, 420, 426, 427, 429], "_calctrialvalu": 406, "patholog": 406, "vbl": 406, "vbr": 406, "vml": 406, "crossprod": 406, "dsq": 406, "vmr": 406, "extensionvari": 406, "extensionvar": 406, "tmp1": 406, "tmp2": 406, "9544": 406, "5456": 406, "perpendicular": 406, "30473785": 406, "49923009": 406, "35355339": 406, "45118446": 406, "97140452": 406, "76215286": 406, "33721352": 406, "trial": 406, "didn": 406, "58578644": 406, "08578644": 406, "85136395": 406, "29289322": 406, "54389939": 406, "49547948": 406, "3rd": 406, "7th": 406, "15th": 406, "chanc": 406, "circumfer": 406, "57984690073": 406, "expdist": 407, "gammadist": 411, "langl": 413, "rangl": 413, "uncorrel": 413, "k_b": 413, "sigmasqrd": 413, "kboltzmann": 413, "sampl": 415, "bin": 415, "get_se": 427, "_celltofacevari": 429, "conservativesurfactantequ": 430, "numberoffac": 430, "volumetr": 431, "mole": 431, "941": 431, "_interfacesurfactantvari": 431, "some1dvar": 436, "plt": 437, "ax1": 437, "subplot": 437, "ax2": 437, "ax3": 437, "mesh1": 437, "xvar": [437, 440, 449, 450], "viewer1": 437, "mesh2": 437, "xyvar": [437, 442, 443, 444, 446, 447, 449, 450], "mesh3": 437, "viewer3": 437, "orrd": 437, "kval": [437, 440, 442, 443, 444, 446, 447, 449, 450], "jet": [437, 438, 439, 441, 442, 443, 444], "xlog": 440, "ocean": [440, 442, 443, 444, 446, 447], "synonym": [440, 466], "line2d": 440, "draw": [441, 442], "1002": [442, 443, 444, 449, 450], "polycollect": 444, "sparsiti": [445, 447], "linewidth": 446, "arrows": 446, "arrowstyl": 446, "minlength": 446, "stream": 446, "griddata": 446, "convex": 446, "hull": 446, "concav": 446, "cla": 446, "overlaid": 446, "arrow": [446, 447], "goe": [446, 447], "streamlin": 446, "30x30": 446, "linearli": [446, 466], "travers": 446, "density_x": 446, "density_i": 446, "lumin": 446, "stretch": 446, "fancyarrowpatch": 446, "quiver": 447, "xyzvar": [449, 450], "poll": 451, "poll_fil": 451, "Or": 451, "reader": 451, "fname": 451, "subview": 453, "866": 456, "stdout": 456, "var_gauss_grad_x": 456, "var_gauss_grad_i": 456, "33333333333333": 456, "wikipedia": 463, "wiki": 463, "continuous_integr": 463, "eponym": 463, "cad": 463, "javascript": 463, "appl": 463, "predecessor": 463, "ye": 463, "forum": 463, "archaic": 463, "flexibl": 463, "pydata": 463, "cosc": 463, "canterburi": 463, "greg": [463, 470], "ew": 463, "slowli": 463, "3000": 463, "plone": 463, "pocoo": 463, "microsoft": 463, "polyhedr": 466, "surround": 466, "conjunction": 466, "omega_a": 466, "omega_1": 466, "omega_2": 466, "omega_3": 466, "omega_4": 466, "theorem": 466, "specificconvectionterm": 466, "estim": 466, "increasingli": 466, "gamma1": 466, "nicolson": 466, "reinforc": 466, "gamma_2": [466, 467], "gamma2": 466, "a_": 466, "b_p": 466, "rho_p": 466, "f_f": [466, 469], "biolog": 467, "inde": 467, "proven": 467, "variat": 467, "ph": 467, "lambda_i": 467, "react": [467, 470], "divers": 467, "electr": 467, "heart": 467, "tissu": 467, "schr": 467, "dinger": 467, "unknown": 467, "fickian": 467, "gamma_3": 467, "spectral": 467, "chapter": [468, 471, 472, 475], "phd": [468, 470], "patankar": [468, 470], "versteeg": [468, 470], "malalasekera": [468, 470], "fem": 468, "fdm": 468, "analog": 468, "\u00e9": 469, "clet": 469, "p_f": 469, "smear": 469, "rightarrow": 469, "overcom": 469, "inaccuraci": 469, "beckermann": 470, "karma": 470, "1146": 470, "annurev": 470, "matsci": 470, "101901": 470, "155803": 470, "chen": 470, "mdoel": 470, "112001": 470, "132041": 470, "contemporari": 470, "david": 470, "jonathan": 470, "coat": 470, "biomaterialia": 470, "604": 470, "jan": 470, "actbio": 470, "019": 470, "william": 470, "nov": 470, "hangart": 470, "hamadani": 470, "xu": 470, "interdigit": 470, "thin": 470, "film": 470, "heterojunct": 470, "073514": 470, "3561487": 470, "huber": 470, "superconform": 470, "submicron": 470, "016102": 470, "2001": 470, "sethian": 470, "cambridg": 470, "1996": 470, "scott": 470, "chacon": 470, "apress": 470, "guido": 470, "rossum": 470, "tut": 470, "pilgrim": 470, "isbn": 470, "1590593561": 470, "diveintopython": 470, "ref": 470, "alexand": 470, "craig": 470, "materialia": 470, "6035": 470, "6058": 470, "2003": 470, "s1359": 470, "6454": 470, "00388": 470, "swirl": 470, "turbul": 470, "greenwich": 470, "1998": 470, "gala": 470, "eprint": 470, "6371": 470, "franci": 470, "1980": 470, "longman": 470, "technic": 470, "1995": 470, "mattiussi": 470, "309": 470, "1997": 470, "epfl": 470, "ch": 470, "jcp1997": 470, "nterfaci": 470, "1958": 470, "hermodynam": 470, "1121": 470, "1124": 470, "1959": 470, "ucleat": 470, "elder": 470, "thornton": 470, "hoyt": 470, "philosoph": 470, "magagazin": 470, "164": 470, "1080": 470, "14786435": 470, "506427": 470, "quilibrium": 470, "69": 470, "021603": 470, "arxiv": 470, "cond": 470, "mat": 470, "0308173": 470, "inet": 470, "021604": 470, "0308179": 470, "saul": 470, "teukolski": 470, "vetterl": 470, "brian": 470, "flanneri": 470, "1999": 470, "peri": 470, "\u0107": 470, "springer": 470, "blend": 470, "185": 470, "s0021": 470, "9991": 470, "00059": 470, "c302": 470, "c310": 470, "1562598": 470, "mcf": 470, "adden": 470, "7424": 470, "7439": 470, "1992": 470, "microsegreg": 470, "metallurgica": 470, "689": 470, "ward": 470, "inst": 470, "winter2004": 470, "if12": 470, "pg46": 470, "capit": 473, "resid": 473, "oop": 473, "arg2": [473, 474], "unfamiliar": 473, "reorder": 473, "latter": 473, "famili": 473, "descend": 473, "myobjectderivedfrombas": [473, 474], "arg3": 474, "__": 474, "somethingels": 474, "val1": 474, "val2": 474, "wherea": 474}, "objects": {"": [[23, 0, 0, "-", "examples"], [189, 0, 0, "-", "fipy"], [471, 0, 0, "-", "package"], [17, 7, 1, "cmdoption-cache", "--cache"], [22, 7, 1, "cmdoption-home", "--home"], [17, 7, 1, "cmdoption-inline", "--inline"], [17, 7, 1, "cmdoption-lsmlib", "--lsmlib"], [17, 7, 1, "cmdoption-no-cache", "--no-cache"], [17, 7, 1, "cmdoption-no-pysparse", "--no-pysparse"], [22, 7, 1, "cmdoption-prefix", "--prefix"], [17, 7, 1, "cmdoption-pyamg", "--pyamg"], [17, 7, 1, "cmdoption-pyamgx", "--pyamgx"], [17, 7, 1, "cmdoption-pysparse", "--pysparse"], [17, 7, 1, "cmdoption-scipy", "--scipy"], [17, 7, 1, "cmdoption-skfmm", "--skfmm"], [17, 7, 1, "cmdoption-trilinos", "--trilinos"], [22, 8, 1, "-", "DYLD_LIBRARY_PATH"], [17, 8, 1, "-", "FIPY_CACHE"], [17, 8, 1, "-", "FIPY_DISPLAY_MATRIX"], [17, 8, 1, "-", "FIPY_INCLUDE_NUMERIX_ALL"], [17, 8, 1, "-", "FIPY_INLINE"], [17, 8, 1, "-", "FIPY_INLINE_COMMENT"], [17, 8, 1, "-", "FIPY_LOG_CONFIG"], [17, 8, 1, "-", "FIPY_SOLVERS"], [17, 8, 1, "-", "FIPY_VERBOSE_SOLVER"], [17, 8, 1, "-", "FIPY_VIEWER"], [22, 8, 1, "-", "LD_LIBRARY_PATH"], [17, 8, 1, "-", "PETSC_OPTIONS"]], "examples": [[24, 0, 0, "-", "benchmarking"], [30, 0, 0, "-", "cahnHilliard"], [38, 0, 0, "-", "chemotaxis"], [43, 0, 0, "-", "convection"], [70, 0, 0, "-", "diffusion"], [108, 0, 0, "-", "elphf"], [118, 0, 0, "-", "flow"], [121, 0, 0, "-", "levelSet"], [154, 0, 0, "-", "meshing"], [159, 0, 0, "-", "parallel"], [160, 0, 0, "-", "phase"], [177, 0, 0, "-", "reactiveWetting"], [181, 0, 0, "-", "riemann"], [184, 0, 0, "-", "test"], [185, 0, 0, "-", "updating"]], "examples.benchmarking": [[25, 0, 0, "-", "benchmarker"], [26, 0, 0, "-", "size"], [27, 0, 0, "-", "steps"], [28, 0, 0, "-", "utils"], [29, 0, 0, "-", "versions"]], "examples.cahnHilliard": [[31, 0, 0, "-", "mesh2D"], [32, 0, 0, "-", "mesh2DCoupled"], [33, 0, 0, "-", "mesh3D"], [34, 0, 0, "-", "sphere"], [35, 0, 0, "-", "sphereDaemon"], [36, 0, 0, "-", "tanh1D"], [37, 0, 0, "-", "test"]], "examples.chemotaxis": [[39, 0, 0, "-", "input"], [40, 0, 0, "-", "input2D"], [41, 0, 0, "-", "parameters"], [42, 0, 0, "-", "test"]], "examples.convection": [[44, 0, 0, "-", "advection"], [48, 0, 0, "-", "exponential1D"], [53, 0, 0, "-", "exponential1DBack"], [55, 0, 0, "-", "exponential1DSource"], [58, 0, 0, "-", "exponential2D"], [63, 0, 0, "-", "peclet"], [64, 0, 0, "-", "powerLaw1D"], [67, 0, 0, "-", "robin"], [68, 0, 0, "-", "source"], [69, 0, 0, "-", "test"]], "examples.convection.advection": [[45, 0, 0, "-", "explicitUpwind"], [46, 0, 0, "-", "implicitUpwind"], [47, 0, 0, "-", "vanLeerUpwind"]], "examples.convection.exponential1D": [[49, 0, 0, "-", "cylindricalMesh1D"], [50, 0, 0, "-", "cylindricalMesh1DNonUniform"], [51, 0, 0, "-", "mesh1D"], [52, 0, 0, "-", "tri2D"]], "examples.convection.exponential1DBack": [[54, 0, 0, "-", "mesh1D"]], "examples.convection.exponential1DSource": [[56, 0, 0, "-", "mesh1D"], [57, 0, 0, "-", "tri2D"]], "examples.convection.exponential2D": [[59, 0, 0, "-", "cylindricalMesh2D"], [60, 0, 0, "-", "cylindricalMesh2DNonUniform"], [61, 0, 0, "-", "mesh2D"], [62, 0, 0, "-", "tri2D"]], "examples.convection.powerLaw1D": [[65, 0, 0, "-", "mesh1D"], [66, 0, 0, "-", "tri2D"]], "examples.diffusion": [[71, 0, 0, "-", "anisotropy"], [72, 0, 0, "-", "circle"], [73, 0, 0, "-", "circleQuad"], [74, 0, 0, "-", "coupled"], [75, 0, 0, "-", "electrostatics"], [76, 0, 0, "-", "explicit"], [81, 0, 0, "-", "mesh1D"], [82, 0, 0, "-", "mesh20x20"], [83, 0, 0, "-", "mesh20x20Coupled"], [84, 0, 0, "-", "nthOrder"], [88, 0, 0, "-", "steadyState"], [106, 0, 0, "-", "test"], [107, 0, 0, "-", "variable"]], "examples.diffusion.explicit": [[77, 0, 0, "-", "mesh1D"], [78, 0, 0, "-", "mixedelement"], [79, 0, 0, "-", "test"], [80, 0, 0, "-", "tri2D"]], "examples.diffusion.nthOrder": [[85, 0, 0, "-", "input4thOrder1D"], [86, 0, 0, "-", "input4thOrder_line"], [87, 0, 0, "-", "test"]], "examples.diffusion.steadyState": [[89, 0, 0, "-", "mesh1D"], [92, 0, 0, "-", "mesh20x20"], [98, 0, 0, "-", "mesh50x50"], [101, 0, 0, "-", "otherMeshes"], [105, 0, 0, "-", "test"]], "examples.diffusion.steadyState.mesh1D": [[90, 0, 0, "-", "inputPeriodic"], [91, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.mesh20x20": [[93, 0, 0, "-", "gmshinput"], [94, 0, 0, "-", "isotropy"], [95, 0, 0, "-", "modifiedMeshInput"], [96, 0, 0, "-", "orthoerror"], [97, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.mesh50x50": [[99, 0, 0, "-", "input"], [100, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.otherMeshes": [[102, 0, 0, "-", "cubicalProblem"], [103, 0, 0, "-", "grid3Dinput"], [104, 0, 0, "-", "prism"]], "examples.elphf": [[109, 0, 0, "-", "diffusion"], [113, 0, 0, "-", "input"], [114, 0, 0, "-", "phase"], [115, 0, 0, "-", "phaseDiffusion"], [116, 0, 0, "-", "poisson"], [117, 0, 0, "-", "test"]], "examples.elphf.diffusion": [[110, 0, 0, "-", "mesh1D"], [111, 0, 0, "-", "mesh1Ddimensional"], [112, 0, 0, "-", "mesh2D"]], "examples.flow": [[119, 0, 0, "-", "stokesCavity"], [120, 0, 0, "-", "test"]], "examples.levelSet": [[122, 0, 0, "-", "advection"], [127, 0, 0, "-", "distanceFunction"], [133, 0, 0, "-", "electroChem"], [148, 0, 0, "-", "surfactant"], [153, 0, 0, "-", "test"]], "examples.levelSet.advection": [[123, 0, 0, "-", "circle"], [124, 0, 0, "-", "mesh1D"], [125, 0, 0, "-", "test"], [126, 0, 0, "-", "trench"]], "examples.levelSet.distanceFunction": [[128, 0, 0, "-", "circle"], [129, 0, 0, "-", "interior"], [130, 0, 0, "-", "mesh1D"], [131, 0, 0, "-", "square"], [132, 0, 0, "-", "test"]], "examples.levelSet.electroChem": [[134, 0, 0, "-", "adsorbingSurfactantEquation"], [135, 0, 0, "-", "gapFillDistanceVariable"], [136, 0, 0, "-", "gapFillMesh"], [137, 0, 0, "-", "gold"], [138, 0, 0, "-", "howToWriteAScript"], [139, 0, 0, "-", "leveler"], [140, 0, 0, "-", "lines"], [141, 0, 0, "-", "matplotlibSurfactantViewer"], [142, 0, 0, "-", "mayaviSurfactantViewer"], [143, 0, 0, "-", "metalIonDiffusionEquation"], [144, 0, 0, "-", "simpleTrenchSystem"], [145, 0, 0, "-", "surfactantBulkDiffusionEquation"], [146, 0, 0, "-", "test"], [147, 0, 0, "-", "trenchMesh"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer": [[141, 1, 1, "", "MatplotlibSurfactantViewer"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer": [[141, 2, 1, "", "axes"], [141, 2, 1, "", "cmap"], [141, 2, 1, "", "colorbar"], [141, 2, 1, "", "fig"], [141, 2, 1, "", "id"], [141, 2, 1, "", "log"], [141, 3, 1, "", "plot"], [141, 3, 1, "", "plotMesh"], [141, 3, 1, "", "setLimits"], [141, 2, 1, "", "title"], [141, 2, 1, "", "vars"]], "examples.levelSet.electroChem.mayaviSurfactantViewer": [[142, 1, 1, "", "MayaviSurfactantViewer"]], "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer": [[142, 3, 1, "", "plotMesh"], [142, 3, 1, "", "setLimits"], [142, 2, 1, "", "title"], [142, 2, 1, "", "vars"]], "examples.levelSet.surfactant": [[149, 0, 0, "-", "circle"], [150, 0, 0, "-", "expandingCircle"], [151, 0, 0, "-", "square"], [152, 0, 0, "-", "test"]], "examples.meshing": [[155, 0, 0, "-", "gmshRefinement"], [156, 0, 0, "-", "inputGrid2D"], [157, 0, 0, "-", "sphere"], [158, 0, 0, "-", "test"]], "examples.phase": [[161, 0, 0, "-", "anisotropy"], [162, 0, 0, "-", "anisotropyOLD"], [163, 0, 0, "-", "binary"], [164, 0, 0, "-", "binaryCoupled"], [165, 0, 0, "-", "impingement"], [169, 0, 0, "-", "missOrientation"], [171, 0, 0, "-", "polyxtal"], [172, 0, 0, "-", "polyxtalCoupled"], [173, 0, 0, "-", "quaternary"], [174, 0, 0, "-", "simple"], [175, 0, 0, "-", "symmetry"], [176, 0, 0, "-", "test"]], "examples.phase.impingement": [[166, 0, 0, "-", "mesh20x20"], [167, 0, 0, "-", "mesh40x1"], [168, 0, 0, "-", "test"]], "examples.phase.missOrientation": [[170, 0, 0, "-", "test"]], "examples.reactiveWetting": [[178, 0, 0, "-", "liquidVapor1D"], [179, 0, 0, "-", "liquidVapor2D"], [180, 0, 0, "-", "test"]], "examples.riemann": [[182, 0, 0, "-", "acoustics"], [183, 0, 0, "-", "test"]], "examples.updating": [[186, 0, 0, "-", "update0_1to1_0"], [187, 0, 0, "-", "update1_0to2_0"], [188, 0, 0, "-", "update2_0to3_0"]], "fipy": [[190, 0, 0, "-", "boundaryConditions"], [189, 4, 1, "", "doctest_raw_input"], [197, 0, 0, "-", "matrices"], [205, 0, 0, "-", "meshes"], [251, 0, 0, "-", "solvers"], [333, 0, 0, "-", "steppers"], [337, 0, 0, "-", "terms"], [189, 4, 1, "", "test"], [370, 0, 0, "-", "testFiPy"], [371, 0, 0, "-", "tests"], [376, 0, 0, "-", "tools"], [396, 0, 0, "-", "variables"], [436, 0, 0, "-", "viewers"]], "fipy.boundaryConditions": [[191, 0, 0, "-", "boundaryCondition"], [192, 0, 0, "-", "constraint"], [193, 0, 0, "-", "fixedFlux"], [194, 0, 0, "-", "fixedValue"], [195, 0, 0, "-", "nthOrderBoundaryCondition"], [196, 0, 0, "-", "test"]], "fipy.boundaryConditions.boundaryCondition": [[191, 1, 1, "", "BoundaryCondition"]], "fipy.boundaryConditions.boundaryCondition.BoundaryCondition": [[191, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.constraint": [[192, 1, 1, "", "Constraint"]], "fipy.boundaryConditions.constraint.Constraint": [[192, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.fixedFlux": [[193, 1, 1, "", "FixedFlux"]], "fipy.boundaryConditions.fixedFlux.FixedFlux": [[193, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.fixedValue": [[194, 1, 1, "", "FixedValue"]], "fipy.boundaryConditions.fixedValue.FixedValue": [[194, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.nthOrderBoundaryCondition": [[195, 1, 1, "", "NthOrderBoundaryCondition"]], "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition": [[195, 3, 1, "", "__repr__"]], "fipy.matrices": [[198, 0, 0, "-", "offsetSparseMatrix"], [199, 0, 0, "-", "petscMatrix"], [200, 0, 0, "-", "pysparseMatrix"], [201, 0, 0, "-", "scipyMatrix"], [202, 0, 0, "-", "sparseMatrix"], [203, 0, 0, "-", "test"], [204, 0, 0, "-", "trilinosMatrix"]], "fipy.matrices.offsetSparseMatrix": [[198, 4, 1, "", "OffsetSparseMatrix"]], "fipy.meshes": [[206, 0, 0, "-", "abstractMesh"], [207, 0, 0, "-", "builders"], [214, 0, 0, "-", "cylindricalGrid1D"], [215, 0, 0, "-", "cylindricalGrid2D"], [216, 0, 0, "-", "cylindricalNonUniformGrid1D"], [217, 0, 0, "-", "cylindricalNonUniformGrid2D"], [218, 0, 0, "-", "cylindricalUniformGrid1D"], [219, 0, 0, "-", "cylindricalUniformGrid2D"], [220, 0, 0, "-", "factoryMeshes"], [221, 0, 0, "-", "gmshMesh"], [222, 0, 0, "-", "grid1D"], [223, 0, 0, "-", "grid2D"], [224, 0, 0, "-", "grid3D"], [225, 0, 0, "-", "mesh"], [226, 0, 0, "-", "mesh1D"], [227, 0, 0, "-", "mesh2D"], [228, 0, 0, "-", "nonUniformGrid1D"], [229, 0, 0, "-", "nonUniformGrid2D"], [230, 0, 0, "-", "nonUniformGrid3D"], [231, 0, 0, "-", "periodicGrid1D"], [232, 0, 0, "-", "periodicGrid2D"], [233, 0, 0, "-", "periodicGrid3D"], [234, 0, 0, "-", "representations"], [238, 0, 0, "-", "skewedGrid2D"], [239, 0, 0, "-", "sphericalNonUniformGrid1D"], [240, 0, 0, "-", "sphericalUniformGrid1D"], [241, 0, 0, "-", "test"], [242, 0, 0, "-", "topologies"], [246, 0, 0, "-", "tri2D"], [247, 0, 0, "-", "uniformGrid"], [248, 0, 0, "-", "uniformGrid1D"], [249, 0, 0, "-", "uniformGrid2D"], [250, 0, 0, "-", "uniformGrid3D"]], "fipy.meshes.abstractMesh": [[206, 1, 1, "", "AbstractMesh"], [206, 5, 1, "", "MeshAdditionError"]], "fipy.meshes.abstractMesh.AbstractMesh": [[206, 2, 1, "", "VTKCellDataSet"], [206, 2, 1, "", "VTKFaceDataSet"], [206, 3, 1, "", "__add__"], [206, 3, 1, "", "__div__"], [206, 3, 1, "", "__getstate__"], [206, 3, 1, "", "__radd__"], [206, 3, 1, "", "__repr__"], [206, 3, 1, "", "__sub__"], [206, 3, 1, "", "__truediv__"], [206, 2, 1, "", "aspect2D"], [206, 2, 1, "", "cellCenters"], [206, 2, 1, "", "cellFaceIDs"], [206, 2, 1, "", "facesBack"], [206, 2, 1, "", "facesBottom"], [206, 2, 1, "", "facesDown"], [206, 2, 1, "", "facesFront"], [206, 2, 1, "", "facesLeft"], [206, 2, 1, "", "facesRight"], [206, 2, 1, "", "facesTop"], [206, 2, 1, "", "facesUp"], [206, 2, 1, "", "x"], [206, 2, 1, "", "y"], [206, 2, 1, "", "z"]], "fipy.meshes.abstractMesh.MeshAdditionError": [[206, 6, 1, "", "__cause__"], [206, 6, 1, "", "__context__"], [206, 3, 1, "", "__delattr__"], [206, 3, 1, "", "__getattribute__"], [206, 3, 1, "", "__reduce__"], [206, 3, 1, "", "__repr__"], [206, 3, 1, "", "__setattr__"], [206, 3, 1, "", "__str__"], [206, 3, 1, "", "add_note"], [206, 3, 1, "", "with_traceback"]], "fipy.meshes.builders": [[208, 0, 0, "-", "abstractGridBuilder"], [209, 0, 0, "-", "grid1DBuilder"], [210, 0, 0, "-", "grid2DBuilder"], [211, 0, 0, "-", "grid3DBuilder"], [212, 0, 0, "-", "periodicGrid1DBuilder"], [213, 0, 0, "-", "utilityClasses"]], "fipy.meshes.cylindricalNonUniformGrid1D": [[216, 1, 1, "", "CylindricalNonUniformGrid1D"]], "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D": [[216, 2, 1, "", "VTKCellDataSet"], [216, 2, 1, "", "VTKFaceDataSet"], [216, 3, 1, "", "__add__"], [216, 3, 1, "", "__div__"], [216, 3, 1, "", "__getstate__"], [216, 3, 1, "", "__mul__"], [216, 3, 1, "", "__radd__"], [216, 3, 1, "", "__repr__"], [216, 3, 1, "", "__rmul__"], [216, 3, 1, "", "__sub__"], [216, 3, 1, "", "__truediv__"], [216, 2, 1, "", "aspect2D"], [216, 2, 1, "", "cellCenters"], [216, 2, 1, "", "cellFaceIDs"], [216, 2, 1, "", "facesBack"], [216, 2, 1, "", "facesBottom"], [216, 2, 1, "", "facesDown"], [216, 2, 1, "", "facesFront"], [216, 2, 1, "", "facesLeft"], [216, 2, 1, "", "facesRight"], [216, 2, 1, "", "facesTop"], [216, 2, 1, "", "facesUp"], [216, 2, 1, "", "x"], [216, 2, 1, "", "y"], [216, 2, 1, "", "z"]], "fipy.meshes.cylindricalNonUniformGrid2D": [[217, 1, 1, "", "CylindricalNonUniformGrid2D"]], "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D": [[217, 2, 1, "", "VTKCellDataSet"], [217, 2, 1, "", "VTKFaceDataSet"], [217, 3, 1, "", "__add__"], [217, 3, 1, "", "__div__"], [217, 3, 1, "", "__getstate__"], [217, 3, 1, "", "__mul__"], [217, 3, 1, "", "__radd__"], [217, 3, 1, "", "__repr__"], [217, 3, 1, "", "__rmul__"], [217, 3, 1, "", "__sub__"], [217, 3, 1, "", "__truediv__"], [217, 2, 1, "", "aspect2D"], [217, 2, 1, "", "cellCenters"], [217, 2, 1, "", "cellFaceIDs"], [217, 3, 1, "", "extrude"], [217, 2, 1, "", "facesBack"], [217, 2, 1, "", "facesBottom"], [217, 2, 1, "", "facesDown"], [217, 2, 1, "", "facesFront"], [217, 2, 1, "", "facesLeft"], [217, 2, 1, "", "facesRight"], [217, 2, 1, "", "facesTop"], [217, 2, 1, "", "facesUp"], [217, 2, 1, "", "x"], [217, 2, 1, "", "y"], [217, 2, 1, "", "z"]], "fipy.meshes.cylindricalUniformGrid1D": [[218, 1, 1, "", "CylindricalUniformGrid1D"]], "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D": [[218, 2, 1, "", "VTKCellDataSet"], [218, 2, 1, "", "VTKFaceDataSet"], [218, 3, 1, "", "__add__"], [218, 3, 1, "", "__div__"], [218, 3, 1, "", "__getstate__"], [218, 3, 1, "", "__radd__"], [218, 3, 1, "", "__repr__"], [218, 3, 1, "", "__sub__"], [218, 3, 1, "", "__truediv__"], [218, 2, 1, "", "aspect2D"], [218, 2, 1, "", "cellCenters"], [218, 2, 1, "", "cellFaceIDs"], [218, 2, 1, "", "exteriorFaces"], [218, 2, 1, "", "facesBack"], [218, 2, 1, "", "facesBottom"], [218, 2, 1, "", "facesDown"], [218, 2, 1, "", "facesFront"], [218, 2, 1, "", "facesLeft"], [218, 2, 1, "", "facesRight"], [218, 2, 1, "", "facesTop"], [218, 2, 1, "", "facesUp"], [218, 2, 1, "", "x"], [218, 2, 1, "", "y"], [218, 2, 1, "", "z"]], "fipy.meshes.cylindricalUniformGrid2D": [[219, 1, 1, "", "CylindricalUniformGrid2D"]], "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D": [[219, 2, 1, "", "VTKCellDataSet"], [219, 2, 1, "", "VTKFaceDataSet"], [219, 3, 1, "", "__add__"], [219, 3, 1, "", "__div__"], [219, 3, 1, "", "__getstate__"], [219, 3, 1, "", "__radd__"], [219, 3, 1, "", "__repr__"], [219, 3, 1, "", "__sub__"], [219, 3, 1, "", "__truediv__"], [219, 2, 1, "", "aspect2D"], [219, 2, 1, "", "cellCenters"], [219, 2, 1, "", "cellFaceIDs"], [219, 2, 1, "", "facesBack"], [219, 2, 1, "", "facesBottom"], [219, 2, 1, "", "facesDown"], [219, 2, 1, "", "facesFront"], [219, 2, 1, "", "facesLeft"], [219, 2, 1, "", "facesRight"], [219, 2, 1, "", "facesTop"], [219, 2, 1, "", "facesUp"], [219, 2, 1, "", "x"], [219, 2, 1, "", "y"], [219, 2, 1, "", "z"]], "fipy.meshes.factoryMeshes": [[220, 4, 1, "", "CylindricalGrid1D"], [220, 4, 1, "", "CylindricalGrid2D"], [220, 4, 1, "", "Grid1D"], [220, 4, 1, "", "Grid2D"], [220, 4, 1, "", "Grid3D"], [220, 4, 1, "", "SphericalGrid1D"]], "fipy.meshes.gmshMesh": [[221, 1, 1, "", "Gmsh2D"], [221, 1, 1, "", "Gmsh2DIn3DSpace"], [221, 1, 1, "", "Gmsh3D"], [221, 5, 1, "", "GmshException"], [221, 1, 1, "", "GmshFile"], [221, 1, 1, "", "GmshGrid2D"], [221, 1, 1, "", "GmshGrid3D"], [221, 1, 1, "", "MSHFile"], [221, 5, 1, "", "MeshExportError"], [221, 1, 1, "", "POSFile"], [221, 4, 1, "", "gmshVersion"], [221, 4, 1, "", "openMSHFile"], [221, 4, 1, "", "openPOSFile"]], "fipy.meshes.gmshMesh.Gmsh2D": [[221, 2, 1, "", "VTKCellDataSet"], [221, 2, 1, "", "VTKFaceDataSet"], [221, 3, 1, "", "__add__"], [221, 3, 1, "", "__div__"], [221, 3, 1, "", "__getstate__"], [221, 3, 1, "", "__mul__"], [221, 3, 1, "", "__radd__"], [221, 3, 1, "", "__repr__"], [221, 3, 1, "", "__rmul__"], [221, 3, 1, "", "__sub__"], [221, 3, 1, "", "__truediv__"], [221, 2, 1, "", "aspect2D"], [221, 2, 1, "", "cellCenters"], [221, 2, 1, "", "cellFaceIDs"], [221, 3, 1, "", "extrude"], [221, 2, 1, "", "facesBack"], [221, 2, 1, "", "facesBottom"], [221, 2, 1, "", "facesDown"], [221, 2, 1, "", "facesFront"], [221, 2, 1, "", "facesLeft"], [221, 2, 1, "", "facesRight"], [221, 2, 1, "", "facesTop"], [221, 2, 1, "", "facesUp"], [221, 2, 1, "", "x"], [221, 2, 1, "", "y"], [221, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace": [[221, 2, 1, "", "VTKCellDataSet"], [221, 2, 1, "", "VTKFaceDataSet"], [221, 3, 1, "", "__add__"], [221, 3, 1, "", "__div__"], [221, 3, 1, "", "__getstate__"], [221, 3, 1, "", "__mul__"], [221, 3, 1, "", "__radd__"], [221, 3, 1, "", "__repr__"], [221, 3, 1, "", "__rmul__"], [221, 3, 1, "", "__sub__"], [221, 3, 1, "", "__truediv__"], [221, 2, 1, "", "aspect2D"], [221, 2, 1, "", "cellCenters"], [221, 2, 1, "", "cellFaceIDs"], [221, 3, 1, "", "extrude"], [221, 2, 1, "", "facesBack"], [221, 2, 1, "", "facesBottom"], [221, 2, 1, "", "facesDown"], [221, 2, 1, "", "facesFront"], [221, 2, 1, "", "facesLeft"], [221, 2, 1, "", "facesRight"], [221, 2, 1, "", "facesTop"], [221, 2, 1, "", "facesUp"], [221, 2, 1, "", "x"], [221, 2, 1, "", "y"], [221, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.Gmsh3D": [[221, 2, 1, "", "VTKCellDataSet"], [221, 2, 1, "", "VTKFaceDataSet"], [221, 3, 1, "", "__add__"], [221, 3, 1, "", "__div__"], [221, 3, 1, "", "__getstate__"], [221, 3, 1, "", "__mul__"], [221, 3, 1, "", "__radd__"], [221, 3, 1, "", "__repr__"], [221, 3, 1, "", "__rmul__"], [221, 3, 1, "", "__sub__"], [221, 3, 1, "", "__truediv__"], [221, 2, 1, "", "aspect2D"], [221, 2, 1, "", "cellCenters"], [221, 2, 1, "", "cellFaceIDs"], [221, 2, 1, "", "facesBack"], [221, 2, 1, "", "facesBottom"], [221, 2, 1, "", "facesDown"], [221, 2, 1, "", "facesFront"], [221, 2, 1, "", "facesLeft"], [221, 2, 1, "", "facesRight"], [221, 2, 1, "", "facesTop"], [221, 2, 1, "", "facesUp"], [221, 2, 1, "", "x"], [221, 2, 1, "", "y"], [221, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.GmshException": [[221, 6, 1, "", "__cause__"], [221, 6, 1, "", "__context__"], [221, 3, 1, "", "__delattr__"], [221, 3, 1, "", "__getattribute__"], [221, 3, 1, "", "__reduce__"], [221, 3, 1, "", "__repr__"], [221, 3, 1, "", "__setattr__"], [221, 3, 1, "", "__str__"], [221, 3, 1, "", "add_note"], [221, 3, 1, "", "with_traceback"]], "fipy.meshes.gmshMesh.GmshGrid2D": [[221, 2, 1, "", "VTKCellDataSet"], [221, 2, 1, "", "VTKFaceDataSet"], [221, 3, 1, "", "__add__"], [221, 3, 1, "", "__div__"], [221, 3, 1, "", "__getstate__"], [221, 3, 1, "", "__mul__"], [221, 3, 1, "", "__radd__"], [221, 3, 1, "", "__repr__"], [221, 3, 1, "", "__rmul__"], [221, 3, 1, "", "__sub__"], [221, 3, 1, "", "__truediv__"], [221, 2, 1, "", "aspect2D"], [221, 2, 1, "", "cellCenters"], [221, 2, 1, "", "cellFaceIDs"], [221, 3, 1, "", "extrude"], [221, 2, 1, "", "facesBack"], [221, 2, 1, "", "facesBottom"], [221, 2, 1, "", "facesDown"], [221, 2, 1, "", "facesFront"], [221, 2, 1, "", "facesLeft"], [221, 2, 1, "", "facesRight"], [221, 2, 1, "", "facesTop"], [221, 2, 1, "", "facesUp"], [221, 2, 1, "", "x"], [221, 2, 1, "", "y"], [221, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.GmshGrid3D": [[221, 2, 1, "", "VTKCellDataSet"], [221, 2, 1, "", "VTKFaceDataSet"], [221, 3, 1, "", "__add__"], [221, 3, 1, "", "__div__"], [221, 3, 1, "", "__getstate__"], [221, 3, 1, "", "__mul__"], [221, 3, 1, "", "__radd__"], [221, 3, 1, "", "__repr__"], [221, 3, 1, "", "__rmul__"], [221, 3, 1, "", "__sub__"], [221, 3, 1, "", "__truediv__"], [221, 2, 1, "", "aspect2D"], [221, 2, 1, "", "cellCenters"], [221, 2, 1, "", "cellFaceIDs"], [221, 2, 1, "", "facesBack"], [221, 2, 1, "", "facesBottom"], [221, 2, 1, "", "facesDown"], [221, 2, 1, "", "facesFront"], [221, 2, 1, "", "facesLeft"], [221, 2, 1, "", "facesRight"], [221, 2, 1, "", "facesTop"], [221, 2, 1, "", "facesUp"], [221, 2, 1, "", "x"], [221, 2, 1, "", "y"], [221, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.MSHFile": [[221, 3, 1, "", "makeMapVariables"], [221, 3, 1, "", "read"]], "fipy.meshes.gmshMesh.MeshExportError": [[221, 6, 1, "", "__cause__"], [221, 6, 1, "", "__context__"], [221, 3, 1, "", "__delattr__"], [221, 3, 1, "", "__getattribute__"], [221, 3, 1, "", "__reduce__"], [221, 3, 1, "", "__repr__"], [221, 3, 1, "", "__setattr__"], [221, 3, 1, "", "__str__"], [221, 3, 1, "", "add_note"], [221, 3, 1, "", "with_traceback"]], "fipy.meshes.mesh": [[225, 1, 1, "", "Mesh"], [225, 5, 1, "", "MeshAdditionError"]], "fipy.meshes.mesh.Mesh": [[225, 2, 1, "", "VTKCellDataSet"], [225, 2, 1, "", "VTKFaceDataSet"], [225, 3, 1, "", "__add__"], [225, 3, 1, "", "__div__"], [225, 3, 1, "", "__getstate__"], [225, 3, 1, "", "__mul__"], [225, 3, 1, "", "__radd__"], [225, 3, 1, "", "__repr__"], [225, 3, 1, "", "__rmul__"], [225, 3, 1, "", "__sub__"], [225, 3, 1, "", "__truediv__"], [225, 2, 1, "", "aspect2D"], [225, 2, 1, "", "cellCenters"], [225, 2, 1, "", "cellFaceIDs"], [225, 2, 1, "", "facesBack"], [225, 2, 1, "", "facesBottom"], [225, 2, 1, "", "facesDown"], [225, 2, 1, "", "facesFront"], [225, 2, 1, "", "facesLeft"], [225, 2, 1, "", "facesRight"], [225, 2, 1, "", "facesTop"], [225, 2, 1, "", "facesUp"], [225, 2, 1, "", "x"], [225, 2, 1, "", "y"], [225, 2, 1, "", "z"]], "fipy.meshes.mesh.MeshAdditionError": [[225, 6, 1, "", "__cause__"], [225, 6, 1, "", "__context__"], [225, 3, 1, "", "__delattr__"], [225, 3, 1, "", "__getattribute__"], [225, 3, 1, "", "__reduce__"], [225, 3, 1, "", "__repr__"], [225, 3, 1, "", "__setattr__"], [225, 3, 1, "", "__str__"], [225, 3, 1, "", "add_note"], [225, 3, 1, "", "with_traceback"]], "fipy.meshes.mesh1D": [[226, 1, 1, "", "Mesh1D"]], "fipy.meshes.mesh1D.Mesh1D": [[226, 2, 1, "", "VTKCellDataSet"], [226, 2, 1, "", "VTKFaceDataSet"], [226, 3, 1, "", "__add__"], [226, 3, 1, "", "__div__"], [226, 3, 1, "", "__getstate__"], [226, 3, 1, "", "__mul__"], [226, 3, 1, "", "__radd__"], [226, 3, 1, "", "__repr__"], [226, 3, 1, "", "__rmul__"], [226, 3, 1, "", "__sub__"], [226, 3, 1, "", "__truediv__"], [226, 2, 1, "", "aspect2D"], [226, 2, 1, "", "cellCenters"], [226, 2, 1, "", "cellFaceIDs"], [226, 2, 1, "", "facesBack"], [226, 2, 1, "", "facesBottom"], [226, 2, 1, "", "facesDown"], [226, 2, 1, "", "facesFront"], [226, 2, 1, "", "facesLeft"], [226, 2, 1, "", "facesRight"], [226, 2, 1, "", "facesTop"], [226, 2, 1, "", "facesUp"], [226, 2, 1, "", "x"], [226, 2, 1, "", "y"], [226, 2, 1, "", "z"]], "fipy.meshes.mesh2D": [[227, 1, 1, "", "Mesh2D"]], "fipy.meshes.mesh2D.Mesh2D": [[227, 2, 1, "", "VTKCellDataSet"], [227, 2, 1, "", "VTKFaceDataSet"], [227, 3, 1, "", "__add__"], [227, 3, 1, "", "__div__"], [227, 3, 1, "", "__getstate__"], [227, 3, 1, "", "__mul__"], [227, 3, 1, "", "__radd__"], [227, 3, 1, "", "__repr__"], [227, 3, 1, "", "__rmul__"], [227, 3, 1, "", "__sub__"], [227, 3, 1, "", "__truediv__"], [227, 2, 1, "", "aspect2D"], [227, 2, 1, "", "cellCenters"], [227, 2, 1, "", "cellFaceIDs"], [227, 3, 1, "", "extrude"], [227, 2, 1, "", "facesBack"], [227, 2, 1, "", "facesBottom"], [227, 2, 1, "", "facesDown"], [227, 2, 1, "", "facesFront"], [227, 2, 1, "", "facesLeft"], [227, 2, 1, "", "facesRight"], [227, 2, 1, "", "facesTop"], [227, 2, 1, "", "facesUp"], [227, 2, 1, "", "x"], [227, 2, 1, "", "y"], [227, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid1D": [[228, 1, 1, "", "NonUniformGrid1D"]], "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D": [[228, 2, 1, "", "VTKCellDataSet"], [228, 2, 1, "", "VTKFaceDataSet"], [228, 3, 1, "", "__add__"], [228, 3, 1, "", "__div__"], [228, 3, 1, "", "__getstate__"], [228, 3, 1, "", "__mul__"], [228, 3, 1, "", "__radd__"], [228, 3, 1, "", "__repr__"], [228, 3, 1, "", "__rmul__"], [228, 3, 1, "", "__sub__"], [228, 3, 1, "", "__truediv__"], [228, 2, 1, "", "aspect2D"], [228, 2, 1, "", "cellCenters"], [228, 2, 1, "", "cellFaceIDs"], [228, 2, 1, "", "facesBack"], [228, 2, 1, "", "facesBottom"], [228, 2, 1, "", "facesDown"], [228, 2, 1, "", "facesFront"], [228, 2, 1, "", "facesLeft"], [228, 2, 1, "", "facesRight"], [228, 2, 1, "", "facesTop"], [228, 2, 1, "", "facesUp"], [228, 2, 1, "", "x"], [228, 2, 1, "", "y"], [228, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid2D": [[229, 1, 1, "", "NonUniformGrid2D"]], "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D": [[229, 2, 1, "", "VTKCellDataSet"], [229, 2, 1, "", "VTKFaceDataSet"], [229, 3, 1, "", "__add__"], [229, 3, 1, "", "__div__"], [229, 3, 1, "", "__getstate__"], [229, 3, 1, "", "__mul__"], [229, 3, 1, "", "__radd__"], [229, 3, 1, "", "__repr__"], [229, 3, 1, "", "__rmul__"], [229, 3, 1, "", "__sub__"], [229, 3, 1, "", "__truediv__"], [229, 2, 1, "", "aspect2D"], [229, 2, 1, "", "cellCenters"], [229, 2, 1, "", "cellFaceIDs"], [229, 3, 1, "", "extrude"], [229, 2, 1, "", "facesBack"], [229, 2, 1, "", "facesBottom"], [229, 2, 1, "", "facesDown"], [229, 2, 1, "", "facesFront"], [229, 2, 1, "", "facesLeft"], [229, 2, 1, "", "facesRight"], [229, 2, 1, "", "facesTop"], [229, 2, 1, "", "facesUp"], [229, 2, 1, "", "x"], [229, 2, 1, "", "y"], [229, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid3D": [[230, 1, 1, "", "NonUniformGrid3D"]], "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D": [[230, 2, 1, "", "VTKCellDataSet"], [230, 2, 1, "", "VTKFaceDataSet"], [230, 3, 1, "", "__add__"], [230, 3, 1, "", "__div__"], [230, 3, 1, "", "__getstate__"], [230, 3, 1, "", "__mul__"], [230, 3, 1, "", "__radd__"], [230, 3, 1, "", "__repr__"], [230, 3, 1, "", "__rmul__"], [230, 3, 1, "", "__sub__"], [230, 3, 1, "", "__truediv__"], [230, 2, 1, "", "aspect2D"], [230, 2, 1, "", "cellCenters"], [230, 2, 1, "", "cellFaceIDs"], [230, 2, 1, "", "facesBack"], [230, 2, 1, "", "facesBottom"], [230, 2, 1, "", "facesDown"], [230, 2, 1, "", "facesFront"], [230, 2, 1, "", "facesLeft"], [230, 2, 1, "", "facesRight"], [230, 2, 1, "", "facesTop"], [230, 2, 1, "", "facesUp"], [230, 2, 1, "", "x"], [230, 2, 1, "", "y"], [230, 2, 1, "", "z"]], "fipy.meshes.periodicGrid1D": [[231, 1, 1, "", "PeriodicGrid1D"]], "fipy.meshes.periodicGrid1D.PeriodicGrid1D": [[231, 2, 1, "", "VTKCellDataSet"], [231, 2, 1, "", "VTKFaceDataSet"], [231, 3, 1, "", "__add__"], [231, 3, 1, "", "__div__"], [231, 3, 1, "", "__getstate__"], [231, 3, 1, "", "__mul__"], [231, 3, 1, "", "__radd__"], [231, 3, 1, "", "__repr__"], [231, 3, 1, "", "__rmul__"], [231, 3, 1, "", "__sub__"], [231, 3, 1, "", "__truediv__"], [231, 2, 1, "", "aspect2D"], [231, 2, 1, "", "cellCenters"], [231, 2, 1, "", "cellFaceIDs"], [231, 2, 1, "", "facesBack"], [231, 2, 1, "", "facesBottom"], [231, 2, 1, "", "facesDown"], [231, 2, 1, "", "facesFront"], [231, 2, 1, "", "facesLeft"], [231, 2, 1, "", "facesRight"], [231, 2, 1, "", "facesTop"], [231, 2, 1, "", "facesUp"], [231, 2, 1, "", "x"], [231, 2, 1, "", "y"], [231, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D": [[232, 1, 1, "", "PeriodicGrid2D"], [232, 1, 1, "", "PeriodicGrid2DLeftRight"], [232, 1, 1, "", "PeriodicGrid2DTopBottom"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2D": [[232, 2, 1, "", "VTKCellDataSet"], [232, 2, 1, "", "VTKFaceDataSet"], [232, 3, 1, "", "__add__"], [232, 3, 1, "", "__div__"], [232, 3, 1, "", "__getstate__"], [232, 3, 1, "", "__mul__"], [232, 3, 1, "", "__radd__"], [232, 3, 1, "", "__repr__"], [232, 3, 1, "", "__rmul__"], [232, 3, 1, "", "__sub__"], [232, 3, 1, "", "__truediv__"], [232, 2, 1, "", "aspect2D"], [232, 2, 1, "", "cellCenters"], [232, 2, 1, "", "cellFaceIDs"], [232, 3, 1, "", "extrude"], [232, 2, 1, "", "facesBack"], [232, 2, 1, "", "facesBottom"], [232, 2, 1, "", "facesDown"], [232, 2, 1, "", "facesFront"], [232, 2, 1, "", "facesLeft"], [232, 2, 1, "", "facesRight"], [232, 2, 1, "", "facesTop"], [232, 2, 1, "", "facesUp"], [232, 2, 1, "", "x"], [232, 2, 1, "", "y"], [232, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight": [[232, 2, 1, "", "VTKCellDataSet"], [232, 2, 1, "", "VTKFaceDataSet"], [232, 3, 1, "", "__add__"], [232, 3, 1, "", "__div__"], [232, 3, 1, "", "__getstate__"], [232, 3, 1, "", "__mul__"], [232, 3, 1, "", "__radd__"], [232, 3, 1, "", "__repr__"], [232, 3, 1, "", "__rmul__"], [232, 3, 1, "", "__sub__"], [232, 3, 1, "", "__truediv__"], [232, 2, 1, "", "aspect2D"], [232, 2, 1, "", "cellCenters"], [232, 2, 1, "", "cellFaceIDs"], [232, 3, 1, "", "extrude"], [232, 2, 1, "", "facesBack"], [232, 2, 1, "", "facesBottom"], [232, 2, 1, "", "facesDown"], [232, 2, 1, "", "facesFront"], [232, 2, 1, "", "facesLeft"], [232, 2, 1, "", "facesRight"], [232, 2, 1, "", "facesTop"], [232, 2, 1, "", "facesUp"], [232, 2, 1, "", "x"], [232, 2, 1, "", "y"], [232, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom": [[232, 2, 1, "", "VTKCellDataSet"], [232, 2, 1, "", "VTKFaceDataSet"], [232, 3, 1, "", "__add__"], [232, 3, 1, "", "__div__"], [232, 3, 1, "", "__getstate__"], [232, 3, 1, "", "__mul__"], [232, 3, 1, "", "__radd__"], [232, 3, 1, "", "__repr__"], [232, 3, 1, "", "__rmul__"], [232, 3, 1, "", "__sub__"], [232, 3, 1, "", "__truediv__"], [232, 2, 1, "", "aspect2D"], [232, 2, 1, "", "cellCenters"], [232, 2, 1, "", "cellFaceIDs"], [232, 3, 1, "", "extrude"], [232, 2, 1, "", "facesBack"], [232, 2, 1, "", "facesBottom"], [232, 2, 1, "", "facesDown"], [232, 2, 1, "", "facesFront"], [232, 2, 1, "", "facesLeft"], [232, 2, 1, "", "facesRight"], [232, 2, 1, "", "facesTop"], [232, 2, 1, "", "facesUp"], [232, 2, 1, "", "x"], [232, 2, 1, "", "y"], [232, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D": [[233, 1, 1, "", "PeriodicGrid3D"], [233, 1, 1, "", "PeriodicGrid3DFrontBack"], [233, 1, 1, "", "PeriodicGrid3DLeftRight"], [233, 1, 1, "", "PeriodicGrid3DLeftRightFrontBack"], [233, 1, 1, "", "PeriodicGrid3DLeftRightTopBottom"], [233, 1, 1, "", "PeriodicGrid3DTopBottom"], [233, 1, 1, "", "PeriodicGrid3DTopBottomFrontBack"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3D": [[233, 2, 1, "", "VTKCellDataSet"], [233, 2, 1, "", "VTKFaceDataSet"], [233, 3, 1, "", "__add__"], [233, 3, 1, "", "__div__"], [233, 3, 1, "", "__getstate__"], [233, 3, 1, "", "__mul__"], [233, 3, 1, "", "__radd__"], [233, 3, 1, "", "__repr__"], [233, 3, 1, "", "__rmul__"], [233, 3, 1, "", "__sub__"], [233, 3, 1, "", "__truediv__"], [233, 2, 1, "", "aspect2D"], [233, 2, 1, "", "cellCenters"], [233, 2, 1, "", "cellFaceIDs"], [233, 2, 1, "", "facesBack"], [233, 2, 1, "", "facesBottom"], [233, 2, 1, "", "facesDown"], [233, 2, 1, "", "facesFront"], [233, 2, 1, "", "facesLeft"], [233, 2, 1, "", "facesRight"], [233, 2, 1, "", "facesTop"], [233, 2, 1, "", "facesUp"], [233, 2, 1, "", "x"], [233, 2, 1, "", "y"], [233, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack": [[233, 2, 1, "", "VTKCellDataSet"], [233, 2, 1, "", "VTKFaceDataSet"], [233, 3, 1, "", "__add__"], [233, 3, 1, "", "__div__"], [233, 3, 1, "", "__getstate__"], [233, 3, 1, "", "__mul__"], [233, 3, 1, "", "__radd__"], [233, 3, 1, "", "__repr__"], [233, 3, 1, "", "__rmul__"], [233, 3, 1, "", "__sub__"], [233, 3, 1, "", "__truediv__"], [233, 2, 1, "", "aspect2D"], [233, 2, 1, "", "cellCenters"], [233, 2, 1, "", "cellFaceIDs"], [233, 2, 1, "", "facesBack"], [233, 2, 1, "", "facesBottom"], [233, 2, 1, "", "facesDown"], [233, 2, 1, "", "facesFront"], [233, 2, 1, "", "facesLeft"], [233, 2, 1, "", "facesRight"], [233, 2, 1, "", "facesTop"], [233, 2, 1, "", "facesUp"], [233, 2, 1, "", "x"], [233, 2, 1, "", "y"], [233, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight": [[233, 2, 1, "", "VTKCellDataSet"], [233, 2, 1, "", "VTKFaceDataSet"], [233, 3, 1, "", "__add__"], [233, 3, 1, "", "__div__"], [233, 3, 1, "", "__getstate__"], [233, 3, 1, "", "__mul__"], [233, 3, 1, "", "__radd__"], [233, 3, 1, "", "__repr__"], [233, 3, 1, "", "__rmul__"], [233, 3, 1, "", "__sub__"], [233, 3, 1, "", "__truediv__"], [233, 2, 1, "", "aspect2D"], [233, 2, 1, "", "cellCenters"], [233, 2, 1, "", "cellFaceIDs"], [233, 2, 1, "", "facesBack"], [233, 2, 1, "", "facesBottom"], [233, 2, 1, "", "facesDown"], [233, 2, 1, "", "facesFront"], [233, 2, 1, "", "facesLeft"], [233, 2, 1, "", "facesRight"], [233, 2, 1, "", "facesTop"], [233, 2, 1, "", "facesUp"], [233, 2, 1, "", "x"], [233, 2, 1, "", "y"], [233, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack": [[233, 2, 1, "", "VTKCellDataSet"], [233, 2, 1, "", "VTKFaceDataSet"], [233, 3, 1, "", "__add__"], [233, 3, 1, "", "__div__"], [233, 3, 1, "", "__getstate__"], [233, 3, 1, "", "__mul__"], [233, 3, 1, "", "__radd__"], [233, 3, 1, "", "__repr__"], [233, 3, 1, "", "__rmul__"], [233, 3, 1, "", "__sub__"], [233, 3, 1, "", "__truediv__"], [233, 2, 1, "", "aspect2D"], [233, 2, 1, "", "cellCenters"], [233, 2, 1, "", "cellFaceIDs"], [233, 2, 1, "", "facesBack"], [233, 2, 1, "", "facesBottom"], [233, 2, 1, "", "facesDown"], [233, 2, 1, "", "facesFront"], [233, 2, 1, "", "facesLeft"], [233, 2, 1, "", "facesRight"], [233, 2, 1, "", "facesTop"], [233, 2, 1, "", "facesUp"], [233, 2, 1, "", "x"], [233, 2, 1, "", "y"], [233, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom": [[233, 2, 1, "", "VTKCellDataSet"], [233, 2, 1, "", "VTKFaceDataSet"], [233, 3, 1, "", "__add__"], [233, 3, 1, "", "__div__"], [233, 3, 1, "", "__getstate__"], [233, 3, 1, "", "__mul__"], [233, 3, 1, "", "__radd__"], [233, 3, 1, "", "__repr__"], [233, 3, 1, "", "__rmul__"], [233, 3, 1, "", "__sub__"], [233, 3, 1, "", "__truediv__"], [233, 2, 1, "", "aspect2D"], [233, 2, 1, "", "cellCenters"], [233, 2, 1, "", "cellFaceIDs"], [233, 2, 1, "", "facesBack"], [233, 2, 1, "", "facesBottom"], [233, 2, 1, "", "facesDown"], [233, 2, 1, "", "facesFront"], [233, 2, 1, "", "facesLeft"], [233, 2, 1, "", "facesRight"], [233, 2, 1, "", "facesTop"], [233, 2, 1, "", "facesUp"], [233, 2, 1, "", "x"], [233, 2, 1, "", "y"], [233, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom": [[233, 2, 1, "", "VTKCellDataSet"], [233, 2, 1, "", "VTKFaceDataSet"], [233, 3, 1, "", "__add__"], [233, 3, 1, "", "__div__"], [233, 3, 1, "", "__getstate__"], [233, 3, 1, "", "__mul__"], [233, 3, 1, "", "__radd__"], [233, 3, 1, "", "__repr__"], [233, 3, 1, "", "__rmul__"], [233, 3, 1, "", "__sub__"], [233, 3, 1, "", "__truediv__"], [233, 2, 1, "", "aspect2D"], [233, 2, 1, "", "cellCenters"], [233, 2, 1, "", "cellFaceIDs"], [233, 2, 1, "", "facesBack"], [233, 2, 1, "", "facesBottom"], [233, 2, 1, "", "facesDown"], [233, 2, 1, "", "facesFront"], [233, 2, 1, "", "facesLeft"], [233, 2, 1, "", "facesRight"], [233, 2, 1, "", "facesTop"], [233, 2, 1, "", "facesUp"], [233, 2, 1, "", "x"], [233, 2, 1, "", "y"], [233, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack": [[233, 2, 1, "", "VTKCellDataSet"], [233, 2, 1, "", "VTKFaceDataSet"], [233, 3, 1, "", "__add__"], [233, 3, 1, "", "__div__"], [233, 3, 1, "", "__getstate__"], [233, 3, 1, "", "__mul__"], [233, 3, 1, "", "__radd__"], [233, 3, 1, "", "__repr__"], [233, 3, 1, "", "__rmul__"], [233, 3, 1, "", "__sub__"], [233, 3, 1, "", "__truediv__"], [233, 2, 1, "", "aspect2D"], [233, 2, 1, "", "cellCenters"], [233, 2, 1, "", "cellFaceIDs"], [233, 2, 1, "", "facesBack"], [233, 2, 1, "", "facesBottom"], [233, 2, 1, "", "facesDown"], [233, 2, 1, "", "facesFront"], [233, 2, 1, "", "facesLeft"], [233, 2, 1, "", "facesRight"], [233, 2, 1, "", "facesTop"], [233, 2, 1, "", "facesUp"], [233, 2, 1, "", "x"], [233, 2, 1, "", "y"], [233, 2, 1, "", "z"]], "fipy.meshes.representations": [[235, 0, 0, "-", "abstractRepresentation"], [236, 0, 0, "-", "gridRepresentation"], [237, 0, 0, "-", "meshRepresentation"]], "fipy.meshes.skewedGrid2D": [[238, 1, 1, "", "SkewedGrid2D"]], "fipy.meshes.skewedGrid2D.SkewedGrid2D": [[238, 2, 1, "", "VTKCellDataSet"], [238, 2, 1, "", "VTKFaceDataSet"], [238, 3, 1, "", "__add__"], [238, 3, 1, "", "__div__"], [238, 3, 1, "", "__getstate__"], [238, 3, 1, "", "__mul__"], [238, 3, 1, "", "__radd__"], [238, 3, 1, "", "__repr__"], [238, 3, 1, "", "__rmul__"], [238, 3, 1, "", "__sub__"], [238, 3, 1, "", "__truediv__"], [238, 2, 1, "", "aspect2D"], [238, 2, 1, "", "cellCenters"], [238, 2, 1, "", "cellFaceIDs"], [238, 3, 1, "", "extrude"], [238, 2, 1, "", "facesBack"], [238, 2, 1, "", "facesBottom"], [238, 2, 1, "", "facesDown"], [238, 2, 1, "", "facesFront"], [238, 2, 1, "", "facesLeft"], [238, 2, 1, "", "facesRight"], [238, 2, 1, "", "facesTop"], [238, 2, 1, "", "facesUp"], [238, 2, 1, "", "physicalShape"], [238, 2, 1, "", "x"], [238, 2, 1, "", "y"], [238, 2, 1, "", "z"]], "fipy.meshes.sphericalNonUniformGrid1D": [[239, 1, 1, "", "SphericalNonUniformGrid1D"]], "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D": [[239, 2, 1, "", "VTKCellDataSet"], [239, 2, 1, "", "VTKFaceDataSet"], [239, 3, 1, "", "__add__"], [239, 3, 1, "", "__div__"], [239, 3, 1, "", "__getstate__"], [239, 3, 1, "", "__mul__"], [239, 3, 1, "", "__radd__"], [239, 3, 1, "", "__repr__"], [239, 3, 1, "", "__rmul__"], [239, 3, 1, "", "__sub__"], [239, 3, 1, "", "__truediv__"], [239, 2, 1, "", "aspect2D"], [239, 2, 1, "", "cellCenters"], [239, 2, 1, "", "cellFaceIDs"], [239, 2, 1, "", "facesBack"], [239, 2, 1, "", "facesBottom"], [239, 2, 1, "", "facesDown"], [239, 2, 1, "", "facesFront"], [239, 2, 1, "", "facesLeft"], [239, 2, 1, "", "facesRight"], [239, 2, 1, "", "facesTop"], [239, 2, 1, "", "facesUp"], [239, 2, 1, "", "x"], [239, 2, 1, "", "y"], [239, 2, 1, "", "z"]], "fipy.meshes.sphericalUniformGrid1D": [[240, 1, 1, "", "SphericalUniformGrid1D"]], "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D": [[240, 2, 1, "", "VTKCellDataSet"], [240, 2, 1, "", "VTKFaceDataSet"], [240, 3, 1, "", "__add__"], [240, 3, 1, "", "__div__"], [240, 3, 1, "", "__getstate__"], [240, 3, 1, "", "__radd__"], [240, 3, 1, "", "__repr__"], [240, 3, 1, "", "__sub__"], [240, 3, 1, "", "__truediv__"], [240, 2, 1, "", "aspect2D"], [240, 2, 1, "", "cellCenters"], [240, 2, 1, "", "cellFaceIDs"], [240, 2, 1, "", "exteriorFaces"], [240, 2, 1, "", "facesBack"], [240, 2, 1, "", "facesBottom"], [240, 2, 1, "", "facesDown"], [240, 2, 1, "", "facesFront"], [240, 2, 1, "", "facesLeft"], [240, 2, 1, "", "facesRight"], [240, 2, 1, "", "facesTop"], [240, 2, 1, "", "facesUp"], [240, 2, 1, "", "x"], [240, 2, 1, "", "y"], [240, 2, 1, "", "z"]], "fipy.meshes.topologies": [[243, 0, 0, "-", "abstractTopology"], [244, 0, 0, "-", "gridTopology"], [245, 0, 0, "-", "meshTopology"]], "fipy.meshes.tri2D": [[246, 1, 1, "", "Tri2D"]], "fipy.meshes.tri2D.Tri2D": [[246, 2, 1, "", "VTKCellDataSet"], [246, 2, 1, "", "VTKFaceDataSet"], [246, 3, 1, "", "__add__"], [246, 3, 1, "", "__div__"], [246, 3, 1, "", "__getstate__"], [246, 3, 1, "", "__mul__"], [246, 3, 1, "", "__radd__"], [246, 3, 1, "", "__repr__"], [246, 3, 1, "", "__rmul__"], [246, 3, 1, "", "__sub__"], [246, 3, 1, "", "__truediv__"], [246, 2, 1, "", "aspect2D"], [246, 2, 1, "", "cellCenters"], [246, 2, 1, "", "cellFaceIDs"], [246, 3, 1, "", "extrude"], [246, 2, 1, "", "facesBack"], [246, 2, 1, "", "facesBottom"], [246, 2, 1, "", "facesDown"], [246, 2, 1, "", "facesFront"], [246, 2, 1, "", "facesLeft"], [246, 2, 1, "", "facesRight"], [246, 2, 1, "", "facesTop"], [246, 2, 1, "", "facesUp"], [246, 2, 1, "", "physicalShape"], [246, 2, 1, "", "x"], [246, 2, 1, "", "y"], [246, 2, 1, "", "z"]], "fipy.meshes.uniformGrid": [[247, 1, 1, "", "UniformGrid"]], "fipy.meshes.uniformGrid.UniformGrid": [[247, 2, 1, "", "VTKCellDataSet"], [247, 2, 1, "", "VTKFaceDataSet"], [247, 3, 1, "", "__add__"], [247, 3, 1, "", "__div__"], [247, 3, 1, "", "__getstate__"], [247, 3, 1, "", "__radd__"], [247, 3, 1, "", "__repr__"], [247, 3, 1, "", "__sub__"], [247, 3, 1, "", "__truediv__"], [247, 2, 1, "", "aspect2D"], [247, 2, 1, "", "cellCenters"], [247, 2, 1, "", "cellFaceIDs"], [247, 2, 1, "", "facesBack"], [247, 2, 1, "", "facesBottom"], [247, 2, 1, "", "facesDown"], [247, 2, 1, "", "facesFront"], [247, 2, 1, "", "facesLeft"], [247, 2, 1, "", "facesRight"], [247, 2, 1, "", "facesTop"], [247, 2, 1, "", "facesUp"], [247, 2, 1, "", "x"], [247, 2, 1, "", "y"], [247, 2, 1, "", "z"]], "fipy.meshes.uniformGrid1D": [[248, 1, 1, "", "UniformGrid1D"]], "fipy.meshes.uniformGrid1D.UniformGrid1D": [[248, 2, 1, "", "VTKCellDataSet"], [248, 2, 1, "", "VTKFaceDataSet"], [248, 3, 1, "", "__add__"], [248, 3, 1, "", "__div__"], [248, 3, 1, "", "__getstate__"], [248, 3, 1, "", "__radd__"], [248, 3, 1, "", "__repr__"], [248, 3, 1, "", "__sub__"], [248, 3, 1, "", "__truediv__"], [248, 2, 1, "", "aspect2D"], [248, 2, 1, "", "cellCenters"], [248, 2, 1, "", "cellFaceIDs"], [248, 2, 1, "", "exteriorFaces"], [248, 2, 1, "", "facesBack"], [248, 2, 1, "", "facesBottom"], [248, 2, 1, "", "facesDown"], [248, 2, 1, "", "facesFront"], [248, 2, 1, "", "facesLeft"], [248, 2, 1, "", "facesRight"], [248, 2, 1, "", "facesTop"], [248, 2, 1, "", "facesUp"], [248, 2, 1, "", "x"], [248, 2, 1, "", "y"], [248, 2, 1, "", "z"]], "fipy.meshes.uniformGrid2D": [[249, 1, 1, "", "UniformGrid2D"]], "fipy.meshes.uniformGrid2D.UniformGrid2D": [[249, 2, 1, "", "VTKCellDataSet"], [249, 2, 1, "", "VTKFaceDataSet"], [249, 3, 1, "", "__add__"], [249, 3, 1, "", "__div__"], [249, 3, 1, "", "__getstate__"], [249, 3, 1, "", "__radd__"], [249, 3, 1, "", "__repr__"], [249, 3, 1, "", "__sub__"], [249, 3, 1, "", "__truediv__"], [249, 2, 1, "", "aspect2D"], [249, 2, 1, "", "cellCenters"], [249, 2, 1, "", "cellFaceIDs"], [249, 2, 1, "", "facesBack"], [249, 2, 1, "", "facesBottom"], [249, 2, 1, "", "facesDown"], [249, 2, 1, "", "facesFront"], [249, 2, 1, "", "facesLeft"], [249, 2, 1, "", "facesRight"], [249, 2, 1, "", "facesTop"], [249, 2, 1, "", "facesUp"], [249, 2, 1, "", "x"], [249, 2, 1, "", "y"], [249, 2, 1, "", "z"]], "fipy.meshes.uniformGrid3D": [[250, 1, 1, "", "UniformGrid3D"]], "fipy.meshes.uniformGrid3D.UniformGrid3D": [[250, 2, 1, "", "VTKCellDataSet"], [250, 2, 1, "", "VTKFaceDataSet"], [250, 3, 1, "", "__add__"], [250, 3, 1, "", "__div__"], [250, 3, 1, "", "__getstate__"], [250, 3, 1, "", "__radd__"], [250, 3, 1, "", "__repr__"], [250, 3, 1, "", "__sub__"], [250, 3, 1, "", "__truediv__"], [250, 2, 1, "", "aspect2D"], [250, 2, 1, "", "cellCenters"], [250, 2, 1, "", "cellFaceIDs"], [250, 2, 1, "", "facesBack"], [250, 2, 1, "", "facesBottom"], [250, 2, 1, "", "facesDown"], [250, 2, 1, "", "facesFront"], [250, 2, 1, "", "facesLeft"], [250, 2, 1, "", "facesRight"], [250, 2, 1, "", "facesTop"], [250, 2, 1, "", "facesUp"], [250, 2, 1, "", "x"], [250, 2, 1, "", "y"], [250, 2, 1, "", "z"]], "fipy.solvers": [[251, 6, 1, "", "DefaultAsymmetricSolver"], [251, 6, 1, "", "DefaultSolver"], [251, 6, 1, "", "DummySolver"], [251, 6, 1, "", "GeneralSolver"], [251, 5, 1, "", "SerialSolverError"], [252, 0, 0, "-", "petsc"], [265, 0, 0, "-", "pyAMG"], [273, 0, 0, "-", "pyamgx"], [286, 0, 0, "-", "pysparse"], [297, 0, 0, "-", "pysparseMatrixSolver"], [298, 0, 0, "-", "scipy"], [306, 0, 0, "-", "solver"], [307, 0, 0, "-", "test"], [308, 0, 0, "-", "trilinos"]], "fipy.solvers.SerialSolverError": [[251, 6, 1, "", "__cause__"], [251, 6, 1, "", "__context__"], [251, 3, 1, "", "__delattr__"], [251, 3, 1, "", "__getattribute__"], [251, 3, 1, "", "__reduce__"], [251, 3, 1, "", "__repr__"], [251, 3, 1, "", "__setattr__"], [251, 3, 1, "", "__str__"], [251, 3, 1, "", "add_note"], [251, 3, 1, "", "with_traceback"]], "fipy.solvers.petsc": [[253, 0, 0, "-", "comms"], [257, 0, 0, "-", "dummySolver"], [258, 0, 0, "-", "linearBicgSolver"], [259, 0, 0, "-", "linearCGSSolver"], [260, 0, 0, "-", "linearGMRESSolver"], [261, 0, 0, "-", "linearLUSolver"], [262, 0, 0, "-", "linearPCGSolver"], [263, 0, 0, "-", "petscKrylovSolver"], [264, 0, 0, "-", "petscSolver"]], "fipy.solvers.petsc.comms": [[254, 0, 0, "-", "parallelPETScCommWrapper"], [255, 0, 0, "-", "petscCommWrapper"], [256, 0, 0, "-", "serialPETScCommWrapper"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper": [[254, 1, 1, "", "ParallelPETScCommWrapper"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper": [[254, 3, 1, "", "__getstate__"], [254, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.comms.petscCommWrapper": [[255, 1, 1, "", "PETScCommWrapper"]], "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper": [[255, 3, 1, "", "__getstate__"], [255, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper": [[256, 1, 1, "", "SerialPETScCommWrapper"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper": [[256, 3, 1, "", "__getstate__"], [256, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.dummySolver": [[257, 1, 1, "", "DummySolver"]], "fipy.solvers.petsc.dummySolver.DummySolver": [[257, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.linearBicgSolver": [[258, 1, 1, "", "LinearBicgSolver"]], "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver": [[258, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.linearCGSSolver": [[259, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver": [[259, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.linearGMRESSolver": [[260, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver": [[260, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.linearLUSolver": [[261, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.petsc.linearLUSolver.LinearLUSolver": [[261, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.linearPCGSolver": [[262, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver": [[262, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.petscKrylovSolver": [[263, 1, 1, "", "PETScKrylovSolver"]], "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver": [[263, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.petscSolver": [[264, 1, 1, "", "PETScSolver"]], "fipy.solvers.petsc.petscSolver.PETScSolver": [[264, 3, 1, "", "__repr__"]], "fipy.solvers.pyAMG": [[266, 0, 0, "-", "linearCGSSolver"], [267, 0, 0, "-", "linearGMRESSolver"], [268, 0, 0, "-", "linearGeneralSolver"], [269, 0, 0, "-", "linearLUSolver"], [270, 0, 0, "-", "linearPCGSolver"], [271, 0, 0, "-", "preconditioners"]], "fipy.solvers.pyAMG.linearCGSSolver": [[266, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver": [[266, 3, 1, "", "__repr__"]], "fipy.solvers.pyAMG.linearGMRESSolver": [[267, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver": [[267, 3, 1, "", "__repr__"]], "fipy.solvers.pyAMG.linearGeneralSolver": [[268, 1, 1, "", "LinearGeneralSolver"]], "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver": [[268, 3, 1, "", "__repr__"]], "fipy.solvers.pyAMG.linearLUSolver": [[269, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver": [[269, 3, 1, "", "__repr__"]], "fipy.solvers.pyAMG.linearPCGSolver": [[270, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver": [[270, 3, 1, "", "__repr__"]], "fipy.solvers.pyAMG.preconditioners": [[272, 0, 0, "-", "smoothedAggregationPreconditioner"]], "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner": [[272, 1, 1, "", "SmoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[274, 0, 0, "-", "aggregationAMGSolver"], [275, 0, 0, "-", "classicalAMGSolver"], [276, 0, 0, "-", "linearBiCGStabSolver"], [277, 0, 0, "-", "linearCGSolver"], [278, 0, 0, "-", "linearFGMRESSolver"], [279, 0, 0, "-", "linearGMRESSolver"], [280, 0, 0, "-", "linearLUSolver"], [281, 0, 0, "-", "preconditioners"], [283, 0, 0, "-", "pyAMGXSolver"], [284, 0, 0, "-", "smoothers"]], "fipy.solvers.pyamgx.aggregationAMGSolver": [[274, 1, 1, "", "AggregationAMGSolver"]], "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver": [[274, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.classicalAMGSolver": [[275, 1, 1, "", "ClassicalAMGSolver"]], "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver": [[275, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.linearBiCGStabSolver": [[276, 1, 1, "", "LinearBiCGStabSolver"]], "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver": [[276, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.linearCGSolver": [[277, 1, 1, "", "LinearCGSolver"], [277, 6, 1, "", "LinearPCGSolver"]], "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver": [[277, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.linearFGMRESSolver": [[278, 1, 1, "", "LinearFGMRESSolver"]], "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver": [[278, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.linearGMRESSolver": [[279, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver": [[279, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.linearLUSolver": [[280, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver": [[280, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.preconditioners": [[282, 0, 0, "-", "preconditioners"]], "fipy.solvers.pyamgx.preconditioners.preconditioners": [[282, 1, 1, "", "Preconditioner"]], "fipy.solvers.pyamgx.preconditioners.preconditioners.Preconditioner": [[282, 3, 1, "", "__call__"]], "fipy.solvers.pyamgx.pyAMGXSolver": [[283, 1, 1, "", "PyAMGXSolver"]], "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver": [[283, 3, 1, "", "__repr__"]], "fipy.solvers.pyamgx.smoothers": [[285, 0, 0, "-", "smoothers"]], "fipy.solvers.pyamgx.smoothers.smoothers": [[285, 1, 1, "", "Smoother"]], "fipy.solvers.pyamgx.smoothers.smoothers.Smoother": [[285, 3, 1, "", "__call__"]], "fipy.solvers.pysparse": [[287, 0, 0, "-", "linearCGSSolver"], [288, 0, 0, "-", "linearGMRESSolver"], [289, 0, 0, "-", "linearJORSolver"], [290, 0, 0, "-", "linearLUSolver"], [291, 0, 0, "-", "linearPCGSolver"], [292, 0, 0, "-", "preconditioners"], [296, 0, 0, "-", "pysparseSolver"]], "fipy.solvers.pysparse.linearCGSSolver": [[287, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver": [[287, 3, 1, "", "__repr__"]], "fipy.solvers.pysparse.linearGMRESSolver": [[288, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver": [[288, 3, 1, "", "__repr__"]], "fipy.solvers.pysparse.linearJORSolver": [[289, 1, 1, "", "LinearJORSolver"]], "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver": [[289, 3, 1, "", "__repr__"]], "fipy.solvers.pysparse.linearLUSolver": [[290, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver": [[290, 3, 1, "", "__repr__"]], "fipy.solvers.pysparse.linearPCGSolver": [[291, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver": [[291, 3, 1, "", "__repr__"]], "fipy.solvers.pysparse.preconditioners": [[293, 0, 0, "-", "jacobiPreconditioner"], [294, 0, 0, "-", "preconditioner"], [295, 0, 0, "-", "ssorPreconditioner"]], "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner": [[293, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.preconditioner": [[294, 1, 1, "", "Preconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorPreconditioner": [[295, 1, 1, "", "SsorPreconditioner"]], "fipy.solvers.pysparse.pysparseSolver": [[296, 1, 1, "", "PysparseSolver"]], "fipy.solvers.pysparse.pysparseSolver.PysparseSolver": [[296, 3, 1, "", "__repr__"]], "fipy.solvers.scipy": [[299, 0, 0, "-", "linearBicgstabSolver"], [300, 0, 0, "-", "linearCGSSolver"], [301, 0, 0, "-", "linearGMRESSolver"], [302, 0, 0, "-", "linearLUSolver"], [303, 0, 0, "-", "linearPCGSolver"], [304, 0, 0, "-", "scipyKrylovSolver"], [305, 0, 0, "-", "scipySolver"]], "fipy.solvers.scipy.linearBicgstabSolver": [[299, 1, 1, "", "LinearBicgstabSolver"]], "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver": [[299, 3, 1, "", "__repr__"]], "fipy.solvers.scipy.linearCGSSolver": [[300, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver": [[300, 3, 1, "", "__repr__"]], "fipy.solvers.scipy.linearGMRESSolver": [[301, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver": [[301, 3, 1, "", "__repr__"]], "fipy.solvers.scipy.linearLUSolver": [[302, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.scipy.linearLUSolver.LinearLUSolver": [[302, 3, 1, "", "__repr__"]], "fipy.solvers.scipy.linearPCGSolver": [[303, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver": [[303, 3, 1, "", "__repr__"]], "fipy.solvers.solver": [[306, 5, 1, "", "IllConditionedPreconditionerWarning"], [306, 5, 1, "", "MatrixIllConditionedWarning"], [306, 5, 1, "", "MaximumIterationWarning"], [306, 5, 1, "", "PreconditionerNotPositiveDefiniteWarning"], [306, 5, 1, "", "PreconditionerWarning"], [306, 5, 1, "", "ScalarQuantityOutOfRangeWarning"], [306, 1, 1, "", "Solver"], [306, 5, 1, "", "SolverConvergenceWarning"], [306, 5, 1, "", "StagnatedSolverWarning"]], "fipy.solvers.solver.IllConditionedPreconditionerWarning": [[306, 6, 1, "", "__cause__"], [306, 6, 1, "", "__context__"], [306, 3, 1, "", "__delattr__"], [306, 3, 1, "", "__getattribute__"], [306, 3, 1, "", "__reduce__"], [306, 3, 1, "", "__repr__"], [306, 3, 1, "", "__setattr__"], [306, 3, 1, "", "__str__"], [306, 3, 1, "", "add_note"], [306, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.MatrixIllConditionedWarning": [[306, 6, 1, "", "__cause__"], [306, 6, 1, "", "__context__"], [306, 3, 1, "", "__delattr__"], [306, 3, 1, "", "__getattribute__"], [306, 3, 1, "", "__reduce__"], [306, 3, 1, "", "__repr__"], [306, 3, 1, "", "__setattr__"], [306, 3, 1, "", "__str__"], [306, 3, 1, "", "add_note"], [306, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.MaximumIterationWarning": [[306, 6, 1, "", "__cause__"], [306, 6, 1, "", "__context__"], [306, 3, 1, "", "__delattr__"], [306, 3, 1, "", "__getattribute__"], [306, 3, 1, "", "__reduce__"], [306, 3, 1, "", "__repr__"], [306, 3, 1, "", "__setattr__"], [306, 3, 1, "", "__str__"], [306, 3, 1, "", "add_note"], [306, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning": [[306, 6, 1, "", "__cause__"], [306, 6, 1, "", "__context__"], [306, 3, 1, "", "__delattr__"], [306, 3, 1, "", "__getattribute__"], [306, 3, 1, "", "__reduce__"], [306, 3, 1, "", "__repr__"], [306, 3, 1, "", "__setattr__"], [306, 3, 1, "", "__str__"], [306, 3, 1, "", "add_note"], [306, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.PreconditionerWarning": [[306, 6, 1, "", "__cause__"], [306, 6, 1, "", "__context__"], [306, 3, 1, "", "__delattr__"], [306, 3, 1, "", "__getattribute__"], [306, 3, 1, "", "__reduce__"], [306, 3, 1, "", "__repr__"], [306, 3, 1, "", "__setattr__"], [306, 3, 1, "", "__str__"], [306, 3, 1, "", "add_note"], [306, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning": [[306, 6, 1, "", "__cause__"], [306, 6, 1, "", "__context__"], [306, 3, 1, "", "__delattr__"], [306, 3, 1, "", "__getattribute__"], [306, 3, 1, "", "__reduce__"], [306, 3, 1, "", "__repr__"], [306, 3, 1, "", "__setattr__"], [306, 3, 1, "", "__str__"], [306, 3, 1, "", "add_note"], [306, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.Solver": [[306, 3, 1, "", "__repr__"]], "fipy.solvers.solver.SolverConvergenceWarning": [[306, 6, 1, "", "__cause__"], [306, 6, 1, "", "__context__"], [306, 3, 1, "", "__delattr__"], [306, 3, 1, "", "__getattribute__"], [306, 3, 1, "", "__reduce__"], [306, 3, 1, "", "__repr__"], [306, 3, 1, "", "__setattr__"], [306, 3, 1, "", "__str__"], [306, 3, 1, "", "add_note"], [306, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.StagnatedSolverWarning": [[306, 6, 1, "", "__cause__"], [306, 6, 1, "", "__context__"], [306, 3, 1, "", "__delattr__"], [306, 3, 1, "", "__getattribute__"], [306, 3, 1, "", "__reduce__"], [306, 3, 1, "", "__repr__"], [306, 3, 1, "", "__setattr__"], [306, 3, 1, "", "__str__"], [306, 3, 1, "", "add_note"], [306, 3, 1, "", "with_traceback"]], "fipy.solvers.trilinos": [[309, 0, 0, "-", "comms"], [313, 0, 0, "-", "linearBicgstabSolver"], [314, 0, 0, "-", "linearCGSSolver"], [315, 0, 0, "-", "linearGMRESSolver"], [316, 0, 0, "-", "linearLUSolver"], [317, 0, 0, "-", "linearPCGSolver"], [318, 0, 0, "-", "preconditioners"], [329, 0, 0, "-", "trilinosAztecOOSolver"], [330, 0, 0, "-", "trilinosMLTest"], [331, 0, 0, "-", "trilinosNonlinearSolver"], [332, 0, 0, "-", "trilinosSolver"]], "fipy.solvers.trilinos.comms": [[310, 0, 0, "-", "epetraCommWrapper"], [311, 0, 0, "-", "parallelEpetraCommWrapper"], [312, 0, 0, "-", "serialEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.epetraCommWrapper": [[310, 1, 1, "", "EpetraCommWrapper"]], "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper": [[310, 3, 1, "", "__getstate__"], [310, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper": [[311, 1, 1, "", "ParallelEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper": [[311, 3, 1, "", "MaxAll"], [311, 3, 1, "", "MinAll"], [311, 3, 1, "", "__getstate__"], [311, 3, 1, "", "__repr__"], [311, 3, 1, "", "allgather"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper": [[312, 1, 1, "", "SerialEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper": [[312, 3, 1, "", "__getstate__"], [312, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearBicgstabSolver": [[313, 1, 1, "", "LinearBicgstabSolver"]], "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver": [[313, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearCGSSolver": [[314, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver": [[314, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearGMRESSolver": [[315, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver": [[315, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearLUSolver": [[316, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver": [[316, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearPCGSolver": [[317, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver": [[317, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.preconditioners": [[319, 0, 0, "-", "domDecompPreconditioner"], [320, 0, 0, "-", "icPreconditioner"], [321, 0, 0, "-", "jacobiPreconditioner"], [322, 0, 0, "-", "multilevelDDMLPreconditioner"], [323, 0, 0, "-", "multilevelDDPreconditioner"], [324, 0, 0, "-", "multilevelNSSAPreconditioner"], [325, 0, 0, "-", "multilevelSAPreconditioner"], [326, 0, 0, "-", "multilevelSGSPreconditioner"], [327, 0, 0, "-", "multilevelSolverSmootherPreconditioner"], [328, 0, 0, "-", "preconditioner"]], "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner": [[319, 1, 1, "", "DomDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icPreconditioner": [[320, 1, 1, "", "ICPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner": [[321, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner": [[322, 1, 1, "", "MultilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner": [[323, 1, 1, "", "MultilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner": [[324, 1, 1, "", "MultilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner": [[325, 1, 1, "", "MultilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner": [[326, 1, 1, "", "MultilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner": [[327, 1, 1, "", "MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.preconditioner": [[328, 1, 1, "", "Preconditioner"]], "fipy.solvers.trilinos.trilinosAztecOOSolver": [[329, 1, 1, "", "TrilinosAztecOOSolver"]], "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver": [[329, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.trilinosMLTest": [[330, 1, 1, "", "TrilinosMLTest"]], "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest": [[330, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.trilinosNonlinearSolver": [[331, 1, 1, "", "TrilinosNonlinearSolver"]], "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver": [[331, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.trilinosSolver": [[332, 1, 1, "", "TrilinosSolver"]], "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver": [[332, 3, 1, "", "__repr__"]], "fipy.steppers": [[333, 4, 1, "", "L1error"], [333, 4, 1, "", "L2error"], [333, 4, 1, "", "LINFerror"], [333, 4, 1, "", "error"], [334, 0, 0, "-", "pidStepper"], [335, 0, 0, "-", "pseudoRKQSStepper"], [333, 4, 1, "", "residual"], [336, 0, 0, "-", "stepper"], [333, 4, 1, "", "sweepMonotonic"]], "fipy.steppers.pidStepper": [[334, 1, 1, "", "PIDStepper"]], "fipy.steppers.pseudoRKQSStepper": [[335, 1, 1, "", "PseudoRKQSStepper"]], "fipy.steppers.stepper": [[336, 1, 1, "", "Stepper"]], "fipy.terms": [[337, 5, 1, "", "AbstractBaseClassError"], [337, 5, 1, "", "ExplicitVariableError"], [337, 5, 1, "", "IncorrectSolutionVariable"], [337, 5, 1, "", "SolutionVariableNumberError"], [337, 5, 1, "", "SolutionVariableRequiredError"], [337, 5, 1, "", "TermMultiplyError"], [337, 5, 1, "", "TransientTermError"], [337, 5, 1, "", "VectorCoeffError"], [338, 0, 0, "-", "abstractBinaryTerm"], [339, 0, 0, "-", "abstractConvectionTerm"], [340, 0, 0, "-", "abstractDiffusionTerm"], [341, 0, 0, "-", "abstractUpwindConvectionTerm"], [342, 0, 0, "-", "advectionTerm"], [343, 0, 0, "-", "asymmetricConvectionTerm"], [344, 0, 0, "-", "binaryTerm"], [345, 0, 0, "-", "cellTerm"], [346, 0, 0, "-", "centralDiffConvectionTerm"], [347, 0, 0, "-", "coupledBinaryTerm"], [348, 0, 0, "-", "diffusionTerm"], [349, 0, 0, "-", "diffusionTermCorrection"], [350, 0, 0, "-", "diffusionTermNoCorrection"], [351, 0, 0, "-", "explicitDiffusionTerm"], [352, 0, 0, "-", "explicitSourceTerm"], [353, 0, 0, "-", "explicitUpwindConvectionTerm"], [354, 0, 0, "-", "exponentialConvectionTerm"], [355, 0, 0, "-", "faceTerm"], [356, 0, 0, "-", "firstOrderAdvectionTerm"], [357, 0, 0, "-", "hybridConvectionTerm"], [358, 0, 0, "-", "implicitDiffusionTerm"], [359, 0, 0, "-", "implicitSourceTerm"], [360, 0, 0, "-", "nonDiffusionTerm"], [361, 0, 0, "-", "powerLawConvectionTerm"], [362, 0, 0, "-", "residualTerm"], [363, 0, 0, "-", "sourceTerm"], [364, 0, 0, "-", "term"], [365, 0, 0, "-", "test"], [366, 0, 0, "-", "transientTerm"], [367, 0, 0, "-", "unaryTerm"], [368, 0, 0, "-", "upwindConvectionTerm"], [369, 0, 0, "-", "vanLeerConvectionTerm"]], "fipy.terms.AbstractBaseClassError": [[337, 6, 1, "", "__cause__"], [337, 6, 1, "", "__context__"], [337, 3, 1, "", "__delattr__"], [337, 3, 1, "", "__getattribute__"], [337, 3, 1, "", "__reduce__"], [337, 3, 1, "", "__repr__"], [337, 3, 1, "", "__setattr__"], [337, 3, 1, "", "__str__"], [337, 3, 1, "", "add_note"], [337, 3, 1, "", "with_traceback"]], "fipy.terms.ExplicitVariableError": [[337, 6, 1, "", "__cause__"], [337, 6, 1, "", "__context__"], [337, 3, 1, "", "__delattr__"], [337, 3, 1, "", "__getattribute__"], [337, 3, 1, "", "__reduce__"], [337, 3, 1, "", "__repr__"], [337, 3, 1, "", "__setattr__"], [337, 3, 1, "", "__str__"], [337, 3, 1, "", "add_note"], [337, 3, 1, "", "with_traceback"]], "fipy.terms.IncorrectSolutionVariable": [[337, 6, 1, "", "__cause__"], [337, 6, 1, "", "__context__"], [337, 3, 1, "", "__delattr__"], [337, 3, 1, "", "__getattribute__"], [337, 3, 1, "", "__reduce__"], [337, 3, 1, "", "__repr__"], [337, 3, 1, "", "__setattr__"], [337, 3, 1, "", "__str__"], [337, 3, 1, "", "add_note"], [337, 3, 1, "", "with_traceback"]], "fipy.terms.SolutionVariableNumberError": [[337, 6, 1, "", "__cause__"], [337, 6, 1, "", "__context__"], [337, 3, 1, "", "__delattr__"], [337, 3, 1, "", "__getattribute__"], [337, 3, 1, "", "__reduce__"], [337, 3, 1, "", "__repr__"], [337, 3, 1, "", "__setattr__"], [337, 3, 1, "", "__str__"], [337, 3, 1, "", "add_note"], [337, 3, 1, "", "with_traceback"]], "fipy.terms.SolutionVariableRequiredError": [[337, 6, 1, "", "__cause__"], [337, 6, 1, "", "__context__"], [337, 3, 1, "", "__delattr__"], [337, 3, 1, "", "__getattribute__"], [337, 3, 1, "", "__reduce__"], [337, 3, 1, "", "__repr__"], [337, 3, 1, "", "__setattr__"], [337, 3, 1, "", "__str__"], [337, 3, 1, "", "add_note"], [337, 3, 1, "", "with_traceback"]], "fipy.terms.TermMultiplyError": [[337, 6, 1, "", "__cause__"], [337, 6, 1, "", "__context__"], [337, 3, 1, "", "__delattr__"], [337, 3, 1, "", "__getattribute__"], [337, 3, 1, "", "__reduce__"], [337, 3, 1, "", "__repr__"], [337, 3, 1, "", "__setattr__"], [337, 3, 1, "", "__str__"], [337, 3, 1, "", "add_note"], [337, 3, 1, "", "with_traceback"]], "fipy.terms.TransientTermError": [[337, 6, 1, "", "__cause__"], [337, 6, 1, "", "__context__"], [337, 3, 1, "", "__delattr__"], [337, 3, 1, "", "__getattribute__"], [337, 3, 1, "", "__reduce__"], [337, 3, 1, "", "__repr__"], [337, 3, 1, "", "__setattr__"], [337, 3, 1, "", "__str__"], [337, 3, 1, "", "add_note"], [337, 3, 1, "", "with_traceback"]], "fipy.terms.VectorCoeffError": [[337, 6, 1, "", "__cause__"], [337, 6, 1, "", "__context__"], [337, 3, 1, "", "__delattr__"], [337, 3, 1, "", "__getattribute__"], [337, 3, 1, "", "__reduce__"], [337, 3, 1, "", "__repr__"], [337, 3, 1, "", "__setattr__"], [337, 3, 1, "", "__str__"], [337, 3, 1, "", "add_note"], [337, 3, 1, "", "with_traceback"]], "fipy.terms.advectionTerm": [[342, 1, 1, "", "AdvectionTerm"]], "fipy.terms.advectionTerm.AdvectionTerm": [[342, 2, 1, "", "RHSvector"], [342, 3, 1, "", "__eq__"], [342, 3, 1, "", "__hash__"], [342, 3, 1, "", "__mul__"], [342, 3, 1, "", "__neg__"], [342, 3, 1, "", "__repr__"], [342, 3, 1, "", "__rmul__"], [342, 3, 1, "", "cacheMatrix"], [342, 3, 1, "", "cacheRHSvector"], [342, 3, 1, "", "justErrorVector"], [342, 3, 1, "", "justResidualVector"], [342, 2, 1, "", "matrix"], [342, 3, 1, "", "residualVectorAndNorm"], [342, 3, 1, "", "solve"], [342, 3, 1, "", "sweep"]], "fipy.terms.cellTerm": [[345, 1, 1, "", "CellTerm"]], "fipy.terms.cellTerm.CellTerm": [[345, 2, 1, "", "RHSvector"], [345, 3, 1, "", "__eq__"], [345, 3, 1, "", "__hash__"], [345, 3, 1, "", "__mul__"], [345, 3, 1, "", "__neg__"], [345, 3, 1, "", "__repr__"], [345, 3, 1, "", "__rmul__"], [345, 3, 1, "", "cacheMatrix"], [345, 3, 1, "", "cacheRHSvector"], [345, 3, 1, "", "justErrorVector"], [345, 3, 1, "", "justResidualVector"], [345, 2, 1, "", "matrix"], [345, 3, 1, "", "residualVectorAndNorm"], [345, 3, 1, "", "solve"], [345, 3, 1, "", "sweep"]], "fipy.terms.centralDiffConvectionTerm": [[346, 1, 1, "", "CentralDifferenceConvectionTerm"]], "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm": [[346, 2, 1, "", "RHSvector"], [346, 3, 1, "", "__eq__"], [346, 3, 1, "", "__hash__"], [346, 3, 1, "", "__mul__"], [346, 3, 1, "", "__neg__"], [346, 3, 1, "", "__repr__"], [346, 3, 1, "", "__rmul__"], [346, 3, 1, "", "cacheMatrix"], [346, 3, 1, "", "cacheRHSvector"], [346, 3, 1, "", "justErrorVector"], [346, 3, 1, "", "justResidualVector"], [346, 2, 1, "", "matrix"], [346, 3, 1, "", "residualVectorAndNorm"], [346, 3, 1, "", "solve"], [346, 3, 1, "", "sweep"]], "fipy.terms.diffusionTerm": [[348, 1, 1, "", "DiffusionTerm"]], "fipy.terms.diffusionTerm.DiffusionTerm": [[348, 2, 1, "", "RHSvector"], [348, 3, 1, "", "__eq__"], [348, 3, 1, "", "__hash__"], [348, 3, 1, "", "__repr__"], [348, 3, 1, "", "cacheMatrix"], [348, 3, 1, "", "cacheRHSvector"], [348, 3, 1, "", "justErrorVector"], [348, 3, 1, "", "justResidualVector"], [348, 2, 1, "", "matrix"], [348, 3, 1, "", "residualVectorAndNorm"], [348, 3, 1, "", "solve"], [348, 3, 1, "", "sweep"]], "fipy.terms.diffusionTermCorrection": [[349, 1, 1, "", "DiffusionTermCorrection"]], "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection": [[349, 2, 1, "", "RHSvector"], [349, 3, 1, "", "__eq__"], [349, 3, 1, "", "__hash__"], [349, 3, 1, "", "__repr__"], [349, 3, 1, "", "cacheMatrix"], [349, 3, 1, "", "cacheRHSvector"], [349, 3, 1, "", "justErrorVector"], [349, 3, 1, "", "justResidualVector"], [349, 2, 1, "", "matrix"], [349, 3, 1, "", "residualVectorAndNorm"], [349, 3, 1, "", "solve"], [349, 3, 1, "", "sweep"]], "fipy.terms.diffusionTermNoCorrection": [[350, 1, 1, "", "DiffusionTermNoCorrection"]], "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection": [[350, 2, 1, "", "RHSvector"], [350, 3, 1, "", "__eq__"], [350, 3, 1, "", "__hash__"], [350, 3, 1, "", "__repr__"], [350, 3, 1, "", "cacheMatrix"], [350, 3, 1, "", "cacheRHSvector"], [350, 3, 1, "", "justErrorVector"], [350, 3, 1, "", "justResidualVector"], [350, 2, 1, "", "matrix"], [350, 3, 1, "", "residualVectorAndNorm"], [350, 3, 1, "", "solve"], [350, 3, 1, "", "sweep"]], "fipy.terms.explicitDiffusionTerm": [[351, 1, 1, "", "ExplicitDiffusionTerm"]], "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm": [[351, 2, 1, "", "RHSvector"], [351, 3, 1, "", "__eq__"], [351, 3, 1, "", "__hash__"], [351, 3, 1, "", "__repr__"], [351, 3, 1, "", "cacheMatrix"], [351, 3, 1, "", "cacheRHSvector"], [351, 3, 1, "", "justErrorVector"], [351, 3, 1, "", "justResidualVector"], [351, 2, 1, "", "matrix"], [351, 3, 1, "", "residualVectorAndNorm"], [351, 3, 1, "", "solve"], [351, 3, 1, "", "sweep"]], "fipy.terms.explicitUpwindConvectionTerm": [[353, 1, 1, "", "ExplicitUpwindConvectionTerm"]], "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm": [[353, 2, 1, "", "RHSvector"], [353, 3, 1, "", "__eq__"], [353, 3, 1, "", "__hash__"], [353, 3, 1, "", "__mul__"], [353, 3, 1, "", "__neg__"], [353, 3, 1, "", "__repr__"], [353, 3, 1, "", "__rmul__"], [353, 3, 1, "", "cacheMatrix"], [353, 3, 1, "", "cacheRHSvector"], [353, 3, 1, "", "justErrorVector"], [353, 3, 1, "", "justResidualVector"], [353, 2, 1, "", "matrix"], [353, 3, 1, "", "residualVectorAndNorm"], [353, 3, 1, "", "solve"], [353, 3, 1, "", "sweep"]], "fipy.terms.exponentialConvectionTerm": [[354, 1, 1, "", "ExponentialConvectionTerm"]], "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm": [[354, 2, 1, "", "RHSvector"], [354, 3, 1, "", "__eq__"], [354, 3, 1, "", "__hash__"], [354, 3, 1, "", "__mul__"], [354, 3, 1, "", "__neg__"], [354, 3, 1, "", "__repr__"], [354, 3, 1, "", "__rmul__"], [354, 3, 1, "", "cacheMatrix"], [354, 3, 1, "", "cacheRHSvector"], [354, 3, 1, "", "justErrorVector"], [354, 3, 1, "", "justResidualVector"], [354, 2, 1, "", "matrix"], [354, 3, 1, "", "residualVectorAndNorm"], [354, 3, 1, "", "solve"], [354, 3, 1, "", "sweep"]], "fipy.terms.faceTerm": [[355, 1, 1, "", "FaceTerm"]], "fipy.terms.faceTerm.FaceTerm": [[355, 2, 1, "", "RHSvector"], [355, 3, 1, "", "__eq__"], [355, 3, 1, "", "__hash__"], [355, 3, 1, "", "__mul__"], [355, 3, 1, "", "__neg__"], [355, 3, 1, "", "__repr__"], [355, 3, 1, "", "__rmul__"], [355, 3, 1, "", "cacheMatrix"], [355, 3, 1, "", "cacheRHSvector"], [355, 3, 1, "", "justErrorVector"], [355, 3, 1, "", "justResidualVector"], [355, 2, 1, "", "matrix"], [355, 3, 1, "", "residualVectorAndNorm"], [355, 3, 1, "", "solve"], [355, 3, 1, "", "sweep"]], "fipy.terms.firstOrderAdvectionTerm": [[356, 1, 1, "", "FirstOrderAdvectionTerm"]], "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm": [[356, 2, 1, "", "RHSvector"], [356, 3, 1, "", "__eq__"], [356, 3, 1, "", "__hash__"], [356, 3, 1, "", "__mul__"], [356, 3, 1, "", "__neg__"], [356, 3, 1, "", "__repr__"], [356, 3, 1, "", "__rmul__"], [356, 3, 1, "", "cacheMatrix"], [356, 3, 1, "", "cacheRHSvector"], [356, 3, 1, "", "justErrorVector"], [356, 3, 1, "", "justResidualVector"], [356, 2, 1, "", "matrix"], [356, 3, 1, "", "residualVectorAndNorm"], [356, 3, 1, "", "solve"], [356, 3, 1, "", "sweep"]], "fipy.terms.hybridConvectionTerm": [[357, 1, 1, "", "HybridConvectionTerm"]], "fipy.terms.hybridConvectionTerm.HybridConvectionTerm": [[357, 2, 1, "", "RHSvector"], [357, 3, 1, "", "__eq__"], [357, 3, 1, "", "__hash__"], [357, 3, 1, "", "__mul__"], [357, 3, 1, "", "__neg__"], [357, 3, 1, "", "__repr__"], [357, 3, 1, "", "__rmul__"], [357, 3, 1, "", "cacheMatrix"], [357, 3, 1, "", "cacheRHSvector"], [357, 3, 1, "", "justErrorVector"], [357, 3, 1, "", "justResidualVector"], [357, 2, 1, "", "matrix"], [357, 3, 1, "", "residualVectorAndNorm"], [357, 3, 1, "", "solve"], [357, 3, 1, "", "sweep"]], "fipy.terms.implicitDiffusionTerm": [[358, 6, 1, "", "ImplicitDiffusionTerm"]], "fipy.terms.implicitSourceTerm": [[359, 1, 1, "", "ImplicitSourceTerm"]], "fipy.terms.implicitSourceTerm.ImplicitSourceTerm": [[359, 2, 1, "", "RHSvector"], [359, 3, 1, "", "__eq__"], [359, 3, 1, "", "__hash__"], [359, 3, 1, "", "__mul__"], [359, 3, 1, "", "__neg__"], [359, 3, 1, "", "__repr__"], [359, 3, 1, "", "__rmul__"], [359, 3, 1, "", "cacheMatrix"], [359, 3, 1, "", "cacheRHSvector"], [359, 3, 1, "", "justErrorVector"], [359, 3, 1, "", "justResidualVector"], [359, 2, 1, "", "matrix"], [359, 3, 1, "", "residualVectorAndNorm"], [359, 3, 1, "", "solve"], [359, 3, 1, "", "sweep"]], "fipy.terms.powerLawConvectionTerm": [[361, 1, 1, "", "PowerLawConvectionTerm"]], "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm": [[361, 2, 1, "", "RHSvector"], [361, 3, 1, "", "__eq__"], [361, 3, 1, "", "__hash__"], [361, 3, 1, "", "__mul__"], [361, 3, 1, "", "__neg__"], [361, 3, 1, "", "__repr__"], [361, 3, 1, "", "__rmul__"], [361, 3, 1, "", "cacheMatrix"], [361, 3, 1, "", "cacheRHSvector"], [361, 3, 1, "", "justErrorVector"], [361, 3, 1, "", "justResidualVector"], [361, 2, 1, "", "matrix"], [361, 3, 1, "", "residualVectorAndNorm"], [361, 3, 1, "", "solve"], [361, 3, 1, "", "sweep"]], "fipy.terms.residualTerm": [[362, 1, 1, "", "ResidualTerm"]], "fipy.terms.residualTerm.ResidualTerm": [[362, 2, 1, "", "RHSvector"], [362, 3, 1, "", "__eq__"], [362, 3, 1, "", "__hash__"], [362, 3, 1, "", "__mul__"], [362, 3, 1, "", "__neg__"], [362, 3, 1, "", "__repr__"], [362, 3, 1, "", "__rmul__"], [362, 3, 1, "", "cacheMatrix"], [362, 3, 1, "", "cacheRHSvector"], [362, 3, 1, "", "justErrorVector"], [362, 3, 1, "", "justResidualVector"], [362, 2, 1, "", "matrix"], [362, 3, 1, "", "residualVectorAndNorm"], [362, 3, 1, "", "solve"], [362, 3, 1, "", "sweep"]], "fipy.terms.sourceTerm": [[363, 1, 1, "", "SourceTerm"]], "fipy.terms.sourceTerm.SourceTerm": [[363, 2, 1, "", "RHSvector"], [363, 3, 1, "", "__eq__"], [363, 3, 1, "", "__hash__"], [363, 3, 1, "", "__mul__"], [363, 3, 1, "", "__neg__"], [363, 3, 1, "", "__repr__"], [363, 3, 1, "", "__rmul__"], [363, 3, 1, "", "cacheMatrix"], [363, 3, 1, "", "cacheRHSvector"], [363, 3, 1, "", "justErrorVector"], [363, 3, 1, "", "justResidualVector"], [363, 2, 1, "", "matrix"], [363, 3, 1, "", "residualVectorAndNorm"], [363, 3, 1, "", "solve"], [363, 3, 1, "", "sweep"]], "fipy.terms.term": [[364, 1, 1, "", "Term"]], "fipy.terms.term.Term": [[364, 2, 1, "", "RHSvector"], [364, 3, 1, "", "__eq__"], [364, 3, 1, "", "__hash__"], [364, 3, 1, "", "__repr__"], [364, 3, 1, "", "cacheMatrix"], [364, 3, 1, "", "cacheRHSvector"], [364, 3, 1, "", "justErrorVector"], [364, 3, 1, "", "justResidualVector"], [364, 2, 1, "", "matrix"], [364, 3, 1, "", "residualVectorAndNorm"], [364, 3, 1, "", "solve"], [364, 3, 1, "", "sweep"]], "fipy.terms.transientTerm": [[366, 1, 1, "", "TransientTerm"]], "fipy.terms.transientTerm.TransientTerm": [[366, 2, 1, "", "RHSvector"], [366, 3, 1, "", "__eq__"], [366, 3, 1, "", "__hash__"], [366, 3, 1, "", "__mul__"], [366, 3, 1, "", "__neg__"], [366, 3, 1, "", "__repr__"], [366, 3, 1, "", "__rmul__"], [366, 3, 1, "", "cacheMatrix"], [366, 3, 1, "", "cacheRHSvector"], [366, 3, 1, "", "justErrorVector"], [366, 3, 1, "", "justResidualVector"], [366, 2, 1, "", "matrix"], [366, 3, 1, "", "residualVectorAndNorm"], [366, 3, 1, "", "solve"], [366, 3, 1, "", "sweep"]], "fipy.terms.upwindConvectionTerm": [[368, 1, 1, "", "UpwindConvectionTerm"]], "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm": [[368, 2, 1, "", "RHSvector"], [368, 3, 1, "", "__eq__"], [368, 3, 1, "", "__hash__"], [368, 3, 1, "", "__mul__"], [368, 3, 1, "", "__neg__"], [368, 3, 1, "", "__repr__"], [368, 3, 1, "", "__rmul__"], [368, 3, 1, "", "cacheMatrix"], [368, 3, 1, "", "cacheRHSvector"], [368, 3, 1, "", "justErrorVector"], [368, 3, 1, "", "justResidualVector"], [368, 2, 1, "", "matrix"], [368, 3, 1, "", "residualVectorAndNorm"], [368, 3, 1, "", "solve"], [368, 3, 1, "", "sweep"]], "fipy.terms.vanLeerConvectionTerm": [[369, 1, 1, "", "VanLeerConvectionTerm"]], "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm": [[369, 2, 1, "", "RHSvector"], [369, 3, 1, "", "__eq__"], [369, 3, 1, "", "__hash__"], [369, 3, 1, "", "__mul__"], [369, 3, 1, "", "__neg__"], [369, 3, 1, "", "__repr__"], [369, 3, 1, "", "__rmul__"], [369, 3, 1, "", "cacheMatrix"], [369, 3, 1, "", "cacheRHSvector"], [369, 3, 1, "", "justErrorVector"], [369, 3, 1, "", "justResidualVector"], [369, 2, 1, "", "matrix"], [369, 3, 1, "", "residualVectorAndNorm"], [369, 3, 1, "", "solve"], [369, 3, 1, "", "sweep"]], "fipy.tests": [[372, 0, 0, "-", "doctestPlus"], [373, 0, 0, "-", "lateImportTest"], [374, 0, 0, "-", "test"], [375, 0, 0, "-", "testProgram"]], "fipy.tests.doctestPlus": [[372, 4, 1, "", "execButNoTest"], [372, 4, 1, "", "register_skipper"], [372, 4, 1, "", "report_skips"], [372, 4, 1, "", "testmod"]], "fipy.tests.test": [[374, 1, 1, "", "DeprecationErroringTestProgram"], [374, 1, 1, "", "test"]], "fipy.tests.test.test": [[374, 3, 1, "", "finalize_options"], [374, 3, 1, "", "initialize_options"]], "fipy.tests.testProgram": [[375, 1, 1, "", "TestProgram"], [375, 6, 1, "", "main"]], "fipy.tools": [[376, 1, 1, "", "PhysicalField"], [376, 4, 1, "", "SharedTemporaryFile"], [376, 1, 1, "", "Vitals"], [377, 0, 0, "-", "comms"], [380, 0, 0, "-", "debug"], [381, 0, 0, "-", "decorators"], [382, 0, 0, "-", "dimensions"], [386, 0, 0, "-", "dump"], [387, 0, 0, "-", "inline"], [388, 0, 0, "-", "logging"], [389, 0, 0, "-", "numerix"], [376, 6, 1, "", "parallelComm"], [390, 0, 0, "-", "parser"], [376, 6, 1, "", "serialComm"], [391, 0, 0, "-", "sharedtempfile"], [392, 0, 0, "-", "test"], [393, 0, 0, "-", "vector"], [394, 0, 0, "-", "version"], [395, 0, 0, "-", "vitals"]], "fipy.tools.PhysicalField": [[376, 3, 1, "", "__abs__"], [376, 3, 1, "", "__add__"], [376, 3, 1, "", "__array__"], [376, 3, 1, "", "__array_wrap__"], [376, 3, 1, "", "__bool__"], [376, 3, 1, "", "__div__"], [376, 3, 1, "", "__eq__"], [376, 3, 1, "", "__float__"], [376, 3, 1, "", "__ge__"], [376, 3, 1, "", "__getitem__"], [376, 3, 1, "", "__gt__"], [376, 3, 1, "", "__hash__"], [376, 3, 1, "", "__le__"], [376, 3, 1, "", "__lt__"], [376, 3, 1, "", "__mod__"], [376, 3, 1, "", "__mul__"], [376, 3, 1, "", "__ne__"], [376, 3, 1, "", "__neg__"], [376, 3, 1, "", "__nonzero__"], [376, 3, 1, "", "__pow__"], [376, 3, 1, "", "__radd__"], [376, 3, 1, "", "__repr__"], [376, 3, 1, "", "__rmul__"], [376, 3, 1, "", "__setitem__"], [376, 3, 1, "", "__str__"], [376, 3, 1, "", "__sub__"], [376, 3, 1, "", "__truediv__"], [376, 3, 1, "", "add"], [376, 3, 1, "", "allclose"], [376, 3, 1, "", "allequal"], [376, 3, 1, "", "arccos"], [376, 3, 1, "", "arccosh"], [376, 3, 1, "", "arcsin"], [376, 3, 1, "", "arctan"], [376, 3, 1, "", "arctan2"], [376, 3, 1, "", "arctanh"], [376, 3, 1, "", "ceil"], [376, 3, 1, "", "conjugate"], [376, 3, 1, "", "convertToUnit"], [376, 3, 1, "", "copy"], [376, 3, 1, "", "cos"], [376, 3, 1, "", "cosh"], [376, 3, 1, "", "divide"], [376, 3, 1, "", "dot"], [376, 3, 1, "", "floor"], [376, 3, 1, "", "getsctype"], [376, 3, 1, "", "inBaseUnits"], [376, 3, 1, "", "inDimensionless"], [376, 3, 1, "", "inRadians"], [376, 3, 1, "", "inSIUnits"], [376, 3, 1, "", "inUnitsOf"], [376, 3, 1, "", "itemset"], [376, 3, 1, "", "log"], [376, 3, 1, "", "log10"], [376, 3, 1, "", "multiply"], [376, 2, 1, "", "numericValue"], [376, 3, 1, "", "put"], [376, 3, 1, "", "reshape"], [376, 2, 1, "", "shape"], [376, 3, 1, "", "sign"], [376, 3, 1, "", "sin"], [376, 3, 1, "", "sinh"], [376, 3, 1, "", "sqrt"], [376, 3, 1, "", "subtract"], [376, 3, 1, "", "sum"], [376, 3, 1, "", "take"], [376, 3, 1, "", "tan"], [376, 3, 1, "", "tanh"], [376, 3, 1, "", "tostring"], [376, 2, 1, "", "unit"]], "fipy.tools.Vitals": [[376, 3, 1, "", "__str__"], [376, 3, 1, "", "appendInfo"], [376, 2, 1, "", "documentElement"], [376, 2, 1, "", "firstChild"], [376, 2, 1, "", "lastChild"], [376, 2, 1, "", "localName"]], "fipy.tools.comms": [[378, 0, 0, "-", "commWrapper"], [379, 0, 0, "-", "dummyComm"]], "fipy.tools.comms.commWrapper": [[378, 1, 1, "", "CommWrapper"]], "fipy.tools.comms.commWrapper.CommWrapper": [[378, 3, 1, "", "__getstate__"], [378, 3, 1, "", "__repr__"]], "fipy.tools.comms.dummyComm": [[379, 1, 1, "", "DummyComm"]], "fipy.tools.comms.dummyComm.DummyComm": [[379, 3, 1, "", "__getstate__"], [379, 3, 1, "", "__repr__"]], "fipy.tools.debug": [[380, 4, 1, "", "PRINT"]], "fipy.tools.decorators": [[381, 4, 1, "", "deprecate"]], "fipy.tools.dimensions": [[383, 0, 0, "-", "DictWithDefault"], [384, 0, 0, "-", "NumberDict"], [385, 0, 0, "-", "physicalField"]], "fipy.tools.dimensions.physicalField": [[385, 1, 1, "", "PhysicalField"], [385, 1, 1, "", "PhysicalUnit"]], "fipy.tools.dimensions.physicalField.PhysicalField": [[385, 3, 1, "", "__abs__"], [385, 3, 1, "", "__add__"], [385, 3, 1, "", "__array__"], [385, 3, 1, "", "__array_wrap__"], [385, 3, 1, "", "__bool__"], [385, 3, 1, "", "__div__"], [385, 3, 1, "", "__eq__"], [385, 3, 1, "", "__float__"], [385, 3, 1, "", "__ge__"], [385, 3, 1, "", "__getitem__"], [385, 3, 1, "", "__gt__"], [385, 3, 1, "", "__hash__"], [385, 3, 1, "", "__le__"], [385, 3, 1, "", "__lt__"], [385, 3, 1, "", "__mod__"], [385, 3, 1, "", "__mul__"], [385, 3, 1, "", "__ne__"], [385, 3, 1, "", "__neg__"], [385, 3, 1, "", "__nonzero__"], [385, 3, 1, "", "__pow__"], [385, 3, 1, "", "__radd__"], [385, 3, 1, "", "__repr__"], [385, 3, 1, "", "__rmul__"], [385, 3, 1, "", "__setitem__"], [385, 3, 1, "", "__str__"], [385, 3, 1, "", "__sub__"], [385, 3, 1, "", "__truediv__"], [385, 3, 1, "", "add"], [385, 3, 1, "", "allclose"], [385, 3, 1, "", "allequal"], [385, 3, 1, "", "arccos"], [385, 3, 1, "", "arccosh"], [385, 3, 1, "", "arcsin"], [385, 3, 1, "", "arctan"], [385, 3, 1, "", "arctan2"], [385, 3, 1, "", "arctanh"], [385, 3, 1, "", "ceil"], [385, 3, 1, "", "conjugate"], [385, 3, 1, "", "convertToUnit"], [385, 3, 1, "", "copy"], [385, 3, 1, "", "cos"], [385, 3, 1, "", "cosh"], [385, 3, 1, "", "divide"], [385, 3, 1, "", "dot"], [385, 3, 1, "", "floor"], [385, 3, 1, "", "getsctype"], [385, 3, 1, "", "inBaseUnits"], [385, 3, 1, "", "inDimensionless"], [385, 3, 1, "", "inRadians"], [385, 3, 1, "", "inSIUnits"], [385, 3, 1, "", "inUnitsOf"], [385, 3, 1, "", "itemset"], [385, 3, 1, "", "log"], [385, 3, 1, "", "log10"], [385, 3, 1, "", "multiply"], [385, 2, 1, "", "numericValue"], [385, 3, 1, "", "put"], [385, 3, 1, "", "reshape"], [385, 2, 1, "", "shape"], [385, 3, 1, "", "sign"], [385, 3, 1, "", "sin"], [385, 3, 1, "", "sinh"], [385, 3, 1, "", "sqrt"], [385, 3, 1, "", "subtract"], [385, 3, 1, "", "sum"], [385, 3, 1, "", "take"], [385, 3, 1, "", "tan"], [385, 3, 1, "", "tanh"], [385, 3, 1, "", "tostring"], [385, 2, 1, "", "unit"]], "fipy.tools.dimensions.physicalField.PhysicalUnit": [[385, 3, 1, "", "__div__"], [385, 3, 1, "", "__eq__"], [385, 3, 1, "", "__ge__"], [385, 3, 1, "", "__gt__"], [385, 6, 1, "", "__hash__"], [385, 3, 1, "", "__le__"], [385, 3, 1, "", "__lt__"], [385, 3, 1, "", "__mul__"], [385, 3, 1, "", "__ne__"], [385, 3, 1, "", "__pow__"], [385, 3, 1, "", "__rdiv__"], [385, 3, 1, "", "__repr__"], [385, 3, 1, "", "__rmul__"], [385, 3, 1, "", "__rtruediv__"], [385, 3, 1, "", "__str__"], [385, 3, 1, "", "__truediv__"], [385, 3, 1, "", "conversionFactorTo"], [385, 3, 1, "", "conversionTupleTo"], [385, 3, 1, "", "isAngle"], [385, 3, 1, "", "isCompatible"], [385, 3, 1, "", "isDimensionless"], [385, 3, 1, "", "isDimensionlessOrAngle"], [385, 3, 1, "", "isInverseAngle"], [385, 3, 1, "", "name"], [385, 3, 1, "", "setName"]], "fipy.tools.dump": [[386, 4, 1, "", "read"], [386, 4, 1, "", "write"]], "fipy.tools.logging": [[388, 4, 1, "", "package_info"]], "fipy.tools.numerix": [[389, 4, 1, "", "L1norm"], [389, 4, 1, "", "L2norm"], [389, 4, 1, "", "LINFnorm"], [389, 4, 1, "", "all"], [389, 4, 1, "", "allclose"], [389, 4, 1, "", "allequal"], [389, 4, 1, "", "dot"], [389, 4, 1, "", "getShape"], [389, 4, 1, "", "getUnit"], [389, 4, 1, "", "isclose"], [389, 4, 1, "", "nearest"], [389, 4, 1, "", "put"], [389, 4, 1, "", "rank"], [389, 4, 1, "", "reshape"], [389, 4, 1, "", "sqrtDot"], [389, 4, 1, "", "sum"], [389, 4, 1, "", "take"], [389, 4, 1, "", "tostring"]], "fipy.tools.parser": [[390, 4, 1, "", "parse"]], "fipy.tools.sharedtempfile": [[391, 4, 1, "", "SharedTemporaryFile"]], "fipy.tools.vector": [[393, 4, 1, "", "prune"], [393, 4, 1, "", "putAdd"]], "fipy.tools.vitals": [[395, 1, 1, "", "Vitals"]], "fipy.tools.vitals.Vitals": [[395, 3, 1, "", "__str__"], [395, 3, 1, "", "appendInfo"], [395, 2, 1, "", "documentElement"], [395, 2, 1, "", "firstChild"], [395, 2, 1, "", "lastChild"], [395, 2, 1, "", "localName"]], "fipy.variables": [[397, 0, 0, "-", "addOverFacesVariable"], [398, 0, 0, "-", "arithmeticCellToFaceVariable"], [399, 0, 0, "-", "betaNoiseVariable"], [400, 0, 0, "-", "binaryOperatorVariable"], [401, 0, 0, "-", "cellToFaceVariable"], [402, 0, 0, "-", "cellVariable"], [403, 0, 0, "-", "constant"], [404, 0, 0, "-", "constraintMask"], [405, 0, 0, "-", "coupledCellVariable"], [406, 0, 0, "-", "distanceVariable"], [407, 0, 0, "-", "exponentialNoiseVariable"], [408, 0, 0, "-", "faceGradContributionsVariable"], [409, 0, 0, "-", "faceGradVariable"], [410, 0, 0, "-", "faceVariable"], [411, 0, 0, "-", "gammaNoiseVariable"], [412, 0, 0, "-", "gaussCellGradVariable"], [413, 0, 0, "-", "gaussianNoiseVariable"], [414, 0, 0, "-", "harmonicCellToFaceVariable"], [415, 0, 0, "-", "histogramVariable"], [416, 0, 0, "-", "interfaceAreaVariable"], [417, 0, 0, "-", "interfaceFlagVariable"], [418, 0, 0, "-", "leastSquaresCellGradVariable"], [419, 0, 0, "-", "levelSetDiffusionVariable"], [420, 0, 0, "-", "meshVariable"], [421, 0, 0, "-", "minmodCellToFaceVariable"], [422, 0, 0, "-", "modCellGradVariable"], [423, 0, 0, "-", "modCellToFaceVariable"], [424, 0, 0, "-", "modFaceGradVariable"], [425, 0, 0, "-", "modPhysicalField"], [426, 0, 0, "-", "modularVariable"], [427, 0, 0, "-", "noiseVariable"], [428, 0, 0, "-", "operatorVariable"], [429, 0, 0, "-", "scharfetterGummelFaceVariable"], [430, 0, 0, "-", "surfactantConvectionVariable"], [431, 0, 0, "-", "surfactantVariable"], [432, 0, 0, "-", "test"], [433, 0, 0, "-", "unaryOperatorVariable"], [434, 0, 0, "-", "uniformNoiseVariable"], [435, 0, 0, "-", "variable"]], "fipy.variables.betaNoiseVariable": [[399, 1, 1, "", "BetaNoiseVariable"]], "fipy.variables.betaNoiseVariable.BetaNoiseVariable": [[399, 3, 1, "", "__abs__"], [399, 3, 1, "", "__and__"], [399, 3, 1, "", "__array__"], [399, 3, 1, "", "__array_wrap__"], [399, 3, 1, "", "__bool__"], [399, 3, 1, "", "__call__"], [399, 3, 1, "", "__eq__"], [399, 3, 1, "", "__ge__"], [399, 3, 1, "", "__getitem__"], [399, 3, 1, "", "__getstate__"], [399, 3, 1, "", "__gt__"], [399, 3, 1, "", "__hash__"], [399, 3, 1, "", "__invert__"], [399, 3, 1, "", "__le__"], [399, 3, 1, "", "__lt__"], [399, 3, 1, "", "__ne__"], [399, 3, 1, "", "__new__"], [399, 3, 1, "", "__nonzero__"], [399, 3, 1, "", "__or__"], [399, 3, 1, "", "__pow__"], [399, 3, 1, "", "__repr__"], [399, 3, 1, "", "__setstate__"], [399, 3, 1, "", "__str__"], [399, 3, 1, "", "all"], [399, 3, 1, "", "allclose"], [399, 3, 1, "", "any"], [399, 2, 1, "", "arithmeticFaceValue"], [399, 2, 1, "", "cellVolumeAverage"], [399, 3, 1, "", "constrain"], [399, 2, 1, "", "constraintMask"], [399, 3, 1, "", "copy"], [399, 3, 1, "", "dot"], [399, 2, 1, "", "faceGrad"], [399, 2, 1, "", "faceGradAverage"], [399, 2, 1, "", "faceValue"], [399, 2, 1, "", "gaussGrad"], [399, 3, 1, "", "getsctype"], [399, 2, 1, "", "globalValue"], [399, 2, 1, "", "grad"], [399, 2, 1, "", "harmonicFaceValue"], [399, 3, 1, "", "inBaseUnits"], [399, 3, 1, "", "inUnitsOf"], [399, 2, 1, "", "leastSquaresGrad"], [399, 2, 1, "", "mag"], [399, 3, 1, "", "max"], [399, 3, 1, "", "min"], [399, 2, 1, "", "minmodFaceValue"], [399, 2, 1, "", "old"], [399, 3, 1, "", "rdot"], [399, 3, 1, "", "release"], [399, 3, 1, "", "scramble"], [399, 3, 1, "", "setValue"], [399, 2, 1, "", "shape"], [399, 3, 1, "", "std"], [399, 2, 1, "", "unit"], [399, 3, 1, "", "updateOld"], [399, 2, 1, "", "value"]], "fipy.variables.cellVariable": [[402, 1, 1, "", "CellVariable"]], "fipy.variables.cellVariable.CellVariable": [[402, 3, 1, "", "__abs__"], [402, 3, 1, "", "__and__"], [402, 3, 1, "", "__array__"], [402, 3, 1, "", "__array_wrap__"], [402, 3, 1, "", "__bool__"], [402, 3, 1, "", "__call__"], [402, 3, 1, "", "__eq__"], [402, 3, 1, "", "__ge__"], [402, 3, 1, "", "__getitem__"], [402, 3, 1, "", "__getstate__"], [402, 3, 1, "", "__gt__"], [402, 3, 1, "", "__hash__"], [402, 3, 1, "", "__invert__"], [402, 3, 1, "", "__le__"], [402, 3, 1, "", "__lt__"], [402, 3, 1, "", "__ne__"], [402, 3, 1, "", "__new__"], [402, 3, 1, "", "__nonzero__"], [402, 3, 1, "", "__or__"], [402, 3, 1, "", "__pow__"], [402, 3, 1, "", "__repr__"], [402, 3, 1, "", "__setstate__"], [402, 3, 1, "", "__str__"], [402, 3, 1, "", "all"], [402, 3, 1, "", "allclose"], [402, 3, 1, "", "any"], [402, 2, 1, "", "arithmeticFaceValue"], [402, 2, 1, "", "cellVolumeAverage"], [402, 3, 1, "", "constrain"], [402, 2, 1, "", "constraintMask"], [402, 3, 1, "", "copy"], [402, 3, 1, "", "dot"], [402, 2, 1, "", "faceGrad"], [402, 2, 1, "", "faceGradAverage"], [402, 2, 1, "", "faceValue"], [402, 2, 1, "", "gaussGrad"], [402, 3, 1, "", "getsctype"], [402, 2, 1, "", "globalValue"], [402, 2, 1, "", "grad"], [402, 2, 1, "", "harmonicFaceValue"], [402, 3, 1, "", "inBaseUnits"], [402, 3, 1, "", "inUnitsOf"], [402, 2, 1, "", "leastSquaresGrad"], [402, 2, 1, "", "mag"], [402, 3, 1, "", "max"], [402, 3, 1, "", "min"], [402, 2, 1, "", "minmodFaceValue"], [402, 2, 1, "", "old"], [402, 3, 1, "", "rdot"], [402, 3, 1, "", "release"], [402, 3, 1, "", "setValue"], [402, 2, 1, "", "shape"], [402, 3, 1, "", "std"], [402, 2, 1, "", "unit"], [402, 3, 1, "", "updateOld"], [402, 2, 1, "", "value"]], "fipy.variables.distanceVariable": [[406, 1, 1, "", "DistanceVariable"]], "fipy.variables.distanceVariable.DistanceVariable": [[406, 3, 1, "", "__abs__"], [406, 3, 1, "", "__and__"], [406, 3, 1, "", "__array__"], [406, 3, 1, "", "__array_wrap__"], [406, 3, 1, "", "__bool__"], [406, 3, 1, "", "__call__"], [406, 3, 1, "", "__eq__"], [406, 3, 1, "", "__ge__"], [406, 3, 1, "", "__getitem__"], [406, 3, 1, "", "__getstate__"], [406, 3, 1, "", "__gt__"], [406, 3, 1, "", "__hash__"], [406, 3, 1, "", "__invert__"], [406, 3, 1, "", "__le__"], [406, 3, 1, "", "__lt__"], [406, 3, 1, "", "__ne__"], [406, 3, 1, "", "__new__"], [406, 3, 1, "", "__nonzero__"], [406, 3, 1, "", "__or__"], [406, 3, 1, "", "__pow__"], [406, 3, 1, "", "__repr__"], [406, 3, 1, "", "__setstate__"], [406, 3, 1, "", "__str__"], [406, 3, 1, "", "all"], [406, 3, 1, "", "allclose"], [406, 3, 1, "", "any"], [406, 2, 1, "", "arithmeticFaceValue"], [406, 3, 1, "", "calcDistanceFunction"], [406, 2, 1, "", "cellInterfaceAreas"], [406, 2, 1, "", "cellVolumeAverage"], [406, 3, 1, "", "constrain"], [406, 2, 1, "", "constraintMask"], [406, 3, 1, "", "copy"], [406, 3, 1, "", "dot"], [406, 3, 1, "", "extendVariable"], [406, 2, 1, "", "faceGrad"], [406, 2, 1, "", "faceGradAverage"], [406, 2, 1, "", "faceValue"], [406, 2, 1, "", "gaussGrad"], [406, 3, 1, "", "getsctype"], [406, 2, 1, "", "globalValue"], [406, 2, 1, "", "grad"], [406, 2, 1, "", "harmonicFaceValue"], [406, 3, 1, "", "inBaseUnits"], [406, 3, 1, "", "inUnitsOf"], [406, 2, 1, "", "leastSquaresGrad"], [406, 2, 1, "", "mag"], [406, 3, 1, "", "max"], [406, 3, 1, "", "min"], [406, 2, 1, "", "minmodFaceValue"], [406, 2, 1, "", "old"], [406, 3, 1, "", "rdot"], [406, 3, 1, "", "release"], [406, 3, 1, "", "setValue"], [406, 2, 1, "", "shape"], [406, 3, 1, "", "std"], [406, 2, 1, "", "unit"], [406, 3, 1, "", "updateOld"], [406, 2, 1, "", "value"]], "fipy.variables.exponentialNoiseVariable": [[407, 1, 1, "", "ExponentialNoiseVariable"]], "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable": [[407, 3, 1, "", "__abs__"], [407, 3, 1, "", "__and__"], [407, 3, 1, "", "__array__"], [407, 3, 1, "", "__array_wrap__"], [407, 3, 1, "", "__bool__"], [407, 3, 1, "", "__call__"], [407, 3, 1, "", "__eq__"], [407, 3, 1, "", "__ge__"], [407, 3, 1, "", "__getitem__"], [407, 3, 1, "", "__getstate__"], [407, 3, 1, "", "__gt__"], [407, 3, 1, "", "__hash__"], [407, 3, 1, "", "__invert__"], [407, 3, 1, "", "__le__"], [407, 3, 1, "", "__lt__"], [407, 3, 1, "", "__ne__"], [407, 3, 1, "", "__new__"], [407, 3, 1, "", "__nonzero__"], [407, 3, 1, "", "__or__"], [407, 3, 1, "", "__pow__"], [407, 3, 1, "", "__repr__"], [407, 3, 1, "", "__setstate__"], [407, 3, 1, "", "__str__"], [407, 3, 1, "", "all"], [407, 3, 1, "", "allclose"], [407, 3, 1, "", "any"], [407, 2, 1, "", "arithmeticFaceValue"], [407, 2, 1, "", "cellVolumeAverage"], [407, 3, 1, "", "constrain"], [407, 2, 1, "", "constraintMask"], [407, 3, 1, "", "copy"], [407, 3, 1, "", "dot"], [407, 2, 1, "", "faceGrad"], [407, 2, 1, "", "faceGradAverage"], [407, 2, 1, "", "faceValue"], [407, 2, 1, "", "gaussGrad"], [407, 3, 1, "", "getsctype"], [407, 2, 1, "", "globalValue"], [407, 2, 1, "", "grad"], [407, 2, 1, "", "harmonicFaceValue"], [407, 3, 1, "", "inBaseUnits"], [407, 3, 1, "", "inUnitsOf"], [407, 2, 1, "", "leastSquaresGrad"], [407, 2, 1, "", "mag"], [407, 3, 1, "", "max"], [407, 3, 1, "", "min"], [407, 2, 1, "", "minmodFaceValue"], [407, 2, 1, "", "old"], [407, 3, 1, "", "rdot"], [407, 3, 1, "", "release"], [407, 3, 1, "", "scramble"], [407, 3, 1, "", "setValue"], [407, 2, 1, "", "shape"], [407, 3, 1, "", "std"], [407, 2, 1, "", "unit"], [407, 3, 1, "", "updateOld"], [407, 2, 1, "", "value"]], "fipy.variables.faceVariable": [[410, 1, 1, "", "FaceVariable"]], "fipy.variables.faceVariable.FaceVariable": [[410, 3, 1, "", "__abs__"], [410, 3, 1, "", "__and__"], [410, 3, 1, "", "__array__"], [410, 3, 1, "", "__array_wrap__"], [410, 3, 1, "", "__bool__"], [410, 3, 1, "", "__call__"], [410, 3, 1, "", "__eq__"], [410, 3, 1, "", "__ge__"], [410, 3, 1, "", "__getitem__"], [410, 3, 1, "", "__getstate__"], [410, 3, 1, "", "__gt__"], [410, 3, 1, "", "__hash__"], [410, 3, 1, "", "__invert__"], [410, 3, 1, "", "__le__"], [410, 3, 1, "", "__lt__"], [410, 3, 1, "", "__ne__"], [410, 3, 1, "", "__new__"], [410, 3, 1, "", "__nonzero__"], [410, 3, 1, "", "__or__"], [410, 3, 1, "", "__pow__"], [410, 3, 1, "", "__repr__"], [410, 3, 1, "", "__setstate__"], [410, 3, 1, "", "__str__"], [410, 3, 1, "", "all"], [410, 3, 1, "", "allclose"], [410, 3, 1, "", "any"], [410, 3, 1, "", "constrain"], [410, 2, 1, "", "constraintMask"], [410, 3, 1, "", "copy"], [410, 2, 1, "", "divergence"], [410, 3, 1, "", "dot"], [410, 3, 1, "", "getsctype"], [410, 3, 1, "", "inBaseUnits"], [410, 3, 1, "", "inUnitsOf"], [410, 2, 1, "", "mag"], [410, 3, 1, "", "max"], [410, 3, 1, "", "min"], [410, 3, 1, "", "rdot"], [410, 3, 1, "", "release"], [410, 3, 1, "", "setValue"], [410, 2, 1, "", "shape"], [410, 3, 1, "", "std"], [410, 2, 1, "", "unit"], [410, 2, 1, "", "value"]], "fipy.variables.gammaNoiseVariable": [[411, 1, 1, "", "GammaNoiseVariable"]], "fipy.variables.gammaNoiseVariable.GammaNoiseVariable": [[411, 3, 1, "", "__abs__"], [411, 3, 1, "", "__and__"], [411, 3, 1, "", "__array__"], [411, 3, 1, "", "__array_wrap__"], [411, 3, 1, "", "__bool__"], [411, 3, 1, "", "__call__"], [411, 3, 1, "", "__eq__"], [411, 3, 1, "", "__ge__"], [411, 3, 1, "", "__getitem__"], [411, 3, 1, "", "__getstate__"], [411, 3, 1, "", "__gt__"], [411, 3, 1, "", "__hash__"], [411, 3, 1, "", "__invert__"], [411, 3, 1, "", "__le__"], [411, 3, 1, "", "__lt__"], [411, 3, 1, "", "__ne__"], [411, 3, 1, "", "__new__"], [411, 3, 1, "", "__nonzero__"], [411, 3, 1, "", "__or__"], [411, 3, 1, "", "__pow__"], [411, 3, 1, "", "__repr__"], [411, 3, 1, "", "__setstate__"], [411, 3, 1, "", "__str__"], [411, 3, 1, "", "all"], [411, 3, 1, "", "allclose"], [411, 3, 1, "", "any"], [411, 2, 1, "", "arithmeticFaceValue"], [411, 2, 1, "", "cellVolumeAverage"], [411, 3, 1, "", "constrain"], [411, 2, 1, "", "constraintMask"], [411, 3, 1, "", "copy"], [411, 3, 1, "", "dot"], [411, 2, 1, "", "faceGrad"], [411, 2, 1, "", "faceGradAverage"], [411, 2, 1, "", "faceValue"], [411, 2, 1, "", "gaussGrad"], [411, 3, 1, "", "getsctype"], [411, 2, 1, "", "globalValue"], [411, 2, 1, "", "grad"], [411, 2, 1, "", "harmonicFaceValue"], [411, 3, 1, "", "inBaseUnits"], [411, 3, 1, "", "inUnitsOf"], [411, 2, 1, "", "leastSquaresGrad"], [411, 2, 1, "", "mag"], [411, 3, 1, "", "max"], [411, 3, 1, "", "min"], [411, 2, 1, "", "minmodFaceValue"], [411, 2, 1, "", "old"], [411, 3, 1, "", "rdot"], [411, 3, 1, "", "release"], [411, 3, 1, "", "scramble"], [411, 3, 1, "", "setValue"], [411, 2, 1, "", "shape"], [411, 3, 1, "", "std"], [411, 2, 1, "", "unit"], [411, 3, 1, "", "updateOld"], [411, 2, 1, "", "value"]], "fipy.variables.gaussianNoiseVariable": [[413, 1, 1, "", "GaussianNoiseVariable"]], "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable": [[413, 3, 1, "", "__abs__"], [413, 3, 1, "", "__and__"], [413, 3, 1, "", "__array__"], [413, 3, 1, "", "__array_wrap__"], [413, 3, 1, "", "__bool__"], [413, 3, 1, "", "__call__"], [413, 3, 1, "", "__eq__"], [413, 3, 1, "", "__ge__"], [413, 3, 1, "", "__getitem__"], [413, 3, 1, "", "__getstate__"], [413, 3, 1, "", "__gt__"], [413, 3, 1, "", "__hash__"], [413, 3, 1, "", "__invert__"], [413, 3, 1, "", "__le__"], [413, 3, 1, "", "__lt__"], [413, 3, 1, "", "__ne__"], [413, 3, 1, "", "__new__"], [413, 3, 1, "", "__nonzero__"], [413, 3, 1, "", "__or__"], [413, 3, 1, "", "__pow__"], [413, 3, 1, "", "__repr__"], [413, 3, 1, "", "__setstate__"], [413, 3, 1, "", "__str__"], [413, 3, 1, "", "all"], [413, 3, 1, "", "allclose"], [413, 3, 1, "", "any"], [413, 2, 1, "", "arithmeticFaceValue"], [413, 2, 1, "", "cellVolumeAverage"], [413, 3, 1, "", "constrain"], [413, 2, 1, "", "constraintMask"], [413, 3, 1, "", "copy"], [413, 3, 1, "", "dot"], [413, 2, 1, "", "faceGrad"], [413, 2, 1, "", "faceGradAverage"], [413, 2, 1, "", "faceValue"], [413, 2, 1, "", "gaussGrad"], [413, 3, 1, "", "getsctype"], [413, 2, 1, "", "globalValue"], [413, 2, 1, "", "grad"], [413, 2, 1, "", "harmonicFaceValue"], [413, 3, 1, "", "inBaseUnits"], [413, 3, 1, "", "inUnitsOf"], [413, 2, 1, "", "leastSquaresGrad"], [413, 2, 1, "", "mag"], [413, 3, 1, "", "max"], [413, 3, 1, "", "min"], [413, 2, 1, "", "minmodFaceValue"], [413, 2, 1, "", "old"], [413, 3, 1, "", "rdot"], [413, 3, 1, "", "release"], [413, 3, 1, "", "scramble"], [413, 3, 1, "", "setValue"], [413, 2, 1, "", "shape"], [413, 3, 1, "", "std"], [413, 2, 1, "", "unit"], [413, 3, 1, "", "updateOld"], [413, 2, 1, "", "value"]], "fipy.variables.histogramVariable": [[415, 1, 1, "", "HistogramVariable"]], "fipy.variables.histogramVariable.HistogramVariable": [[415, 3, 1, "", "__abs__"], [415, 3, 1, "", "__and__"], [415, 3, 1, "", "__array__"], [415, 3, 1, "", "__array_wrap__"], [415, 3, 1, "", "__bool__"], [415, 3, 1, "", "__call__"], [415, 3, 1, "", "__eq__"], [415, 3, 1, "", "__ge__"], [415, 3, 1, "", "__getitem__"], [415, 3, 1, "", "__getstate__"], [415, 3, 1, "", "__gt__"], [415, 3, 1, "", "__hash__"], [415, 3, 1, "", "__invert__"], [415, 3, 1, "", "__le__"], [415, 3, 1, "", "__lt__"], [415, 3, 1, "", "__ne__"], [415, 3, 1, "", "__new__"], [415, 3, 1, "", "__nonzero__"], [415, 3, 1, "", "__or__"], [415, 3, 1, "", "__pow__"], [415, 3, 1, "", "__repr__"], [415, 3, 1, "", "__setstate__"], [415, 3, 1, "", "__str__"], [415, 3, 1, "", "all"], [415, 3, 1, "", "allclose"], [415, 3, 1, "", "any"], [415, 2, 1, "", "arithmeticFaceValue"], [415, 2, 1, "", "cellVolumeAverage"], [415, 3, 1, "", "constrain"], [415, 2, 1, "", "constraintMask"], [415, 3, 1, "", "copy"], [415, 3, 1, "", "dot"], [415, 2, 1, "", "faceGrad"], [415, 2, 1, "", "faceGradAverage"], [415, 2, 1, "", "faceValue"], [415, 2, 1, "", "gaussGrad"], [415, 3, 1, "", "getsctype"], [415, 2, 1, "", "globalValue"], [415, 2, 1, "", "grad"], [415, 2, 1, "", "harmonicFaceValue"], [415, 3, 1, "", "inBaseUnits"], [415, 3, 1, "", "inUnitsOf"], [415, 2, 1, "", "leastSquaresGrad"], [415, 2, 1, "", "mag"], [415, 3, 1, "", "max"], [415, 3, 1, "", "min"], [415, 2, 1, "", "minmodFaceValue"], [415, 2, 1, "", "old"], [415, 3, 1, "", "rdot"], [415, 3, 1, "", "release"], [415, 3, 1, "", "setValue"], [415, 2, 1, "", "shape"], [415, 3, 1, "", "std"], [415, 2, 1, "", "unit"], [415, 3, 1, "", "updateOld"], [415, 2, 1, "", "value"]], "fipy.variables.meshVariable": [[420, 1, 1, "", "MeshVariable"]], "fipy.variables.meshVariable.MeshVariable": [[420, 3, 1, "", "__abs__"], [420, 3, 1, "", "__and__"], [420, 3, 1, "", "__array__"], [420, 3, 1, "", "__array_wrap__"], [420, 3, 1, "", "__bool__"], [420, 3, 1, "", "__call__"], [420, 3, 1, "", "__eq__"], [420, 3, 1, "", "__ge__"], [420, 3, 1, "", "__getitem__"], [420, 3, 1, "", "__getstate__"], [420, 3, 1, "", "__gt__"], [420, 3, 1, "", "__hash__"], [420, 3, 1, "", "__invert__"], [420, 3, 1, "", "__le__"], [420, 3, 1, "", "__lt__"], [420, 3, 1, "", "__ne__"], [420, 3, 1, "", "__new__"], [420, 3, 1, "", "__nonzero__"], [420, 3, 1, "", "__or__"], [420, 3, 1, "", "__pow__"], [420, 3, 1, "", "__repr__"], [420, 3, 1, "", "__setstate__"], [420, 3, 1, "", "__str__"], [420, 3, 1, "", "all"], [420, 3, 1, "", "allclose"], [420, 3, 1, "", "any"], [420, 3, 1, "", "constrain"], [420, 2, 1, "", "constraintMask"], [420, 3, 1, "", "copy"], [420, 3, 1, "", "dot"], [420, 3, 1, "", "getsctype"], [420, 3, 1, "", "inBaseUnits"], [420, 3, 1, "", "inUnitsOf"], [420, 2, 1, "", "mag"], [420, 3, 1, "", "max"], [420, 3, 1, "", "min"], [420, 3, 1, "", "rdot"], [420, 3, 1, "", "release"], [420, 3, 1, "", "setValue"], [420, 2, 1, "", "shape"], [420, 3, 1, "", "std"], [420, 2, 1, "", "unit"], [420, 2, 1, "", "value"]], "fipy.variables.modularVariable": [[426, 1, 1, "", "ModularVariable"]], "fipy.variables.modularVariable.ModularVariable": [[426, 3, 1, "", "__abs__"], [426, 3, 1, "", "__and__"], [426, 3, 1, "", "__array__"], [426, 3, 1, "", "__array_wrap__"], [426, 3, 1, "", "__bool__"], [426, 3, 1, "", "__call__"], [426, 3, 1, "", "__eq__"], [426, 3, 1, "", "__ge__"], [426, 3, 1, "", "__getitem__"], [426, 3, 1, "", "__getstate__"], [426, 3, 1, "", "__gt__"], [426, 3, 1, "", "__hash__"], [426, 3, 1, "", "__invert__"], [426, 3, 1, "", "__le__"], [426, 3, 1, "", "__lt__"], [426, 3, 1, "", "__ne__"], [426, 3, 1, "", "__new__"], [426, 3, 1, "", "__nonzero__"], [426, 3, 1, "", "__or__"], [426, 3, 1, "", "__pow__"], [426, 3, 1, "", "__repr__"], [426, 3, 1, "", "__setstate__"], [426, 3, 1, "", "__str__"], [426, 3, 1, "", "all"], [426, 3, 1, "", "allclose"], [426, 3, 1, "", "any"], [426, 2, 1, "", "arithmeticFaceValue"], [426, 2, 1, "", "cellVolumeAverage"], [426, 3, 1, "", "constrain"], [426, 2, 1, "", "constraintMask"], [426, 3, 1, "", "copy"], [426, 3, 1, "", "dot"], [426, 2, 1, "", "faceGrad"], [426, 2, 1, "", "faceGradAverage"], [426, 2, 1, "", "faceGradNoMod"], [426, 2, 1, "", "faceValue"], [426, 2, 1, "", "gaussGrad"], [426, 3, 1, "", "getsctype"], [426, 2, 1, "", "globalValue"], [426, 2, 1, "", "grad"], [426, 2, 1, "", "harmonicFaceValue"], [426, 3, 1, "", "inBaseUnits"], [426, 3, 1, "", "inUnitsOf"], [426, 2, 1, "", "leastSquaresGrad"], [426, 2, 1, "", "mag"], [426, 3, 1, "", "max"], [426, 3, 1, "", "min"], [426, 2, 1, "", "minmodFaceValue"], [426, 2, 1, "", "old"], [426, 3, 1, "", "rdot"], [426, 3, 1, "", "release"], [426, 3, 1, "", "setValue"], [426, 2, 1, "", "shape"], [426, 3, 1, "", "std"], [426, 2, 1, "", "unit"], [426, 3, 1, "", "updateOld"], [426, 2, 1, "", "value"]], "fipy.variables.noiseVariable": [[427, 1, 1, "", "NoiseVariable"]], "fipy.variables.noiseVariable.NoiseVariable": [[427, 3, 1, "", "__abs__"], [427, 3, 1, "", "__and__"], [427, 3, 1, "", "__array__"], [427, 3, 1, "", "__array_wrap__"], [427, 3, 1, "", "__bool__"], [427, 3, 1, "", "__call__"], [427, 3, 1, "", "__eq__"], [427, 3, 1, "", "__ge__"], [427, 3, 1, "", "__getitem__"], [427, 3, 1, "", "__getstate__"], [427, 3, 1, "", "__gt__"], [427, 3, 1, "", "__hash__"], [427, 3, 1, "", "__invert__"], [427, 3, 1, "", "__le__"], [427, 3, 1, "", "__lt__"], [427, 3, 1, "", "__ne__"], [427, 3, 1, "", "__new__"], [427, 3, 1, "", "__nonzero__"], [427, 3, 1, "", "__or__"], [427, 3, 1, "", "__pow__"], [427, 3, 1, "", "__repr__"], [427, 3, 1, "", "__setstate__"], [427, 3, 1, "", "__str__"], [427, 3, 1, "", "all"], [427, 3, 1, "", "allclose"], [427, 3, 1, "", "any"], [427, 2, 1, "", "arithmeticFaceValue"], [427, 2, 1, "", "cellVolumeAverage"], [427, 3, 1, "", "constrain"], [427, 2, 1, "", "constraintMask"], [427, 3, 1, "", "copy"], [427, 3, 1, "", "dot"], [427, 2, 1, "", "faceGrad"], [427, 2, 1, "", "faceGradAverage"], [427, 2, 1, "", "faceValue"], [427, 2, 1, "", "gaussGrad"], [427, 3, 1, "", "getsctype"], [427, 2, 1, "", "globalValue"], [427, 2, 1, "", "grad"], [427, 2, 1, "", "harmonicFaceValue"], [427, 3, 1, "", "inBaseUnits"], [427, 3, 1, "", "inUnitsOf"], [427, 2, 1, "", "leastSquaresGrad"], [427, 2, 1, "", "mag"], [427, 3, 1, "", "max"], [427, 3, 1, "", "min"], [427, 2, 1, "", "minmodFaceValue"], [427, 2, 1, "", "old"], [427, 3, 1, "", "rdot"], [427, 3, 1, "", "release"], [427, 3, 1, "", "scramble"], [427, 3, 1, "", "setValue"], [427, 2, 1, "", "shape"], [427, 3, 1, "", "std"], [427, 2, 1, "", "unit"], [427, 3, 1, "", "updateOld"], [427, 2, 1, "", "value"]], "fipy.variables.scharfetterGummelFaceVariable": [[429, 1, 1, "", "ScharfetterGummelFaceVariable"]], "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable": [[429, 3, 1, "", "__abs__"], [429, 3, 1, "", "__and__"], [429, 3, 1, "", "__array__"], [429, 3, 1, "", "__array_wrap__"], [429, 3, 1, "", "__bool__"], [429, 3, 1, "", "__call__"], [429, 3, 1, "", "__eq__"], [429, 3, 1, "", "__ge__"], [429, 3, 1, "", "__getitem__"], [429, 3, 1, "", "__getstate__"], [429, 3, 1, "", "__gt__"], [429, 3, 1, "", "__hash__"], [429, 3, 1, "", "__invert__"], [429, 3, 1, "", "__le__"], [429, 3, 1, "", "__lt__"], [429, 3, 1, "", "__ne__"], [429, 3, 1, "", "__new__"], [429, 3, 1, "", "__nonzero__"], [429, 3, 1, "", "__or__"], [429, 3, 1, "", "__pow__"], [429, 3, 1, "", "__repr__"], [429, 3, 1, "", "__setstate__"], [429, 3, 1, "", "__str__"], [429, 3, 1, "", "all"], [429, 3, 1, "", "allclose"], [429, 3, 1, "", "any"], [429, 3, 1, "", "constrain"], [429, 2, 1, "", "constraintMask"], [429, 3, 1, "", "copy"], [429, 2, 1, "", "divergence"], [429, 3, 1, "", "dot"], [429, 3, 1, "", "getsctype"], [429, 3, 1, "", "inBaseUnits"], [429, 3, 1, "", "inUnitsOf"], [429, 2, 1, "", "mag"], [429, 3, 1, "", "max"], [429, 3, 1, "", "min"], [429, 3, 1, "", "rdot"], [429, 3, 1, "", "release"], [429, 3, 1, "", "setValue"], [429, 2, 1, "", "shape"], [429, 3, 1, "", "std"], [429, 2, 1, "", "unit"], [429, 2, 1, "", "value"]], "fipy.variables.surfactantConvectionVariable": [[430, 1, 1, "", "SurfactantConvectionVariable"]], "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable": [[430, 3, 1, "", "__abs__"], [430, 3, 1, "", "__and__"], [430, 3, 1, "", "__array__"], [430, 3, 1, "", "__array_wrap__"], [430, 3, 1, "", "__bool__"], [430, 3, 1, "", "__call__"], [430, 3, 1, "", "__eq__"], [430, 3, 1, "", "__ge__"], [430, 3, 1, "", "__getitem__"], [430, 3, 1, "", "__getstate__"], [430, 3, 1, "", "__gt__"], [430, 3, 1, "", "__hash__"], [430, 3, 1, "", "__invert__"], [430, 3, 1, "", "__le__"], [430, 3, 1, "", "__lt__"], [430, 3, 1, "", "__ne__"], [430, 3, 1, "", "__new__"], [430, 3, 1, "", "__nonzero__"], [430, 3, 1, "", "__or__"], [430, 3, 1, "", "__pow__"], [430, 3, 1, "", "__repr__"], [430, 3, 1, "", "__setstate__"], [430, 3, 1, "", "__str__"], [430, 3, 1, "", "all"], [430, 3, 1, "", "allclose"], [430, 3, 1, "", "any"], [430, 3, 1, "", "constrain"], [430, 2, 1, "", "constraintMask"], [430, 3, 1, "", "copy"], [430, 2, 1, "", "divergence"], [430, 3, 1, "", "dot"], [430, 3, 1, "", "getsctype"], [430, 3, 1, "", "inBaseUnits"], [430, 3, 1, "", "inUnitsOf"], [430, 2, 1, "", "mag"], [430, 3, 1, "", "max"], [430, 3, 1, "", "min"], [430, 3, 1, "", "rdot"], [430, 3, 1, "", "release"], [430, 3, 1, "", "setValue"], [430, 2, 1, "", "shape"], [430, 3, 1, "", "std"], [430, 2, 1, "", "unit"], [430, 2, 1, "", "value"]], "fipy.variables.surfactantVariable": [[431, 1, 1, "", "SurfactantVariable"]], "fipy.variables.surfactantVariable.SurfactantVariable": [[431, 3, 1, "", "__abs__"], [431, 3, 1, "", "__and__"], [431, 3, 1, "", "__array__"], [431, 3, 1, "", "__array_wrap__"], [431, 3, 1, "", "__bool__"], [431, 3, 1, "", "__call__"], [431, 3, 1, "", "__eq__"], [431, 3, 1, "", "__ge__"], [431, 3, 1, "", "__getitem__"], [431, 3, 1, "", "__getstate__"], [431, 3, 1, "", "__gt__"], [431, 3, 1, "", "__hash__"], [431, 3, 1, "", "__invert__"], [431, 3, 1, "", "__le__"], [431, 3, 1, "", "__lt__"], [431, 3, 1, "", "__ne__"], [431, 3, 1, "", "__new__"], [431, 3, 1, "", "__nonzero__"], [431, 3, 1, "", "__or__"], [431, 3, 1, "", "__pow__"], [431, 3, 1, "", "__repr__"], [431, 3, 1, "", "__setstate__"], [431, 3, 1, "", "__str__"], [431, 3, 1, "", "all"], [431, 3, 1, "", "allclose"], [431, 3, 1, "", "any"], [431, 2, 1, "", "arithmeticFaceValue"], [431, 2, 1, "", "cellVolumeAverage"], [431, 3, 1, "", "constrain"], [431, 2, 1, "", "constraintMask"], [431, 3, 1, "", "copy"], [431, 3, 1, "", "dot"], [431, 2, 1, "", "faceGrad"], [431, 2, 1, "", "faceGradAverage"], [431, 2, 1, "", "faceValue"], [431, 2, 1, "", "gaussGrad"], [431, 3, 1, "", "getsctype"], [431, 2, 1, "", "globalValue"], [431, 2, 1, "", "grad"], [431, 2, 1, "", "harmonicFaceValue"], [431, 3, 1, "", "inBaseUnits"], [431, 3, 1, "", "inUnitsOf"], [431, 2, 1, "", "interfaceVar"], [431, 2, 1, "", "leastSquaresGrad"], [431, 2, 1, "", "mag"], [431, 3, 1, "", "max"], [431, 3, 1, "", "min"], [431, 2, 1, "", "minmodFaceValue"], [431, 2, 1, "", "old"], [431, 3, 1, "", "rdot"], [431, 3, 1, "", "release"], [431, 3, 1, "", "setValue"], [431, 2, 1, "", "shape"], [431, 3, 1, "", "std"], [431, 2, 1, "", "unit"], [431, 3, 1, "", "updateOld"], [431, 2, 1, "", "value"]], "fipy.variables.uniformNoiseVariable": [[434, 1, 1, "", "UniformNoiseVariable"]], "fipy.variables.uniformNoiseVariable.UniformNoiseVariable": [[434, 3, 1, "", "__abs__"], [434, 3, 1, "", "__and__"], [434, 3, 1, "", "__array__"], [434, 3, 1, "", "__array_wrap__"], [434, 3, 1, "", "__bool__"], [434, 3, 1, "", "__call__"], [434, 3, 1, "", "__eq__"], [434, 3, 1, "", "__ge__"], [434, 3, 1, "", "__getitem__"], [434, 3, 1, "", "__getstate__"], [434, 3, 1, "", "__gt__"], [434, 3, 1, "", "__hash__"], [434, 3, 1, "", "__invert__"], [434, 3, 1, "", "__le__"], [434, 3, 1, "", "__lt__"], [434, 3, 1, "", "__ne__"], [434, 3, 1, "", "__new__"], [434, 3, 1, "", "__nonzero__"], [434, 3, 1, "", "__or__"], [434, 3, 1, "", "__pow__"], [434, 3, 1, "", "__repr__"], [434, 3, 1, "", "__setstate__"], [434, 3, 1, "", "__str__"], [434, 3, 1, "", "all"], [434, 3, 1, "", "allclose"], [434, 3, 1, "", "any"], [434, 2, 1, "", "arithmeticFaceValue"], [434, 2, 1, "", "cellVolumeAverage"], [434, 3, 1, "", "constrain"], [434, 2, 1, "", "constraintMask"], [434, 3, 1, "", "copy"], [434, 3, 1, "", "dot"], [434, 2, 1, "", "faceGrad"], [434, 2, 1, "", "faceGradAverage"], [434, 2, 1, "", "faceValue"], [434, 2, 1, "", "gaussGrad"], [434, 3, 1, "", "getsctype"], [434, 2, 1, "", "globalValue"], [434, 2, 1, "", "grad"], [434, 2, 1, "", "harmonicFaceValue"], [434, 3, 1, "", "inBaseUnits"], [434, 3, 1, "", "inUnitsOf"], [434, 2, 1, "", "leastSquaresGrad"], [434, 2, 1, "", "mag"], [434, 3, 1, "", "max"], [434, 3, 1, "", "min"], [434, 2, 1, "", "minmodFaceValue"], [434, 2, 1, "", "old"], [434, 3, 1, "", "rdot"], [434, 3, 1, "", "release"], [434, 3, 1, "", "scramble"], [434, 3, 1, "", "setValue"], [434, 2, 1, "", "shape"], [434, 3, 1, "", "std"], [434, 2, 1, "", "unit"], [434, 3, 1, "", "updateOld"], [434, 2, 1, "", "value"]], "fipy.variables.variable": [[435, 1, 1, "", "Variable"]], "fipy.variables.variable.Variable": [[435, 3, 1, "", "__abs__"], [435, 3, 1, "", "__and__"], [435, 3, 1, "", "__array__"], [435, 3, 1, "", "__array_wrap__"], [435, 3, 1, "", "__bool__"], [435, 3, 1, "", "__call__"], [435, 3, 1, "", "__eq__"], [435, 3, 1, "", "__ge__"], [435, 3, 1, "", "__getitem__"], [435, 3, 1, "", "__getstate__"], [435, 3, 1, "", "__gt__"], [435, 3, 1, "", "__hash__"], [435, 3, 1, "", "__invert__"], [435, 3, 1, "", "__le__"], [435, 3, 1, "", "__lt__"], [435, 3, 1, "", "__ne__"], [435, 3, 1, "", "__new__"], [435, 3, 1, "", "__nonzero__"], [435, 3, 1, "", "__or__"], [435, 3, 1, "", "__pow__"], [435, 3, 1, "", "__repr__"], [435, 3, 1, "", "__setstate__"], [435, 3, 1, "", "__str__"], [435, 3, 1, "", "all"], [435, 3, 1, "", "allclose"], [435, 3, 1, "", "any"], [435, 3, 1, "", "constrain"], [435, 3, 1, "", "copy"], [435, 3, 1, "", "getsctype"], [435, 3, 1, "", "inBaseUnits"], [435, 3, 1, "", "inUnitsOf"], [435, 2, 1, "", "mag"], [435, 3, 1, "", "max"], [435, 3, 1, "", "min"], [435, 3, 1, "", "release"], [435, 3, 1, "", "setValue"], [435, 2, 1, "", "shape"], [435, 3, 1, "", "std"], [435, 2, 1, "", "unit"], [435, 2, 1, "", "value"]], "fipy.viewers": [[436, 1, 1, "", "DummyViewer"], [436, 5, 1, "", "MeshDimensionError"], [436, 4, 1, "", "Viewer"], [437, 0, 0, "-", "matplotlibViewer"], [449, 0, 0, "-", "mayaviViewer"], [453, 0, 0, "-", "multiViewer"], [454, 0, 0, "-", "test"], [455, 0, 0, "-", "testinteractive"], [456, 0, 0, "-", "tsvViewer"], [457, 0, 0, "-", "viewer"], [458, 0, 0, "-", "vtkViewer"]], "fipy.viewers.DummyViewer": [[436, 3, 1, "", "plot"], [436, 3, 1, "", "plotMesh"], [436, 3, 1, "", "setLimits"], [436, 2, 1, "", "title"], [436, 2, 1, "", "vars"]], "fipy.viewers.MeshDimensionError": [[436, 6, 1, "", "__cause__"], [436, 6, 1, "", "__context__"], [436, 3, 1, "", "__delattr__"], [436, 3, 1, "", "__getattribute__"], [436, 3, 1, "", "__reduce__"], [436, 3, 1, "", "__repr__"], [436, 3, 1, "", "__setattr__"], [436, 3, 1, "", "__str__"], [436, 3, 1, "", "add_note"], [436, 3, 1, "", "with_traceback"]], "fipy.viewers.matplotlibViewer": [[437, 4, 1, "", "MatplotlibViewer"], [438, 0, 0, "-", "abstractMatplotlib2DViewer"], [439, 0, 0, "-", "abstractMatplotlibViewer"], [440, 0, 0, "-", "matplotlib1DViewer"], [441, 0, 0, "-", "matplotlib2DContourViewer"], [442, 0, 0, "-", "matplotlib2DGridContourViewer"], [443, 0, 0, "-", "matplotlib2DGridViewer"], [444, 0, 0, "-", "matplotlib2DViewer"], [445, 0, 0, "-", "matplotlibSparseMatrixViewer"], [446, 0, 0, "-", "matplotlibStreamViewer"], [447, 0, 0, "-", "matplotlibVectorViewer"], [448, 0, 0, "-", "test"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer": [[438, 1, 1, "", "AbstractMatplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer": [[438, 2, 1, "", "axes"], [438, 2, 1, "", "cmap"], [438, 2, 1, "", "colorbar"], [438, 2, 1, "", "fig"], [438, 2, 1, "", "id"], [438, 2, 1, "", "log"], [438, 3, 1, "", "plot"], [438, 3, 1, "", "plotMesh"], [438, 3, 1, "", "setLimits"], [438, 2, 1, "", "title"], [438, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer": [[439, 1, 1, "", "AbstractMatplotlibViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer": [[439, 2, 1, "", "axes"], [439, 2, 1, "", "cmap"], [439, 2, 1, "", "colorbar"], [439, 2, 1, "", "fig"], [439, 2, 1, "", "id"], [439, 2, 1, "", "log"], [439, 3, 1, "", "plot"], [439, 3, 1, "", "plotMesh"], [439, 3, 1, "", "setLimits"], [439, 2, 1, "", "title"], [439, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer": [[440, 1, 1, "", "Matplotlib1DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer": [[440, 2, 1, "", "axes"], [440, 2, 1, "", "cmap"], [440, 2, 1, "", "colorbar"], [440, 2, 1, "", "fig"], [440, 2, 1, "", "id"], [440, 2, 1, "", "lines"], [440, 2, 1, "", "log"], [440, 3, 1, "", "plot"], [440, 3, 1, "", "plotMesh"], [440, 3, 1, "", "setLimits"], [440, 2, 1, "", "title"], [440, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer": [[441, 1, 1, "", "Matplotlib2DContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer": [[441, 2, 1, "", "axes"], [441, 2, 1, "", "cmap"], [441, 2, 1, "", "colorbar"], [441, 2, 1, "", "fig"], [441, 2, 1, "", "id"], [441, 2, 1, "", "levels"], [441, 2, 1, "", "log"], [441, 3, 1, "", "plot"], [441, 3, 1, "", "plotMesh"], [441, 3, 1, "", "setLimits"], [441, 2, 1, "", "title"], [441, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer": [[442, 1, 1, "", "Matplotlib2DGridContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer": [[442, 2, 1, "", "axes"], [442, 2, 1, "", "cmap"], [442, 2, 1, "", "colorbar"], [442, 2, 1, "", "fig"], [442, 2, 1, "", "id"], [442, 2, 1, "", "levels"], [442, 2, 1, "", "log"], [442, 3, 1, "", "plot"], [442, 3, 1, "", "plotMesh"], [442, 3, 1, "", "setLimits"], [442, 2, 1, "", "title"], [442, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer": [[443, 1, 1, "", "Matplotlib2DGridViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer": [[443, 2, 1, "", "axes"], [443, 2, 1, "", "cmap"], [443, 2, 1, "", "colorbar"], [443, 2, 1, "", "fig"], [443, 2, 1, "", "id"], [443, 2, 1, "", "log"], [443, 3, 1, "", "plot"], [443, 3, 1, "", "plotMesh"], [443, 3, 1, "", "setLimits"], [443, 2, 1, "", "title"], [443, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer": [[444, 1, 1, "", "Matplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer": [[444, 2, 1, "", "axes"], [444, 2, 1, "", "cmap"], [444, 2, 1, "", "collection"], [444, 2, 1, "", "colorbar"], [444, 2, 1, "", "fig"], [444, 2, 1, "", "id"], [444, 2, 1, "", "log"], [444, 3, 1, "", "plot"], [444, 3, 1, "", "plotMesh"], [444, 3, 1, "", "setLimits"], [444, 2, 1, "", "title"], [444, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer": [[445, 1, 1, "", "MatplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer": [[446, 1, 1, "", "MatplotlibStreamViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer": [[446, 2, 1, "", "axes"], [446, 2, 1, "", "cmap"], [446, 2, 1, "", "colorbar"], [446, 2, 1, "", "fig"], [446, 2, 1, "", "id"], [446, 2, 1, "", "kwargs"], [446, 2, 1, "", "log"], [446, 3, 1, "", "plot"], [446, 3, 1, "", "plotMesh"], [446, 3, 1, "", "setLimits"], [446, 2, 1, "", "title"], [446, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer": [[447, 1, 1, "", "MatplotlibVectorViewer"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer": [[447, 2, 1, "", "axes"], [447, 2, 1, "", "cmap"], [447, 2, 1, "", "colorbar"], [447, 2, 1, "", "fig"], [447, 2, 1, "", "id"], [447, 2, 1, "", "log"], [447, 3, 1, "", "plot"], [447, 3, 1, "", "plotMesh"], [447, 3, 1, "", "setLimits"], [447, 2, 1, "", "title"], [447, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer": [[449, 1, 1, "", "MayaviClient"], [450, 0, 0, "-", "mayaviClient"], [451, 0, 0, "-", "mayaviDaemon"], [452, 0, 0, "-", "test"]], "fipy.viewers.mayaviViewer.MayaviClient": [[449, 2, 1, "", "fps"], [449, 3, 1, "", "plot"], [449, 3, 1, "", "plotMesh"], [449, 3, 1, "", "setLimits"], [449, 2, 1, "", "title"], [449, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer.mayaviClient": [[450, 1, 1, "", "MayaviClient"]], "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient": [[450, 2, 1, "", "fps"], [450, 3, 1, "", "plot"], [450, 3, 1, "", "plotMesh"], [450, 3, 1, "", "setLimits"], [450, 2, 1, "", "title"], [450, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer.mayaviDaemon": [[451, 1, 1, "", "MayaviDaemon"], [451, 4, 1, "", "main"]], "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon": [[451, 3, 1, "", "parse_command_line"], [451, 3, 1, "", "setup_source"], [451, 3, 1, "", "update_pipeline"], [451, 3, 1, "", "view_data"]], "fipy.viewers.multiViewer": [[453, 1, 1, "", "MultiViewer"]], "fipy.viewers.multiViewer.MultiViewer": [[453, 3, 1, "", "plot"], [453, 3, 1, "", "plotMesh"], [453, 3, 1, "", "setLimits"], [453, 2, 1, "", "title"], [453, 2, 1, "", "vars"]], "fipy.viewers.tsvViewer": [[456, 1, 1, "", "TSVViewer"]], "fipy.viewers.tsvViewer.TSVViewer": [[456, 3, 1, "", "plot"], [456, 3, 1, "", "plotMesh"], [456, 3, 1, "", "setLimits"], [456, 2, 1, "", "title"], [456, 2, 1, "", "vars"]], "fipy.viewers.viewer": [[457, 1, 1, "", "AbstractViewer"]], "fipy.viewers.viewer.AbstractViewer": [[457, 3, 1, "", "plot"], [457, 3, 1, "", "plotMesh"], [457, 3, 1, "", "setLimits"], [457, 2, 1, "", "title"], [457, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer": [[458, 1, 1, "", "VTKCellViewer"], [458, 1, 1, "", "VTKFaceViewer"], [458, 4, 1, "", "VTKViewer"], [459, 0, 0, "-", "test"], [460, 0, 0, "-", "vtkCellViewer"], [461, 0, 0, "-", "vtkFaceViewer"], [462, 0, 0, "-", "vtkViewer"]], "fipy.viewers.vtkViewer.VTKCellViewer": [[458, 3, 1, "", "plot"], [458, 3, 1, "", "plotMesh"], [458, 3, 1, "", "setLimits"], [458, 2, 1, "", "title"], [458, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.VTKFaceViewer": [[458, 3, 1, "", "plot"], [458, 3, 1, "", "plotMesh"], [458, 3, 1, "", "setLimits"], [458, 2, 1, "", "title"], [458, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkCellViewer": [[460, 1, 1, "", "VTKCellViewer"]], "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer": [[460, 3, 1, "", "plot"], [460, 3, 1, "", "plotMesh"], [460, 3, 1, "", "setLimits"], [460, 2, 1, "", "title"], [460, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkFaceViewer": [[461, 1, 1, "", "VTKFaceViewer"]], "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer": [[461, 3, 1, "", "plot"], [461, 3, 1, "", "plotMesh"], [461, 3, 1, "", "setLimits"], [461, 2, 1, "", "title"], [461, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkViewer": [[462, 1, 1, "", "VTKViewer"]], "fipy.viewers.vtkViewer.vtkViewer.VTKViewer": [[462, 3, 1, "", "plot"], [462, 3, 1, "", "plotMesh"], [462, 3, 1, "", "setLimits"], [462, 2, 1, "", "title"], [462, 2, 1, "", "vars"]], "package": [[472, 0, 0, "-", "subpackage"]], "package.subpackage": [[473, 0, 0, "-", "base"], [474, 0, 0, "-", "object"]], "package.subpackage.base": [[473, 1, 1, "", "Base"]], "package.subpackage.base.Base": [[473, 3, 1, "", "method1"], [473, 3, 1, "", "method2"]], "package.subpackage.object": [[474, 1, 1, "", "Object"]], "package.subpackage.object.Object": [[474, 3, 1, "", "method1"], [474, 3, 1, "", "method2"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:function", "5": "py:exception", "6": "py:attribute", "7": "std:cmdoption", "8": "std:envvar"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"], "7": ["std", "cmdoption", "program option"], "8": ["std", "envvar", "environment variable"]}, "titleterms": {"git": [0, 9, 11], "practic": 0, "branch": [0, 9, 11], "merg": 0, "chang": [0, 2, 8], "from": 0, "master": 0, "submit": 0, "code": 0, "review": 0, "refactor": 0, "complet": 0, "continu": 0, "integr": 0, "make": [0, 8], "releas": 0, "sourc": [0, 8, 21, 68, 466], "upload": 0, "updat": [0, 7, 185, 186, 187, 188], "conda": 0, "forg": 0, "feedstock": 0, "announc": 0, "fipi": [1, 7, 8, 11, 17, 20, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465], "packag": [1, 11, 13, 471, 472, 473, 474], "document": [1, 475], "log": [2, 17, 388], "version": [2, 29, 394], "3": 2, "4": 2, "6": 2, "gcbc0b38ea": 2, "pull": 2, "fix": [2, 17], "2022": 2, "06": 2, "15": 2, "2": [2, 17], "1": 2, "2020": 2, "08": 2, "01": 2, "02": 2, "14": 2, "2019": 2, "28": 2, "04": 2, "22": 2, "2017": 2, "17": 2, "2016": 2, "12": 2, "24": 2, "2015": 2, "2013": 2, "09": 2, "30": 2, "0": 2, "2012": 2, "10": 2, "03": 2, "16": 2, "2011": 2, "20": 2, "2010": 2, "05": 2, "2009": 2, "11": 2, "23": 2, "2008": 2, "2007": 2, "2006": 2, "2005": 2, "2004": 2, "contact": 3, "github": 3, "discuss": [3, 6], "issu": 3, "stackoverflow": 3, "mail": 3, "list": 3, "archiv": 3, "contributor": 4, "disclaim": 5, "effici": 6, "comparison": 6, "between": [6, 8], "cach": 6, "flag": [6, 17, 22], "pyspars": [6, 16, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296], "trilino": [6, 16, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "exampl": [7, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], "select": 7, "diffus": [7, 8, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 466], "convect": [7, 8, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 466], "phase": [7, 114, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176], "field": 7, "level": [7, 11, 21, 139], "set": [7, 11], "cahn": 7, "hilliard": 7, "fluid": 7, "flow": [7, 118, 119, 120], "reactiv": 7, "wet": 7, "frequent": 8, "ask": 8, "question": 8, "how": [8, 475], "do": 8, "i": 8, "repres": 8, "an": 8, "equat": [8, 17, 466, 467], "wai": 8, "model": 8, "anisotrop": 8, "process": 8, "more": 8, "gener": [8, 467], "coeffici": 8, "tensor": 8, "so": 8, "term": [8, 12, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 466], "take": 8, "form": 8, "partial_i": 8, "gamma_": 8, "ij": 8, "partial_j": 8, "phi": [8, 466], "doesn": 8, "t": [8, 15, 466], "involv": 8, "depend": 8, "variabl": [8, 17, 22, 107, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435], "transient": [8, 466], "what": 8, "my": 8, "where": 8, "put": 8, "m": 8, "solv": [8, 17], "can": 8, "see": 8, "export": 8, "data": 8, "save": 8, "plot": 8, "imag": 8, "onli": 8, "want": 8, "file": 8, "displai": 8, "screen": 8, "movi": 8, "why": 8, "viewer": [8, 18, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462], "look": 8, "iter": 8, "timestep": 8, "sweep": 8, "oh": 8, "distinct": 8, "cellvari": [8, 402], "facevari": [8, 410], "boundari": [8, 17, 466], "condit": [8, 17, 466], "doe": 8, "thi": 8, "error": 8, "messag": 8, "mean": 8, "": 8, "default": [8, 17], "behavior": 8, "tell": 8, "run": [8, 17], "parallel": [8, 17, 159], "don": [8, 15], "script": [8, 21], "work": 8, "anymor": 8, "isn": 8, "answer": 8, "here": 8, "usag": [9, 11], "client": [9, 11], "develop": [10, 11, 21], "guidelin": 10, "object": [10, 21, 474], "orient": [10, 21], "design": [10, 21], "program": [10, 21], "style": 10, "test": [10, 17, 21, 37, 42, 69, 79, 87, 105, 106, 117, 120, 125, 132, 146, 152, 153, 158, 168, 170, 176, 180, 183, 184, 196, 203, 241, 307, 365, 371, 372, 373, 374, 375, 392, 432, 448, 452, 454, 459], "instal": [11, 13, 15], "pre": 11, "binder": 11, "recommend": 11, "method": [11, 466], "obtain": 11, "requir": 11, "python": [11, 17, 21], "numpi": 11, "option": 11, "gmsh": [11, 17], "scipi": [11, 16, 298, 299, 300, 301, 302, 303, 304, 305], "scikit": 11, "fmm": 11, "lsmlib": 11, "environ": [11, 17, 22], "nix": [11, 13], "get": [11, 13], "start": [11, 13], "addit": [11, 13], "us": [11, 12, 13, 17], "pip": [11, 13], "public": 14, "present": 14, "overview": 15, "even": 15, "you": 15, "read": [15, 475], "manual": [15, 17, 465], "download": 15, "support": 15, "convent": 15, "notat": 15, "solver": [16, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332], "petsc": [16, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "pyamg": [16, 265, 266, 267, 268, 269, 270, 271, 272], "pyamgx": [16, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], "command": [17, 22], "line": [17, 22, 140], "openmp": 17, "thread": 17, "v": 17, "mpi": 17, "rank": 17, "mesh": [17, 154, 155, 156, 157, 158, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250], "coupl": [17, 74], "vector": [17, 393], "appli": 17, "valu": 17, "dirichlet": 17, "gradient": 17, "neumann": 17, "flux": 17, "outlet": 17, "inlet": 17, "spatial": 17, "vari": 17, "robin": [17, 67], "intern": 17, "under": 17, "matplotlib": 18, "mayavi": 18, "virtual": 19, "kinet": 19, "materi": 19, "laboratori": 19, "content": 20, "implement": 21, "numer": [21, 468, 469], "approach": 21, "structur": 21, "base": [21, 473], "open": 21, "high": 21, "languag": 21, "extern": 22, "benchmark": [24, 25, 26, 27, 28, 29], "size": 26, "step": 27, "util": 28, "cahnhilliard": [30, 31, 32, 33, 34, 35, 36, 37], "mesh2d": [31, 61, 112, 227], "mesh2dcoupl": 32, "mesh3d": 33, "sphere": [34, 157], "spheredaemon": 35, "tanh1d": 36, "chemotaxi": [38, 39, 40, 41, 42], "input": [39, 99, 113], "input2d": 40, "paramet": 41, "advect": [44, 45, 46, 47, 122, 123, 124, 125, 126], "explicitupwind": 45, "implicitupwind": 46, "vanleerupwind": 47, "exponential1d": [48, 49, 50, 51, 52], "cylindricalmesh1d": 49, "cylindricalmesh1dnonuniform": 50, "mesh1d": [51, 54, 56, 65, 77, 81, 89, 90, 91, 110, 124, 130, 226], "tri2d": [52, 57, 62, 66, 80, 246], "exponential1dback": [53, 54], "exponential1dsourc": [55, 56, 57], "exponential2d": [58, 59, 60, 61, 62], "cylindricalmesh2d": 59, "cylindricalmesh2dnonuniform": 60, "peclet": 63, "powerlaw1d": [64, 65, 66], "anisotropi": [71, 161], "circl": [72, 123, 128, 149], "circlequad": 73, "electrostat": 75, "explicit": [76, 77, 78, 79, 80], "mixedel": 78, "mesh20x20": [82, 92, 93, 94, 95, 96, 97, 166], "mesh20x20coupl": 83, "nthorder": [84, 85, 86, 87], "input4thorder1d": 85, "input4thorder_lin": 86, "steadyst": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], "inputperiod": 90, "tri2dinput": [91, 97, 100], "gmshinput": 93, "isotropi": 94, "modifiedmeshinput": 95, "orthoerror": 96, "mesh50x50": [98, 99, 100], "othermesh": [101, 102, 103, 104], "cubicalproblem": 102, "grid3dinput": 103, "prism": 104, "elphf": [108, 109, 110, 111, 112, 113, 114, 115, 116, 117], "mesh1ddimension": 111, "phasediffus": 115, "poisson": 116, "stokescav": 119, "levelset": [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153], "trench": 126, "distancefunct": [127, 128, 129, 130, 131, 132], "interior": 129, "squar": [131, 151], "electrochem": [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "adsorbingsurfactantequ": 134, "gapfilldistancevari": 135, "gapfillmesh": 136, "gold": 137, "howtowriteascript": 138, "matplotlibsurfactantview": 141, "mayavisurfactantview": 142, "metaliondiffusionequ": 143, "simpletrenchsystem": 144, "surfactantbulkdiffusionequ": 145, "trenchmesh": 147, "surfact": [148, 149, 150, 151, 152], "expandingcircl": 150, "gmshrefin": 155, "inputgrid2d": 156, "anisotropyold": 162, "binari": 163, "binarycoupl": 164, "imping": [165, 166, 167, 168], "mesh40x1": 167, "missorient": [169, 170], "polyxt": 171, "polyxtalcoupl": 172, "quaternari": 173, "simpl": 174, "symmetri": 175, "reactivewet": [177, 178, 179, 180], "liquidvapor1d": 178, "liquidvapor2d": 179, "riemann": [181, 182, 183], "acoust": 182, "update0_1to1_0": 186, "update1_0to2_0": 187, "update2_0to3_0": 188, "boundarycondit": [190, 191, 192, 193, 194, 195, 196], "constraint": 192, "fixedflux": 193, "fixedvalu": 194, "nthorderboundarycondit": 195, "matric": [197, 198, 199, 200, 201, 202, 203, 204], "offsetsparsematrix": 198, "petscmatrix": 199, "pysparsematrix": 200, "scipymatrix": 201, "sparsematrix": 202, "trilinosmatrix": 204, "abstractmesh": 206, "builder": [207, 208, 209, 210, 211, 212, 213], "abstractgridbuild": 208, "grid1dbuild": 209, "grid2dbuild": 210, "grid3dbuild": 211, "periodicgrid1dbuild": 212, "utilityclass": 213, "cylindricalgrid1d": 214, "cylindricalgrid2d": 215, "cylindricalnonuniformgrid1d": 216, "cylindricalnonuniformgrid2d": 217, "cylindricaluniformgrid1d": 218, "cylindricaluniformgrid2d": 219, "factorymesh": 220, "gmshmesh": 221, "grid1d": 222, "grid2d": 223, "grid3d": 224, "nonuniformgrid1d": 228, "nonuniformgrid2d": 229, "nonuniformgrid3d": 230, "periodicgrid1d": 231, "periodicgrid2d": 232, "periodicgrid3d": 233, "represent": [234, 235, 236, 237], "abstractrepresent": 235, "gridrepresent": 236, "meshrepresent": 237, "skewedgrid2d": 238, "sphericalnonuniformgrid1d": 239, "sphericaluniformgrid1d": 240, "topologi": [242, 243, 244, 245], "abstracttopologi": 243, "gridtopologi": 244, "meshtopologi": 245, "uniformgrid": 247, "uniformgrid1d": 248, "uniformgrid2d": 249, "uniformgrid3d": 250, "comm": [253, 254, 255, 256, 309, 310, 311, 312, 377, 378, 379], "parallelpetsccommwrapp": 254, "petsccommwrapp": 255, "serialpetsccommwrapp": 256, "dummysolv": 257, "linearbicgsolv": 258, "linearcgssolv": [259, 266, 287, 300, 314], "lineargmressolv": [260, 267, 279, 288, 301, 315], "linearlusolv": [261, 269, 280, 290, 302, 316], "linearpcgsolv": [262, 270, 291, 303, 317], "petsckrylovsolv": 263, "petscsolv": 264, "lineargeneralsolv": 268, "precondition": [271, 272, 281, 282, 292, 293, 294, 295, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328], "smoothedaggregationprecondition": 272, "aggregationamgsolv": 274, "classicalamgsolv": 275, "linearbicgstabsolv": [276, 299, 313], "linearcgsolv": 277, "linearfgmressolv": 278, "pyamgxsolv": 283, "smoother": [284, 285], "linearjorsolv": 289, "jacobiprecondition": [293, 321], "ssorprecondition": 295, "pysparsesolv": 296, "pysparsematrixsolv": 297, "scipykrylovsolv": 304, "scipysolv": 305, "epetracommwrapp": 310, "parallelepetracommwrapp": 311, "serialepetracommwrapp": 312, "domdecompprecondition": 319, "icprecondition": 320, "multilevelddmlprecondition": 322, "multilevelddprecondition": 323, "multilevelnssaprecondition": 324, "multilevelsaprecondition": 325, "multilevelsgsprecondition": 326, "multilevelsolversmootherprecondition": 327, "trilinosaztecoosolv": 329, "trilinosmltest": 330, "trilinosnonlinearsolv": 331, "trilinossolv": 332, "stepper": [333, 334, 335, 336], "pidstepp": 334, "pseudorkqsstepp": 335, "abstractbinaryterm": 338, "abstractconvectionterm": 339, "abstractdiffusionterm": 340, "abstractupwindconvectionterm": 341, "advectionterm": 342, "asymmetricconvectionterm": 343, "binaryterm": 344, "cellterm": 345, "centraldiffconvectionterm": 346, "coupledbinaryterm": 347, "diffusionterm": 348, "diffusiontermcorrect": 349, "diffusiontermnocorrect": 350, "explicitdiffusionterm": 351, "explicitsourceterm": 352, "explicitupwindconvectionterm": 353, "exponentialconvectionterm": 354, "faceterm": 355, "firstorderadvectionterm": 356, "hybridconvectionterm": 357, "implicitdiffusionterm": 358, "implicitsourceterm": 359, "nondiffusionterm": 360, "powerlawconvectionterm": 361, "residualterm": 362, "sourceterm": 363, "transientterm": 366, "unaryterm": 367, "upwindconvectionterm": 368, "vanleerconvectionterm": 369, "testfipi": 370, "doctestplu": 372, "lateimporttest": 373, "testprogram": 375, "tool": [376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395], "commwrapp": 378, "dummycomm": 379, "debug": 380, "decor": 381, "dimens": [382, 383, 384, 385], "dictwithdefault": 383, "numberdict": 384, "physicalfield": 385, "dump": 386, "inlin": 387, "numerix": 389, "parser": 390, "sharedtempfil": 391, "vital": 395, "addoverfacesvari": 397, "arithmeticcelltofacevari": 398, "betanoisevari": 399, "binaryoperatorvari": 400, "celltofacevari": 401, "constant": 403, "constraintmask": 404, "coupledcellvari": 405, "distancevari": 406, "exponentialnoisevari": 407, "facegradcontributionsvari": 408, "facegradvari": 409, "gammanoisevari": 411, "gausscellgradvari": 412, "gaussiannoisevari": 413, "harmoniccelltofacevari": 414, "histogramvari": 415, "interfaceareavari": 416, "interfaceflagvari": 417, "leastsquarescellgradvari": 418, "levelsetdiffusionvari": 419, "meshvari": 420, "minmodcelltofacevari": 421, "modcellgradvari": 422, "modcelltofacevari": 423, "modfacegradvari": 424, "modphysicalfield": 425, "modularvari": 426, "noisevari": 427, "operatorvari": 428, "scharfettergummelfacevari": 429, "surfactantconvectionvari": 430, "surfactantvari": 431, "unaryoperatorvari": 433, "uniformnoisevari": 434, "matplotlibview": [437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448], "abstractmatplotlib2dview": 438, "abstractmatplotlibview": 439, "matplotlib1dview": 440, "matplotlib2dcontourview": 441, "matplotlib2dgridcontourview": 442, "matplotlib2dgridview": 443, "matplotlib2dview": 444, "matplotlibsparsematrixview": 445, "matplotlibstreamview": 446, "matplotlibvectorview": 447, "mayaviview": [449, 450, 451, 452], "mayavicli": 450, "mayavidaemon": 451, "multiview": 453, "testinteract": 455, "tsvviewer": 456, "vtkviewer": [458, 459, 460, 461, 462], "vtkcellview": 460, "vtkfaceview": 461, "glossari": 463, "introduct": 464, "finit": 466, "volum": 466, "cell": 466, "center": 466, "fvm": 466, "cc": 466, "vertex": 466, "vc": 466, "discret": 466, "partial": 466, "rho": 466, "nabla": 466, "cdot": 466, "left": 466, "vec": 466, "u": 466, "right": 466, "gamma_1": 466, "higher": 466, "order": 466, "linear": 466, "conserv": 467, "theoret": 468, "background": 468, "scheme": 469, "refer": 470, "subpackag": [472, 473, 474], "modul": 475}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinxcontrib.bibtex": 9, "sphinx": 58}, "alltitles": {"Git practices": [[0, "git-practices"]], "Branches": [[0, "branches"]], "Merging changes from master to the branch": [[0, "merging-changes-from-master-to-the-branch"]], "Submit branch for code review": [[0, "submit-branch-for-code-review"]], "Refactoring complete: merge branch to master": [[0, "refactoring-complete-merge-branch-to-master"]], "Continuous Integration": [[0, "continuous-integration"]], "Making a Release": [[0, "making-a-release"]], "Source": [[0, "source"]], "Release from master": [[0, "release-from-master"]], "Upload": [[0, "upload"]], "Update conda-forge feedstock": [[0, "update-conda-forge-feedstock"]], "Announce": [[0, "announce"]], "fipy Package Documentation": [[1, "fipy-package-documentation"]], "Change Log": [[2, "change-log"]], "Version 3.4.4+6.gcbc0b38ea": [[2, "version-release"]], "Pulls": [[2, "pulls"], [2, "id7"], [2, "id52"], [2, "id61"], [2, "id67"], [2, "id80"], [2, "id98"], [2, "id171"]], "Fixes": [[2, "fixes"], [2, "id25"], [2, "id57"], [2, "id65"], [2, "id76"], [2, "id86"], [2, "id130"], [2, "id169"], [2, "id206"], [2, "id231"], [2, "id241"], [2, "id304"], [2, "id308"], [2, "id367"], [2, "id391"], [2, "id399"], [2, "id407"], [2, "id416"], [2, "id423"], [2, "id427"], [2, "id439"], [2, "id441"], [2, "id484"], [2, "id500"], [2, "id519"]], "Version 3.4.3 - 2022-06-15": [[2, "version-3-4-3-2022-06-15"]], "Version 3.4.2.1 - 2020-08-01": [[2, "version-3-4-2-1-2020-08-01"]], "Version 3.4.1 - 2020-02-14": [[2, "version-3-4-1-2020-02-14"]], "Version 3.4 - 2020-02-06": [[2, "version-3-4-2020-02-06"]], "Version 3.3 - 2019-06-28": [[2, "version-3-3-2019-06-28"]], "Version 3.2 - 2019-04-22": [[2, "version-3-2-2019-04-22"]], "Version 3.1.3 - 2017-01-17": [[2, "version-3-1-3-2017-01-17"]], "Version 3.1.2 - 2016-12-24": [[2, "version-3-1-2-2016-12-24"]], "Version 3.1.1 - 2015-12-17": [[2, "version-3-1-1-2015-12-17"]], "Version 3.1 - 2013-09-30": [[2, "version-3-1-2013-09-30"]], "Version 3.0.1 - 2012-10-03": [[2, "version-3-0-1-2012-10-03"]], "Version 3.0 - 2012-08-16": [[2, "version-3-0-2012-08-16"]], "Version 2.1.3 - 2012-01-17": [[2, "version-2-1-3-2012-01-17"]], "Version 2.1.2 - 2011-04-20": [[2, "version-2-1-2-2011-04-20"]], "Version 2.1.1 - 2010-10-05": [[2, "version-2-1-1-2010-10-05"]], "Version 2.1 - 2010-04-01": [[2, "version-2-1-2010-04-01"]], "Version 2.0.3 - 2010-03-17": [[2, "version-2-0-3-2010-03-17"]], "Version 2.0.2 - 2009-06-11": [[2, "version-2-0-2-2009-06-11"]], "Version 2.0.1 - 2009-04-23": [[2, "version-2-0-1-2009-04-23"]], "Version 2.0 - 2009-02-09": [[2, "version-2-0-2009-02-09"]], "Version 1.2.3 - 2009-01-0": [[2, "version-1-2-3-2009-01-0"]], "Version 1.2.2 - 2008-12-30": [[2, "version-1-2-2-2008-12-30"]], "Version 1.2.1 - 2008-02-08": [[2, "version-1-2-1-2008-02-08"]], "Version 1.2 - 2007-02-12": [[2, "version-1-2-2007-02-12"]], "Version 1.1 - 2006-06-06": [[2, "version-1-1-2006-06-06"]], "Version 1.0 - 2005-09-16": [[2, "version-1-0-2005-09-16"]], "Version 0.1.1": [[2, "version-0-1-1"]], "Version 0.1 - 2004-11-05": [[2, "version-0-1-2004-11-05"]], "Contact": [[3, "contact"]], "GitHub Discussions": [[3, "github-discussions"]], "GitHub Issues": [[3, "github-issues"]], "StackOverflow": [[3, "stackoverflow"]], "Mailing List": [[3, "mailing-list"]], "List Archive": [[3, "list-archive"]], "Contributors": [[4, "contributors"]], "Disclaimer": [[5, "disclaimer"]], "Efficiency": [[6, "efficiency"]], "Efficiency comparison between --no-cache and --cache flags": [[6, "efficiency-comparison-between-no-cache-and-cache-flags"]], "Efficiency discussion of Pysparse and Trilinos": [[6, "efficiency-discussion-of-pysparse-and-trilinos"]], "Examples": [[7, "examples"]], "Selected Examples": [[7, "selected-examples"]], "Diffusion Examples": [[7, "diffusion-examples"]], "Convection Examples": [[7, "convection-examples"]], "Phase Field Examples": [[7, "phase-field-examples"]], "Level Set Examples": [[7, "level-set-examples"]], "Cahn-Hilliard Examples": [[7, "cahn-hilliard-examples"]], "Fluid Flow Examples": [[7, "fluid-flow-examples"]], "Reactive Wetting Examples": [[7, "reactive-wetting-examples"]], "Updating FiPy": [[7, "updating-fipy"]], "Frequently Asked Questions": [[8, "frequently-asked-questions"]], "How do I represent an equation in FiPy?": [[8, "how-do-i-represent-an-equation-in-fipy"]], "Is there a way to model an anisotropic diffusion process or more generally to represent the diffusion coefficient as a tensor so that the diffusion term takes the form \\partial_i \\Gamma_{ij}\\partial_j \\phi?": [[8, "is-there-a-way-to-model-an-anisotropic-diffusion-process-or-more-generally-to-represent-the-diffusion-coefficient-as-a-tensor-so-that-the-diffusion-term-takes-the-form-partial-i-gamma-ij-partial-j-phi"]], "How do I represent a \u2026 term that doesn\u2019t involve the dependent variable?": [[8, "how-do-i-represent-a-term-that-doesn-t-involve-the-dependent-variable"]], "How do I represent a diffusive source?": [[8, "how-do-i-represent-a-diffusive-source"]], "How do I represent a convective source?": [[8, "how-do-i-represent-a-convective-source"]], "How do I represent a transient source?": [[8, "how-do-i-represent-a-transient-source"]], "What if my term involves the dependent variable, but not where FiPy puts it?": [[8, "what-if-my-term-involves-the-dependent-variable-but-not-where-fipy-puts-it"]], "What if the coefficient of a term depends on the variable that I\u2019m solving for?": [[8, "what-if-the-coefficient-of-a-term-depends-on-the-variable-that-i-m-solving-for"]], "How can I see what I\u2019m doing?": [[8, "how-can-i-see-what-i-m-doing"]], "How do I export data?": [[8, "how-do-i-export-data"]], "How do I save a plot image?": [[8, "how-do-i-save-a-plot-image"]], "What if I only want the saved file, with no display on screen?": [[8, "what-if-i-only-want-the-saved-file-with-no-display-on-screen"]], "How do I make a movie?": [[8, "how-do-i-make-a-movie"]], "Why doesn\u2019t the Viewer look the way I want?": [[8, "why-doesn-t-the-viewer-look-the-way-i-want"]], "Iterations, timesteps, and sweeps? Oh, my!": [[8, "iterations-timesteps-and-sweeps-oh-my"]], "Why the distinction between CellVariable and FaceVariable coefficients?": [[8, "why-the-distinction-between-cellvariable-and-facevariable-coefficients"]], "How do I represent boundary conditions?": [[8, "how-do-i-represent-boundary-conditions"]], "What does this error message mean?": [[8, "what-does-this-error-message-mean"]], "How do I change FiPy\u2019s default behavior?": [[8, "how-do-i-change-fipy-s-default-behavior"]], "How can I tell if I\u2019m running in parallel?": [[8, "how-can-i-tell-if-i-m-running-in-parallel"]], "Why don\u2019t my scripts work anymore?": [[8, "why-don-t-my-scripts-work-anymore"]], "What if my question isn\u2019t answered here?": [[8, "what-if-my-question-isn-t-answered-here"]], "Git usage": [[9, "git-usage"], [11, "git-usage"]], "Git client": [[9, "git-client"], [11, "git-client"]], "Git branches": [[9, "git-branches"], [11, "git-branches"]], "Development Guidelines": [[10, "development-guidelines"]], "Object Oriented Design": [[10, "object-oriented-design"]], "Programming Style": [[10, "programming-style"]], "Testing": [[10, "testing"]], "Installation": [[11, "installation"]], "Pre-Installed on Binder": [[11, "pre-installed-on-binder"]], "Recommended Method": [[11, "recommended-method"]], "Obtaining FiPy": [[11, "obtaining-fipy"]], "Installing FiPy": [[11, "installing-fipy"]], "Required Packages": [[11, "required-packages"]], "Python": [[11, "python"]], "NumPy": [[11, "numpy"]], "Optional Packages": [[11, "optional-packages"]], "Gmsh": [[11, "gmsh"]], "SciPy": [[11, "scipy"], [16, "scipy"]], "Level Set Packages": [[11, "level-set-packages"]], "Scikit-fmm": [[11, "scikit-fmm"]], "LSMLIB": [[11, "lsmlib"]], "Development Environment": [[11, "development-environment"]], "Nix": [[11, "nix"]], "Nix Installation": [[11, "nix-installation"], [13, "nix-installation"]], "Getting Started with Nix": [[11, "getting-started-with-nix"], [13, "getting-started-with-nix"]], "Installing": [[11, "installing"], [13, "installing"]], "Additional Packages": [[11, "additional-packages"], [13, "additional-packages"]], "Using Pip": [[11, "using-pip"], [13, "using-pip"]], "Terms of Use": [[12, "terms-of-use"]], "Publications": [[14, "publications"]], "Presentations": [[14, "presentations"]], "Overview": [[15, "overview"]], "Even if you don\u2019t read manuals\u2026": [[15, "even-if-you-don-t-read-manuals"]], "Download and Installation": [[15, "download-and-installation"]], "Support": [[15, "support"]], "Conventions and Notation": [[15, "conventions-and-notation"]], "Solvers": [[16, "solvers"]], "PETSc": [[16, "petsc"]], "Pysparse": [[16, "pysparse"]], "PyAMG": [[16, "pyamg"]], "pyamgx": [[16, "pyamgx"]], "Trilinos": [[16, "trilinos"]], "Using FiPy": [[17, "using-fipy"]], "Logging": [[17, "logging"]], "Testing FiPy": [[17, "testing-fipy"]], "Parallel Tests": [[17, "parallel-tests"]], "Command-line Flags and Environment Variables": [[17, "command-line-flags-and-environment-variables"]], "Command-line Flags": [[17, "command-line-flags"]], "Environment Variables": [[17, "environment-variables"]], "Solving in Parallel": [[17, "solving-in-parallel"]], "OpenMP Threads vs. MPI Ranks": [[17, "openmp-threads-vs-mpi-ranks"]], "Meshing with Gmsh": [[17, "meshing-with-gmsh"]], "Coupled and Vector Equations": [[17, "coupled-and-vector-equations"]], "Boundary Conditions": [[17, "boundary-conditions"], [466, "boundary-conditions"]], "Default boundary conditions": [[17, "default-boundary-conditions"]], "Applying fixed value (Dirichlet) boundary conditions": [[17, "applying-fixed-value-dirichlet-boundary-conditions"]], "Applying fixed gradient boundary conditions (Neumann)": [[17, "applying-fixed-gradient-boundary-conditions-neumann"]], "Applying fixed flux boundary conditions": [[17, "applying-fixed-flux-boundary-conditions"]], "Applying outlet or inlet boundary conditions": [[17, "applying-outlet-or-inlet-boundary-conditions"]], "Applying spatially varying boundary conditions": [[17, "applying-spatially-varying-boundary-conditions"]], "Applying Robin boundary conditions": [[17, "applying-robin-boundary-conditions"]], "Applying internal \u201cboundary\u201d conditions": [[17, "applying-internal-boundary-conditions"]], "Internal fixed value": [[17, "internal-fixed-value"]], "Internal fixed gradient": [[17, "internal-fixed-gradient"]], "Internal Robin condition": [[17, "internal-robin-condition"]], "Running under Python 2": [[17, "running-under-python-2"]], "Manual": [[17, "manual"]], "Viewers": [[18, "viewers"]], "Matplotlib": [[18, "matplotlib"]], "Mayavi": [[18, "mayavi"]], "Virtual Kinetics of Materials Laboratory": [[19, "virtual-kinetics-of-materials-laboratory"]], "FiPy Contents": [[20, "fipy-contents"]], "Design and Implementation": [[21, "design-and-implementation"]], "Design": [[21, "design"]], "Numerical Approach": [[21, "numerical-approach"]], "Object Oriented Structure": [[21, "object-oriented-structure"]], "Test Based Development": [[21, "test-based-development"]], "Open Source": [[21, "open-source"]], "High-Level Scripting Language": [[21, "high-level-scripting-language"]], "Python Programming Language": [[21, "python-programming-language"]], "Implementation": [[21, "implementation"]], "External Command-line Flags": [[22, "external-command-line-flags"]], "External Environment Variables": [[22, "external-environment-variables"]], "examples": [[23, "module-examples"]], "examples.benchmarking": [[24, "module-examples.benchmarking"]], "examples.benchmarking.benchmarker": [[25, "module-examples.benchmarking.benchmarker"]], "examples.benchmarking.size": [[26, "module-examples.benchmarking.size"]], "examples.benchmarking.steps": [[27, "module-examples.benchmarking.steps"]], "examples.benchmarking.utils": [[28, "module-examples.benchmarking.utils"]], "examples.benchmarking.versions": [[29, "module-examples.benchmarking.versions"]], "examples.cahnHilliard": [[30, "module-examples.cahnHilliard"]], "examples.cahnHilliard.mesh2D": [[31, "module-examples.cahnHilliard.mesh2D"]], "examples.cahnHilliard.mesh2DCoupled": [[32, "module-examples.cahnHilliard.mesh2DCoupled"]], "examples.cahnHilliard.mesh3D": [[33, "module-examples.cahnHilliard.mesh3D"]], "examples.cahnHilliard.sphere": [[34, "module-examples.cahnHilliard.sphere"]], "examples.cahnHilliard.sphereDaemon": [[35, "module-examples.cahnHilliard.sphereDaemon"]], "examples.cahnHilliard.tanh1D": [[36, "module-examples.cahnHilliard.tanh1D"]], "examples.cahnHilliard.test": [[37, "module-examples.cahnHilliard.test"]], "examples.chemotaxis": [[38, "module-examples.chemotaxis"]], "examples.chemotaxis.input": [[39, "module-examples.chemotaxis.input"]], "examples.chemotaxis.input2D": [[40, "module-examples.chemotaxis.input2D"]], "examples.chemotaxis.parameters": [[41, "module-examples.chemotaxis.parameters"]], "examples.chemotaxis.test": [[42, "module-examples.chemotaxis.test"]], "examples.convection": [[43, "module-examples.convection"]], "examples.convection.advection": [[44, "module-examples.convection.advection"]], "examples.convection.advection.explicitUpwind": [[45, "module-examples.convection.advection.explicitUpwind"]], "examples.convection.advection.implicitUpwind": [[46, "module-examples.convection.advection.implicitUpwind"]], "examples.convection.advection.vanLeerUpwind": [[47, "module-examples.convection.advection.vanLeerUpwind"]], "examples.convection.exponential1D": [[48, "module-examples.convection.exponential1D"]], "examples.convection.exponential1D.cylindricalMesh1D": [[49, "module-examples.convection.exponential1D.cylindricalMesh1D"]], "examples.convection.exponential1D.cylindricalMesh1DNonUniform": [[50, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"]], "examples.convection.exponential1D.mesh1D": [[51, "module-examples.convection.exponential1D.mesh1D"]], "examples.convection.exponential1D.tri2D": [[52, "module-examples.convection.exponential1D.tri2D"]], "examples.convection.exponential1DBack": [[53, "module-examples.convection.exponential1DBack"]], "examples.convection.exponential1DBack.mesh1D": [[54, "module-examples.convection.exponential1DBack.mesh1D"]], "examples.convection.exponential1DSource": [[55, "module-examples.convection.exponential1DSource"]], "examples.convection.exponential1DSource.mesh1D": [[56, "module-examples.convection.exponential1DSource.mesh1D"]], "examples.convection.exponential1DSource.tri2D": [[57, "module-examples.convection.exponential1DSource.tri2D"]], "examples.convection.exponential2D": [[58, "module-examples.convection.exponential2D"]], "examples.convection.exponential2D.cylindricalMesh2D": [[59, "module-examples.convection.exponential2D.cylindricalMesh2D"]], "examples.convection.exponential2D.cylindricalMesh2DNonUniform": [[60, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"]], "examples.convection.exponential2D.mesh2D": [[61, "module-examples.convection.exponential2D.mesh2D"]], "examples.convection.exponential2D.tri2D": [[62, "module-examples.convection.exponential2D.tri2D"]], "examples.convection.peclet": [[63, "module-examples.convection.peclet"]], "examples.convection.powerLaw1D": [[64, "module-examples.convection.powerLaw1D"]], "examples.convection.powerLaw1D.mesh1D": [[65, "module-examples.convection.powerLaw1D.mesh1D"]], "examples.convection.powerLaw1D.tri2D": [[66, "module-examples.convection.powerLaw1D.tri2D"]], "examples.convection.robin": [[67, "module-examples.convection.robin"]], "examples.convection.source": [[68, "module-examples.convection.source"]], "examples.convection.test": [[69, "module-examples.convection.test"]], "examples.diffusion": [[70, "module-examples.diffusion"]], "examples.diffusion.anisotropy": [[71, "module-examples.diffusion.anisotropy"]], "examples.diffusion.circle": [[72, "module-examples.diffusion.circle"]], "examples.diffusion.circleQuad": [[73, "module-examples.diffusion.circleQuad"]], "examples.diffusion.coupled": [[74, "module-examples.diffusion.coupled"]], "examples.diffusion.electrostatics": [[75, "module-examples.diffusion.electrostatics"]], "examples.diffusion.explicit": [[76, "module-examples.diffusion.explicit"]], "examples.diffusion.explicit.mesh1D": [[77, "module-examples.diffusion.explicit.mesh1D"]], "examples.diffusion.explicit.mixedelement": [[78, "module-examples.diffusion.explicit.mixedelement"]], "examples.diffusion.explicit.test": [[79, "module-examples.diffusion.explicit.test"]], "examples.diffusion.explicit.tri2D": [[80, "module-examples.diffusion.explicit.tri2D"]], "examples.diffusion.mesh1D": [[81, "module-examples.diffusion.mesh1D"]], "examples.diffusion.mesh20x20": [[82, "module-examples.diffusion.mesh20x20"]], "examples.diffusion.mesh20x20Coupled": [[83, "module-examples.diffusion.mesh20x20Coupled"]], "examples.diffusion.nthOrder": [[84, "module-examples.diffusion.nthOrder"]], "examples.diffusion.nthOrder.input4thOrder1D": [[85, "module-examples.diffusion.nthOrder.input4thOrder1D"]], "examples.diffusion.nthOrder.input4thOrder_line": [[86, "module-examples.diffusion.nthOrder.input4thOrder_line"]], "examples.diffusion.nthOrder.test": [[87, "module-examples.diffusion.nthOrder.test"]], "examples.diffusion.steadyState": [[88, "module-examples.diffusion.steadyState"]], "examples.diffusion.steadyState.mesh1D": [[89, "module-examples.diffusion.steadyState.mesh1D"]], "examples.diffusion.steadyState.mesh1D.inputPeriodic": [[90, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"]], "examples.diffusion.steadyState.mesh1D.tri2Dinput": [[91, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"]], "examples.diffusion.steadyState.mesh20x20": [[92, "module-examples.diffusion.steadyState.mesh20x20"]], "examples.diffusion.steadyState.mesh20x20.gmshinput": [[93, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"]], "examples.diffusion.steadyState.mesh20x20.isotropy": [[94, "module-examples.diffusion.steadyState.mesh20x20.isotropy"]], "examples.diffusion.steadyState.mesh20x20.modifiedMeshInput": [[95, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"]], "examples.diffusion.steadyState.mesh20x20.orthoerror": [[96, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"]], "examples.diffusion.steadyState.mesh20x20.tri2Dinput": [[97, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"]], "examples.diffusion.steadyState.mesh50x50": [[98, "module-examples.diffusion.steadyState.mesh50x50"]], "examples.diffusion.steadyState.mesh50x50.input": [[99, "module-examples.diffusion.steadyState.mesh50x50.input"]], "examples.diffusion.steadyState.mesh50x50.tri2Dinput": [[100, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"]], "examples.diffusion.steadyState.otherMeshes": [[101, "module-examples.diffusion.steadyState.otherMeshes"]], "examples.diffusion.steadyState.otherMeshes.cubicalProblem": [[102, "module-examples.diffusion.steadyState.otherMeshes.cubicalProblem"]], "examples.diffusion.steadyState.otherMeshes.grid3Dinput": [[103, "module-examples.diffusion.steadyState.otherMeshes.grid3Dinput"]], "examples.diffusion.steadyState.otherMeshes.prism": [[104, "module-examples.diffusion.steadyState.otherMeshes.prism"]], "examples.diffusion.steadyState.test": [[105, "module-examples.diffusion.steadyState.test"]], "examples.diffusion.test": [[106, "module-examples.diffusion.test"]], "examples.diffusion.variable": [[107, "module-examples.diffusion.variable"]], "examples.elphf": [[108, "module-examples.elphf"]], "examples.elphf.diffusion": [[109, "module-examples.elphf.diffusion"]], "examples.elphf.diffusion.mesh1D": [[110, "module-examples.elphf.diffusion.mesh1D"]], "examples.elphf.diffusion.mesh1Ddimensional": [[111, "module-examples.elphf.diffusion.mesh1Ddimensional"]], "examples.elphf.diffusion.mesh2D": [[112, "module-examples.elphf.diffusion.mesh2D"]], "examples.elphf.input": [[113, "module-examples.elphf.input"]], "examples.elphf.phase": [[114, "module-examples.elphf.phase"]], "examples.elphf.phaseDiffusion": [[115, "module-examples.elphf.phaseDiffusion"]], "examples.elphf.poisson": [[116, "module-examples.elphf.poisson"]], "examples.elphf.test": [[117, "module-examples.elphf.test"]], "examples.flow": [[118, "module-examples.flow"]], "examples.flow.stokesCavity": [[119, "module-examples.flow.stokesCavity"]], "examples.flow.test": [[120, "module-examples.flow.test"]], "examples.levelSet": [[121, "module-examples.levelSet"]], "examples.levelSet.advection": [[122, "module-examples.levelSet.advection"]], "examples.levelSet.advection.circle": [[123, "module-examples.levelSet.advection.circle"]], "examples.levelSet.advection.mesh1D": [[124, "module-examples.levelSet.advection.mesh1D"]], "examples.levelSet.advection.test": [[125, "module-examples.levelSet.advection.test"]], "examples.levelSet.advection.trench": [[126, "module-examples.levelSet.advection.trench"]], "examples.levelSet.distanceFunction": [[127, "module-examples.levelSet.distanceFunction"]], "examples.levelSet.distanceFunction.circle": [[128, "module-examples.levelSet.distanceFunction.circle"]], "examples.levelSet.distanceFunction.interior": [[129, "module-examples.levelSet.distanceFunction.interior"]], "examples.levelSet.distanceFunction.mesh1D": [[130, "module-examples.levelSet.distanceFunction.mesh1D"]], "examples.levelSet.distanceFunction.square": [[131, "module-examples.levelSet.distanceFunction.square"]], "examples.levelSet.distanceFunction.test": [[132, "module-examples.levelSet.distanceFunction.test"]], "examples.levelSet.electroChem": [[133, "module-examples.levelSet.electroChem"]], "examples.levelSet.electroChem.adsorbingSurfactantEquation": [[134, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"]], "examples.levelSet.electroChem.gapFillDistanceVariable": [[135, "module-examples.levelSet.electroChem.gapFillDistanceVariable"]], "examples.levelSet.electroChem.gapFillMesh": [[136, "module-examples.levelSet.electroChem.gapFillMesh"]], "examples.levelSet.electroChem.gold": [[137, "module-examples.levelSet.electroChem.gold"]], "examples.levelSet.electroChem.howToWriteAScript": [[138, "module-examples.levelSet.electroChem.howToWriteAScript"]], "examples.levelSet.electroChem.leveler": [[139, "module-examples.levelSet.electroChem.leveler"]], "examples.levelSet.electroChem.lines": [[140, "module-examples.levelSet.electroChem.lines"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer": [[141, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"]], "examples.levelSet.electroChem.mayaviSurfactantViewer": [[142, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"]], "examples.levelSet.electroChem.metalIonDiffusionEquation": [[143, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"]], "examples.levelSet.electroChem.simpleTrenchSystem": [[144, "module-examples.levelSet.electroChem.simpleTrenchSystem"]], "examples.levelSet.electroChem.surfactantBulkDiffusionEquation": [[145, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"]], "examples.levelSet.electroChem.test": [[146, "module-examples.levelSet.electroChem.test"]], "examples.levelSet.electroChem.trenchMesh": [[147, "module-examples.levelSet.electroChem.trenchMesh"]], "examples.levelSet.surfactant": [[148, "module-examples.levelSet.surfactant"]], "examples.levelSet.surfactant.circle": [[149, "module-examples.levelSet.surfactant.circle"]], "examples.levelSet.surfactant.expandingCircle": [[150, "module-examples.levelSet.surfactant.expandingCircle"]], "examples.levelSet.surfactant.square": [[151, "module-examples.levelSet.surfactant.square"]], "examples.levelSet.surfactant.test": [[152, "module-examples.levelSet.surfactant.test"]], "examples.levelSet.test": [[153, "module-examples.levelSet.test"]], "examples.meshing": [[154, "module-examples.meshing"]], "examples.meshing.gmshRefinement": [[155, "module-examples.meshing.gmshRefinement"]], "examples.meshing.inputGrid2D": [[156, "module-examples.meshing.inputGrid2D"]], "examples.meshing.sphere": [[157, "module-examples.meshing.sphere"]], "examples.meshing.test": [[158, "module-examples.meshing.test"]], "examples.parallel": [[159, "module-examples.parallel"]], "examples.phase": [[160, "module-examples.phase"]], "examples.phase.anisotropy": [[161, "module-examples.phase.anisotropy"]], "examples.phase.anisotropyOLD": [[162, "module-examples.phase.anisotropyOLD"]], "examples.phase.binary": [[163, "module-examples.phase.binary"]], "examples.phase.binaryCoupled": [[164, "module-examples.phase.binaryCoupled"]], "examples.phase.impingement": [[165, "module-examples.phase.impingement"]], "examples.phase.impingement.mesh20x20": [[166, "module-examples.phase.impingement.mesh20x20"]], "examples.phase.impingement.mesh40x1": [[167, "module-examples.phase.impingement.mesh40x1"]], "examples.phase.impingement.test": [[168, "module-examples.phase.impingement.test"]], "examples.phase.missOrientation": [[169, "module-examples.phase.missOrientation"]], "examples.phase.missOrientation.test": [[170, "module-examples.phase.missOrientation.test"]], "examples.phase.polyxtal": [[171, "module-examples.phase.polyxtal"]], "examples.phase.polyxtalCoupled": [[172, "module-examples.phase.polyxtalCoupled"]], "examples.phase.quaternary": [[173, "module-examples.phase.quaternary"]], "examples.phase.simple": [[174, "module-examples.phase.simple"]], "examples.phase.symmetry": [[175, "module-examples.phase.symmetry"]], "examples.phase.test": [[176, "module-examples.phase.test"]], "examples.reactiveWetting": [[177, "module-examples.reactiveWetting"]], "examples.reactiveWetting.liquidVapor1D": [[178, "module-examples.reactiveWetting.liquidVapor1D"]], "examples.reactiveWetting.liquidVapor2D": [[179, "module-examples.reactiveWetting.liquidVapor2D"]], "examples.reactiveWetting.test": [[180, "module-examples.reactiveWetting.test"]], "examples.riemann": [[181, "module-examples.riemann"]], "examples.riemann.acoustics": [[182, "module-examples.riemann.acoustics"]], "examples.riemann.test": [[183, "module-examples.riemann.test"]], "examples.test": [[184, "module-examples.test"]], "examples.updating": [[185, "module-examples.updating"]], "examples.updating.update0_1to1_0": [[186, "module-examples.updating.update0_1to1_0"]], "examples.updating.update1_0to2_0": [[187, "module-examples.updating.update1_0to2_0"]], "examples.updating.update2_0to3_0": [[188, "module-examples.updating.update2_0to3_0"]], "fipy": [[189, "module-fipy"]], "fipy.boundaryConditions": [[190, "module-fipy.boundaryConditions"]], "fipy.boundaryConditions.boundaryCondition": [[191, "module-fipy.boundaryConditions.boundaryCondition"]], "fipy.boundaryConditions.constraint": [[192, "module-fipy.boundaryConditions.constraint"]], "fipy.boundaryConditions.fixedFlux": [[193, "module-fipy.boundaryConditions.fixedFlux"]], "fipy.boundaryConditions.fixedValue": [[194, "module-fipy.boundaryConditions.fixedValue"]], "fipy.boundaryConditions.nthOrderBoundaryCondition": [[195, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"]], "fipy.boundaryConditions.test": [[196, "module-fipy.boundaryConditions.test"]], "fipy.matrices": [[197, "module-fipy.matrices"]], "fipy.matrices.offsetSparseMatrix": [[198, "module-fipy.matrices.offsetSparseMatrix"]], "fipy.matrices.petscMatrix": [[199, "module-fipy.matrices.petscMatrix"]], "fipy.matrices.pysparseMatrix": [[200, "module-fipy.matrices.pysparseMatrix"]], "fipy.matrices.scipyMatrix": [[201, "module-fipy.matrices.scipyMatrix"]], "fipy.matrices.sparseMatrix": [[202, "module-fipy.matrices.sparseMatrix"]], "fipy.matrices.test": [[203, "module-fipy.matrices.test"]], "fipy.matrices.trilinosMatrix": [[204, "module-fipy.matrices.trilinosMatrix"]], "fipy.meshes": [[205, "module-fipy.meshes"]], "fipy.meshes.abstractMesh": [[206, "module-fipy.meshes.abstractMesh"]], "fipy.meshes.builders": [[207, "module-fipy.meshes.builders"]], "fipy.meshes.builders.abstractGridBuilder": [[208, "module-fipy.meshes.builders.abstractGridBuilder"]], "fipy.meshes.builders.grid1DBuilder": [[209, "module-fipy.meshes.builders.grid1DBuilder"]], "fipy.meshes.builders.grid2DBuilder": [[210, "module-fipy.meshes.builders.grid2DBuilder"]], "fipy.meshes.builders.grid3DBuilder": [[211, "module-fipy.meshes.builders.grid3DBuilder"]], "fipy.meshes.builders.periodicGrid1DBuilder": [[212, "module-fipy.meshes.builders.periodicGrid1DBuilder"]], "fipy.meshes.builders.utilityClasses": [[213, "module-fipy.meshes.builders.utilityClasses"]], "fipy.meshes.cylindricalGrid1D": [[214, "module-fipy.meshes.cylindricalGrid1D"]], "fipy.meshes.cylindricalGrid2D": [[215, "module-fipy.meshes.cylindricalGrid2D"]], "fipy.meshes.cylindricalNonUniformGrid1D": [[216, "module-fipy.meshes.cylindricalNonUniformGrid1D"]], "fipy.meshes.cylindricalNonUniformGrid2D": [[217, "module-fipy.meshes.cylindricalNonUniformGrid2D"]], "fipy.meshes.cylindricalUniformGrid1D": [[218, "module-fipy.meshes.cylindricalUniformGrid1D"]], "fipy.meshes.cylindricalUniformGrid2D": [[219, "module-fipy.meshes.cylindricalUniformGrid2D"]], "fipy.meshes.factoryMeshes": [[220, "module-fipy.meshes.factoryMeshes"]], "fipy.meshes.gmshMesh": [[221, "module-fipy.meshes.gmshMesh"]], "fipy.meshes.grid1D": [[222, "module-fipy.meshes.grid1D"]], "fipy.meshes.grid2D": [[223, "module-fipy.meshes.grid2D"]], "fipy.meshes.grid3D": [[224, "module-fipy.meshes.grid3D"]], "fipy.meshes.mesh": [[225, "module-fipy.meshes.mesh"]], "fipy.meshes.mesh1D": [[226, "module-fipy.meshes.mesh1D"]], "fipy.meshes.mesh2D": [[227, "module-fipy.meshes.mesh2D"]], "fipy.meshes.nonUniformGrid1D": [[228, "module-fipy.meshes.nonUniformGrid1D"]], "fipy.meshes.nonUniformGrid2D": [[229, "module-fipy.meshes.nonUniformGrid2D"]], "fipy.meshes.nonUniformGrid3D": [[230, "module-fipy.meshes.nonUniformGrid3D"]], "fipy.meshes.periodicGrid1D": [[231, "module-fipy.meshes.periodicGrid1D"]], "fipy.meshes.periodicGrid2D": [[232, "module-fipy.meshes.periodicGrid2D"]], "fipy.meshes.periodicGrid3D": [[233, "module-fipy.meshes.periodicGrid3D"]], "fipy.meshes.representations": [[234, "module-fipy.meshes.representations"]], "fipy.meshes.representations.abstractRepresentation": [[235, "module-fipy.meshes.representations.abstractRepresentation"]], "fipy.meshes.representations.gridRepresentation": [[236, "module-fipy.meshes.representations.gridRepresentation"]], "fipy.meshes.representations.meshRepresentation": [[237, "module-fipy.meshes.representations.meshRepresentation"]], "fipy.meshes.skewedGrid2D": [[238, "module-fipy.meshes.skewedGrid2D"]], "fipy.meshes.sphericalNonUniformGrid1D": [[239, "module-fipy.meshes.sphericalNonUniformGrid1D"]], "fipy.meshes.sphericalUniformGrid1D": [[240, "module-fipy.meshes.sphericalUniformGrid1D"]], "fipy.meshes.test": [[241, "module-fipy.meshes.test"]], "fipy.meshes.topologies": [[242, "module-fipy.meshes.topologies"]], "fipy.meshes.topologies.abstractTopology": [[243, "module-fipy.meshes.topologies.abstractTopology"]], "fipy.meshes.topologies.gridTopology": [[244, "module-fipy.meshes.topologies.gridTopology"]], "fipy.meshes.topologies.meshTopology": [[245, "module-fipy.meshes.topologies.meshTopology"]], "fipy.meshes.tri2D": [[246, "module-fipy.meshes.tri2D"]], "fipy.meshes.uniformGrid": [[247, "module-fipy.meshes.uniformGrid"]], "fipy.meshes.uniformGrid1D": [[248, "module-fipy.meshes.uniformGrid1D"]], "fipy.meshes.uniformGrid2D": [[249, "module-fipy.meshes.uniformGrid2D"]], "fipy.meshes.uniformGrid3D": [[250, "module-fipy.meshes.uniformGrid3D"]], "fipy.solvers": [[251, "module-fipy.solvers"]], "fipy.solvers.petsc": [[252, "module-fipy.solvers.petsc"]], "fipy.solvers.petsc.comms": [[253, "module-fipy.solvers.petsc.comms"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper": [[254, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"]], "fipy.solvers.petsc.comms.petscCommWrapper": [[255, "module-fipy.solvers.petsc.comms.petscCommWrapper"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper": [[256, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"]], "fipy.solvers.petsc.dummySolver": [[257, "module-fipy.solvers.petsc.dummySolver"]], "fipy.solvers.petsc.linearBicgSolver": [[258, "module-fipy.solvers.petsc.linearBicgSolver"]], "fipy.solvers.petsc.linearCGSSolver": [[259, "module-fipy.solvers.petsc.linearCGSSolver"]], "fipy.solvers.petsc.linearGMRESSolver": [[260, "module-fipy.solvers.petsc.linearGMRESSolver"]], "fipy.solvers.petsc.linearLUSolver": [[261, "module-fipy.solvers.petsc.linearLUSolver"]], "fipy.solvers.petsc.linearPCGSolver": [[262, "module-fipy.solvers.petsc.linearPCGSolver"]], "fipy.solvers.petsc.petscKrylovSolver": [[263, "module-fipy.solvers.petsc.petscKrylovSolver"]], "fipy.solvers.petsc.petscSolver": [[264, "module-fipy.solvers.petsc.petscSolver"]], "fipy.solvers.pyAMG": [[265, "module-fipy.solvers.pyAMG"]], "fipy.solvers.pyAMG.linearCGSSolver": [[266, "module-fipy.solvers.pyAMG.linearCGSSolver"]], "fipy.solvers.pyAMG.linearGMRESSolver": [[267, "module-fipy.solvers.pyAMG.linearGMRESSolver"]], "fipy.solvers.pyAMG.linearGeneralSolver": [[268, "module-fipy.solvers.pyAMG.linearGeneralSolver"]], "fipy.solvers.pyAMG.linearLUSolver": [[269, "module-fipy.solvers.pyAMG.linearLUSolver"]], "fipy.solvers.pyAMG.linearPCGSolver": [[270, "module-fipy.solvers.pyAMG.linearPCGSolver"]], "fipy.solvers.pyAMG.preconditioners": [[271, "module-fipy.solvers.pyAMG.preconditioners"]], "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner": [[272, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[273, "module-fipy.solvers.pyamgx"]], "fipy.solvers.pyamgx.aggregationAMGSolver": [[274, "module-fipy.solvers.pyamgx.aggregationAMGSolver"]], "fipy.solvers.pyamgx.classicalAMGSolver": [[275, "module-fipy.solvers.pyamgx.classicalAMGSolver"]], "fipy.solvers.pyamgx.linearBiCGStabSolver": [[276, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"]], "fipy.solvers.pyamgx.linearCGSolver": [[277, "module-fipy.solvers.pyamgx.linearCGSolver"]], "fipy.solvers.pyamgx.linearFGMRESSolver": [[278, "module-fipy.solvers.pyamgx.linearFGMRESSolver"]], "fipy.solvers.pyamgx.linearGMRESSolver": [[279, "module-fipy.solvers.pyamgx.linearGMRESSolver"]], "fipy.solvers.pyamgx.linearLUSolver": [[280, "module-fipy.solvers.pyamgx.linearLUSolver"]], "fipy.solvers.pyamgx.preconditioners": [[281, "module-fipy.solvers.pyamgx.preconditioners"]], "fipy.solvers.pyamgx.preconditioners.preconditioners": [[282, "module-fipy.solvers.pyamgx.preconditioners.preconditioners"]], "fipy.solvers.pyamgx.pyAMGXSolver": [[283, "module-fipy.solvers.pyamgx.pyAMGXSolver"]], "fipy.solvers.pyamgx.smoothers": [[284, "module-fipy.solvers.pyamgx.smoothers"]], "fipy.solvers.pyamgx.smoothers.smoothers": [[285, "module-fipy.solvers.pyamgx.smoothers.smoothers"]], "fipy.solvers.pysparse": [[286, "module-fipy.solvers.pysparse"]], "fipy.solvers.pysparse.linearCGSSolver": [[287, "module-fipy.solvers.pysparse.linearCGSSolver"]], "fipy.solvers.pysparse.linearGMRESSolver": [[288, "module-fipy.solvers.pysparse.linearGMRESSolver"]], "fipy.solvers.pysparse.linearJORSolver": [[289, "module-fipy.solvers.pysparse.linearJORSolver"]], "fipy.solvers.pysparse.linearLUSolver": [[290, "module-fipy.solvers.pysparse.linearLUSolver"]], "fipy.solvers.pysparse.linearPCGSolver": [[291, "module-fipy.solvers.pysparse.linearPCGSolver"]], "fipy.solvers.pysparse.preconditioners": [[292, "module-fipy.solvers.pysparse.preconditioners"]], "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner": [[293, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.preconditioner": [[294, "module-fipy.solvers.pysparse.preconditioners.preconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorPreconditioner": [[295, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"]], "fipy.solvers.pysparse.pysparseSolver": [[296, "module-fipy.solvers.pysparse.pysparseSolver"]], "fipy.solvers.pysparseMatrixSolver": [[297, "module-fipy.solvers.pysparseMatrixSolver"]], "fipy.solvers.scipy": [[298, "module-fipy.solvers.scipy"]], "fipy.solvers.scipy.linearBicgstabSolver": [[299, "module-fipy.solvers.scipy.linearBicgstabSolver"]], "fipy.solvers.scipy.linearCGSSolver": [[300, "module-fipy.solvers.scipy.linearCGSSolver"]], "fipy.solvers.scipy.linearGMRESSolver": [[301, "module-fipy.solvers.scipy.linearGMRESSolver"]], "fipy.solvers.scipy.linearLUSolver": [[302, "module-fipy.solvers.scipy.linearLUSolver"]], "fipy.solvers.scipy.linearPCGSolver": [[303, "module-fipy.solvers.scipy.linearPCGSolver"]], "fipy.solvers.scipy.scipyKrylovSolver": [[304, "module-fipy.solvers.scipy.scipyKrylovSolver"]], "fipy.solvers.scipy.scipySolver": [[305, "module-fipy.solvers.scipy.scipySolver"]], "fipy.solvers.solver": [[306, "module-fipy.solvers.solver"]], "fipy.solvers.test": [[307, "module-fipy.solvers.test"]], "fipy.solvers.trilinos": [[308, "module-fipy.solvers.trilinos"]], "fipy.solvers.trilinos.comms": [[309, "module-fipy.solvers.trilinos.comms"]], "fipy.solvers.trilinos.comms.epetraCommWrapper": [[310, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper": [[311, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper": [[312, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"]], "fipy.solvers.trilinos.linearBicgstabSolver": [[313, "module-fipy.solvers.trilinos.linearBicgstabSolver"]], "fipy.solvers.trilinos.linearCGSSolver": [[314, "module-fipy.solvers.trilinos.linearCGSSolver"]], "fipy.solvers.trilinos.linearGMRESSolver": [[315, "module-fipy.solvers.trilinos.linearGMRESSolver"]], "fipy.solvers.trilinos.linearLUSolver": [[316, "module-fipy.solvers.trilinos.linearLUSolver"]], "fipy.solvers.trilinos.linearPCGSolver": [[317, "module-fipy.solvers.trilinos.linearPCGSolver"]], "fipy.solvers.trilinos.preconditioners": [[318, "module-fipy.solvers.trilinos.preconditioners"]], "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner": [[319, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icPreconditioner": [[320, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner": [[321, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner": [[322, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner": [[323, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner": [[324, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner": [[325, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner": [[326, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner": [[327, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.preconditioner": [[328, "module-fipy.solvers.trilinos.preconditioners.preconditioner"]], "fipy.solvers.trilinos.trilinosAztecOOSolver": [[329, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"]], "fipy.solvers.trilinos.trilinosMLTest": [[330, "module-fipy.solvers.trilinos.trilinosMLTest"]], "fipy.solvers.trilinos.trilinosNonlinearSolver": [[331, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"]], "fipy.solvers.trilinos.trilinosSolver": [[332, "module-fipy.solvers.trilinos.trilinosSolver"]], "fipy.steppers": [[333, "module-fipy.steppers"]], "fipy.steppers.pidStepper": [[334, "module-fipy.steppers.pidStepper"]], "fipy.steppers.pseudoRKQSStepper": [[335, "module-fipy.steppers.pseudoRKQSStepper"]], "fipy.steppers.stepper": [[336, "module-fipy.steppers.stepper"]], "fipy.terms": [[337, "module-fipy.terms"]], "fipy.terms.abstractBinaryTerm": [[338, "module-fipy.terms.abstractBinaryTerm"]], "fipy.terms.abstractConvectionTerm": [[339, "module-fipy.terms.abstractConvectionTerm"]], "fipy.terms.abstractDiffusionTerm": [[340, "module-fipy.terms.abstractDiffusionTerm"]], "fipy.terms.abstractUpwindConvectionTerm": [[341, "module-fipy.terms.abstractUpwindConvectionTerm"]], "fipy.terms.advectionTerm": [[342, "module-fipy.terms.advectionTerm"]], "fipy.terms.asymmetricConvectionTerm": [[343, "module-fipy.terms.asymmetricConvectionTerm"]], "fipy.terms.binaryTerm": [[344, "module-fipy.terms.binaryTerm"]], "fipy.terms.cellTerm": [[345, "module-fipy.terms.cellTerm"]], "fipy.terms.centralDiffConvectionTerm": [[346, "module-fipy.terms.centralDiffConvectionTerm"]], "fipy.terms.coupledBinaryTerm": [[347, "module-fipy.terms.coupledBinaryTerm"]], "fipy.terms.diffusionTerm": [[348, "module-fipy.terms.diffusionTerm"]], "fipy.terms.diffusionTermCorrection": [[349, "module-fipy.terms.diffusionTermCorrection"]], "fipy.terms.diffusionTermNoCorrection": [[350, "module-fipy.terms.diffusionTermNoCorrection"]], "fipy.terms.explicitDiffusionTerm": [[351, "module-fipy.terms.explicitDiffusionTerm"]], "fipy.terms.explicitSourceTerm": [[352, "module-fipy.terms.explicitSourceTerm"]], "fipy.terms.explicitUpwindConvectionTerm": [[353, "module-fipy.terms.explicitUpwindConvectionTerm"]], "fipy.terms.exponentialConvectionTerm": [[354, "module-fipy.terms.exponentialConvectionTerm"]], "fipy.terms.faceTerm": [[355, "module-fipy.terms.faceTerm"]], "fipy.terms.firstOrderAdvectionTerm": [[356, "module-fipy.terms.firstOrderAdvectionTerm"]], "fipy.terms.hybridConvectionTerm": [[357, "module-fipy.terms.hybridConvectionTerm"]], "fipy.terms.implicitDiffusionTerm": [[358, "module-fipy.terms.implicitDiffusionTerm"]], "fipy.terms.implicitSourceTerm": [[359, "module-fipy.terms.implicitSourceTerm"]], "fipy.terms.nonDiffusionTerm": [[360, "module-fipy.terms.nonDiffusionTerm"]], "fipy.terms.powerLawConvectionTerm": [[361, "module-fipy.terms.powerLawConvectionTerm"]], "fipy.terms.residualTerm": [[362, "module-fipy.terms.residualTerm"]], "fipy.terms.sourceTerm": [[363, "module-fipy.terms.sourceTerm"]], "fipy.terms.term": [[364, "module-fipy.terms.term"]], "fipy.terms.test": [[365, "module-fipy.terms.test"]], "fipy.terms.transientTerm": [[366, "module-fipy.terms.transientTerm"]], "fipy.terms.unaryTerm": [[367, "module-fipy.terms.unaryTerm"]], "fipy.terms.upwindConvectionTerm": [[368, "module-fipy.terms.upwindConvectionTerm"]], "fipy.terms.vanLeerConvectionTerm": [[369, "module-fipy.terms.vanLeerConvectionTerm"]], "fipy.testFiPy": [[370, "module-fipy.testFiPy"]], "fipy.tests": [[371, "module-fipy.tests"]], "fipy.tests.doctestPlus": [[372, "module-fipy.tests.doctestPlus"]], "fipy.tests.lateImportTest": [[373, "module-fipy.tests.lateImportTest"]], "fipy.tests.test": [[374, "module-fipy.tests.test"]], "fipy.tests.testProgram": [[375, "module-fipy.tests.testProgram"]], "fipy.tools": [[376, "module-fipy.tools"]], "fipy.tools.comms": [[377, "module-fipy.tools.comms"]], "fipy.tools.comms.commWrapper": [[378, "module-fipy.tools.comms.commWrapper"]], "fipy.tools.comms.dummyComm": [[379, "module-fipy.tools.comms.dummyComm"]], "fipy.tools.debug": [[380, "module-fipy.tools.debug"]], "fipy.tools.decorators": [[381, "module-fipy.tools.decorators"]], "fipy.tools.dimensions": [[382, "module-fipy.tools.dimensions"]], "fipy.tools.dimensions.DictWithDefault": [[383, "module-fipy.tools.dimensions.DictWithDefault"]], "fipy.tools.dimensions.NumberDict": [[384, "module-fipy.tools.dimensions.NumberDict"]], "fipy.tools.dimensions.physicalField": [[385, "module-fipy.tools.dimensions.physicalField"]], "fipy.tools.dump": [[386, "module-fipy.tools.dump"]], "fipy.tools.inline": [[387, "module-fipy.tools.inline"]], "fipy.tools.logging": [[388, "module-fipy.tools.logging"]], "fipy.tools.numerix": [[389, "module-fipy.tools.numerix"]], "fipy.tools.parser": [[390, "module-fipy.tools.parser"]], "fipy.tools.sharedtempfile": [[391, "module-fipy.tools.sharedtempfile"]], "fipy.tools.test": [[392, "module-fipy.tools.test"]], "fipy.tools.vector": [[393, "module-fipy.tools.vector"]], "fipy.tools.version": [[394, "module-fipy.tools.version"]], "fipy.tools.vitals": [[395, "module-fipy.tools.vitals"]], "fipy.variables": [[396, "module-fipy.variables"]], "fipy.variables.addOverFacesVariable": [[397, "module-fipy.variables.addOverFacesVariable"]], "fipy.variables.arithmeticCellToFaceVariable": [[398, "module-fipy.variables.arithmeticCellToFaceVariable"]], "fipy.variables.betaNoiseVariable": [[399, "module-fipy.variables.betaNoiseVariable"]], "fipy.variables.binaryOperatorVariable": [[400, "module-fipy.variables.binaryOperatorVariable"]], "fipy.variables.cellToFaceVariable": [[401, "module-fipy.variables.cellToFaceVariable"]], "fipy.variables.cellVariable": [[402, "module-fipy.variables.cellVariable"]], "fipy.variables.constant": [[403, "module-fipy.variables.constant"]], "fipy.variables.constraintMask": [[404, "module-fipy.variables.constraintMask"]], "fipy.variables.coupledCellVariable": [[405, "module-fipy.variables.coupledCellVariable"]], "fipy.variables.distanceVariable": [[406, "module-fipy.variables.distanceVariable"]], "fipy.variables.exponentialNoiseVariable": [[407, "module-fipy.variables.exponentialNoiseVariable"]], "fipy.variables.faceGradContributionsVariable": [[408, "module-fipy.variables.faceGradContributionsVariable"]], "fipy.variables.faceGradVariable": [[409, "module-fipy.variables.faceGradVariable"]], "fipy.variables.faceVariable": [[410, "module-fipy.variables.faceVariable"]], "fipy.variables.gammaNoiseVariable": [[411, "module-fipy.variables.gammaNoiseVariable"]], "fipy.variables.gaussCellGradVariable": [[412, "module-fipy.variables.gaussCellGradVariable"]], "fipy.variables.gaussianNoiseVariable": [[413, "module-fipy.variables.gaussianNoiseVariable"]], "fipy.variables.harmonicCellToFaceVariable": [[414, "module-fipy.variables.harmonicCellToFaceVariable"]], "fipy.variables.histogramVariable": [[415, "module-fipy.variables.histogramVariable"]], "fipy.variables.interfaceAreaVariable": [[416, "module-fipy.variables.interfaceAreaVariable"]], "fipy.variables.interfaceFlagVariable": [[417, "module-fipy.variables.interfaceFlagVariable"]], "fipy.variables.leastSquaresCellGradVariable": [[418, "module-fipy.variables.leastSquaresCellGradVariable"]], "fipy.variables.levelSetDiffusionVariable": [[419, "module-fipy.variables.levelSetDiffusionVariable"]], "fipy.variables.meshVariable": [[420, "module-fipy.variables.meshVariable"]], "fipy.variables.minmodCellToFaceVariable": [[421, "module-fipy.variables.minmodCellToFaceVariable"]], "fipy.variables.modCellGradVariable": [[422, "module-fipy.variables.modCellGradVariable"]], "fipy.variables.modCellToFaceVariable": [[423, "module-fipy.variables.modCellToFaceVariable"]], "fipy.variables.modFaceGradVariable": [[424, "module-fipy.variables.modFaceGradVariable"]], "fipy.variables.modPhysicalField": [[425, "module-fipy.variables.modPhysicalField"]], "fipy.variables.modularVariable": [[426, "module-fipy.variables.modularVariable"]], "fipy.variables.noiseVariable": [[427, "module-fipy.variables.noiseVariable"]], "fipy.variables.operatorVariable": [[428, "module-fipy.variables.operatorVariable"]], "fipy.variables.scharfetterGummelFaceVariable": [[429, "module-fipy.variables.scharfetterGummelFaceVariable"]], "fipy.variables.surfactantConvectionVariable": [[430, "module-fipy.variables.surfactantConvectionVariable"]], "fipy.variables.surfactantVariable": [[431, "module-fipy.variables.surfactantVariable"]], "fipy.variables.test": [[432, "module-fipy.variables.test"]], "fipy.variables.unaryOperatorVariable": [[433, "module-fipy.variables.unaryOperatorVariable"]], "fipy.variables.uniformNoiseVariable": [[434, "module-fipy.variables.uniformNoiseVariable"]], "fipy.variables.variable": [[435, "module-fipy.variables.variable"]], "fipy.viewers": [[436, "module-fipy.viewers"]], "fipy.viewers.matplotlibViewer": [[437, "module-fipy.viewers.matplotlibViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer": [[438, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer": [[439, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer": [[440, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer": [[441, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer": [[442, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer": [[443, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer": [[444, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer": [[445, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer": [[446, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer": [[447, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"]], "fipy.viewers.matplotlibViewer.test": [[448, "module-fipy.viewers.matplotlibViewer.test"]], "fipy.viewers.mayaviViewer": [[449, "module-fipy.viewers.mayaviViewer"]], "fipy.viewers.mayaviViewer.mayaviClient": [[450, "module-fipy.viewers.mayaviViewer.mayaviClient"]], "fipy.viewers.mayaviViewer.mayaviDaemon": [[451, "module-fipy.viewers.mayaviViewer.mayaviDaemon"]], "fipy.viewers.mayaviViewer.test": [[452, "module-fipy.viewers.mayaviViewer.test"]], "fipy.viewers.multiViewer": [[453, "module-fipy.viewers.multiViewer"]], "fipy.viewers.test": [[454, "module-fipy.viewers.test"]], "fipy.viewers.testinteractive": [[455, "module-fipy.viewers.testinteractive"]], "fipy.viewers.tsvViewer": [[456, "module-fipy.viewers.tsvViewer"]], "fipy.viewers.viewer": [[457, "module-fipy.viewers.viewer"]], "fipy.viewers.vtkViewer": [[458, "module-fipy.viewers.vtkViewer"]], "fipy.viewers.vtkViewer.test": [[459, "module-fipy.viewers.vtkViewer.test"]], "fipy.viewers.vtkViewer.vtkCellViewer": [[460, "module-fipy.viewers.vtkViewer.vtkCellViewer"]], "fipy.viewers.vtkViewer.vtkFaceViewer": [[461, "module-fipy.viewers.vtkViewer.vtkFaceViewer"]], "fipy.viewers.vtkViewer.vtkViewer": [[462, "module-fipy.viewers.vtkViewer.vtkViewer"]], "Glossary": [[463, "glossary"]], "Introduction": [[464, "introduction"]], "FiPy Manual": [[465, "fipy-manual"]], "Finite Volume Method": [[466, "finite-volume-method"]], "Cell Centered FVM (CC-FVM)": [[466, "cell-centered-fvm-cc-fvm"]], "Vertex Centered FVM (VC-FVM)": [[466, "vertex-centered-fvm-vc-fvm"]], "Discretization": [[466, "discretization"]], "Transient Term \\partial (\\rho \\phi) / \\partial t": [[466, "transient-term-partial-rho-phi-partial-t"]], "Convection Term \\nabla \\cdot \\left( \\vec{u} \\phi \\right)": [[466, "convection-term-nabla-cdot-left-vec-u-phi-right"]], "Diffusion Term \\nabla \\cdot \\left( \\Gamma_1 \\nabla \\phi \\right)": [[466, "diffusion-term-nabla-cdot-left-gamma-1-nabla-phi-right"]], "Higher Order Diffusion": [[466, "higher-order-diffusion"]], "Source Term": [[466, "source-term"]], "Linear Equations": [[466, "linear-equations"]], "General Conservation Equation": [[467, "general-conservation-equation"]], "Theoretical and Numerical Background": [[468, "theoretical-and-numerical-background"]], "Numerical Schemes": [[469, "numerical-schemes"]], "References": [[470, "references"]], "package": [[471, "module-package"]], "package.subpackage": [[472, "module-package.subpackage"]], "package.subpackage.base": [[473, "module-package.subpackage.base"]], "package.subpackage.object": [[474, "module-package.subpackage.object"]], "How to Read the Modules Documentation": [[475, "how-to-read-the-modules-documentation"]]}, "indexentries": {"path": [[10, "index-1"]], "pep 8": [[10, "index-0"]], "python enhancement proposals": [[10, "index-0"], [463, "index-0"]], "environment variable": [[10, "index-1"], [16, "index-0"], [17, "envvar-FIPY_CACHE"], [17, "envvar-FIPY_DISPLAY_MATRIX"], [17, "envvar-FIPY_INCLUDE_NUMERIX_ALL"], [17, "envvar-FIPY_INLINE"], [17, "envvar-FIPY_INLINE_COMMENT"], [17, "envvar-FIPY_LOG_CONFIG"], [17, "envvar-FIPY_SOLVERS"], [17, "envvar-FIPY_VERBOSE_SOLVER"], [17, "envvar-FIPY_VIEWER"], [17, "envvar-PETSC_OPTIONS"], [17, "index-0"], [17, "index-1"], [17, "index-2"], [22, "envvar-DYLD_LIBRARY_PATH"], [22, "envvar-LD_LIBRARY_PATH"], [188, "index-0"]], "fipy_solvers": [[16, "index-0"], [17, "envvar-FIPY_SOLVERS"], [17, "index-1"]], "--cache": [[17, "cmdoption-cache"]], "--inline": [[17, "cmdoption-inline"]], "--lsmlib": [[17, "cmdoption-lsmlib"]], "--no-cache": [[17, "cmdoption-no-cache"]], "--no-pysparse": [[17, "cmdoption-no-pysparse"]], "--pyamg": [[17, "cmdoption-pyamg"]], "--pyamgx": [[17, "cmdoption-pyamgx"]], "--pysparse": [[17, "cmdoption-pysparse"]], "--scipy": [[17, "cmdoption-scipy"]], "--skfmm": [[17, "cmdoption-skfmm"]], "--trilinos": [[17, "cmdoption-trilinos"]], "fipy_cache": [[17, "envvar-FIPY_CACHE"]], "fipy_display_matrix": [[17, "envvar-FIPY_DISPLAY_MATRIX"]], "fipy_include_numerix_all": [[17, "envvar-FIPY_INCLUDE_NUMERIX_ALL"], [188, "index-0"]], "fipy_inline": [[17, "envvar-FIPY_INLINE"]], "fipy_inline_comment": [[17, "envvar-FIPY_INLINE_COMMENT"]], "fipy_log_config": [[17, "envvar-FIPY_LOG_CONFIG"], [17, "index-0"], [17, "index-2"]], "fipy_verbose_solver": [[17, "envvar-FIPY_VERBOSE_SOLVER"]], "fipy_viewer": [[17, "envvar-FIPY_VIEWER"]], "petsc_options": [[17, "envvar-PETSC_OPTIONS"]], "command line option": [[17, "cmdoption-cache"], [17, "cmdoption-inline"], [17, "cmdoption-lsmlib"], [17, "cmdoption-no-cache"], [17, "cmdoption-no-pysparse"], [17, "cmdoption-pyamg"], [17, "cmdoption-pyamgx"], [17, "cmdoption-pysparse"], [17, "cmdoption-scipy"], [17, "cmdoption-skfmm"], [17, "cmdoption-trilinos"], [22, "cmdoption-home"], [22, "cmdoption-prefix"]], "--home": [[22, "cmdoption-home"]], "--prefix": [[22, "cmdoption-prefix"]], "dyld_library_path": [[22, "envvar-DYLD_LIBRARY_PATH"]], "ld_library_path": [[22, "envvar-LD_LIBRARY_PATH"]], "examples": [[23, "module-examples"]], "module": [[23, "module-examples"], [24, "module-examples.benchmarking"], [25, "module-examples.benchmarking.benchmarker"], [26, "module-examples.benchmarking.size"], [27, "module-examples.benchmarking.steps"], [28, "module-examples.benchmarking.utils"], [29, "module-examples.benchmarking.versions"], [30, "module-examples.cahnHilliard"], [31, "module-examples.cahnHilliard.mesh2D"], [32, "module-examples.cahnHilliard.mesh2DCoupled"], [33, "module-examples.cahnHilliard.mesh3D"], [34, "module-examples.cahnHilliard.sphere"], [35, "module-examples.cahnHilliard.sphereDaemon"], [36, "index-5"], [36, "module-examples.cahnHilliard.tanh1D"], [37, "module-examples.cahnHilliard.test"], [38, "module-examples.chemotaxis"], [39, "module-examples.chemotaxis.input"], [40, "module-examples.chemotaxis.input2D"], [41, "module-examples.chemotaxis.parameters"], [42, "module-examples.chemotaxis.test"], [43, "module-examples.convection"], [44, "module-examples.convection.advection"], [45, "module-examples.convection.advection.explicitUpwind"], [46, "module-examples.convection.advection.implicitUpwind"], [47, "module-examples.convection.advection.vanLeerUpwind"], [48, "module-examples.convection.exponential1D"], [49, "index-2"], [49, "module-examples.convection.exponential1D.cylindricalMesh1D"], [50, "index-1"], [50, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"], [51, "index-2"], [51, "module-examples.convection.exponential1D.mesh1D"], [52, "module-examples.convection.exponential1D.tri2D"], [53, "module-examples.convection.exponential1DBack"], [54, "module-examples.convection.exponential1DBack.mesh1D"], [55, "module-examples.convection.exponential1DSource"], [56, "index-4"], [56, "module-examples.convection.exponential1DSource.mesh1D"], [57, "module-examples.convection.exponential1DSource.tri2D"], [58, "module-examples.convection.exponential2D"], [59, "index-2"], [59, "module-examples.convection.exponential2D.cylindricalMesh2D"], [60, "index-1"], [60, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"], [61, "module-examples.convection.exponential2D.mesh2D"], [62, "module-examples.convection.exponential2D.tri2D"], [63, "module-examples.convection.peclet"], [64, "module-examples.convection.powerLaw1D"], [65, "module-examples.convection.powerLaw1D.mesh1D"], [66, "module-examples.convection.powerLaw1D.tri2D"], [67, "module-examples.convection.robin"], [68, "module-examples.convection.source"], [69, "module-examples.convection.test"], [70, "module-examples.diffusion"], [71, "module-examples.diffusion.anisotropy"], [72, "index-3"], [72, "module-examples.diffusion.circle"], [73, "index-3"], [73, "module-examples.diffusion.circleQuad"], [74, "module-examples.diffusion.coupled"], [75, "module-examples.diffusion.electrostatics"], [76, "module-examples.diffusion.explicit"], [77, "module-examples.diffusion.explicit.mesh1D"], [78, "module-examples.diffusion.explicit.mixedelement"], [79, "module-examples.diffusion.explicit.test"], [80, "module-examples.diffusion.explicit.tri2D"], [81, "index-1"], [81, "module-examples.diffusion.mesh1D"], [82, "index-1"], [82, "module-examples.diffusion.mesh20x20"], [83, "index-1"], [83, "module-examples.diffusion.mesh20x20Coupled"], [84, "module-examples.diffusion.nthOrder"], [85, "index-3"], [85, "module-examples.diffusion.nthOrder.input4thOrder1D"], [86, "module-examples.diffusion.nthOrder.input4thOrder_line"], [87, "module-examples.diffusion.nthOrder.test"], [88, "module-examples.diffusion.steadyState"], [89, "module-examples.diffusion.steadyState.mesh1D"], [90, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"], [91, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"], [92, "module-examples.diffusion.steadyState.mesh20x20"], [93, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"], [94, "module-examples.diffusion.steadyState.mesh20x20.isotropy"], [95, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"], [96, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"], [97, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"], [98, "module-examples.diffusion.steadyState.mesh50x50"], [99, "module-examples.diffusion.steadyState.mesh50x50.input"], [100, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"], [101, "module-examples.diffusion.steadyState.otherMeshes"], [102, "module-examples.diffusion.steadyState.otherMeshes.cubicalProblem"], [103, "module-examples.diffusion.steadyState.otherMeshes.grid3Dinput"], [104, "module-examples.diffusion.steadyState.otherMeshes.prism"], [105, "module-examples.diffusion.steadyState.test"], [106, "module-examples.diffusion.test"], [107, "module-examples.diffusion.variable"], [108, "module-examples.elphf"], [109, "module-examples.elphf.diffusion"], [110, "module-examples.elphf.diffusion.mesh1D"], [111, "module-examples.elphf.diffusion.mesh1Ddimensional"], [112, "module-examples.elphf.diffusion.mesh2D"], [113, "module-examples.elphf.input"], [114, "module-examples.elphf.phase"], [115, "module-examples.elphf.phaseDiffusion"], [116, "module-examples.elphf.poisson"], [117, "module-examples.elphf.test"], [118, "module-examples.flow"], [119, "index-2"], [119, "module-examples.flow.stokesCavity"], [120, "module-examples.flow.test"], [121, "module-examples.levelSet"], [122, "module-examples.levelSet.advection"], [123, "module-examples.levelSet.advection.circle"], [124, "module-examples.levelSet.advection.mesh1D"], [125, "module-examples.levelSet.advection.test"], [126, "module-examples.levelSet.advection.trench"], [127, "module-examples.levelSet.distanceFunction"], [128, "module-examples.levelSet.distanceFunction.circle"], [129, "module-examples.levelSet.distanceFunction.interior"], [130, "module-examples.levelSet.distanceFunction.mesh1D"], [131, "module-examples.levelSet.distanceFunction.square"], [132, "module-examples.levelSet.distanceFunction.test"], [133, "module-examples.levelSet.electroChem"], [134, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"], [135, "module-examples.levelSet.electroChem.gapFillDistanceVariable"], [136, "module-examples.levelSet.electroChem.gapFillMesh"], [137, "index-1"], [137, "module-examples.levelSet.electroChem.gold"], [138, "index-0"], [138, "module-examples.levelSet.electroChem.howToWriteAScript"], [139, "index-1"], [139, "module-examples.levelSet.electroChem.leveler"], [140, "module-examples.levelSet.electroChem.lines"], [141, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"], [142, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"], [143, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"], [144, "index-1"], [144, "module-examples.levelSet.electroChem.simpleTrenchSystem"], [145, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"], [146, "module-examples.levelSet.electroChem.test"], [147, "module-examples.levelSet.electroChem.trenchMesh"], [148, "module-examples.levelSet.surfactant"], [149, "module-examples.levelSet.surfactant.circle"], [150, "module-examples.levelSet.surfactant.expandingCircle"], [151, "module-examples.levelSet.surfactant.square"], [152, "module-examples.levelSet.surfactant.test"], [153, "module-examples.levelSet.test"], [154, "module-examples.meshing"], [155, "module-examples.meshing.gmshRefinement"], [156, "module-examples.meshing.inputGrid2D"], [157, "module-examples.meshing.sphere"], [158, "module-examples.meshing.test"], [159, "module-examples.parallel"], [160, "module-examples.phase"], [161, "module-examples.phase.anisotropy"], [162, "index-4"], [162, "module-examples.phase.anisotropyOLD"], [163, "index-7"], [163, "module-examples.phase.binary"], [164, "index-5"], [164, "index-6"], [164, "module-examples.phase.binaryCoupled"], [165, "module-examples.phase.impingement"], [166, "index-0"], [166, "index-6"], [166, "index-8"], [166, "module-examples.phase.impingement.mesh20x20"], [167, "index-4"], [167, "module-examples.phase.impingement.mesh40x1"], [168, "module-examples.phase.impingement.test"], [169, "module-examples.phase.missOrientation"], [170, "module-examples.phase.missOrientation.test"], [171, "module-examples.phase.polyxtal"], [172, "module-examples.phase.polyxtalCoupled"], [173, "index-4"], [173, "module-examples.phase.quaternary"], [174, "index-2"], [174, "index-8"], [174, "module-examples.phase.simple"], [175, "module-examples.phase.symmetry"], [176, "module-examples.phase.test"], [177, "module-examples.reactiveWetting"], [178, "module-examples.reactiveWetting.liquidVapor1D"], [179, "module-examples.reactiveWetting.liquidVapor2D"], [180, "module-examples.reactiveWetting.test"], [181, "module-examples.riemann"], [182, "module-examples.riemann.acoustics"], [183, "module-examples.riemann.test"], [184, "module-examples.test"], [185, "module-examples.updating"], [186, "index-5"], [186, "module-examples.updating.update0_1to1_0"], [187, "module-examples.updating.update1_0to2_0"], [188, "module-examples.updating.update2_0to3_0"], [189, "module-fipy"], [190, "module-fipy.boundaryConditions"], [191, "module-fipy.boundaryConditions.boundaryCondition"], [192, "module-fipy.boundaryConditions.constraint"], [193, "module-fipy.boundaryConditions.fixedFlux"], [194, "module-fipy.boundaryConditions.fixedValue"], [195, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"], [196, "module-fipy.boundaryConditions.test"], [197, "module-fipy.matrices"], [198, "module-fipy.matrices.offsetSparseMatrix"], [199, "module-fipy.matrices.petscMatrix"], [200, "module-fipy.matrices.pysparseMatrix"], [201, "module-fipy.matrices.scipyMatrix"], [202, "module-fipy.matrices.sparseMatrix"], [203, "module-fipy.matrices.test"], [204, "module-fipy.matrices.trilinosMatrix"], [205, "module-fipy.meshes"], [206, "module-fipy.meshes.abstractMesh"], [207, "module-fipy.meshes.builders"], [208, "module-fipy.meshes.builders.abstractGridBuilder"], [209, "module-fipy.meshes.builders.grid1DBuilder"], [210, "module-fipy.meshes.builders.grid2DBuilder"], [211, "module-fipy.meshes.builders.grid3DBuilder"], [212, "module-fipy.meshes.builders.periodicGrid1DBuilder"], [213, "module-fipy.meshes.builders.utilityClasses"], [214, "module-fipy.meshes.cylindricalGrid1D"], [215, "module-fipy.meshes.cylindricalGrid2D"], [216, "module-fipy.meshes.cylindricalNonUniformGrid1D"], [217, "module-fipy.meshes.cylindricalNonUniformGrid2D"], [218, "module-fipy.meshes.cylindricalUniformGrid1D"], [219, "module-fipy.meshes.cylindricalUniformGrid2D"], [220, "module-fipy.meshes.factoryMeshes"], [221, "module-fipy.meshes.gmshMesh"], [222, "module-fipy.meshes.grid1D"], [223, "module-fipy.meshes.grid2D"], [224, "module-fipy.meshes.grid3D"], [225, "module-fipy.meshes.mesh"], [226, "module-fipy.meshes.mesh1D"], [227, "module-fipy.meshes.mesh2D"], [228, "module-fipy.meshes.nonUniformGrid1D"], [229, "module-fipy.meshes.nonUniformGrid2D"], [230, "module-fipy.meshes.nonUniformGrid3D"], [231, "module-fipy.meshes.periodicGrid1D"], [232, "module-fipy.meshes.periodicGrid2D"], [233, "module-fipy.meshes.periodicGrid3D"], [234, "module-fipy.meshes.representations"], [235, "module-fipy.meshes.representations.abstractRepresentation"], [236, "module-fipy.meshes.representations.gridRepresentation"], [237, "module-fipy.meshes.representations.meshRepresentation"], [238, "module-fipy.meshes.skewedGrid2D"], [239, "module-fipy.meshes.sphericalNonUniformGrid1D"], [240, "module-fipy.meshes.sphericalUniformGrid1D"], [241, "module-fipy.meshes.test"], [242, "module-fipy.meshes.topologies"], [243, "module-fipy.meshes.topologies.abstractTopology"], [244, "module-fipy.meshes.topologies.gridTopology"], [245, "module-fipy.meshes.topologies.meshTopology"], [246, "module-fipy.meshes.tri2D"], [247, "module-fipy.meshes.uniformGrid"], [248, "module-fipy.meshes.uniformGrid1D"], [249, "module-fipy.meshes.uniformGrid2D"], [250, "module-fipy.meshes.uniformGrid3D"], [251, "module-fipy.solvers"], [252, "module-fipy.solvers.petsc"], [253, "module-fipy.solvers.petsc.comms"], [254, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"], [255, "module-fipy.solvers.petsc.comms.petscCommWrapper"], [256, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"], [257, "module-fipy.solvers.petsc.dummySolver"], [258, "module-fipy.solvers.petsc.linearBicgSolver"], [259, "module-fipy.solvers.petsc.linearCGSSolver"], [260, "module-fipy.solvers.petsc.linearGMRESSolver"], [261, "module-fipy.solvers.petsc.linearLUSolver"], [262, "module-fipy.solvers.petsc.linearPCGSolver"], [263, "module-fipy.solvers.petsc.petscKrylovSolver"], [264, "module-fipy.solvers.petsc.petscSolver"], [265, "module-fipy.solvers.pyAMG"], [266, "module-fipy.solvers.pyAMG.linearCGSSolver"], [267, "module-fipy.solvers.pyAMG.linearGMRESSolver"], [268, "module-fipy.solvers.pyAMG.linearGeneralSolver"], [269, "module-fipy.solvers.pyAMG.linearLUSolver"], [270, "module-fipy.solvers.pyAMG.linearPCGSolver"], [271, "module-fipy.solvers.pyAMG.preconditioners"], [272, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"], [273, "module-fipy.solvers.pyamgx"], [274, "module-fipy.solvers.pyamgx.aggregationAMGSolver"], [275, "module-fipy.solvers.pyamgx.classicalAMGSolver"], [276, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"], [277, "module-fipy.solvers.pyamgx.linearCGSolver"], [278, "module-fipy.solvers.pyamgx.linearFGMRESSolver"], [279, "module-fipy.solvers.pyamgx.linearGMRESSolver"], [280, "module-fipy.solvers.pyamgx.linearLUSolver"], [281, "module-fipy.solvers.pyamgx.preconditioners"], [282, "module-fipy.solvers.pyamgx.preconditioners.preconditioners"], [283, "module-fipy.solvers.pyamgx.pyAMGXSolver"], [284, "module-fipy.solvers.pyamgx.smoothers"], [285, "module-fipy.solvers.pyamgx.smoothers.smoothers"], [286, "module-fipy.solvers.pysparse"], [287, "module-fipy.solvers.pysparse.linearCGSSolver"], [288, "module-fipy.solvers.pysparse.linearGMRESSolver"], [289, "module-fipy.solvers.pysparse.linearJORSolver"], [290, "module-fipy.solvers.pysparse.linearLUSolver"], [291, "module-fipy.solvers.pysparse.linearPCGSolver"], [292, "module-fipy.solvers.pysparse.preconditioners"], [293, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"], [294, "module-fipy.solvers.pysparse.preconditioners.preconditioner"], [295, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"], [296, "module-fipy.solvers.pysparse.pysparseSolver"], [297, "module-fipy.solvers.pysparseMatrixSolver"], [298, "module-fipy.solvers.scipy"], [299, "module-fipy.solvers.scipy.linearBicgstabSolver"], [300, "module-fipy.solvers.scipy.linearCGSSolver"], [301, "module-fipy.solvers.scipy.linearGMRESSolver"], [302, "module-fipy.solvers.scipy.linearLUSolver"], [303, "module-fipy.solvers.scipy.linearPCGSolver"], [304, "module-fipy.solvers.scipy.scipyKrylovSolver"], [305, "module-fipy.solvers.scipy.scipySolver"], [306, "module-fipy.solvers.solver"], [307, "module-fipy.solvers.test"], [308, "module-fipy.solvers.trilinos"], [309, "module-fipy.solvers.trilinos.comms"], [310, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"], [311, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"], [312, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"], [313, "module-fipy.solvers.trilinos.linearBicgstabSolver"], [314, "module-fipy.solvers.trilinos.linearCGSSolver"], [315, "module-fipy.solvers.trilinos.linearGMRESSolver"], [316, "module-fipy.solvers.trilinos.linearLUSolver"], [317, "module-fipy.solvers.trilinos.linearPCGSolver"], [318, "module-fipy.solvers.trilinos.preconditioners"], [319, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"], [320, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"], [321, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"], [322, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"], [323, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"], [324, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"], [325, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"], [326, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"], [327, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"], [328, "module-fipy.solvers.trilinos.preconditioners.preconditioner"], [329, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"], [330, "module-fipy.solvers.trilinos.trilinosMLTest"], [331, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"], [332, "module-fipy.solvers.trilinos.trilinosSolver"], [333, "module-fipy.steppers"], [334, "module-fipy.steppers.pidStepper"], [335, "module-fipy.steppers.pseudoRKQSStepper"], [336, "module-fipy.steppers.stepper"], [337, "module-fipy.terms"], [338, "module-fipy.terms.abstractBinaryTerm"], [339, "module-fipy.terms.abstractConvectionTerm"], [340, "module-fipy.terms.abstractDiffusionTerm"], [341, "module-fipy.terms.abstractUpwindConvectionTerm"], [342, "module-fipy.terms.advectionTerm"], [343, "module-fipy.terms.asymmetricConvectionTerm"], [344, "module-fipy.terms.binaryTerm"], [345, "module-fipy.terms.cellTerm"], [346, "module-fipy.terms.centralDiffConvectionTerm"], [347, "module-fipy.terms.coupledBinaryTerm"], [348, "module-fipy.terms.diffusionTerm"], [349, "module-fipy.terms.diffusionTermCorrection"], [350, "module-fipy.terms.diffusionTermNoCorrection"], [351, "module-fipy.terms.explicitDiffusionTerm"], [352, "module-fipy.terms.explicitSourceTerm"], [353, "module-fipy.terms.explicitUpwindConvectionTerm"], [354, "module-fipy.terms.exponentialConvectionTerm"], [355, "module-fipy.terms.faceTerm"], [356, "module-fipy.terms.firstOrderAdvectionTerm"], [357, "module-fipy.terms.hybridConvectionTerm"], [358, "module-fipy.terms.implicitDiffusionTerm"], [359, "module-fipy.terms.implicitSourceTerm"], [360, "module-fipy.terms.nonDiffusionTerm"], [361, "module-fipy.terms.powerLawConvectionTerm"], [362, "module-fipy.terms.residualTerm"], [363, "module-fipy.terms.sourceTerm"], [364, "module-fipy.terms.term"], [365, "module-fipy.terms.test"], [366, "module-fipy.terms.transientTerm"], [367, "module-fipy.terms.unaryTerm"], [368, "module-fipy.terms.upwindConvectionTerm"], [369, "module-fipy.terms.vanLeerConvectionTerm"], [370, "module-fipy.testFiPy"], [371, "module-fipy.tests"], [372, "module-fipy.tests.doctestPlus"], [373, "module-fipy.tests.lateImportTest"], [374, "module-fipy.tests.test"], [375, "module-fipy.tests.testProgram"], [376, "module-fipy.tools"], [377, "module-fipy.tools.comms"], [378, "module-fipy.tools.comms.commWrapper"], [379, "module-fipy.tools.comms.dummyComm"], [380, "module-fipy.tools.debug"], [381, "module-fipy.tools.decorators"], [382, "module-fipy.tools.dimensions"], [383, "module-fipy.tools.dimensions.DictWithDefault"], [384, "module-fipy.tools.dimensions.NumberDict"], [385, "module-fipy.tools.dimensions.physicalField"], [386, "module-fipy.tools.dump"], [387, "module-fipy.tools.inline"], [388, "module-fipy.tools.logging"], [389, "module-fipy.tools.numerix"], [390, "module-fipy.tools.parser"], [391, "module-fipy.tools.sharedtempfile"], [392, "module-fipy.tools.test"], [393, "module-fipy.tools.vector"], [394, "module-fipy.tools.version"], [395, "module-fipy.tools.vitals"], [396, "module-fipy.variables"], [397, "module-fipy.variables.addOverFacesVariable"], [398, "module-fipy.variables.arithmeticCellToFaceVariable"], [399, "module-fipy.variables.betaNoiseVariable"], [400, "module-fipy.variables.binaryOperatorVariable"], [401, "module-fipy.variables.cellToFaceVariable"], [402, "module-fipy.variables.cellVariable"], [403, "module-fipy.variables.constant"], [404, "module-fipy.variables.constraintMask"], [405, "module-fipy.variables.coupledCellVariable"], [406, "module-fipy.variables.distanceVariable"], [407, "module-fipy.variables.exponentialNoiseVariable"], [408, "module-fipy.variables.faceGradContributionsVariable"], [409, "module-fipy.variables.faceGradVariable"], [410, "module-fipy.variables.faceVariable"], [411, "module-fipy.variables.gammaNoiseVariable"], [412, "module-fipy.variables.gaussCellGradVariable"], [413, "module-fipy.variables.gaussianNoiseVariable"], [414, "module-fipy.variables.harmonicCellToFaceVariable"], [415, "module-fipy.variables.histogramVariable"], [416, "module-fipy.variables.interfaceAreaVariable"], [417, "module-fipy.variables.interfaceFlagVariable"], [418, "module-fipy.variables.leastSquaresCellGradVariable"], [419, "module-fipy.variables.levelSetDiffusionVariable"], [420, "module-fipy.variables.meshVariable"], [421, "module-fipy.variables.minmodCellToFaceVariable"], [422, "module-fipy.variables.modCellGradVariable"], [423, "module-fipy.variables.modCellToFaceVariable"], [424, "module-fipy.variables.modFaceGradVariable"], [425, "module-fipy.variables.modPhysicalField"], [426, "module-fipy.variables.modularVariable"], [427, "module-fipy.variables.noiseVariable"], [428, "module-fipy.variables.operatorVariable"], [429, "module-fipy.variables.scharfetterGummelFaceVariable"], [430, "module-fipy.variables.surfactantConvectionVariable"], [431, "module-fipy.variables.surfactantVariable"], [432, "module-fipy.variables.test"], [433, "module-fipy.variables.unaryOperatorVariable"], [434, "module-fipy.variables.uniformNoiseVariable"], [435, "module-fipy.variables.variable"], [436, "module-fipy.viewers"], [437, "module-fipy.viewers.matplotlibViewer"], [438, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"], [439, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"], [440, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"], [441, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"], [442, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"], [443, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"], [444, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"], [445, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"], [446, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"], [447, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"], [448, "module-fipy.viewers.matplotlibViewer.test"], [449, "module-fipy.viewers.mayaviViewer"], [450, "module-fipy.viewers.mayaviViewer.mayaviClient"], [451, "module-fipy.viewers.mayaviViewer.mayaviDaemon"], [452, "module-fipy.viewers.mayaviViewer.test"], [453, "module-fipy.viewers.multiViewer"], [454, "module-fipy.viewers.test"], [455, "module-fipy.viewers.testinteractive"], [456, "module-fipy.viewers.tsvViewer"], [457, "module-fipy.viewers.viewer"], [458, "module-fipy.viewers.vtkViewer"], [459, "module-fipy.viewers.vtkViewer.test"], [460, "module-fipy.viewers.vtkViewer.vtkCellViewer"], [461, "module-fipy.viewers.vtkViewer.vtkFaceViewer"], [462, "module-fipy.viewers.vtkViewer.vtkViewer"], [471, "module-package"], [472, "module-package.subpackage"], [473, "module-package.subpackage.base"], [474, "module-package.subpackage.object"]], "examples.benchmarking": [[24, "module-examples.benchmarking"]], "examples.benchmarking.benchmarker": [[25, "module-examples.benchmarking.benchmarker"]], "examples.benchmarking.size": [[26, "module-examples.benchmarking.size"]], "examples.benchmarking.steps": [[27, "module-examples.benchmarking.steps"]], "examples.benchmarking.utils": [[28, "module-examples.benchmarking.utils"]], "examples.benchmarking.versions": [[29, "module-examples.benchmarking.versions"]], "examples.cahnhilliard": [[30, "module-examples.cahnHilliard"]], "examples.cahnhilliard.mesh2d": [[31, "module-examples.cahnHilliard.mesh2D"]], "examples.cahnhilliard.mesh2dcoupled": [[32, "module-examples.cahnHilliard.mesh2DCoupled"]], "examples.cahnhilliard.mesh3d": [[33, "module-examples.cahnHilliard.mesh3D"]], "examples.cahnhilliard.sphere": [[34, "module-examples.cahnHilliard.sphere"]], "examples.cahnhilliard.spheredaemon": [[35, "module-examples.cahnHilliard.sphereDaemon"]], "cellvariable": [[36, "index-1"], [56, "index-1"], [85, "index-1"], [119, "index-1"], [138, "index-5"], [162, "index-1"], [163, "index-1"], [164, "index-1"], [166, "index-2"], [167, "index-1"], [173, "index-1"], [174, "index-1"], [186, "index-2"], [186, "index-9"]], "defaultsolver": [[36, "index-3"]], "grid2d": [[36, "index-0"], [82, "index-0"], [83, "index-0"], [119, "index-0"], [128, "index-0"], [130, "index-0"], [138, "index-2"], [162, "index-0"], [166, "index-1"], [186, "index-0"]], "linearlusolver": [[36, "index-3"], [164, "index-7"], [186, "index-3"]], "nthorderboundarycondition": [[36, "index-2"], [85, "index-2"]], "examples.cahnhilliard.tanh1d": [[36, "module-examples.cahnHilliard.tanh1D"]], "exp": [[36, "index-4"], [49, "index-1"], [50, "index-0"], [51, "index-1"], [56, "index-3"], [59, "index-1"], [60, "index-0"], [138, "index-1"], [163, "index-4"], [164, "index-3"], [166, "index-5"], [167, "index-3"]], "fipy.viewers": [[36, "index-5"], [49, "index-2"], [50, "index-1"], [51, "index-2"], [56, "index-4"], [59, "index-2"], [60, "index-1"], [81, "index-1"], [82, "index-1"], [83, "index-1"], [85, "index-3"], [119, "index-2"], [162, "index-4"], [163, "index-7"], [164, "index-6"], [166, "index-6"], [167, "index-4"], [174, "index-2"], [186, "index-11"], [436, "module-fipy.viewers"]], "sqrt": [[36, "index-4"], [72, "index-3"], [73, "index-3"], [138, "index-1"], [166, "index-1"], [174, "index-3"]], "examples.cahnhilliard.test": [[37, "module-examples.cahnHilliard.test"]], "examples.chemotaxis": [[38, "module-examples.chemotaxis"]], "examples.chemotaxis.input": [[39, "module-examples.chemotaxis.input"]], "examples.chemotaxis.input2d": [[40, "module-examples.chemotaxis.input2D"]], "examples.chemotaxis.parameters": [[41, "module-examples.chemotaxis.parameters"]], "examples.chemotaxis.test": [[42, "module-examples.chemotaxis.test"]], "examples.convection": [[43, "module-examples.convection"]], "examples.convection.advection": [[44, "module-examples.convection.advection"]], "examples.convection.advection.explicitupwind": [[45, "module-examples.convection.advection.explicitUpwind"]], "examples.convection.advection.implicitupwind": [[46, "module-examples.convection.advection.implicitUpwind"]], "examples.convection.advection.vanleerupwind": [[47, "module-examples.convection.advection.vanLeerUpwind"]], "examples.convection.exponential1d": [[48, "module-examples.convection.exponential1D"]], "grid1d": [[49, "index-0"], [51, "index-0"], [56, "index-0"], [59, "index-0"], [85, "index-0"], [124, "index-0"], [163, "index-0"], [164, "index-0"], [167, "index-0"], [173, "index-0"], [174, "index-0"], [186, "index-7"]], "examples.convection.exponential1d.cylindricalmesh1d": [[49, "module-examples.convection.exponential1D.cylindricalMesh1D"]], "examples.convection.exponential1d.cylindricalmesh1dnonuniform": [[50, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"]], "examples.convection.exponential1d.mesh1d": [[51, "module-examples.convection.exponential1D.mesh1D"]], "examples.convection.exponential1d.tri2d": [[52, "module-examples.convection.exponential1D.tri2D"]], "examples.convection.exponential1dback": [[53, "module-examples.convection.exponential1DBack"]], "examples.convection.exponential1dback.mesh1d": [[54, "module-examples.convection.exponential1DBack.mesh1D"]], "examples.convection.exponential1dsource": [[55, "module-examples.convection.exponential1DSource"]], "defaultasymmetricsolver": [[56, "index-2"], [173, "index-5"]], "examples.convection.exponential1dsource.mesh1d": [[56, "module-examples.convection.exponential1DSource.mesh1D"]], "examples.convection.exponential1dsource.tri2d": [[57, "module-examples.convection.exponential1DSource.tri2D"]], "examples.convection.exponential2d": [[58, "module-examples.convection.exponential2D"]], "examples.convection.exponential2d.cylindricalmesh2d": [[59, "module-examples.convection.exponential2D.cylindricalMesh2D"]], "examples.convection.exponential2d.cylindricalmesh2dnonuniform": [[60, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"]], "examples.convection.exponential2d.mesh2d": [[61, "module-examples.convection.exponential2D.mesh2D"]], "examples.convection.exponential2d.tri2d": [[62, "module-examples.convection.exponential2D.tri2D"]], "examples.convection.peclet": [[63, "module-examples.convection.peclet"]], "examples.convection.powerlaw1d": [[64, "module-examples.convection.powerLaw1D"]], "examples.convection.powerlaw1d.mesh1d": [[65, "module-examples.convection.powerLaw1D.mesh1D"]], "examples.convection.powerlaw1d.tri2d": [[66, "module-examples.convection.powerLaw1D.tri2D"]], "examples.convection.robin": [[67, "module-examples.convection.robin"]], "examples.convection.source": [[68, "module-examples.convection.source"]], "examples.convection.test": [[69, "module-examples.convection.test"]], "examples.diffusion": [[70, "module-examples.diffusion"]], "examples.diffusion.anisotropy": [[71, "module-examples.diffusion.anisotropy"]], "arcsin; cos": [[72, "index-3"], [73, "index-3"]], "examples.diffusion.circle": [[72, "module-examples.diffusion.circle"]], "fipy.terms.implicitdiffusionterm.diffusionterm": [[72, "index-1"], [73, "index-1"]], "fipy.terms.transientterm.transientterm": [[72, "index-1"], [73, "index-1"]], "fipy.variables.cellvariable.cellvariable": [[72, "index-0"], [73, "index-0"]], "fipy.viewers.tsvviewer.tsvviewer": [[72, "index-2"], [73, "index-2"]], "object": [[72, "index-0"], [72, "index-1"], [72, "index-2"], [73, "index-0"], [73, "index-1"], [73, "index-2"]], "scipy": [[72, "index-3"], [73, "index-3"], [163, "index-6"], [164, "index-5"], [174, "index-8"], [463, "term-SciPy"]], "examples.diffusion.circlequad": [[73, "module-examples.diffusion.circleQuad"]], "examples.diffusion.coupled": [[74, "module-examples.diffusion.coupled"]], "examples.diffusion.electrostatics": [[75, "module-examples.diffusion.electrostatics"]], "examples.diffusion.explicit": [[76, "module-examples.diffusion.explicit"]], "examples.diffusion.explicit.mesh1d": [[77, "module-examples.diffusion.explicit.mesh1D"]], "examples.diffusion.explicit.mixedelement": [[78, "module-examples.diffusion.explicit.mixedelement"]], "examples.diffusion.explicit.test": [[79, "module-examples.diffusion.explicit.test"]], "examples.diffusion.explicit.tri2d": [[80, "module-examples.diffusion.explicit.tri2D"]], "explicitdiffusionterm": [[81, "index-0"], [162, "index-3"], [166, "index-4"], [167, "index-2"]], "facevariable": [[81, "index-2"]], "transientterm": [[81, "index-0"], [162, "index-3"], [166, "index-4"], [167, "index-2"], [174, "index-4"]], "examples.diffusion.mesh1d": [[81, "module-examples.diffusion.mesh1D"]], "examples.diffusion.mesh20x20": [[82, "module-examples.diffusion.mesh20x20"]], "examples.diffusion.mesh20x20coupled": [[83, "module-examples.diffusion.mesh20x20Coupled"]], "examples.diffusion.nthorder": [[84, "module-examples.diffusion.nthOrder"]], "examples.diffusion.nthorder.input4thorder1d": [[85, "module-examples.diffusion.nthOrder.input4thOrder1D"]], "examples.diffusion.nthorder.input4thorder_line": [[86, "module-examples.diffusion.nthOrder.input4thOrder_line"]], "examples.diffusion.nthorder.test": [[87, "module-examples.diffusion.nthOrder.test"]], "examples.diffusion.steadystate": [[88, "module-examples.diffusion.steadyState"]], "examples.diffusion.steadystate.mesh1d": [[89, "module-examples.diffusion.steadyState.mesh1D"]], "examples.diffusion.steadystate.mesh1d.inputperiodic": [[90, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"]], "examples.diffusion.steadystate.mesh1d.tri2dinput": [[91, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"]], "examples.diffusion.steadystate.mesh20x20": [[92, "module-examples.diffusion.steadyState.mesh20x20"]], "examples.diffusion.steadystate.mesh20x20.gmshinput": [[93, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"]], "examples.diffusion.steadystate.mesh20x20.isotropy": [[94, "module-examples.diffusion.steadyState.mesh20x20.isotropy"]], "examples.diffusion.steadystate.mesh20x20.modifiedmeshinput": [[95, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"]], "examples.diffusion.steadystate.mesh20x20.orthoerror": [[96, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"]], "examples.diffusion.steadystate.mesh20x20.tri2dinput": [[97, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"]], "examples.diffusion.steadystate.mesh50x50": [[98, "module-examples.diffusion.steadyState.mesh50x50"]], "examples.diffusion.steadystate.mesh50x50.input": [[99, "module-examples.diffusion.steadyState.mesh50x50.input"]], "examples.diffusion.steadystate.mesh50x50.tri2dinput": [[100, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"]], "examples.diffusion.steadystate.othermeshes": [[101, "module-examples.diffusion.steadyState.otherMeshes"]], "examples.diffusion.steadystate.othermeshes.cubicalproblem": [[102, "module-examples.diffusion.steadyState.otherMeshes.cubicalProblem"]], "examples.diffusion.steadystate.othermeshes.grid3dinput": [[103, "module-examples.diffusion.steadyState.otherMeshes.grid3Dinput"]], "examples.diffusion.steadystate.othermeshes.prism": [[104, "module-examples.diffusion.steadyState.otherMeshes.prism"]], "examples.diffusion.steadystate.test": [[105, "module-examples.diffusion.steadyState.test"]], "examples.diffusion.test": [[106, "module-examples.diffusion.test"]], "examples.diffusion.variable": [[107, "module-examples.diffusion.variable"]], "examples.elphf": [[108, "module-examples.elphf"]], "examples.elphf.diffusion": [[109, "module-examples.elphf.diffusion"]], "examples.elphf.diffusion.mesh1d": [[110, "module-examples.elphf.diffusion.mesh1D"]], "examples.elphf.diffusion.mesh1ddimensional": [[111, "module-examples.elphf.diffusion.mesh1Ddimensional"]], "examples.elphf.diffusion.mesh2d": [[112, "module-examples.elphf.diffusion.mesh2D"]], "examples.elphf.input": [[113, "module-examples.elphf.input"]], "examples.elphf.phase": [[114, "module-examples.elphf.phase"]], "examples.elphf.phasediffusion": [[115, "module-examples.elphf.phaseDiffusion"]], "examples.elphf.poisson": [[116, "module-examples.elphf.poisson"]], "examples.elphf.test": [[117, "module-examples.elphf.test"]], "examples.flow": [[118, "module-examples.flow"]], "rhsvector": [[119, "index-3"]], "cachematrix": [[119, "index-3"]], "cacherhsvector": [[119, "index-3"]], "examples.flow.stokescavity": [[119, "module-examples.flow.stokesCavity"]], "matrix": [[119, "index-3"]], "sweep": [[119, "index-3"], [164, "index-7"], [174, "index-7"]], "examples.flow.test": [[120, "module-examples.flow.test"]], "examples.levelset": [[121, "module-examples.levelSet"]], "examples.levelset.advection": [[122, "module-examples.levelSet.advection"]], "examples.levelset.advection.circle": [[123, "module-examples.levelSet.advection.circle"]], "examples.levelset.advection.mesh1d": [[124, "module-examples.levelSet.advection.mesh1D"]], "examples.levelset.advection.test": [[125, "module-examples.levelSet.advection.test"]], "examples.levelset.advection.trench": [[126, "module-examples.levelSet.advection.trench"]], "examples.levelset.distancefunction": [[127, "module-examples.levelSet.distanceFunction"]], "examples.levelset.distancefunction.circle": [[128, "module-examples.levelSet.distanceFunction.circle"]], "examples.levelset.distancefunction.interior": [[129, "module-examples.levelSet.distanceFunction.interior"]], "examples.levelset.distancefunction.mesh1d": [[130, "module-examples.levelSet.distanceFunction.mesh1D"]], "examples.levelset.distancefunction.square": [[131, "module-examples.levelSet.distanceFunction.square"]], "examples.levelset.distancefunction.test": [[132, "module-examples.levelSet.distanceFunction.test"]], "examples.levelset.electrochem": [[133, "module-examples.levelSet.electroChem"]], "examples.levelset.electrochem.adsorbingsurfactantequation": [[134, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"]], "examples.levelset.electrochem.gapfilldistancevariable": [[135, "module-examples.levelSet.electroChem.gapFillDistanceVariable"]], "examples.levelset.electrochem.gapfillmesh": [[136, "module-examples.levelSet.electroChem.gapFillMesh"]], "examples.levelset.electrochem.gold": [[137, "module-examples.levelSet.electroChem.gold"]], "gmsh": [[137, "index-1"], [139, "index-1"], [144, "index-1"], [463, "term-Gmsh"]], "rungold": [[137, "index-0"]], "advectionterm": [[138, "index-6"]], "distancevariable": [[138, "index-3"]], "mayavisurfactantviewer": [[138, "index-7"]], "surfactantvariable": [[138, "index-4"]], "examples.levelset.electrochem.howtowriteascript": [[138, "module-examples.levelSet.electroChem.howToWriteAScript"]], "fipy.tools.parser": [[138, "index-0"], [166, "index-0"], [390, "module-fipy.tools.parser"]], "loadtxt": [[138, "index-8"], [162, "index-5"], [166, "index-7"], [167, "index-6"]], "examples.levelset.electrochem.leveler": [[139, "module-examples.levelSet.electroChem.leveler"]], "runleveler": [[139, "index-0"]], "examples.levelset.electrochem.lines": [[140, "module-examples.levelSet.electroChem.lines"]], "matplotlibsurfactantviewer (class in examples.levelset.electrochem.matplotlibsurfactantviewer)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer"]], "axes (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.axes"]], "cmap (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.cmap"]], "colorbar (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.colorbar"]], "examples.levelset.electrochem.matplotlibsurfactantviewer": [[141, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"]], "fig (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.fig"]], "id (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.id"]], "log (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.log"]], "plot() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.plot"]], "plotmesh() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.plotMesh"]], "setlimits() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.setLimits"]], "title (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.title"]], "vars (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[141, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.vars"]], "mayavisurfactantviewer (class in examples.levelset.electrochem.mayavisurfactantviewer)": [[142, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer"]], "examples.levelset.electrochem.mayavisurfactantviewer": [[142, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"]], "plotmesh() (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer method)": [[142, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.plotMesh"]], "setlimits() (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer method)": [[142, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.setLimits"]], "title (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer property)": [[142, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.title"]], "vars (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer property)": [[142, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.vars"]], "examples.levelset.electrochem.metaliondiffusionequation": [[143, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"]], "examples.levelset.electrochem.simpletrenchsystem": [[144, "module-examples.levelSet.electroChem.simpleTrenchSystem"]], "runsimpletrenchsystem": [[144, "index-0"]], "examples.levelset.electrochem.surfactantbulkdiffusionequation": [[145, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"]], "examples.levelset.electrochem.test": [[146, "module-examples.levelSet.electroChem.test"]], "examples.levelset.electrochem.trenchmesh": [[147, "module-examples.levelSet.electroChem.trenchMesh"]], "examples.levelset.surfactant": [[148, "module-examples.levelSet.surfactant"]], "examples.levelset.surfactant.circle": [[149, "module-examples.levelSet.surfactant.circle"]], "examples.levelset.surfactant.expandingcircle": [[150, "module-examples.levelSet.surfactant.expandingCircle"]], "examples.levelset.surfactant.square": [[151, "module-examples.levelSet.surfactant.square"]], "examples.levelset.surfactant.test": [[152, "module-examples.levelSet.surfactant.test"]], "examples.levelset.test": [[153, "module-examples.levelSet.test"]], "examples.meshing": [[154, "module-examples.meshing"]], "examples.meshing.gmshrefinement": [[155, "module-examples.meshing.gmshRefinement"]], "examples.meshing.inputgrid2d": [[156, "module-examples.meshing.inputGrid2D"]], "examples.meshing.sphere": [[157, "module-examples.meshing.sphere"]], "examples.meshing.test": [[158, "module-examples.meshing.test"]], "examples.parallel": [[159, "module-examples.parallel"]], "examples.phase": [[160, "module-examples.phase"]], ":math:`\\pi`": [[161, "index-0"], [162, "index-2"], [166, "index-3"], [167, "index-5"]], "arctan": [[161, "index-0"], [162, "index-2"]], "arctan2": [[161, "index-0"], [162, "index-2"]], "examples.phase.anisotropy": [[161, "module-examples.phase.anisotropy"]], "pi": [[161, "index-0"], [162, "index-2"], [166, "index-3"], [167, "index-5"]], "tan": [[161, "index-0"], [162, "index-2"]], "implicitsourceterm": [[162, "index-3"], [166, "index-4"], [167, "index-2"], [174, "index-5"]], "allclose": [[162, "index-5"], [173, "index-6"]], "examples.phase.anisotropyold": [[162, "module-examples.phase.anisotropyOLD"]], "powerlawconvectionterm": [[163, "index-3"], [173, "index-3"]], "variable": [[163, "index-2"], [164, "index-2"], [174, "index-6"]], "array": [[163, "index-5"], [164, "index-4"]], "examples.phase.binary": [[163, "module-examples.phase.binary"]], "log": [[163, "index-5"], [164, "index-4"], [173, "index-2"]], "examples.phase.binarycoupled": [[164, "module-examples.phase.binaryCoupled"]], "solve": [[164, "index-7"]], "examples.phase.impingement": [[165, "module-examples.phase.impingement"]], "modularvariable": [[166, "index-3"]], "examples.phase.impingement.mesh20x20": [[166, "module-examples.phase.impingement.mesh20x20"]], "fipy.tools.dump": [[166, "index-8"], [386, "module-fipy.tools.dump"]], "examples.phase.impingement.mesh40x1": [[167, "module-examples.phase.impingement.mesh40x1"]], "examples.phase.impingement.test": [[168, "module-examples.phase.impingement.test"]], "examples.phase.missorientation": [[169, "module-examples.phase.missOrientation"]], "examples.phase.missorientation.test": [[170, "module-examples.phase.missOrientation.test"]], "examples.phase.polyxtal": [[171, "module-examples.phase.polyxtal"]], "examples.phase.polyxtalcoupled": [[172, "module-examples.phase.polyxtalCoupled"]], "examples.phase.quaternary": [[173, "module-examples.phase.quaternary"]], "viewers": [[173, "index-4"]], "examples.phase.simple": [[174, "module-examples.phase.simple"]], "tanh": [[174, "index-3"]], "examples.phase.symmetry": [[175, "module-examples.phase.symmetry"]], "examples.phase.test": [[176, "module-examples.phase.test"]], "examples.reactivewetting": [[177, "module-examples.reactiveWetting"]], "examples.reactivewetting.liquidvapor1d": [[178, "module-examples.reactiveWetting.liquidVapor1D"]], "examples.reactivewetting.liquidvapor2d": [[179, "module-examples.reactiveWetting.liquidVapor2D"]], "examples.reactivewetting.test": [[180, "module-examples.reactiveWetting.test"]], "examples.riemann": [[181, "module-examples.riemann"]], "examples.riemann.acoustics": [[182, "module-examples.riemann.acoustics"]], "examples.riemann.test": [[183, "module-examples.riemann.test"]], "examples.test": [[184, "module-examples.test"]], "examples.updating": [[185, "module-examples.updating"]], "exponentialconvectionterm": [[186, "index-3"]], "fixedflux": [[186, "index-1"]], "fixedvalue": [[186, "index-1"], [186, "index-8"]], "gist1dviewer": [[186, "index-10"]], "grid2dgistviewer": [[186, "index-6"]], "iterator": [[186, "index-4"]], "steadyconvectiondiffusionscequation": [[186, "index-3"]], "examples.updating.update0_1to1_0": [[186, "module-examples.updating.update0_1to1_0"]], "fipy.numerix": [[186, "index-5"]], "examples.updating.update1_0to2_0": [[187, "module-examples.updating.update1_0to2_0"]], "examples.updating.update2_0to3_0": [[188, "module-examples.updating.update2_0to3_0"]], "doctest_raw_input() (in module fipy)": [[189, "fipy.doctest_raw_input"]], "fipy": [[189, "module-fipy"], [463, "term-FiPy"]], "test() (in module fipy)": [[189, "fipy.test"]], "fipy.boundaryconditions": [[190, "module-fipy.boundaryConditions"]], "boundarycondition (class in fipy.boundaryconditions.boundarycondition)": [[191, "fipy.boundaryConditions.boundaryCondition.BoundaryCondition"]], "__repr__() (fipy.boundaryconditions.boundarycondition.boundarycondition method)": [[191, "fipy.boundaryConditions.boundaryCondition.BoundaryCondition.__repr__"]], "fipy.boundaryconditions.boundarycondition": [[191, "module-fipy.boundaryConditions.boundaryCondition"]], "constraint (class in fipy.boundaryconditions.constraint)": [[192, "fipy.boundaryConditions.constraint.Constraint"]], "__repr__() (fipy.boundaryconditions.constraint.constraint method)": [[192, "fipy.boundaryConditions.constraint.Constraint.__repr__"]], "fipy.boundaryconditions.constraint": [[192, "module-fipy.boundaryConditions.constraint"]], "fixedflux (class in fipy.boundaryconditions.fixedflux)": [[193, "fipy.boundaryConditions.fixedFlux.FixedFlux"]], "__repr__() (fipy.boundaryconditions.fixedflux.fixedflux method)": [[193, "fipy.boundaryConditions.fixedFlux.FixedFlux.__repr__"]], "fipy.boundaryconditions.fixedflux": [[193, "module-fipy.boundaryConditions.fixedFlux"]], "fixedvalue (class in fipy.boundaryconditions.fixedvalue)": [[194, "fipy.boundaryConditions.fixedValue.FixedValue"]], "__repr__() (fipy.boundaryconditions.fixedvalue.fixedvalue method)": [[194, "fipy.boundaryConditions.fixedValue.FixedValue.__repr__"]], "fipy.boundaryconditions.fixedvalue": [[194, "module-fipy.boundaryConditions.fixedValue"]], "nthorderboundarycondition (class in fipy.boundaryconditions.nthorderboundarycondition)": [[195, "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition"]], "__repr__() (fipy.boundaryconditions.nthorderboundarycondition.nthorderboundarycondition method)": [[195, "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition.__repr__"]], "fipy.boundaryconditions.nthorderboundarycondition": [[195, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"]], "fipy.boundaryconditions.test": [[196, "module-fipy.boundaryConditions.test"]], "fipy.matrices": [[197, "module-fipy.matrices"]], "offsetsparsematrix() (in module fipy.matrices.offsetsparsematrix)": [[198, "fipy.matrices.offsetSparseMatrix.OffsetSparseMatrix"]], "fipy.matrices.offsetsparsematrix": [[198, "module-fipy.matrices.offsetSparseMatrix"]], "fipy.matrices.petscmatrix": [[199, "module-fipy.matrices.petscMatrix"]], "fipy.matrices.pysparsematrix": [[200, "module-fipy.matrices.pysparseMatrix"]], "fipy.matrices.scipymatrix": [[201, "module-fipy.matrices.scipyMatrix"]], "fipy.matrices.sparsematrix": [[202, "module-fipy.matrices.sparseMatrix"]], "fipy.matrices.test": [[203, "module-fipy.matrices.test"]], "fipy.matrices.trilinosmatrix": [[204, "module-fipy.matrices.trilinosMatrix"]], "fipy.meshes": [[205, "module-fipy.meshes"]], "abstractmesh (class in fipy.meshes.abstractmesh)": [[206, "fipy.meshes.abstractMesh.AbstractMesh"]], "meshadditionerror": [[206, "fipy.meshes.abstractMesh.MeshAdditionError"], [225, "fipy.meshes.mesh.MeshAdditionError"]], "vtkcelldataset (fipy.meshes.abstractmesh.abstractmesh property)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.abstractmesh.abstractmesh property)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.VTKFaceDataSet"]], "__add__() (fipy.meshes.abstractmesh.abstractmesh method)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.__add__"]], "__cause__ (fipy.meshes.abstractmesh.meshadditionerror attribute)": [[206, "fipy.meshes.abstractMesh.MeshAdditionError.__cause__"]], "__context__ (fipy.meshes.abstractmesh.meshadditionerror attribute)": [[206, "fipy.meshes.abstractMesh.MeshAdditionError.__context__"]], "__delattr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[206, "fipy.meshes.abstractMesh.MeshAdditionError.__delattr__"]], "__div__() (fipy.meshes.abstractmesh.abstractmesh method)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.__div__"]], "__getattribute__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[206, "fipy.meshes.abstractMesh.MeshAdditionError.__getattribute__"]], "__getstate__() (fipy.meshes.abstractmesh.abstractmesh method)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.__getstate__"]], "__radd__() (fipy.meshes.abstractmesh.abstractmesh method)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.__radd__"]], "__reduce__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[206, "fipy.meshes.abstractMesh.MeshAdditionError.__reduce__"]], "__repr__() (fipy.meshes.abstractmesh.abstractmesh method)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.__repr__"]], "__repr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[206, "fipy.meshes.abstractMesh.MeshAdditionError.__repr__"]], "__setattr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[206, "fipy.meshes.abstractMesh.MeshAdditionError.__setattr__"]], "__str__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[206, "fipy.meshes.abstractMesh.MeshAdditionError.__str__"]], "__sub__() (fipy.meshes.abstractmesh.abstractmesh method)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.__sub__"]], "__truediv__() (fipy.meshes.abstractmesh.abstractmesh method)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.__truediv__"]], "add_note() (fipy.meshes.abstractmesh.meshadditionerror method)": [[206, "fipy.meshes.abstractMesh.MeshAdditionError.add_note"]], "aspect2d (fipy.meshes.abstractmesh.abstractmesh property)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.aspect2D"]], "cellcenters (fipy.meshes.abstractmesh.abstractmesh property)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.cellCenters"]], "cellfaceids (fipy.meshes.abstractmesh.abstractmesh property)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.cellFaceIDs"]], "facesback (fipy.meshes.abstractmesh.abstractmesh property)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.facesBack"]], "facesbottom (fipy.meshes.abstractmesh.abstractmesh property)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.facesBottom"]], "facesdown (fipy.meshes.abstractmesh.abstractmesh property)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.facesDown"]], "facesfront (fipy.meshes.abstractmesh.abstractmesh property)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.facesFront"]], "facesleft (fipy.meshes.abstractmesh.abstractmesh property)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.facesLeft"]], "facesright (fipy.meshes.abstractmesh.abstractmesh property)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.facesRight"]], "facestop (fipy.meshes.abstractmesh.abstractmesh property)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.facesTop"]], "facesup (fipy.meshes.abstractmesh.abstractmesh property)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.facesUp"]], "fipy.meshes.abstractmesh": [[206, "module-fipy.meshes.abstractMesh"]], "with_traceback() (fipy.meshes.abstractmesh.meshadditionerror method)": [[206, "fipy.meshes.abstractMesh.MeshAdditionError.with_traceback"]], "x (fipy.meshes.abstractmesh.abstractmesh property)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.x"]], "y (fipy.meshes.abstractmesh.abstractmesh property)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.y"]], "z (fipy.meshes.abstractmesh.abstractmesh property)": [[206, "fipy.meshes.abstractMesh.AbstractMesh.z"]], "fipy.meshes.builders": [[207, "module-fipy.meshes.builders"]], "fipy.meshes.builders.abstractgridbuilder": [[208, "module-fipy.meshes.builders.abstractGridBuilder"]], "fipy.meshes.builders.grid1dbuilder": [[209, "module-fipy.meshes.builders.grid1DBuilder"]], "fipy.meshes.builders.grid2dbuilder": [[210, "module-fipy.meshes.builders.grid2DBuilder"]], "fipy.meshes.builders.grid3dbuilder": [[211, "module-fipy.meshes.builders.grid3DBuilder"]], "fipy.meshes.builders.periodicgrid1dbuilder": [[212, "module-fipy.meshes.builders.periodicGrid1DBuilder"]], "fipy.meshes.builders.utilityclasses": [[213, "module-fipy.meshes.builders.utilityClasses"]], "fipy.meshes.cylindricalgrid1d": [[214, "module-fipy.meshes.cylindricalGrid1D"]], "fipy.meshes.cylindricalgrid2d": [[215, "module-fipy.meshes.cylindricalGrid2D"]], "cylindricalnonuniformgrid1d (class in fipy.meshes.cylindricalnonuniformgrid1d)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesUp"]], "fipy.meshes.cylindricalnonuniformgrid1d": [[216, "module-fipy.meshes.cylindricalNonUniformGrid1D"]], "x (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.x"]], "y (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.y"]], "z (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[216, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.z"]], "cylindricalnonuniformgrid2d (class in fipy.meshes.cylindricalnonuniformgrid2d)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D"]], "vtkcelldataset (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__add__"]], "__div__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__getstate__"]], "__mul__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__mul__"]], "__radd__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__repr__"]], "__rmul__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__rmul__"]], "__sub__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.extrude"]], "facesback (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesRight"]], "facestop (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesTop"]], "facesup (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesUp"]], "fipy.meshes.cylindricalnonuniformgrid2d": [[217, "module-fipy.meshes.cylindricalNonUniformGrid2D"]], "x (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.x"]], "y (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.y"]], "z (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.z"]], "cylindricaluniformgrid1d (class in fipy.meshes.cylindricaluniformgrid1d)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D"]], "vtkcelldataset (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__add__"]], "__div__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesRight"]], "facestop (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesTop"]], "facesup (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesUp"]], "fipy.meshes.cylindricaluniformgrid1d": [[218, "module-fipy.meshes.cylindricalUniformGrid1D"]], "x (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.x"]], "y (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.y"]], "z (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[218, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.z"]], "cylindricaluniformgrid2d (class in fipy.meshes.cylindricaluniformgrid2d)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D"]], "vtkcelldataset (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__add__"]], "__div__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__getstate__"]], "__radd__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__repr__"]], "__sub__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.cellFaceIDs"]], "facesback (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesRight"]], "facestop (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesTop"]], "facesup (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesUp"]], "fipy.meshes.cylindricaluniformgrid2d": [[219, "module-fipy.meshes.cylindricalUniformGrid2D"]], "x (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.x"]], "y (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.y"]], "z (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[219, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.z"]], "cylindricalgrid1d() (in module fipy.meshes.factorymeshes)": [[220, "fipy.meshes.factoryMeshes.CylindricalGrid1D"]], "cylindricalgrid2d() (in module fipy.meshes.factorymeshes)": [[220, "fipy.meshes.factoryMeshes.CylindricalGrid2D"]], "grid1d() (in module fipy.meshes.factorymeshes)": [[220, "fipy.meshes.factoryMeshes.Grid1D"]], "grid2d() (in module fipy.meshes.factorymeshes)": [[220, "fipy.meshes.factoryMeshes.Grid2D"]], "grid3d() (in module fipy.meshes.factorymeshes)": [[220, "fipy.meshes.factoryMeshes.Grid3D"]], "sphericalgrid1d() (in module fipy.meshes.factorymeshes)": [[220, "fipy.meshes.factoryMeshes.SphericalGrid1D"]], "fipy.meshes.factorymeshes": [[220, "module-fipy.meshes.factoryMeshes"]], "gmsh2d (class in fipy.meshes.gmshmesh)": [[221, "fipy.meshes.gmshMesh.Gmsh2D"]], "gmsh2din3dspace (class in fipy.meshes.gmshmesh)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace"]], "gmsh3d (class in fipy.meshes.gmshmesh)": [[221, "fipy.meshes.gmshMesh.Gmsh3D"]], "gmshexception": [[221, "fipy.meshes.gmshMesh.GmshException"]], "gmshfile (class in fipy.meshes.gmshmesh)": [[221, "fipy.meshes.gmshMesh.GmshFile"]], "gmshgrid2d (class in fipy.meshes.gmshmesh)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D"]], "gmshgrid3d (class in fipy.meshes.gmshmesh)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D"]], "mshfile (class in fipy.meshes.gmshmesh)": [[221, "fipy.meshes.gmshMesh.MSHFile"]], "meshexporterror": [[221, "fipy.meshes.gmshMesh.MeshExportError"]], "posfile (class in fipy.meshes.gmshmesh)": [[221, "fipy.meshes.gmshMesh.POSFile"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh2d property)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh3d property)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmshgrid2d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmshgrid3d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh2d property)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh3d property)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmshgrid2d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmshgrid3d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.gmshmesh.gmsh2d method)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmsh3d method)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.__add__"]], "__cause__ (fipy.meshes.gmshmesh.gmshexception attribute)": [[221, "fipy.meshes.gmshMesh.GmshException.__cause__"]], "__cause__ (fipy.meshes.gmshmesh.meshexporterror attribute)": [[221, "fipy.meshes.gmshMesh.MeshExportError.__cause__"]], "__context__ (fipy.meshes.gmshmesh.gmshexception attribute)": [[221, "fipy.meshes.gmshMesh.GmshException.__context__"]], "__context__ (fipy.meshes.gmshmesh.meshexporterror attribute)": [[221, "fipy.meshes.gmshMesh.MeshExportError.__context__"]], "__delattr__() (fipy.meshes.gmshmesh.gmshexception method)": [[221, "fipy.meshes.gmshMesh.GmshException.__delattr__"]], "__delattr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[221, "fipy.meshes.gmshMesh.MeshExportError.__delattr__"]], "__div__() (fipy.meshes.gmshmesh.gmsh2d method)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmsh3d method)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.__div__"]], "__getattribute__() (fipy.meshes.gmshmesh.gmshexception method)": [[221, "fipy.meshes.gmshMesh.GmshException.__getattribute__"]], "__getattribute__() (fipy.meshes.gmshmesh.meshexporterror method)": [[221, "fipy.meshes.gmshMesh.MeshExportError.__getattribute__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh2d method)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh3d method)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.__getstate__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh2d method)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh3d method)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.__mul__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh2d method)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh3d method)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.__radd__"]], "__reduce__() (fipy.meshes.gmshmesh.gmshexception method)": [[221, "fipy.meshes.gmshMesh.GmshException.__reduce__"]], "__reduce__() (fipy.meshes.gmshmesh.meshexporterror method)": [[221, "fipy.meshes.gmshMesh.MeshExportError.__reduce__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh2d method)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh3d method)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshexception method)": [[221, "fipy.meshes.gmshMesh.GmshException.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[221, "fipy.meshes.gmshMesh.MeshExportError.__repr__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh2d method)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh3d method)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.__rmul__"]], "__setattr__() (fipy.meshes.gmshmesh.gmshexception method)": [[221, "fipy.meshes.gmshMesh.GmshException.__setattr__"]], "__setattr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[221, "fipy.meshes.gmshMesh.MeshExportError.__setattr__"]], "__str__() (fipy.meshes.gmshmesh.gmshexception method)": [[221, "fipy.meshes.gmshMesh.GmshException.__str__"]], "__str__() (fipy.meshes.gmshmesh.meshexporterror method)": [[221, "fipy.meshes.gmshMesh.MeshExportError.__str__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh2d method)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh3d method)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.__sub__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh2d method)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh3d method)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.__truediv__"]], "add_note() (fipy.meshes.gmshmesh.gmshexception method)": [[221, "fipy.meshes.gmshMesh.GmshException.add_note"]], "add_note() (fipy.meshes.gmshmesh.meshexporterror method)": [[221, "fipy.meshes.gmshMesh.MeshExportError.add_note"]], "aspect2d (fipy.meshes.gmshmesh.gmsh2d property)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmsh3d property)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmshgrid2d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmshgrid3d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.aspect2D"]], "cellcenters (fipy.meshes.gmshmesh.gmsh2d property)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmsh3d property)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmshgrid2d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmshgrid3d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.cellCenters"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh2d property)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh3d property)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmshgrid2d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmshgrid3d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.cellFaceIDs"]], "extrude() (fipy.meshes.gmshmesh.gmsh2d method)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.extrude"]], "extrude() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.extrude"]], "extrude() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.extrude"]], "facesback (fipy.meshes.gmshmesh.gmsh2d property)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmsh3d property)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmshgrid2d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmshgrid3d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.facesBack"]], "facesbottom (fipy.meshes.gmshmesh.gmsh2d property)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmsh3d property)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmshgrid2d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmshgrid3d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.facesBottom"]], "facesdown (fipy.meshes.gmshmesh.gmsh2d property)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmsh3d property)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmshgrid2d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmshgrid3d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.facesDown"]], "facesfront (fipy.meshes.gmshmesh.gmsh2d property)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmsh3d property)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmshgrid2d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmshgrid3d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.facesFront"]], "facesleft (fipy.meshes.gmshmesh.gmsh2d property)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmsh3d property)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmshgrid2d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmshgrid3d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.facesLeft"]], "facesright (fipy.meshes.gmshmesh.gmsh2d property)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmsh3d property)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmshgrid2d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmshgrid3d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.facesRight"]], "facestop (fipy.meshes.gmshmesh.gmsh2d property)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmsh3d property)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmshgrid2d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmshgrid3d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.facesTop"]], "facesup (fipy.meshes.gmshmesh.gmsh2d property)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmsh3d property)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmshgrid2d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmshgrid3d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.facesUp"]], "fipy.meshes.gmshmesh": [[221, "module-fipy.meshes.gmshMesh"]], "gmshversion() (in module fipy.meshes.gmshmesh)": [[221, "fipy.meshes.gmshMesh.gmshVersion"]], "makemapvariables() (fipy.meshes.gmshmesh.mshfile method)": [[221, "fipy.meshes.gmshMesh.MSHFile.makeMapVariables"]], "openmshfile() (in module fipy.meshes.gmshmesh)": [[221, "fipy.meshes.gmshMesh.openMSHFile"]], "openposfile() (in module fipy.meshes.gmshmesh)": [[221, "fipy.meshes.gmshMesh.openPOSFile"]], "read() (fipy.meshes.gmshmesh.mshfile method)": [[221, "fipy.meshes.gmshMesh.MSHFile.read"]], "with_traceback() (fipy.meshes.gmshmesh.gmshexception method)": [[221, "fipy.meshes.gmshMesh.GmshException.with_traceback"]], "with_traceback() (fipy.meshes.gmshmesh.meshexporterror method)": [[221, "fipy.meshes.gmshMesh.MeshExportError.with_traceback"]], "x (fipy.meshes.gmshmesh.gmsh2d property)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.x"]], "x (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.x"]], "x (fipy.meshes.gmshmesh.gmsh3d property)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.x"]], "x (fipy.meshes.gmshmesh.gmshgrid2d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.x"]], "x (fipy.meshes.gmshmesh.gmshgrid3d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.x"]], "y (fipy.meshes.gmshmesh.gmsh2d property)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.y"]], "y (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.y"]], "y (fipy.meshes.gmshmesh.gmsh3d property)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.y"]], "y (fipy.meshes.gmshmesh.gmshgrid2d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.y"]], "y (fipy.meshes.gmshmesh.gmshgrid3d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.y"]], "z (fipy.meshes.gmshmesh.gmsh2d property)": [[221, "fipy.meshes.gmshMesh.Gmsh2D.z"]], "z (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[221, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.z"]], "z (fipy.meshes.gmshmesh.gmsh3d property)": [[221, "fipy.meshes.gmshMesh.Gmsh3D.z"]], "z (fipy.meshes.gmshmesh.gmshgrid2d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid2D.z"]], "z (fipy.meshes.gmshmesh.gmshgrid3d property)": [[221, "fipy.meshes.gmshMesh.GmshGrid3D.z"]], "fipy.meshes.grid1d": [[222, "module-fipy.meshes.grid1D"]], "fipy.meshes.grid2d": [[223, "module-fipy.meshes.grid2D"]], "fipy.meshes.grid3d": [[224, "module-fipy.meshes.grid3D"]], "mesh (class in fipy.meshes.mesh)": [[225, "fipy.meshes.mesh.Mesh"]], "vtkcelldataset (fipy.meshes.mesh.mesh property)": [[225, "fipy.meshes.mesh.Mesh.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh.mesh property)": [[225, "fipy.meshes.mesh.Mesh.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh.mesh method)": [[225, "fipy.meshes.mesh.Mesh.__add__"]], "__cause__ (fipy.meshes.mesh.meshadditionerror attribute)": [[225, "fipy.meshes.mesh.MeshAdditionError.__cause__"]], "__context__ (fipy.meshes.mesh.meshadditionerror attribute)": [[225, "fipy.meshes.mesh.MeshAdditionError.__context__"]], "__delattr__() (fipy.meshes.mesh.meshadditionerror method)": [[225, "fipy.meshes.mesh.MeshAdditionError.__delattr__"]], "__div__() (fipy.meshes.mesh.mesh method)": [[225, "fipy.meshes.mesh.Mesh.__div__"]], "__getattribute__() (fipy.meshes.mesh.meshadditionerror method)": [[225, "fipy.meshes.mesh.MeshAdditionError.__getattribute__"]], "__getstate__() (fipy.meshes.mesh.mesh method)": [[225, "fipy.meshes.mesh.Mesh.__getstate__"]], "__mul__() (fipy.meshes.mesh.mesh method)": [[225, "fipy.meshes.mesh.Mesh.__mul__"]], "__radd__() (fipy.meshes.mesh.mesh method)": [[225, "fipy.meshes.mesh.Mesh.__radd__"]], "__reduce__() (fipy.meshes.mesh.meshadditionerror method)": [[225, "fipy.meshes.mesh.MeshAdditionError.__reduce__"]], "__repr__() (fipy.meshes.mesh.mesh method)": [[225, "fipy.meshes.mesh.Mesh.__repr__"]], "__repr__() (fipy.meshes.mesh.meshadditionerror method)": [[225, "fipy.meshes.mesh.MeshAdditionError.__repr__"]], "__rmul__() (fipy.meshes.mesh.mesh method)": [[225, "fipy.meshes.mesh.Mesh.__rmul__"]], "__setattr__() (fipy.meshes.mesh.meshadditionerror method)": [[225, "fipy.meshes.mesh.MeshAdditionError.__setattr__"]], "__str__() (fipy.meshes.mesh.meshadditionerror method)": [[225, "fipy.meshes.mesh.MeshAdditionError.__str__"]], "__sub__() (fipy.meshes.mesh.mesh method)": [[225, "fipy.meshes.mesh.Mesh.__sub__"]], "__truediv__() (fipy.meshes.mesh.mesh method)": [[225, "fipy.meshes.mesh.Mesh.__truediv__"]], "add_note() (fipy.meshes.mesh.meshadditionerror method)": [[225, "fipy.meshes.mesh.MeshAdditionError.add_note"]], "aspect2d (fipy.meshes.mesh.mesh property)": [[225, "fipy.meshes.mesh.Mesh.aspect2D"]], "cellcenters (fipy.meshes.mesh.mesh property)": [[225, "fipy.meshes.mesh.Mesh.cellCenters"]], "cellfaceids (fipy.meshes.mesh.mesh property)": [[225, "fipy.meshes.mesh.Mesh.cellFaceIDs"]], "facesback (fipy.meshes.mesh.mesh property)": [[225, "fipy.meshes.mesh.Mesh.facesBack"]], "facesbottom (fipy.meshes.mesh.mesh property)": [[225, "fipy.meshes.mesh.Mesh.facesBottom"]], "facesdown (fipy.meshes.mesh.mesh property)": [[225, "fipy.meshes.mesh.Mesh.facesDown"]], "facesfront (fipy.meshes.mesh.mesh property)": [[225, "fipy.meshes.mesh.Mesh.facesFront"]], "facesleft (fipy.meshes.mesh.mesh property)": [[225, "fipy.meshes.mesh.Mesh.facesLeft"]], "facesright (fipy.meshes.mesh.mesh property)": [[225, "fipy.meshes.mesh.Mesh.facesRight"]], "facestop (fipy.meshes.mesh.mesh property)": [[225, "fipy.meshes.mesh.Mesh.facesTop"]], "facesup (fipy.meshes.mesh.mesh property)": [[225, "fipy.meshes.mesh.Mesh.facesUp"]], "fipy.meshes.mesh": [[225, "module-fipy.meshes.mesh"]], "with_traceback() (fipy.meshes.mesh.meshadditionerror method)": [[225, "fipy.meshes.mesh.MeshAdditionError.with_traceback"]], "x (fipy.meshes.mesh.mesh property)": [[225, "fipy.meshes.mesh.Mesh.x"]], "y (fipy.meshes.mesh.mesh property)": [[225, "fipy.meshes.mesh.Mesh.y"]], "z (fipy.meshes.mesh.mesh property)": [[225, "fipy.meshes.mesh.Mesh.z"]], "mesh1d (class in fipy.meshes.mesh1d)": [[226, "fipy.meshes.mesh1D.Mesh1D"]], "vtkcelldataset (fipy.meshes.mesh1d.mesh1d property)": [[226, "fipy.meshes.mesh1D.Mesh1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh1d.mesh1d property)": [[226, "fipy.meshes.mesh1D.Mesh1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh1d.mesh1d method)": [[226, "fipy.meshes.mesh1D.Mesh1D.__add__"]], "__div__() (fipy.meshes.mesh1d.mesh1d method)": [[226, "fipy.meshes.mesh1D.Mesh1D.__div__"]], "__getstate__() (fipy.meshes.mesh1d.mesh1d method)": [[226, "fipy.meshes.mesh1D.Mesh1D.__getstate__"]], "__mul__() (fipy.meshes.mesh1d.mesh1d method)": [[226, "fipy.meshes.mesh1D.Mesh1D.__mul__"]], "__radd__() (fipy.meshes.mesh1d.mesh1d method)": [[226, "fipy.meshes.mesh1D.Mesh1D.__radd__"]], "__repr__() (fipy.meshes.mesh1d.mesh1d method)": [[226, "fipy.meshes.mesh1D.Mesh1D.__repr__"]], "__rmul__() (fipy.meshes.mesh1d.mesh1d method)": [[226, "fipy.meshes.mesh1D.Mesh1D.__rmul__"]], "__sub__() (fipy.meshes.mesh1d.mesh1d method)": [[226, "fipy.meshes.mesh1D.Mesh1D.__sub__"]], "__truediv__() (fipy.meshes.mesh1d.mesh1d method)": [[226, "fipy.meshes.mesh1D.Mesh1D.__truediv__"]], "aspect2d (fipy.meshes.mesh1d.mesh1d property)": [[226, "fipy.meshes.mesh1D.Mesh1D.aspect2D"]], "cellcenters (fipy.meshes.mesh1d.mesh1d property)": [[226, "fipy.meshes.mesh1D.Mesh1D.cellCenters"]], "cellfaceids (fipy.meshes.mesh1d.mesh1d property)": [[226, "fipy.meshes.mesh1D.Mesh1D.cellFaceIDs"]], "facesback (fipy.meshes.mesh1d.mesh1d property)": [[226, "fipy.meshes.mesh1D.Mesh1D.facesBack"]], "facesbottom (fipy.meshes.mesh1d.mesh1d property)": [[226, "fipy.meshes.mesh1D.Mesh1D.facesBottom"]], "facesdown (fipy.meshes.mesh1d.mesh1d property)": [[226, "fipy.meshes.mesh1D.Mesh1D.facesDown"]], "facesfront (fipy.meshes.mesh1d.mesh1d property)": [[226, "fipy.meshes.mesh1D.Mesh1D.facesFront"]], "facesleft (fipy.meshes.mesh1d.mesh1d property)": [[226, "fipy.meshes.mesh1D.Mesh1D.facesLeft"]], "facesright (fipy.meshes.mesh1d.mesh1d property)": [[226, "fipy.meshes.mesh1D.Mesh1D.facesRight"]], "facestop (fipy.meshes.mesh1d.mesh1d property)": [[226, "fipy.meshes.mesh1D.Mesh1D.facesTop"]], "facesup (fipy.meshes.mesh1d.mesh1d property)": [[226, "fipy.meshes.mesh1D.Mesh1D.facesUp"]], "fipy.meshes.mesh1d": [[226, "module-fipy.meshes.mesh1D"]], "x (fipy.meshes.mesh1d.mesh1d property)": [[226, "fipy.meshes.mesh1D.Mesh1D.x"]], "y (fipy.meshes.mesh1d.mesh1d property)": [[226, "fipy.meshes.mesh1D.Mesh1D.y"]], "z (fipy.meshes.mesh1d.mesh1d property)": [[226, "fipy.meshes.mesh1D.Mesh1D.z"]], "mesh2d (class in fipy.meshes.mesh2d)": [[227, "fipy.meshes.mesh2D.Mesh2D"]], "vtkcelldataset (fipy.meshes.mesh2d.mesh2d property)": [[227, "fipy.meshes.mesh2D.Mesh2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh2d.mesh2d property)": [[227, "fipy.meshes.mesh2D.Mesh2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh2d.mesh2d method)": [[227, "fipy.meshes.mesh2D.Mesh2D.__add__"]], "__div__() (fipy.meshes.mesh2d.mesh2d method)": [[227, "fipy.meshes.mesh2D.Mesh2D.__div__"]], "__getstate__() (fipy.meshes.mesh2d.mesh2d method)": [[227, "fipy.meshes.mesh2D.Mesh2D.__getstate__"]], "__mul__() (fipy.meshes.mesh2d.mesh2d method)": [[227, "fipy.meshes.mesh2D.Mesh2D.__mul__"]], "__radd__() (fipy.meshes.mesh2d.mesh2d method)": [[227, "fipy.meshes.mesh2D.Mesh2D.__radd__"]], "__repr__() (fipy.meshes.mesh2d.mesh2d method)": [[227, "fipy.meshes.mesh2D.Mesh2D.__repr__"]], "__rmul__() (fipy.meshes.mesh2d.mesh2d method)": [[227, "fipy.meshes.mesh2D.Mesh2D.__rmul__"]], "__sub__() (fipy.meshes.mesh2d.mesh2d method)": [[227, "fipy.meshes.mesh2D.Mesh2D.__sub__"]], "__truediv__() (fipy.meshes.mesh2d.mesh2d method)": [[227, "fipy.meshes.mesh2D.Mesh2D.__truediv__"]], "aspect2d (fipy.meshes.mesh2d.mesh2d property)": [[227, "fipy.meshes.mesh2D.Mesh2D.aspect2D"]], "cellcenters (fipy.meshes.mesh2d.mesh2d property)": [[227, "fipy.meshes.mesh2D.Mesh2D.cellCenters"]], "cellfaceids (fipy.meshes.mesh2d.mesh2d property)": [[227, "fipy.meshes.mesh2D.Mesh2D.cellFaceIDs"]], "extrude() (fipy.meshes.mesh2d.mesh2d method)": [[227, "fipy.meshes.mesh2D.Mesh2D.extrude"]], "facesback (fipy.meshes.mesh2d.mesh2d property)": [[227, "fipy.meshes.mesh2D.Mesh2D.facesBack"]], "facesbottom (fipy.meshes.mesh2d.mesh2d property)": [[227, "fipy.meshes.mesh2D.Mesh2D.facesBottom"]], "facesdown (fipy.meshes.mesh2d.mesh2d property)": [[227, "fipy.meshes.mesh2D.Mesh2D.facesDown"]], "facesfront (fipy.meshes.mesh2d.mesh2d property)": [[227, "fipy.meshes.mesh2D.Mesh2D.facesFront"]], "facesleft (fipy.meshes.mesh2d.mesh2d property)": [[227, "fipy.meshes.mesh2D.Mesh2D.facesLeft"]], "facesright (fipy.meshes.mesh2d.mesh2d property)": [[227, "fipy.meshes.mesh2D.Mesh2D.facesRight"]], "facestop (fipy.meshes.mesh2d.mesh2d property)": [[227, "fipy.meshes.mesh2D.Mesh2D.facesTop"]], "facesup (fipy.meshes.mesh2d.mesh2d property)": [[227, "fipy.meshes.mesh2D.Mesh2D.facesUp"]], "fipy.meshes.mesh2d": [[227, "module-fipy.meshes.mesh2D"]], "x (fipy.meshes.mesh2d.mesh2d property)": [[227, "fipy.meshes.mesh2D.Mesh2D.x"]], "y (fipy.meshes.mesh2d.mesh2d property)": [[227, "fipy.meshes.mesh2D.Mesh2D.y"]], "z (fipy.meshes.mesh2d.mesh2d property)": [[227, "fipy.meshes.mesh2D.Mesh2D.z"]], "nonuniformgrid1d (class in fipy.meshes.nonuniformgrid1d)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesUp"]], "fipy.meshes.nonuniformgrid1d": [[228, "module-fipy.meshes.nonUniformGrid1D"]], "x (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.x"]], "y (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.y"]], "z (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[228, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.z"]], "nonuniformgrid2d (class in fipy.meshes.nonuniformgrid2d)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.extrude"]], "facesback (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesUp"]], "fipy.meshes.nonuniformgrid2d": [[229, "module-fipy.meshes.nonUniformGrid2D"]], "x (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.x"]], "y (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.y"]], "z (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[229, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.z"]], "nonuniformgrid3d (class in fipy.meshes.nonuniformgrid3d)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.cellFaceIDs"]], "facesback (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesUp"]], "fipy.meshes.nonuniformgrid3d": [[230, "module-fipy.meshes.nonUniformGrid3D"]], "x (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.x"]], "y (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.y"]], "z (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[230, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.z"]], "periodicgrid1d (class in fipy.meshes.periodicgrid1d)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D"]], "vtkcelldataset (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__add__"]], "__div__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__div__"]], "__getstate__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__mul__"]], "__radd__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__radd__"]], "__repr__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesBack"]], "facesbottom (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesBottom"]], "facesdown (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesDown"]], "facesfront (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesFront"]], "facesleft (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesLeft"]], "facesright (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesRight"]], "facestop (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesTop"]], "facesup (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesUp"]], "fipy.meshes.periodicgrid1d": [[231, "module-fipy.meshes.periodicGrid1D"]], "x (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.x"]], "y (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.y"]], "z (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[231, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.z"]], "periodicgrid2d (class in fipy.meshes.periodicgrid2d)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D"]], "periodicgrid2dleftright (class in fipy.meshes.periodicgrid2d)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight"]], "periodicgrid2dtopbottom (class in fipy.meshes.periodicgrid2d)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__add__"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__add__"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__add__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__div__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__div__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__div__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__mul__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__mul__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__mul__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__radd__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__radd__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__radd__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__repr__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__repr__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__sub__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__sub__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.cellFaceIDs"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.extrude"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.extrude"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.extrude"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesBack"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesBack"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesBack"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesBottom"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesDown"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesDown"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesDown"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesFront"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesFront"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesFront"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesLeft"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesLeft"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesLeft"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesRight"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesRight"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesRight"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesTop"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesTop"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesTop"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesUp"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesUp"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesUp"]], "fipy.meshes.periodicgrid2d": [[232, "module-fipy.meshes.periodicGrid2D"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.x"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.x"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.x"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.y"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.y"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.y"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.z"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.z"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[232, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.z"]], "periodicgrid3d (class in fipy.meshes.periodicgrid3d)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D"]], "periodicgrid3dfrontback (class in fipy.meshes.periodicgrid3d)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack"]], "periodicgrid3dleftright (class in fipy.meshes.periodicgrid3d)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight"]], "periodicgrid3dleftrightfrontback (class in fipy.meshes.periodicgrid3d)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack"]], "periodicgrid3dleftrighttopbottom (class in fipy.meshes.periodicgrid3d)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom"]], "periodicgrid3dtopbottom (class in fipy.meshes.periodicgrid3d)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom"]], "periodicgrid3dtopbottomfrontback (class in fipy.meshes.periodicgrid3d)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__add__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__div__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__mul__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__radd__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.cellFaceIDs"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesBack"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesBottom"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesDown"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesFront"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesLeft"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesRight"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesTop"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesUp"]], "fipy.meshes.periodicgrid3d": [[233, "module-fipy.meshes.periodicGrid3D"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.x"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.y"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[233, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.z"]], "fipy.meshes.representations": [[234, "module-fipy.meshes.representations"]], "fipy.meshes.representations.abstractrepresentation": [[235, "module-fipy.meshes.representations.abstractRepresentation"]], "fipy.meshes.representations.gridrepresentation": [[236, "module-fipy.meshes.representations.gridRepresentation"]], "fipy.meshes.representations.meshrepresentation": [[237, "module-fipy.meshes.representations.meshRepresentation"]], "skewedgrid2d (class in fipy.meshes.skewedgrid2d)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D"]], "vtkcelldataset (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__add__"]], "__div__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__div__"]], "__getstate__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__getstate__"]], "__mul__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__mul__"]], "__radd__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__radd__"]], "__repr__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__repr__"]], "__rmul__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__rmul__"]], "__sub__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__sub__"]], "__truediv__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__truediv__"]], "aspect2d (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.aspect2D"]], "cellcenters (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.extrude"]], "facesback (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesBack"]], "facesbottom (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesBottom"]], "facesdown (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesDown"]], "facesfront (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesFront"]], "facesleft (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesLeft"]], "facesright (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesRight"]], "facestop (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesTop"]], "facesup (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesUp"]], "fipy.meshes.skewedgrid2d": [[238, "module-fipy.meshes.skewedGrid2D"]], "physicalshape (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.physicalShape"]], "x (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.x"]], "y (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.y"]], "z (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[238, "fipy.meshes.skewedGrid2D.SkewedGrid2D.z"]], "sphericalnonuniformgrid1d (class in fipy.meshes.sphericalnonuniformgrid1d)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesUp"]], "fipy.meshes.sphericalnonuniformgrid1d": [[239, "module-fipy.meshes.sphericalNonUniformGrid1D"]], "x (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.x"]], "y (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.y"]], "z (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[239, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.z"]], "sphericaluniformgrid1d (class in fipy.meshes.sphericaluniformgrid1d)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D"]], "vtkcelldataset (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__add__"]], "__div__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesRight"]], "facestop (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesTop"]], "facesup (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesUp"]], "fipy.meshes.sphericaluniformgrid1d": [[240, "module-fipy.meshes.sphericalUniformGrid1D"]], "x (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.x"]], "y (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.y"]], "z (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[240, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.z"]], "fipy.meshes.test": [[241, "module-fipy.meshes.test"]], "fipy.meshes.topologies": [[242, "module-fipy.meshes.topologies"]], "fipy.meshes.topologies.abstracttopology": [[243, "module-fipy.meshes.topologies.abstractTopology"]], "fipy.meshes.topologies.gridtopology": [[244, "module-fipy.meshes.topologies.gridTopology"]], "fipy.meshes.topologies.meshtopology": [[245, "module-fipy.meshes.topologies.meshTopology"]], "tri2d (class in fipy.meshes.tri2d)": [[246, "fipy.meshes.tri2D.Tri2D"]], "vtkcelldataset (fipy.meshes.tri2d.tri2d property)": [[246, "fipy.meshes.tri2D.Tri2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.tri2d.tri2d property)": [[246, "fipy.meshes.tri2D.Tri2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.tri2d.tri2d method)": [[246, "fipy.meshes.tri2D.Tri2D.__add__"]], "__div__() (fipy.meshes.tri2d.tri2d method)": [[246, "fipy.meshes.tri2D.Tri2D.__div__"]], "__getstate__() (fipy.meshes.tri2d.tri2d method)": [[246, "fipy.meshes.tri2D.Tri2D.__getstate__"]], "__mul__() (fipy.meshes.tri2d.tri2d method)": [[246, "fipy.meshes.tri2D.Tri2D.__mul__"]], "__radd__() (fipy.meshes.tri2d.tri2d method)": [[246, "fipy.meshes.tri2D.Tri2D.__radd__"]], "__repr__() (fipy.meshes.tri2d.tri2d method)": [[246, "fipy.meshes.tri2D.Tri2D.__repr__"]], "__rmul__() (fipy.meshes.tri2d.tri2d method)": [[246, "fipy.meshes.tri2D.Tri2D.__rmul__"]], "__sub__() (fipy.meshes.tri2d.tri2d method)": [[246, "fipy.meshes.tri2D.Tri2D.__sub__"]], "__truediv__() (fipy.meshes.tri2d.tri2d method)": [[246, "fipy.meshes.tri2D.Tri2D.__truediv__"]], "aspect2d (fipy.meshes.tri2d.tri2d property)": [[246, "fipy.meshes.tri2D.Tri2D.aspect2D"]], "cellcenters (fipy.meshes.tri2d.tri2d property)": [[246, "fipy.meshes.tri2D.Tri2D.cellCenters"]], "cellfaceids (fipy.meshes.tri2d.tri2d property)": [[246, "fipy.meshes.tri2D.Tri2D.cellFaceIDs"]], "extrude() (fipy.meshes.tri2d.tri2d method)": [[246, "fipy.meshes.tri2D.Tri2D.extrude"]], "facesback (fipy.meshes.tri2d.tri2d property)": [[246, "fipy.meshes.tri2D.Tri2D.facesBack"]], "facesbottom (fipy.meshes.tri2d.tri2d property)": [[246, "fipy.meshes.tri2D.Tri2D.facesBottom"]], "facesdown (fipy.meshes.tri2d.tri2d property)": [[246, "fipy.meshes.tri2D.Tri2D.facesDown"]], "facesfront (fipy.meshes.tri2d.tri2d property)": [[246, "fipy.meshes.tri2D.Tri2D.facesFront"]], "facesleft (fipy.meshes.tri2d.tri2d property)": [[246, "fipy.meshes.tri2D.Tri2D.facesLeft"]], "facesright (fipy.meshes.tri2d.tri2d property)": [[246, "fipy.meshes.tri2D.Tri2D.facesRight"]], "facestop (fipy.meshes.tri2d.tri2d property)": [[246, "fipy.meshes.tri2D.Tri2D.facesTop"]], "facesup (fipy.meshes.tri2d.tri2d property)": [[246, "fipy.meshes.tri2D.Tri2D.facesUp"]], "fipy.meshes.tri2d": [[246, "module-fipy.meshes.tri2D"]], "physicalshape (fipy.meshes.tri2d.tri2d property)": [[246, "fipy.meshes.tri2D.Tri2D.physicalShape"]], "x (fipy.meshes.tri2d.tri2d property)": [[246, "fipy.meshes.tri2D.Tri2D.x"]], "y (fipy.meshes.tri2d.tri2d property)": [[246, "fipy.meshes.tri2D.Tri2D.y"]], "z (fipy.meshes.tri2d.tri2d property)": [[246, "fipy.meshes.tri2D.Tri2D.z"]], "uniformgrid (class in fipy.meshes.uniformgrid)": [[247, "fipy.meshes.uniformGrid.UniformGrid"]], "vtkcelldataset (fipy.meshes.uniformgrid.uniformgrid property)": [[247, "fipy.meshes.uniformGrid.UniformGrid.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid.uniformgrid property)": [[247, "fipy.meshes.uniformGrid.UniformGrid.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid.uniformgrid method)": [[247, "fipy.meshes.uniformGrid.UniformGrid.__add__"]], "__div__() (fipy.meshes.uniformgrid.uniformgrid method)": [[247, "fipy.meshes.uniformGrid.UniformGrid.__div__"]], "__getstate__() (fipy.meshes.uniformgrid.uniformgrid method)": [[247, "fipy.meshes.uniformGrid.UniformGrid.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid.uniformgrid method)": [[247, "fipy.meshes.uniformGrid.UniformGrid.__radd__"]], "__repr__() (fipy.meshes.uniformgrid.uniformgrid method)": [[247, "fipy.meshes.uniformGrid.UniformGrid.__repr__"]], "__sub__() (fipy.meshes.uniformgrid.uniformgrid method)": [[247, "fipy.meshes.uniformGrid.UniformGrid.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid.uniformgrid method)": [[247, "fipy.meshes.uniformGrid.UniformGrid.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid.uniformgrid property)": [[247, "fipy.meshes.uniformGrid.UniformGrid.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid.uniformgrid property)": [[247, "fipy.meshes.uniformGrid.UniformGrid.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid.uniformgrid property)": [[247, "fipy.meshes.uniformGrid.UniformGrid.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid.uniformgrid property)": [[247, "fipy.meshes.uniformGrid.UniformGrid.facesBack"]], "facesbottom (fipy.meshes.uniformgrid.uniformgrid property)": [[247, "fipy.meshes.uniformGrid.UniformGrid.facesBottom"]], "facesdown (fipy.meshes.uniformgrid.uniformgrid property)": [[247, "fipy.meshes.uniformGrid.UniformGrid.facesDown"]], "facesfront (fipy.meshes.uniformgrid.uniformgrid property)": [[247, "fipy.meshes.uniformGrid.UniformGrid.facesFront"]], "facesleft (fipy.meshes.uniformgrid.uniformgrid property)": [[247, "fipy.meshes.uniformGrid.UniformGrid.facesLeft"]], "facesright (fipy.meshes.uniformgrid.uniformgrid property)": [[247, "fipy.meshes.uniformGrid.UniformGrid.facesRight"]], "facestop (fipy.meshes.uniformgrid.uniformgrid property)": [[247, "fipy.meshes.uniformGrid.UniformGrid.facesTop"]], "facesup (fipy.meshes.uniformgrid.uniformgrid property)": [[247, "fipy.meshes.uniformGrid.UniformGrid.facesUp"]], "fipy.meshes.uniformgrid": [[247, "module-fipy.meshes.uniformGrid"]], "x (fipy.meshes.uniformgrid.uniformgrid property)": [[247, "fipy.meshes.uniformGrid.UniformGrid.x"]], "y (fipy.meshes.uniformgrid.uniformgrid property)": [[247, "fipy.meshes.uniformGrid.UniformGrid.y"]], "z (fipy.meshes.uniformgrid.uniformgrid property)": [[247, "fipy.meshes.uniformGrid.UniformGrid.z"]], "uniformgrid1d (class in fipy.meshes.uniformgrid1d)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D"]], "vtkcelldataset (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.__add__"]], "__div__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesDown"]], "facesfront (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesFront"]], "facesleft (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesLeft"]], "facesright (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesRight"]], "facestop (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesTop"]], "facesup (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesUp"]], "fipy.meshes.uniformgrid1d": [[248, "module-fipy.meshes.uniformGrid1D"]], "x (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.x"]], "y (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.y"]], "z (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[248, "fipy.meshes.uniformGrid1D.UniformGrid1D.z"]], "uniformgrid2d (class in fipy.meshes.uniformgrid2d)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D"]], "vtkcelldataset (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.__add__"]], "__div__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesDown"]], "facesfront (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesFront"]], "facesleft (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesLeft"]], "facesright (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesRight"]], "facestop (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesTop"]], "facesup (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesUp"]], "fipy.meshes.uniformgrid2d": [[249, "module-fipy.meshes.uniformGrid2D"]], "x (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.x"]], "y (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.y"]], "z (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[249, "fipy.meshes.uniformGrid2D.UniformGrid2D.z"]], "uniformgrid3d (class in fipy.meshes.uniformgrid3d)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D"]], "vtkcelldataset (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.__add__"]], "__div__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.__div__"]], "__getstate__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid3d.uniformgrid3d method)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesDown"]], "facesfront (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesFront"]], "facesleft (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesLeft"]], "facesright (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesRight"]], "facestop (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesTop"]], "facesup (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.facesUp"]], "fipy.meshes.uniformgrid3d": [[250, "module-fipy.meshes.uniformGrid3D"]], "x (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.x"]], "y (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.y"]], "z (fipy.meshes.uniformgrid3d.uniformgrid3d property)": [[250, "fipy.meshes.uniformGrid3D.UniformGrid3D.z"]], "defaultasymmetricsolver (in module fipy.solvers)": [[251, "fipy.solvers.DefaultAsymmetricSolver"]], "defaultsolver (in module fipy.solvers)": [[251, "fipy.solvers.DefaultSolver"]], "dummysolver (in module fipy.solvers)": [[251, "fipy.solvers.DummySolver"]], "generalsolver (in module fipy.solvers)": [[251, "fipy.solvers.GeneralSolver"]], "serialsolvererror": [[251, "fipy.solvers.SerialSolverError"]], "__cause__ (fipy.solvers.serialsolvererror attribute)": [[251, "fipy.solvers.SerialSolverError.__cause__"]], "__context__ (fipy.solvers.serialsolvererror attribute)": [[251, "fipy.solvers.SerialSolverError.__context__"]], "__delattr__() (fipy.solvers.serialsolvererror method)": [[251, "fipy.solvers.SerialSolverError.__delattr__"]], "__getattribute__() (fipy.solvers.serialsolvererror method)": [[251, "fipy.solvers.SerialSolverError.__getattribute__"]], "__reduce__() (fipy.solvers.serialsolvererror method)": [[251, "fipy.solvers.SerialSolverError.__reduce__"]], "__repr__() (fipy.solvers.serialsolvererror method)": [[251, "fipy.solvers.SerialSolverError.__repr__"]], "__setattr__() (fipy.solvers.serialsolvererror method)": [[251, "fipy.solvers.SerialSolverError.__setattr__"]], "__str__() (fipy.solvers.serialsolvererror method)": [[251, "fipy.solvers.SerialSolverError.__str__"]], "add_note() (fipy.solvers.serialsolvererror method)": [[251, "fipy.solvers.SerialSolverError.add_note"]], "fipy.solvers": [[251, "module-fipy.solvers"]], "with_traceback() (fipy.solvers.serialsolvererror method)": [[251, "fipy.solvers.SerialSolverError.with_traceback"]], "fipy.solvers.petsc": [[252, "module-fipy.solvers.petsc"]], "fipy.solvers.petsc.comms": [[253, "module-fipy.solvers.petsc.comms"]], "parallelpetsccommwrapper (class in fipy.solvers.petsc.comms.parallelpetsccommwrapper)": [[254, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.parallelpetsccommwrapper.parallelpetsccommwrapper method)": [[254, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.parallelpetsccommwrapper.parallelpetsccommwrapper method)": [[254, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.parallelpetsccommwrapper": [[254, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"]], "petsccommwrapper (class in fipy.solvers.petsc.comms.petsccommwrapper)": [[255, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.petsccommwrapper.petsccommwrapper method)": [[255, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.petsccommwrapper.petsccommwrapper method)": [[255, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.petsccommwrapper": [[255, "module-fipy.solvers.petsc.comms.petscCommWrapper"]], "serialpetsccommwrapper (class in fipy.solvers.petsc.comms.serialpetsccommwrapper)": [[256, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.serialpetsccommwrapper.serialpetsccommwrapper method)": [[256, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.serialpetsccommwrapper.serialpetsccommwrapper method)": [[256, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.serialpetsccommwrapper": [[256, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"]], "dummysolver (class in fipy.solvers.petsc.dummysolver)": [[257, "fipy.solvers.petsc.dummySolver.DummySolver"]], "__repr__() (fipy.solvers.petsc.dummysolver.dummysolver method)": [[257, "fipy.solvers.petsc.dummySolver.DummySolver.__repr__"]], "fipy.solvers.petsc.dummysolver": [[257, "module-fipy.solvers.petsc.dummySolver"]], "linearbicgsolver (class in fipy.solvers.petsc.linearbicgsolver)": [[258, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver"]], "__repr__() (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver method)": [[258, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.__repr__"]], "fipy.solvers.petsc.linearbicgsolver": [[258, "module-fipy.solvers.petsc.linearBicgSolver"]], "linearcgssolver (class in fipy.solvers.petsc.linearcgssolver)": [[259, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.petsc.linearcgssolver.linearcgssolver method)": [[259, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.__repr__"]], "fipy.solvers.petsc.linearcgssolver": [[259, "module-fipy.solvers.petsc.linearCGSSolver"]], "lineargmressolver (class in fipy.solvers.petsc.lineargmressolver)": [[260, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.petsc.lineargmressolver.lineargmressolver method)": [[260, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "fipy.solvers.petsc.lineargmressolver": [[260, "module-fipy.solvers.petsc.linearGMRESSolver"]], "linearlusolver (class in fipy.solvers.petsc.linearlusolver)": [[261, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.petsc.linearlusolver.linearlusolver method)": [[261, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.__repr__"]], "fipy.solvers.petsc.linearlusolver": [[261, "module-fipy.solvers.petsc.linearLUSolver"]], "linearpcgsolver (class in fipy.solvers.petsc.linearpcgsolver)": [[262, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver method)": [[262, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.__repr__"]], "fipy.solvers.petsc.linearpcgsolver": [[262, "module-fipy.solvers.petsc.linearPCGSolver"]], "petsckrylovsolver (class in fipy.solvers.petsc.petsckrylovsolver)": [[263, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver"]], "__repr__() (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver method)": [[263, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.__repr__"]], "fipy.solvers.petsc.petsckrylovsolver": [[263, "module-fipy.solvers.petsc.petscKrylovSolver"]], "petscsolver (class in fipy.solvers.petsc.petscsolver)": [[264, "fipy.solvers.petsc.petscSolver.PETScSolver"]], "__repr__() (fipy.solvers.petsc.petscsolver.petscsolver method)": [[264, "fipy.solvers.petsc.petscSolver.PETScSolver.__repr__"]], "fipy.solvers.petsc.petscsolver": [[264, "module-fipy.solvers.petsc.petscSolver"]], "fipy.solvers.pyamg": [[265, "module-fipy.solvers.pyAMG"]], "linearcgssolver (class in fipy.solvers.pyamg.linearcgssolver)": [[266, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.pyamg.linearcgssolver.linearcgssolver method)": [[266, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.__repr__"]], "fipy.solvers.pyamg.linearcgssolver": [[266, "module-fipy.solvers.pyAMG.linearCGSSolver"]], "lineargmressolver (class in fipy.solvers.pyamg.lineargmressolver)": [[267, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pyamg.lineargmressolver.lineargmressolver method)": [[267, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "fipy.solvers.pyamg.lineargmressolver": [[267, "module-fipy.solvers.pyAMG.linearGMRESSolver"]], "lineargeneralsolver (class in fipy.solvers.pyamg.lineargeneralsolver)": [[268, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver"]], "__repr__() (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver method)": [[268, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.__repr__"]], "fipy.solvers.pyamg.lineargeneralsolver": [[268, "module-fipy.solvers.pyAMG.linearGeneralSolver"]], "linearlusolver (class in fipy.solvers.pyamg.linearlusolver)": [[269, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pyamg.linearlusolver.linearlusolver method)": [[269, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.__repr__"]], "fipy.solvers.pyamg.linearlusolver": [[269, "module-fipy.solvers.pyAMG.linearLUSolver"]], "linearpcgsolver (class in fipy.solvers.pyamg.linearpcgsolver)": [[270, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver method)": [[270, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.__repr__"]], "fipy.solvers.pyamg.linearpcgsolver": [[270, "module-fipy.solvers.pyAMG.linearPCGSolver"]], "fipy.solvers.pyamg.preconditioners": [[271, "module-fipy.solvers.pyAMG.preconditioners"]], "smoothedaggregationpreconditioner (class in fipy.solvers.pyamg.preconditioners.smoothedaggregationpreconditioner)": [[272, "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner.SmoothedAggregationPreconditioner"]], "fipy.solvers.pyamg.preconditioners.smoothedaggregationpreconditioner": [[272, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[273, "module-fipy.solvers.pyamgx"]], "aggregationamgsolver (class in fipy.solvers.pyamgx.aggregationamgsolver)": [[274, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver"]], "__repr__() (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver method)": [[274, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.__repr__"]], "fipy.solvers.pyamgx.aggregationamgsolver": [[274, "module-fipy.solvers.pyamgx.aggregationAMGSolver"]], "classicalamgsolver (class in fipy.solvers.pyamgx.classicalamgsolver)": [[275, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver"]], "__repr__() (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver method)": [[275, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.__repr__"]], "fipy.solvers.pyamgx.classicalamgsolver": [[275, "module-fipy.solvers.pyamgx.classicalAMGSolver"]], "linearbicgstabsolver (class in fipy.solvers.pyamgx.linearbicgstabsolver)": [[276, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver"]], "__repr__() (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver method)": [[276, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.__repr__"]], "fipy.solvers.pyamgx.linearbicgstabsolver": [[276, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"]], "linearcgsolver (class in fipy.solvers.pyamgx.linearcgsolver)": [[277, "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver"]], "linearpcgsolver (in module fipy.solvers.pyamgx.linearcgsolver)": [[277, "fipy.solvers.pyamgx.linearCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pyamgx.linearcgsolver.linearcgsolver method)": [[277, "fipy.solvers.pyamgx.linearCGSolver.LinearCGSolver.__repr__"]], "fipy.solvers.pyamgx.linearcgsolver": [[277, "module-fipy.solvers.pyamgx.linearCGSolver"]], "linearfgmressolver (class in fipy.solvers.pyamgx.linearfgmressolver)": [[278, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver"]], "__repr__() (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver method)": [[278, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.__repr__"]], "fipy.solvers.pyamgx.linearfgmressolver": [[278, "module-fipy.solvers.pyamgx.linearFGMRESSolver"]], "lineargmressolver (class in fipy.solvers.pyamgx.lineargmressolver)": [[279, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver method)": [[279, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "fipy.solvers.pyamgx.lineargmressolver": [[279, "module-fipy.solvers.pyamgx.linearGMRESSolver"]], "linearlusolver (class in fipy.solvers.pyamgx.linearlusolver)": [[280, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pyamgx.linearlusolver.linearlusolver method)": [[280, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.__repr__"]], "fipy.solvers.pyamgx.linearlusolver": [[280, "module-fipy.solvers.pyamgx.linearLUSolver"]], "fipy.solvers.pyamgx.preconditioners": [[281, "module-fipy.solvers.pyamgx.preconditioners"]], "preconditioner (class in fipy.solvers.pyamgx.preconditioners.preconditioners)": [[282, "fipy.solvers.pyamgx.preconditioners.preconditioners.Preconditioner"]], "__call__() (fipy.solvers.pyamgx.preconditioners.preconditioners.preconditioner method)": [[282, "fipy.solvers.pyamgx.preconditioners.preconditioners.Preconditioner.__call__"]], "fipy.solvers.pyamgx.preconditioners.preconditioners": [[282, "module-fipy.solvers.pyamgx.preconditioners.preconditioners"]], "pyamgxsolver (class in fipy.solvers.pyamgx.pyamgxsolver)": [[283, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver"]], "__repr__() (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver method)": [[283, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.__repr__"]], "fipy.solvers.pyamgx.pyamgxsolver": [[283, "module-fipy.solvers.pyamgx.pyAMGXSolver"]], "fipy.solvers.pyamgx.smoothers": [[284, "module-fipy.solvers.pyamgx.smoothers"]], "smoother (class in fipy.solvers.pyamgx.smoothers.smoothers)": [[285, "fipy.solvers.pyamgx.smoothers.smoothers.Smoother"]], "__call__() (fipy.solvers.pyamgx.smoothers.smoothers.smoother method)": [[285, "fipy.solvers.pyamgx.smoothers.smoothers.Smoother.__call__"]], "fipy.solvers.pyamgx.smoothers.smoothers": [[285, "module-fipy.solvers.pyamgx.smoothers.smoothers"]], "fipy.solvers.pysparse": [[286, "module-fipy.solvers.pysparse"]], "linearcgssolver (class in fipy.solvers.pysparse.linearcgssolver)": [[287, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.pysparse.linearcgssolver.linearcgssolver method)": [[287, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.__repr__"]], "fipy.solvers.pysparse.linearcgssolver": [[287, "module-fipy.solvers.pysparse.linearCGSSolver"]], "lineargmressolver (class in fipy.solvers.pysparse.lineargmressolver)": [[288, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pysparse.lineargmressolver.lineargmressolver method)": [[288, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "fipy.solvers.pysparse.lineargmressolver": [[288, "module-fipy.solvers.pysparse.linearGMRESSolver"]], "linearjorsolver (class in fipy.solvers.pysparse.linearjorsolver)": [[289, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver"]], "__repr__() (fipy.solvers.pysparse.linearjorsolver.linearjorsolver method)": [[289, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.__repr__"]], "fipy.solvers.pysparse.linearjorsolver": [[289, "module-fipy.solvers.pysparse.linearJORSolver"]], "linearlusolver (class in fipy.solvers.pysparse.linearlusolver)": [[290, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pysparse.linearlusolver.linearlusolver method)": [[290, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.__repr__"]], "fipy.solvers.pysparse.linearlusolver": [[290, "module-fipy.solvers.pysparse.linearLUSolver"]], "linearpcgsolver (class in fipy.solvers.pysparse.linearpcgsolver)": [[291, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver method)": [[291, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.__repr__"]], "fipy.solvers.pysparse.linearpcgsolver": [[291, "module-fipy.solvers.pysparse.linearPCGSolver"]], "fipy.solvers.pysparse.preconditioners": [[292, "module-fipy.solvers.pysparse.preconditioners"]], "jacobipreconditioner (class in fipy.solvers.pysparse.preconditioners.jacobipreconditioner)": [[293, "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.jacobipreconditioner": [[293, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"]], "preconditioner (class in fipy.solvers.pysparse.preconditioners.preconditioner)": [[294, "fipy.solvers.pysparse.preconditioners.preconditioner.Preconditioner"]], "fipy.solvers.pysparse.preconditioners.preconditioner": [[294, "module-fipy.solvers.pysparse.preconditioners.preconditioner"]], "ssorpreconditioner (class in fipy.solvers.pysparse.preconditioners.ssorpreconditioner)": [[295, "fipy.solvers.pysparse.preconditioners.ssorPreconditioner.SsorPreconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorpreconditioner": [[295, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"]], "pysparsesolver (class in fipy.solvers.pysparse.pysparsesolver)": [[296, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver"]], "__repr__() (fipy.solvers.pysparse.pysparsesolver.pysparsesolver method)": [[296, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.__repr__"]], "fipy.solvers.pysparse.pysparsesolver": [[296, "module-fipy.solvers.pysparse.pysparseSolver"]], "fipy.solvers.pysparsematrixsolver": [[297, "module-fipy.solvers.pysparseMatrixSolver"]], "fipy.solvers.scipy": [[298, "module-fipy.solvers.scipy"]], "linearbicgstabsolver (class in fipy.solvers.scipy.linearbicgstabsolver)": [[299, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver"]], "__repr__() (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver method)": [[299, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.__repr__"]], "fipy.solvers.scipy.linearbicgstabsolver": [[299, "module-fipy.solvers.scipy.linearBicgstabSolver"]], "linearcgssolver (class in fipy.solvers.scipy.linearcgssolver)": [[300, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.scipy.linearcgssolver.linearcgssolver method)": [[300, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.__repr__"]], "fipy.solvers.scipy.linearcgssolver": [[300, "module-fipy.solvers.scipy.linearCGSSolver"]], "lineargmressolver (class in fipy.solvers.scipy.lineargmressolver)": [[301, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.scipy.lineargmressolver.lineargmressolver method)": [[301, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "fipy.solvers.scipy.lineargmressolver": [[301, "module-fipy.solvers.scipy.linearGMRESSolver"]], "linearlusolver (class in fipy.solvers.scipy.linearlusolver)": [[302, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.scipy.linearlusolver.linearlusolver method)": [[302, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.__repr__"]], "fipy.solvers.scipy.linearlusolver": [[302, "module-fipy.solvers.scipy.linearLUSolver"]], "linearpcgsolver (class in fipy.solvers.scipy.linearpcgsolver)": [[303, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver method)": [[303, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.__repr__"]], "fipy.solvers.scipy.linearpcgsolver": [[303, "module-fipy.solvers.scipy.linearPCGSolver"]], "fipy.solvers.scipy.scipykrylovsolver": [[304, "module-fipy.solvers.scipy.scipyKrylovSolver"]], "fipy.solvers.scipy.scipysolver": [[305, "module-fipy.solvers.scipy.scipySolver"]], "illconditionedpreconditionerwarning": [[306, "fipy.solvers.solver.IllConditionedPreconditionerWarning"]], "matrixillconditionedwarning": [[306, "fipy.solvers.solver.MatrixIllConditionedWarning"]], "maximumiterationwarning": [[306, "fipy.solvers.solver.MaximumIterationWarning"]], "preconditionernotpositivedefinitewarning": [[306, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning"]], "preconditionerwarning": [[306, "fipy.solvers.solver.PreconditionerWarning"]], "scalarquantityoutofrangewarning": [[306, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning"]], "solver (class in fipy.solvers.solver)": [[306, "fipy.solvers.solver.Solver"]], "solverconvergencewarning": [[306, "fipy.solvers.solver.SolverConvergenceWarning"]], "stagnatedsolverwarning": [[306, "fipy.solvers.solver.StagnatedSolverWarning"]], "__cause__ (fipy.solvers.solver.illconditionedpreconditionerwarning attribute)": [[306, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__cause__"]], "__cause__ (fipy.solvers.solver.matrixillconditionedwarning attribute)": [[306, "fipy.solvers.solver.MatrixIllConditionedWarning.__cause__"]], "__cause__ (fipy.solvers.solver.maximumiterationwarning attribute)": [[306, "fipy.solvers.solver.MaximumIterationWarning.__cause__"]], "__cause__ (fipy.solvers.solver.preconditionernotpositivedefinitewarning attribute)": [[306, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__cause__"]], "__cause__ (fipy.solvers.solver.preconditionerwarning attribute)": [[306, "fipy.solvers.solver.PreconditionerWarning.__cause__"]], "__cause__ (fipy.solvers.solver.scalarquantityoutofrangewarning attribute)": [[306, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__cause__"]], "__cause__ (fipy.solvers.solver.solverconvergencewarning attribute)": [[306, "fipy.solvers.solver.SolverConvergenceWarning.__cause__"]], "__cause__ (fipy.solvers.solver.stagnatedsolverwarning attribute)": [[306, "fipy.solvers.solver.StagnatedSolverWarning.__cause__"]], "__context__ (fipy.solvers.solver.illconditionedpreconditionerwarning attribute)": [[306, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__context__"]], "__context__ (fipy.solvers.solver.matrixillconditionedwarning attribute)": [[306, "fipy.solvers.solver.MatrixIllConditionedWarning.__context__"]], "__context__ (fipy.solvers.solver.maximumiterationwarning attribute)": [[306, "fipy.solvers.solver.MaximumIterationWarning.__context__"]], "__context__ (fipy.solvers.solver.preconditionernotpositivedefinitewarning attribute)": [[306, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__context__"]], "__context__ (fipy.solvers.solver.preconditionerwarning attribute)": [[306, "fipy.solvers.solver.PreconditionerWarning.__context__"]], "__context__ (fipy.solvers.solver.scalarquantityoutofrangewarning attribute)": [[306, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__context__"]], "__context__ (fipy.solvers.solver.solverconvergencewarning attribute)": [[306, "fipy.solvers.solver.SolverConvergenceWarning.__context__"]], "__context__ (fipy.solvers.solver.stagnatedsolverwarning attribute)": [[306, "fipy.solvers.solver.StagnatedSolverWarning.__context__"]], "__delattr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[306, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[306, "fipy.solvers.solver.MatrixIllConditionedWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.maximumiterationwarning method)": [[306, "fipy.solvers.solver.MaximumIterationWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[306, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.preconditionerwarning method)": [[306, "fipy.solvers.solver.PreconditionerWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[306, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.solverconvergencewarning method)": [[306, "fipy.solvers.solver.SolverConvergenceWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[306, "fipy.solvers.solver.StagnatedSolverWarning.__delattr__"]], "__getattribute__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[306, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[306, "fipy.solvers.solver.MatrixIllConditionedWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.maximumiterationwarning method)": [[306, "fipy.solvers.solver.MaximumIterationWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[306, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.preconditionerwarning method)": [[306, "fipy.solvers.solver.PreconditionerWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[306, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.solverconvergencewarning method)": [[306, "fipy.solvers.solver.SolverConvergenceWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[306, "fipy.solvers.solver.StagnatedSolverWarning.__getattribute__"]], "__reduce__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[306, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[306, "fipy.solvers.solver.MatrixIllConditionedWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.maximumiterationwarning method)": [[306, "fipy.solvers.solver.MaximumIterationWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[306, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.preconditionerwarning method)": [[306, "fipy.solvers.solver.PreconditionerWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[306, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.solverconvergencewarning method)": [[306, "fipy.solvers.solver.SolverConvergenceWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[306, "fipy.solvers.solver.StagnatedSolverWarning.__reduce__"]], "__repr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[306, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__repr__"]], "__repr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[306, "fipy.solvers.solver.MatrixIllConditionedWarning.__repr__"]], "__repr__() (fipy.solvers.solver.maximumiterationwarning method)": [[306, "fipy.solvers.solver.MaximumIterationWarning.__repr__"]], "__repr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[306, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__repr__"]], "__repr__() (fipy.solvers.solver.preconditionerwarning method)": [[306, "fipy.solvers.solver.PreconditionerWarning.__repr__"]], "__repr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[306, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__repr__"]], "__repr__() (fipy.solvers.solver.solver method)": [[306, "fipy.solvers.solver.Solver.__repr__"]], "__repr__() (fipy.solvers.solver.solverconvergencewarning method)": [[306, "fipy.solvers.solver.SolverConvergenceWarning.__repr__"]], "__repr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[306, "fipy.solvers.solver.StagnatedSolverWarning.__repr__"]], "__setattr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[306, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[306, "fipy.solvers.solver.MatrixIllConditionedWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.maximumiterationwarning method)": [[306, "fipy.solvers.solver.MaximumIterationWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[306, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.preconditionerwarning method)": [[306, "fipy.solvers.solver.PreconditionerWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[306, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.solverconvergencewarning method)": [[306, "fipy.solvers.solver.SolverConvergenceWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[306, "fipy.solvers.solver.StagnatedSolverWarning.__setattr__"]], "__str__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[306, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__str__"]], "__str__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[306, "fipy.solvers.solver.MatrixIllConditionedWarning.__str__"]], "__str__() (fipy.solvers.solver.maximumiterationwarning method)": [[306, "fipy.solvers.solver.MaximumIterationWarning.__str__"]], "__str__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[306, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__str__"]], "__str__() (fipy.solvers.solver.preconditionerwarning method)": [[306, "fipy.solvers.solver.PreconditionerWarning.__str__"]], "__str__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[306, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__str__"]], "__str__() (fipy.solvers.solver.solverconvergencewarning method)": [[306, "fipy.solvers.solver.SolverConvergenceWarning.__str__"]], "__str__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[306, "fipy.solvers.solver.StagnatedSolverWarning.__str__"]], "add_note() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[306, "fipy.solvers.solver.IllConditionedPreconditionerWarning.add_note"]], "add_note() (fipy.solvers.solver.matrixillconditionedwarning method)": [[306, "fipy.solvers.solver.MatrixIllConditionedWarning.add_note"]], "add_note() (fipy.solvers.solver.maximumiterationwarning method)": [[306, "fipy.solvers.solver.MaximumIterationWarning.add_note"]], "add_note() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[306, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.add_note"]], "add_note() (fipy.solvers.solver.preconditionerwarning method)": [[306, "fipy.solvers.solver.PreconditionerWarning.add_note"]], "add_note() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[306, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.add_note"]], "add_note() (fipy.solvers.solver.solverconvergencewarning method)": [[306, "fipy.solvers.solver.SolverConvergenceWarning.add_note"]], "add_note() (fipy.solvers.solver.stagnatedsolverwarning method)": [[306, "fipy.solvers.solver.StagnatedSolverWarning.add_note"]], "fipy.solvers.solver": [[306, "module-fipy.solvers.solver"]], "with_traceback() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[306, "fipy.solvers.solver.IllConditionedPreconditionerWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.matrixillconditionedwarning method)": [[306, "fipy.solvers.solver.MatrixIllConditionedWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.maximumiterationwarning method)": [[306, "fipy.solvers.solver.MaximumIterationWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[306, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.preconditionerwarning method)": [[306, "fipy.solvers.solver.PreconditionerWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[306, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.solverconvergencewarning method)": [[306, "fipy.solvers.solver.SolverConvergenceWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.stagnatedsolverwarning method)": [[306, "fipy.solvers.solver.StagnatedSolverWarning.with_traceback"]], "fipy.solvers.test": [[307, "module-fipy.solvers.test"]], "fipy.solvers.trilinos": [[308, "module-fipy.solvers.trilinos"]], "fipy.solvers.trilinos.comms": [[309, "module-fipy.solvers.trilinos.comms"]], "epetracommwrapper (class in fipy.solvers.trilinos.comms.epetracommwrapper)": [[310, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.epetracommwrapper.epetracommwrapper method)": [[310, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.epetracommwrapper.epetracommwrapper method)": [[310, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper.__repr__"]], "fipy.solvers.trilinos.comms.epetracommwrapper": [[310, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"]], "maxall() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[311, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.MaxAll"]], "minall() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[311, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.MinAll"]], "parallelepetracommwrapper (class in fipy.solvers.trilinos.comms.parallelepetracommwrapper)": [[311, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[311, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[311, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.__repr__"]], "allgather() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[311, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.allgather"]], "fipy.solvers.trilinos.comms.parallelepetracommwrapper": [[311, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"]], "serialepetracommwrapper (class in fipy.solvers.trilinos.comms.serialepetracommwrapper)": [[312, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.serialepetracommwrapper.serialepetracommwrapper method)": [[312, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.serialepetracommwrapper.serialepetracommwrapper method)": [[312, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper.__repr__"]], "fipy.solvers.trilinos.comms.serialepetracommwrapper": [[312, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"]], "linearbicgstabsolver (class in fipy.solvers.trilinos.linearbicgstabsolver)": [[313, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver"]], "__repr__() (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver method)": [[313, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.__repr__"]], "fipy.solvers.trilinos.linearbicgstabsolver": [[313, "module-fipy.solvers.trilinos.linearBicgstabSolver"]], "linearcgssolver (class in fipy.solvers.trilinos.linearcgssolver)": [[314, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.trilinos.linearcgssolver.linearcgssolver method)": [[314, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.__repr__"]], "fipy.solvers.trilinos.linearcgssolver": [[314, "module-fipy.solvers.trilinos.linearCGSSolver"]], "lineargmressolver (class in fipy.solvers.trilinos.lineargmressolver)": [[315, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.trilinos.lineargmressolver.lineargmressolver method)": [[315, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "fipy.solvers.trilinos.lineargmressolver": [[315, "module-fipy.solvers.trilinos.linearGMRESSolver"]], "linearlusolver (class in fipy.solvers.trilinos.linearlusolver)": [[316, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.trilinos.linearlusolver.linearlusolver method)": [[316, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.__repr__"]], "fipy.solvers.trilinos.linearlusolver": [[316, "module-fipy.solvers.trilinos.linearLUSolver"]], "linearpcgsolver (class in fipy.solvers.trilinos.linearpcgsolver)": [[317, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver method)": [[317, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.__repr__"]], "fipy.solvers.trilinos.linearpcgsolver": [[317, "module-fipy.solvers.trilinos.linearPCGSolver"]], "fipy.solvers.trilinos.preconditioners": [[318, "module-fipy.solvers.trilinos.preconditioners"]], "domdecomppreconditioner (class in fipy.solvers.trilinos.preconditioners.domdecomppreconditioner)": [[319, "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner.DomDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.domdecomppreconditioner": [[319, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"]], "icpreconditioner (class in fipy.solvers.trilinos.preconditioners.icpreconditioner)": [[320, "fipy.solvers.trilinos.preconditioners.icPreconditioner.ICPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icpreconditioner": [[320, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.trilinos.preconditioners.jacobipreconditioner)": [[321, "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobipreconditioner": [[321, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"]], "multilevelddmlpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelddmlpreconditioner)": [[322, "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner.MultilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelddmlpreconditioner": [[322, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"]], "multilevelddpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelddpreconditioner)": [[323, "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner.MultilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelddpreconditioner": [[323, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"]], "multilevelnssapreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelnssapreconditioner)": [[324, "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner.MultilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelnssapreconditioner": [[324, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"]], "multilevelsapreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsapreconditioner)": [[325, "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner.MultilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsapreconditioner": [[325, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"]], "multilevelsgspreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsgspreconditioner)": [[326, "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner.MultilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsgspreconditioner": [[326, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"]], "multilevelsolversmootherpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsolversmootherpreconditioner)": [[327, "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner.MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsolversmootherpreconditioner": [[327, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"]], "preconditioner (class in fipy.solvers.trilinos.preconditioners.preconditioner)": [[328, "fipy.solvers.trilinos.preconditioners.preconditioner.Preconditioner"]], "fipy.solvers.trilinos.preconditioners.preconditioner": [[328, "module-fipy.solvers.trilinos.preconditioners.preconditioner"]], "trilinosaztecoosolver (class in fipy.solvers.trilinos.trilinosaztecoosolver)": [[329, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver"]], "__repr__() (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver method)": [[329, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.__repr__"]], "fipy.solvers.trilinos.trilinosaztecoosolver": [[329, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"]], "trilinosmltest (class in fipy.solvers.trilinos.trilinosmltest)": [[330, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest"]], "__repr__() (fipy.solvers.trilinos.trilinosmltest.trilinosmltest method)": [[330, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.__repr__"]], "fipy.solvers.trilinos.trilinosmltest": [[330, "module-fipy.solvers.trilinos.trilinosMLTest"]], "trilinosnonlinearsolver (class in fipy.solvers.trilinos.trilinosnonlinearsolver)": [[331, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver"]], "__repr__() (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver method)": [[331, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.__repr__"]], "fipy.solvers.trilinos.trilinosnonlinearsolver": [[331, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"]], "trilinossolver (class in fipy.solvers.trilinos.trilinossolver)": [[332, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver"]], "__repr__() (fipy.solvers.trilinos.trilinossolver.trilinossolver method)": [[332, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.__repr__"]], "fipy.solvers.trilinos.trilinossolver": [[332, "module-fipy.solvers.trilinos.trilinosSolver"]], "l1error() (in module fipy.steppers)": [[333, "fipy.steppers.L1error"]], "l2error() (in module fipy.steppers)": [[333, "fipy.steppers.L2error"]], "linferror() (in module fipy.steppers)": [[333, "fipy.steppers.LINFerror"]], "error() (in module fipy.steppers)": [[333, "fipy.steppers.error"]], "fipy.steppers": [[333, "module-fipy.steppers"]], "residual() (in module fipy.steppers)": [[333, "fipy.steppers.residual"]], "sweepmonotonic() (in module fipy.steppers)": [[333, "fipy.steppers.sweepMonotonic"]], "pidstepper (class in fipy.steppers.pidstepper)": [[334, "fipy.steppers.pidStepper.PIDStepper"]], "fipy.steppers.pidstepper": [[334, "module-fipy.steppers.pidStepper"]], "pseudorkqsstepper (class in fipy.steppers.pseudorkqsstepper)": [[335, "fipy.steppers.pseudoRKQSStepper.PseudoRKQSStepper"]], "fipy.steppers.pseudorkqsstepper": [[335, "module-fipy.steppers.pseudoRKQSStepper"]], "stepper (class in fipy.steppers.stepper)": [[336, "fipy.steppers.stepper.Stepper"]], "fipy.steppers.stepper": [[336, "module-fipy.steppers.stepper"]], "abstractbaseclasserror": [[337, "fipy.terms.AbstractBaseClassError"]], "explicitvariableerror": [[337, "fipy.terms.ExplicitVariableError"]], "incorrectsolutionvariable": [[337, "fipy.terms.IncorrectSolutionVariable"]], "solutionvariablenumbererror": [[337, "fipy.terms.SolutionVariableNumberError"]], "solutionvariablerequirederror": [[337, "fipy.terms.SolutionVariableRequiredError"]], "termmultiplyerror": [[337, "fipy.terms.TermMultiplyError"]], "transienttermerror": [[337, "fipy.terms.TransientTermError"]], "vectorcoefferror": [[337, "fipy.terms.VectorCoeffError"]], "__cause__ (fipy.terms.abstractbaseclasserror attribute)": [[337, "fipy.terms.AbstractBaseClassError.__cause__"]], "__cause__ (fipy.terms.explicitvariableerror attribute)": [[337, "fipy.terms.ExplicitVariableError.__cause__"]], "__cause__ (fipy.terms.incorrectsolutionvariable attribute)": [[337, "fipy.terms.IncorrectSolutionVariable.__cause__"]], "__cause__ (fipy.terms.solutionvariablenumbererror attribute)": [[337, "fipy.terms.SolutionVariableNumberError.__cause__"]], "__cause__ (fipy.terms.solutionvariablerequirederror attribute)": [[337, "fipy.terms.SolutionVariableRequiredError.__cause__"]], "__cause__ (fipy.terms.termmultiplyerror attribute)": [[337, "fipy.terms.TermMultiplyError.__cause__"]], "__cause__ (fipy.terms.transienttermerror attribute)": [[337, "fipy.terms.TransientTermError.__cause__"]], "__cause__ (fipy.terms.vectorcoefferror attribute)": [[337, "fipy.terms.VectorCoeffError.__cause__"]], "__context__ (fipy.terms.abstractbaseclasserror attribute)": [[337, "fipy.terms.AbstractBaseClassError.__context__"]], "__context__ (fipy.terms.explicitvariableerror attribute)": [[337, "fipy.terms.ExplicitVariableError.__context__"]], "__context__ (fipy.terms.incorrectsolutionvariable attribute)": [[337, "fipy.terms.IncorrectSolutionVariable.__context__"]], "__context__ (fipy.terms.solutionvariablenumbererror attribute)": [[337, "fipy.terms.SolutionVariableNumberError.__context__"]], "__context__ (fipy.terms.solutionvariablerequirederror attribute)": [[337, "fipy.terms.SolutionVariableRequiredError.__context__"]], "__context__ (fipy.terms.termmultiplyerror attribute)": [[337, "fipy.terms.TermMultiplyError.__context__"]], "__context__ (fipy.terms.transienttermerror attribute)": [[337, "fipy.terms.TransientTermError.__context__"]], "__context__ (fipy.terms.vectorcoefferror attribute)": [[337, "fipy.terms.VectorCoeffError.__context__"]], "__delattr__() (fipy.terms.abstractbaseclasserror method)": [[337, "fipy.terms.AbstractBaseClassError.__delattr__"]], "__delattr__() (fipy.terms.explicitvariableerror method)": [[337, "fipy.terms.ExplicitVariableError.__delattr__"]], "__delattr__() (fipy.terms.incorrectsolutionvariable method)": [[337, "fipy.terms.IncorrectSolutionVariable.__delattr__"]], "__delattr__() (fipy.terms.solutionvariablenumbererror method)": [[337, "fipy.terms.SolutionVariableNumberError.__delattr__"]], "__delattr__() (fipy.terms.solutionvariablerequirederror method)": [[337, "fipy.terms.SolutionVariableRequiredError.__delattr__"]], "__delattr__() (fipy.terms.termmultiplyerror method)": [[337, "fipy.terms.TermMultiplyError.__delattr__"]], "__delattr__() (fipy.terms.transienttermerror method)": [[337, "fipy.terms.TransientTermError.__delattr__"]], "__delattr__() (fipy.terms.vectorcoefferror method)": [[337, "fipy.terms.VectorCoeffError.__delattr__"]], "__getattribute__() (fipy.terms.abstractbaseclasserror method)": [[337, "fipy.terms.AbstractBaseClassError.__getattribute__"]], "__getattribute__() (fipy.terms.explicitvariableerror method)": [[337, "fipy.terms.ExplicitVariableError.__getattribute__"]], "__getattribute__() (fipy.terms.incorrectsolutionvariable method)": [[337, "fipy.terms.IncorrectSolutionVariable.__getattribute__"]], "__getattribute__() (fipy.terms.solutionvariablenumbererror method)": [[337, "fipy.terms.SolutionVariableNumberError.__getattribute__"]], "__getattribute__() (fipy.terms.solutionvariablerequirederror method)": [[337, "fipy.terms.SolutionVariableRequiredError.__getattribute__"]], "__getattribute__() (fipy.terms.termmultiplyerror method)": [[337, "fipy.terms.TermMultiplyError.__getattribute__"]], "__getattribute__() (fipy.terms.transienttermerror method)": [[337, "fipy.terms.TransientTermError.__getattribute__"]], "__getattribute__() (fipy.terms.vectorcoefferror method)": [[337, "fipy.terms.VectorCoeffError.__getattribute__"]], "__reduce__() (fipy.terms.abstractbaseclasserror method)": [[337, "fipy.terms.AbstractBaseClassError.__reduce__"]], "__reduce__() (fipy.terms.explicitvariableerror method)": [[337, "fipy.terms.ExplicitVariableError.__reduce__"]], "__reduce__() (fipy.terms.incorrectsolutionvariable method)": [[337, "fipy.terms.IncorrectSolutionVariable.__reduce__"]], "__reduce__() (fipy.terms.solutionvariablenumbererror method)": [[337, "fipy.terms.SolutionVariableNumberError.__reduce__"]], "__reduce__() (fipy.terms.solutionvariablerequirederror method)": [[337, "fipy.terms.SolutionVariableRequiredError.__reduce__"]], "__reduce__() (fipy.terms.termmultiplyerror method)": [[337, "fipy.terms.TermMultiplyError.__reduce__"]], "__reduce__() (fipy.terms.transienttermerror method)": [[337, "fipy.terms.TransientTermError.__reduce__"]], "__reduce__() (fipy.terms.vectorcoefferror method)": [[337, "fipy.terms.VectorCoeffError.__reduce__"]], "__repr__() (fipy.terms.abstractbaseclasserror method)": [[337, "fipy.terms.AbstractBaseClassError.__repr__"]], "__repr__() (fipy.terms.explicitvariableerror method)": [[337, "fipy.terms.ExplicitVariableError.__repr__"]], "__repr__() (fipy.terms.incorrectsolutionvariable method)": [[337, "fipy.terms.IncorrectSolutionVariable.__repr__"]], "__repr__() (fipy.terms.solutionvariablenumbererror method)": [[337, "fipy.terms.SolutionVariableNumberError.__repr__"]], "__repr__() (fipy.terms.solutionvariablerequirederror method)": [[337, "fipy.terms.SolutionVariableRequiredError.__repr__"]], "__repr__() (fipy.terms.termmultiplyerror method)": [[337, "fipy.terms.TermMultiplyError.__repr__"]], "__repr__() (fipy.terms.transienttermerror method)": [[337, "fipy.terms.TransientTermError.__repr__"]], "__repr__() (fipy.terms.vectorcoefferror method)": [[337, "fipy.terms.VectorCoeffError.__repr__"]], "__setattr__() (fipy.terms.abstractbaseclasserror method)": [[337, "fipy.terms.AbstractBaseClassError.__setattr__"]], "__setattr__() (fipy.terms.explicitvariableerror method)": [[337, "fipy.terms.ExplicitVariableError.__setattr__"]], "__setattr__() (fipy.terms.incorrectsolutionvariable method)": [[337, "fipy.terms.IncorrectSolutionVariable.__setattr__"]], "__setattr__() (fipy.terms.solutionvariablenumbererror method)": [[337, "fipy.terms.SolutionVariableNumberError.__setattr__"]], "__setattr__() (fipy.terms.solutionvariablerequirederror method)": [[337, "fipy.terms.SolutionVariableRequiredError.__setattr__"]], "__setattr__() (fipy.terms.termmultiplyerror method)": [[337, "fipy.terms.TermMultiplyError.__setattr__"]], "__setattr__() (fipy.terms.transienttermerror method)": [[337, "fipy.terms.TransientTermError.__setattr__"]], "__setattr__() (fipy.terms.vectorcoefferror method)": [[337, "fipy.terms.VectorCoeffError.__setattr__"]], "__str__() (fipy.terms.abstractbaseclasserror method)": [[337, "fipy.terms.AbstractBaseClassError.__str__"]], "__str__() (fipy.terms.explicitvariableerror method)": [[337, "fipy.terms.ExplicitVariableError.__str__"]], "__str__() (fipy.terms.incorrectsolutionvariable method)": [[337, "fipy.terms.IncorrectSolutionVariable.__str__"]], "__str__() (fipy.terms.solutionvariablenumbererror method)": [[337, "fipy.terms.SolutionVariableNumberError.__str__"]], "__str__() (fipy.terms.solutionvariablerequirederror method)": [[337, "fipy.terms.SolutionVariableRequiredError.__str__"]], "__str__() (fipy.terms.termmultiplyerror method)": [[337, "fipy.terms.TermMultiplyError.__str__"]], "__str__() (fipy.terms.transienttermerror method)": [[337, "fipy.terms.TransientTermError.__str__"]], "__str__() (fipy.terms.vectorcoefferror method)": [[337, "fipy.terms.VectorCoeffError.__str__"]], "add_note() (fipy.terms.abstractbaseclasserror method)": [[337, "fipy.terms.AbstractBaseClassError.add_note"]], "add_note() (fipy.terms.explicitvariableerror method)": [[337, "fipy.terms.ExplicitVariableError.add_note"]], "add_note() (fipy.terms.incorrectsolutionvariable method)": [[337, "fipy.terms.IncorrectSolutionVariable.add_note"]], "add_note() (fipy.terms.solutionvariablenumbererror method)": [[337, "fipy.terms.SolutionVariableNumberError.add_note"]], "add_note() (fipy.terms.solutionvariablerequirederror method)": [[337, "fipy.terms.SolutionVariableRequiredError.add_note"]], "add_note() (fipy.terms.termmultiplyerror method)": [[337, "fipy.terms.TermMultiplyError.add_note"]], "add_note() (fipy.terms.transienttermerror method)": [[337, "fipy.terms.TransientTermError.add_note"]], "add_note() (fipy.terms.vectorcoefferror method)": [[337, "fipy.terms.VectorCoeffError.add_note"]], "fipy.terms": [[337, "module-fipy.terms"]], "with_traceback() (fipy.terms.abstractbaseclasserror method)": [[337, "fipy.terms.AbstractBaseClassError.with_traceback"]], "with_traceback() (fipy.terms.explicitvariableerror method)": [[337, "fipy.terms.ExplicitVariableError.with_traceback"]], "with_traceback() (fipy.terms.incorrectsolutionvariable method)": [[337, "fipy.terms.IncorrectSolutionVariable.with_traceback"]], "with_traceback() (fipy.terms.solutionvariablenumbererror method)": [[337, "fipy.terms.SolutionVariableNumberError.with_traceback"]], "with_traceback() (fipy.terms.solutionvariablerequirederror method)": [[337, "fipy.terms.SolutionVariableRequiredError.with_traceback"]], "with_traceback() (fipy.terms.termmultiplyerror method)": [[337, "fipy.terms.TermMultiplyError.with_traceback"]], "with_traceback() (fipy.terms.transienttermerror method)": [[337, "fipy.terms.TransientTermError.with_traceback"]], "with_traceback() (fipy.terms.vectorcoefferror method)": [[337, "fipy.terms.VectorCoeffError.with_traceback"]], "fipy.terms.abstractbinaryterm": [[338, "module-fipy.terms.abstractBinaryTerm"]], "fipy.terms.abstractconvectionterm": [[339, "module-fipy.terms.abstractConvectionTerm"]], "fipy.terms.abstractdiffusionterm": [[340, "module-fipy.terms.abstractDiffusionTerm"]], "fipy.terms.abstractupwindconvectionterm": [[341, "module-fipy.terms.abstractUpwindConvectionTerm"]], "advectionterm (class in fipy.terms.advectionterm)": [[342, "fipy.terms.advectionTerm.AdvectionTerm"]], "rhsvector (fipy.terms.advectionterm.advectionterm property)": [[342, "fipy.terms.advectionTerm.AdvectionTerm.RHSvector"]], "__eq__() (fipy.terms.advectionterm.advectionterm method)": [[342, "fipy.terms.advectionTerm.AdvectionTerm.__eq__"]], "__hash__() (fipy.terms.advectionterm.advectionterm method)": [[342, "fipy.terms.advectionTerm.AdvectionTerm.__hash__"]], "__mul__() (fipy.terms.advectionterm.advectionterm method)": [[342, "fipy.terms.advectionTerm.AdvectionTerm.__mul__"]], "__neg__() (fipy.terms.advectionterm.advectionterm method)": [[342, "fipy.terms.advectionTerm.AdvectionTerm.__neg__"]], "__repr__() (fipy.terms.advectionterm.advectionterm method)": [[342, "fipy.terms.advectionTerm.AdvectionTerm.__repr__"]], "__rmul__() (fipy.terms.advectionterm.advectionterm method)": [[342, "fipy.terms.advectionTerm.AdvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.advectionterm.advectionterm method)": [[342, "fipy.terms.advectionTerm.AdvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.advectionterm.advectionterm method)": [[342, "fipy.terms.advectionTerm.AdvectionTerm.cacheRHSvector"]], "fipy.terms.advectionterm": [[342, "module-fipy.terms.advectionTerm"]], "justerrorvector() (fipy.terms.advectionterm.advectionterm method)": [[342, "fipy.terms.advectionTerm.AdvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.advectionterm.advectionterm method)": [[342, "fipy.terms.advectionTerm.AdvectionTerm.justResidualVector"]], "matrix (fipy.terms.advectionterm.advectionterm property)": [[342, "fipy.terms.advectionTerm.AdvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.advectionterm.advectionterm method)": [[342, "fipy.terms.advectionTerm.AdvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.advectionterm.advectionterm method)": [[342, "fipy.terms.advectionTerm.AdvectionTerm.solve"]], "sweep() (fipy.terms.advectionterm.advectionterm method)": [[342, "fipy.terms.advectionTerm.AdvectionTerm.sweep"]], "fipy.terms.asymmetricconvectionterm": [[343, "module-fipy.terms.asymmetricConvectionTerm"]], "fipy.terms.binaryterm": [[344, "module-fipy.terms.binaryTerm"]], "cellterm (class in fipy.terms.cellterm)": [[345, "fipy.terms.cellTerm.CellTerm"]], "rhsvector (fipy.terms.cellterm.cellterm property)": [[345, "fipy.terms.cellTerm.CellTerm.RHSvector"]], "__eq__() (fipy.terms.cellterm.cellterm method)": [[345, "fipy.terms.cellTerm.CellTerm.__eq__"]], "__hash__() (fipy.terms.cellterm.cellterm method)": [[345, "fipy.terms.cellTerm.CellTerm.__hash__"]], "__mul__() (fipy.terms.cellterm.cellterm method)": [[345, "fipy.terms.cellTerm.CellTerm.__mul__"]], "__neg__() (fipy.terms.cellterm.cellterm method)": [[345, "fipy.terms.cellTerm.CellTerm.__neg__"]], "__repr__() (fipy.terms.cellterm.cellterm method)": [[345, "fipy.terms.cellTerm.CellTerm.__repr__"]], "__rmul__() (fipy.terms.cellterm.cellterm method)": [[345, "fipy.terms.cellTerm.CellTerm.__rmul__"]], "cachematrix() (fipy.terms.cellterm.cellterm method)": [[345, "fipy.terms.cellTerm.CellTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.cellterm.cellterm method)": [[345, "fipy.terms.cellTerm.CellTerm.cacheRHSvector"]], "fipy.terms.cellterm": [[345, "module-fipy.terms.cellTerm"]], "justerrorvector() (fipy.terms.cellterm.cellterm method)": [[345, "fipy.terms.cellTerm.CellTerm.justErrorVector"]], "justresidualvector() (fipy.terms.cellterm.cellterm method)": [[345, "fipy.terms.cellTerm.CellTerm.justResidualVector"]], "matrix (fipy.terms.cellterm.cellterm property)": [[345, "fipy.terms.cellTerm.CellTerm.matrix"]], "residualvectorandnorm() (fipy.terms.cellterm.cellterm method)": [[345, "fipy.terms.cellTerm.CellTerm.residualVectorAndNorm"]], "solve() (fipy.terms.cellterm.cellterm method)": [[345, "fipy.terms.cellTerm.CellTerm.solve"]], "sweep() (fipy.terms.cellterm.cellterm method)": [[345, "fipy.terms.cellTerm.CellTerm.sweep"]], "centraldifferenceconvectionterm (class in fipy.terms.centraldiffconvectionterm)": [[346, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm"]], "rhsvector (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm property)": [[346, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[346, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__eq__"]], "__hash__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[346, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__hash__"]], "__mul__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[346, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__mul__"]], "__neg__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[346, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__neg__"]], "__repr__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[346, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[346, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[346, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[346, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.cacheRHSvector"]], "fipy.terms.centraldiffconvectionterm": [[346, "module-fipy.terms.centralDiffConvectionTerm"]], "justerrorvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[346, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[346, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.justResidualVector"]], "matrix (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm property)": [[346, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[346, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[346, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.solve"]], "sweep() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[346, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.sweep"]], "fipy.terms.coupledbinaryterm": [[347, "module-fipy.terms.coupledBinaryTerm"]], "diffusionterm (class in fipy.terms.diffusionterm)": [[348, "fipy.terms.diffusionTerm.DiffusionTerm"]], "rhsvector (fipy.terms.diffusionterm.diffusionterm property)": [[348, "fipy.terms.diffusionTerm.DiffusionTerm.RHSvector"]], "__eq__() (fipy.terms.diffusionterm.diffusionterm method)": [[348, "fipy.terms.diffusionTerm.DiffusionTerm.__eq__"]], "__hash__() (fipy.terms.diffusionterm.diffusionterm method)": [[348, "fipy.terms.diffusionTerm.DiffusionTerm.__hash__"]], "__repr__() (fipy.terms.diffusionterm.diffusionterm method)": [[348, "fipy.terms.diffusionTerm.DiffusionTerm.__repr__"]], "cachematrix() (fipy.terms.diffusionterm.diffusionterm method)": [[348, "fipy.terms.diffusionTerm.DiffusionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusionterm.diffusionterm method)": [[348, "fipy.terms.diffusionTerm.DiffusionTerm.cacheRHSvector"]], "fipy.terms.diffusionterm": [[348, "module-fipy.terms.diffusionTerm"]], "justerrorvector() (fipy.terms.diffusionterm.diffusionterm method)": [[348, "fipy.terms.diffusionTerm.DiffusionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.diffusionterm.diffusionterm method)": [[348, "fipy.terms.diffusionTerm.DiffusionTerm.justResidualVector"]], "matrix (fipy.terms.diffusionterm.diffusionterm property)": [[348, "fipy.terms.diffusionTerm.DiffusionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.diffusionterm.diffusionterm method)": [[348, "fipy.terms.diffusionTerm.DiffusionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.diffusionterm.diffusionterm method)": [[348, "fipy.terms.diffusionTerm.DiffusionTerm.solve"]], "sweep() (fipy.terms.diffusionterm.diffusionterm method)": [[348, "fipy.terms.diffusionTerm.DiffusionTerm.sweep"]], "diffusiontermcorrection (class in fipy.terms.diffusiontermcorrection)": [[349, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection"]], "rhsvector (fipy.terms.diffusiontermcorrection.diffusiontermcorrection property)": [[349, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.RHSvector"]], "__eq__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[349, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__eq__"]], "__hash__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[349, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__hash__"]], "__repr__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[349, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__repr__"]], "cachematrix() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[349, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[349, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.cacheRHSvector"]], "fipy.terms.diffusiontermcorrection": [[349, "module-fipy.terms.diffusionTermCorrection"]], "justerrorvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[349, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.justErrorVector"]], "justresidualvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[349, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.justResidualVector"]], "matrix (fipy.terms.diffusiontermcorrection.diffusiontermcorrection property)": [[349, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.matrix"]], "residualvectorandnorm() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[349, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.residualVectorAndNorm"]], "solve() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[349, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.solve"]], "sweep() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[349, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.sweep"]], "diffusiontermnocorrection (class in fipy.terms.diffusiontermnocorrection)": [[350, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection"]], "rhsvector (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection property)": [[350, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.RHSvector"]], "__eq__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[350, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__eq__"]], "__hash__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[350, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__hash__"]], "__repr__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[350, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__repr__"]], "cachematrix() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[350, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[350, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.cacheRHSvector"]], "fipy.terms.diffusiontermnocorrection": [[350, "module-fipy.terms.diffusionTermNoCorrection"]], "justerrorvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[350, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.justErrorVector"]], "justresidualvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[350, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.justResidualVector"]], "matrix (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection property)": [[350, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.matrix"]], "residualvectorandnorm() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[350, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.residualVectorAndNorm"]], "solve() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[350, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.solve"]], "sweep() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[350, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.sweep"]], "explicitdiffusionterm (class in fipy.terms.explicitdiffusionterm)": [[351, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm"]], "rhsvector (fipy.terms.explicitdiffusionterm.explicitdiffusionterm property)": [[351, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.RHSvector"]], "__eq__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[351, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__eq__"]], "__hash__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[351, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__hash__"]], "__repr__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[351, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__repr__"]], "cachematrix() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[351, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[351, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.cacheRHSvector"]], "fipy.terms.explicitdiffusionterm": [[351, "module-fipy.terms.explicitDiffusionTerm"]], "justerrorvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[351, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[351, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.justResidualVector"]], "matrix (fipy.terms.explicitdiffusionterm.explicitdiffusionterm property)": [[351, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[351, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[351, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.solve"]], "sweep() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[351, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.sweep"]], "fipy.terms.explicitsourceterm": [[352, "module-fipy.terms.explicitSourceTerm"]], "explicitupwindconvectionterm (class in fipy.terms.explicitupwindconvectionterm)": [[353, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm"]], "rhsvector (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm property)": [[353, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[353, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__eq__"]], "__hash__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[353, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__hash__"]], "__mul__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[353, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__mul__"]], "__neg__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[353, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__neg__"]], "__repr__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[353, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[353, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[353, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[353, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.cacheRHSvector"]], "fipy.terms.explicitupwindconvectionterm": [[353, "module-fipy.terms.explicitUpwindConvectionTerm"]], "justerrorvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[353, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[353, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.justResidualVector"]], "matrix (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm property)": [[353, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[353, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[353, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.solve"]], "sweep() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[353, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.sweep"]], "exponentialconvectionterm (class in fipy.terms.exponentialconvectionterm)": [[354, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm"]], "rhsvector (fipy.terms.exponentialconvectionterm.exponentialconvectionterm property)": [[354, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[354, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__eq__"]], "__hash__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[354, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__hash__"]], "__mul__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[354, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__mul__"]], "__neg__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[354, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__neg__"]], "__repr__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[354, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[354, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[354, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[354, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.cacheRHSvector"]], "fipy.terms.exponentialconvectionterm": [[354, "module-fipy.terms.exponentialConvectionTerm"]], "justerrorvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[354, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[354, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.justResidualVector"]], "matrix (fipy.terms.exponentialconvectionterm.exponentialconvectionterm property)": [[354, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[354, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[354, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.solve"]], "sweep() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[354, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.sweep"]], "faceterm (class in fipy.terms.faceterm)": [[355, "fipy.terms.faceTerm.FaceTerm"]], "rhsvector (fipy.terms.faceterm.faceterm property)": [[355, "fipy.terms.faceTerm.FaceTerm.RHSvector"]], "__eq__() (fipy.terms.faceterm.faceterm method)": [[355, "fipy.terms.faceTerm.FaceTerm.__eq__"]], "__hash__() (fipy.terms.faceterm.faceterm method)": [[355, "fipy.terms.faceTerm.FaceTerm.__hash__"]], "__mul__() (fipy.terms.faceterm.faceterm method)": [[355, "fipy.terms.faceTerm.FaceTerm.__mul__"]], "__neg__() (fipy.terms.faceterm.faceterm method)": [[355, "fipy.terms.faceTerm.FaceTerm.__neg__"]], "__repr__() (fipy.terms.faceterm.faceterm method)": [[355, "fipy.terms.faceTerm.FaceTerm.__repr__"]], "__rmul__() (fipy.terms.faceterm.faceterm method)": [[355, "fipy.terms.faceTerm.FaceTerm.__rmul__"]], "cachematrix() (fipy.terms.faceterm.faceterm method)": [[355, "fipy.terms.faceTerm.FaceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.faceterm.faceterm method)": [[355, "fipy.terms.faceTerm.FaceTerm.cacheRHSvector"]], "fipy.terms.faceterm": [[355, "module-fipy.terms.faceTerm"]], "justerrorvector() (fipy.terms.faceterm.faceterm method)": [[355, "fipy.terms.faceTerm.FaceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.faceterm.faceterm method)": [[355, "fipy.terms.faceTerm.FaceTerm.justResidualVector"]], "matrix (fipy.terms.faceterm.faceterm property)": [[355, "fipy.terms.faceTerm.FaceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.faceterm.faceterm method)": [[355, "fipy.terms.faceTerm.FaceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.faceterm.faceterm method)": [[355, "fipy.terms.faceTerm.FaceTerm.solve"]], "sweep() (fipy.terms.faceterm.faceterm method)": [[355, "fipy.terms.faceTerm.FaceTerm.sweep"]], "firstorderadvectionterm (class in fipy.terms.firstorderadvectionterm)": [[356, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm"]], "rhsvector (fipy.terms.firstorderadvectionterm.firstorderadvectionterm property)": [[356, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.RHSvector"]], "__eq__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[356, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__eq__"]], "__hash__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[356, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__hash__"]], "__mul__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[356, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__mul__"]], "__neg__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[356, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__neg__"]], "__repr__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[356, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__repr__"]], "__rmul__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[356, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[356, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[356, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.cacheRHSvector"]], "fipy.terms.firstorderadvectionterm": [[356, "module-fipy.terms.firstOrderAdvectionTerm"]], "justerrorvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[356, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[356, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.justResidualVector"]], "matrix (fipy.terms.firstorderadvectionterm.firstorderadvectionterm property)": [[356, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[356, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[356, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.solve"]], "sweep() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[356, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.sweep"]], "hybridconvectionterm (class in fipy.terms.hybridconvectionterm)": [[357, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm"]], "rhsvector (fipy.terms.hybridconvectionterm.hybridconvectionterm property)": [[357, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[357, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__eq__"]], "__hash__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[357, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__hash__"]], "__mul__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[357, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__mul__"]], "__neg__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[357, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__neg__"]], "__repr__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[357, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[357, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[357, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[357, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.cacheRHSvector"]], "fipy.terms.hybridconvectionterm": [[357, "module-fipy.terms.hybridConvectionTerm"]], "justerrorvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[357, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[357, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.justResidualVector"]], "matrix (fipy.terms.hybridconvectionterm.hybridconvectionterm property)": [[357, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[357, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[357, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.solve"]], "sweep() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[357, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.sweep"]], "implicitdiffusionterm (in module fipy.terms.implicitdiffusionterm)": [[358, "fipy.terms.implicitDiffusionTerm.ImplicitDiffusionTerm"]], "fipy.terms.implicitdiffusionterm": [[358, "module-fipy.terms.implicitDiffusionTerm"]], "implicitsourceterm (class in fipy.terms.implicitsourceterm)": [[359, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm"]], "rhsvector (fipy.terms.implicitsourceterm.implicitsourceterm property)": [[359, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.RHSvector"]], "__eq__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[359, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__eq__"]], "__hash__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[359, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__hash__"]], "__mul__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[359, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__mul__"]], "__neg__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[359, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__neg__"]], "__repr__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[359, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__repr__"]], "__rmul__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[359, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__rmul__"]], "cachematrix() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[359, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[359, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.cacheRHSvector"]], "fipy.terms.implicitsourceterm": [[359, "module-fipy.terms.implicitSourceTerm"]], "justerrorvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[359, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[359, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.justResidualVector"]], "matrix (fipy.terms.implicitsourceterm.implicitsourceterm property)": [[359, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[359, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[359, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.solve"]], "sweep() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[359, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.sweep"]], "fipy.terms.nondiffusionterm": [[360, "module-fipy.terms.nonDiffusionTerm"]], "powerlawconvectionterm (class in fipy.terms.powerlawconvectionterm)": [[361, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm"]], "rhsvector (fipy.terms.powerlawconvectionterm.powerlawconvectionterm property)": [[361, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[361, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__eq__"]], "__hash__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[361, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__hash__"]], "__mul__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[361, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__mul__"]], "__neg__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[361, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__neg__"]], "__repr__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[361, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[361, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[361, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[361, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.cacheRHSvector"]], "fipy.terms.powerlawconvectionterm": [[361, "module-fipy.terms.powerLawConvectionTerm"]], "justerrorvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[361, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[361, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.justResidualVector"]], "matrix (fipy.terms.powerlawconvectionterm.powerlawconvectionterm property)": [[361, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[361, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[361, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.solve"]], "sweep() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[361, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.sweep"]], "rhsvector (fipy.terms.residualterm.residualterm property)": [[362, "fipy.terms.residualTerm.ResidualTerm.RHSvector"]], "residualterm (class in fipy.terms.residualterm)": [[362, "fipy.terms.residualTerm.ResidualTerm"]], "__eq__() (fipy.terms.residualterm.residualterm method)": [[362, "fipy.terms.residualTerm.ResidualTerm.__eq__"]], "__hash__() (fipy.terms.residualterm.residualterm method)": [[362, "fipy.terms.residualTerm.ResidualTerm.__hash__"]], "__mul__() (fipy.terms.residualterm.residualterm method)": [[362, "fipy.terms.residualTerm.ResidualTerm.__mul__"]], "__neg__() (fipy.terms.residualterm.residualterm method)": [[362, "fipy.terms.residualTerm.ResidualTerm.__neg__"]], "__repr__() (fipy.terms.residualterm.residualterm method)": [[362, "fipy.terms.residualTerm.ResidualTerm.__repr__"]], "__rmul__() (fipy.terms.residualterm.residualterm method)": [[362, "fipy.terms.residualTerm.ResidualTerm.__rmul__"]], "cachematrix() (fipy.terms.residualterm.residualterm method)": [[362, "fipy.terms.residualTerm.ResidualTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.residualterm.residualterm method)": [[362, "fipy.terms.residualTerm.ResidualTerm.cacheRHSvector"]], "fipy.terms.residualterm": [[362, "module-fipy.terms.residualTerm"]], "justerrorvector() (fipy.terms.residualterm.residualterm method)": [[362, "fipy.terms.residualTerm.ResidualTerm.justErrorVector"]], "justresidualvector() (fipy.terms.residualterm.residualterm method)": [[362, "fipy.terms.residualTerm.ResidualTerm.justResidualVector"]], "matrix (fipy.terms.residualterm.residualterm property)": [[362, "fipy.terms.residualTerm.ResidualTerm.matrix"]], "residualvectorandnorm() (fipy.terms.residualterm.residualterm method)": [[362, "fipy.terms.residualTerm.ResidualTerm.residualVectorAndNorm"]], "solve() (fipy.terms.residualterm.residualterm method)": [[362, "fipy.terms.residualTerm.ResidualTerm.solve"]], "sweep() (fipy.terms.residualterm.residualterm method)": [[362, "fipy.terms.residualTerm.ResidualTerm.sweep"]], "rhsvector (fipy.terms.sourceterm.sourceterm property)": [[363, "fipy.terms.sourceTerm.SourceTerm.RHSvector"]], "sourceterm (class in fipy.terms.sourceterm)": [[363, "fipy.terms.sourceTerm.SourceTerm"]], "__eq__() (fipy.terms.sourceterm.sourceterm method)": [[363, "fipy.terms.sourceTerm.SourceTerm.__eq__"]], "__hash__() (fipy.terms.sourceterm.sourceterm method)": [[363, "fipy.terms.sourceTerm.SourceTerm.__hash__"]], "__mul__() (fipy.terms.sourceterm.sourceterm method)": [[363, "fipy.terms.sourceTerm.SourceTerm.__mul__"]], "__neg__() (fipy.terms.sourceterm.sourceterm method)": [[363, "fipy.terms.sourceTerm.SourceTerm.__neg__"]], "__repr__() (fipy.terms.sourceterm.sourceterm method)": [[363, "fipy.terms.sourceTerm.SourceTerm.__repr__"]], "__rmul__() (fipy.terms.sourceterm.sourceterm method)": [[363, "fipy.terms.sourceTerm.SourceTerm.__rmul__"]], "cachematrix() (fipy.terms.sourceterm.sourceterm method)": [[363, "fipy.terms.sourceTerm.SourceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.sourceterm.sourceterm method)": [[363, "fipy.terms.sourceTerm.SourceTerm.cacheRHSvector"]], "fipy.terms.sourceterm": [[363, "module-fipy.terms.sourceTerm"]], "justerrorvector() (fipy.terms.sourceterm.sourceterm method)": [[363, "fipy.terms.sourceTerm.SourceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.sourceterm.sourceterm method)": [[363, "fipy.terms.sourceTerm.SourceTerm.justResidualVector"]], "matrix (fipy.terms.sourceterm.sourceterm property)": [[363, "fipy.terms.sourceTerm.SourceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.sourceterm.sourceterm method)": [[363, "fipy.terms.sourceTerm.SourceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.sourceterm.sourceterm method)": [[363, "fipy.terms.sourceTerm.SourceTerm.solve"]], "sweep() (fipy.terms.sourceterm.sourceterm method)": [[363, "fipy.terms.sourceTerm.SourceTerm.sweep"]], "rhsvector (fipy.terms.term.term property)": [[364, "fipy.terms.term.Term.RHSvector"]], "term (class in fipy.terms.term)": [[364, "fipy.terms.term.Term"]], "__eq__() (fipy.terms.term.term method)": [[364, "fipy.terms.term.Term.__eq__"]], "__hash__() (fipy.terms.term.term method)": [[364, "fipy.terms.term.Term.__hash__"]], "__repr__() (fipy.terms.term.term method)": [[364, "fipy.terms.term.Term.__repr__"]], "cachematrix() (fipy.terms.term.term method)": [[364, "fipy.terms.term.Term.cacheMatrix"]], "cacherhsvector() (fipy.terms.term.term method)": [[364, "fipy.terms.term.Term.cacheRHSvector"]], "fipy.terms.term": [[364, "module-fipy.terms.term"]], "justerrorvector() (fipy.terms.term.term method)": [[364, "fipy.terms.term.Term.justErrorVector"]], "justresidualvector() (fipy.terms.term.term method)": [[364, "fipy.terms.term.Term.justResidualVector"]], "matrix (fipy.terms.term.term property)": [[364, "fipy.terms.term.Term.matrix"]], "residualvectorandnorm() (fipy.terms.term.term method)": [[364, "fipy.terms.term.Term.residualVectorAndNorm"]], "solve() (fipy.terms.term.term method)": [[364, "fipy.terms.term.Term.solve"]], "sweep() (fipy.terms.term.term method)": [[364, "fipy.terms.term.Term.sweep"]], "fipy.terms.test": [[365, "module-fipy.terms.test"]], "rhsvector (fipy.terms.transientterm.transientterm property)": [[366, "fipy.terms.transientTerm.TransientTerm.RHSvector"]], "transientterm (class in fipy.terms.transientterm)": [[366, "fipy.terms.transientTerm.TransientTerm"]], "__eq__() (fipy.terms.transientterm.transientterm method)": [[366, "fipy.terms.transientTerm.TransientTerm.__eq__"]], "__hash__() (fipy.terms.transientterm.transientterm method)": [[366, "fipy.terms.transientTerm.TransientTerm.__hash__"]], "__mul__() (fipy.terms.transientterm.transientterm method)": [[366, "fipy.terms.transientTerm.TransientTerm.__mul__"]], "__neg__() (fipy.terms.transientterm.transientterm method)": [[366, "fipy.terms.transientTerm.TransientTerm.__neg__"]], "__repr__() (fipy.terms.transientterm.transientterm method)": [[366, "fipy.terms.transientTerm.TransientTerm.__repr__"]], "__rmul__() (fipy.terms.transientterm.transientterm method)": [[366, "fipy.terms.transientTerm.TransientTerm.__rmul__"]], "cachematrix() (fipy.terms.transientterm.transientterm method)": [[366, "fipy.terms.transientTerm.TransientTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.transientterm.transientterm method)": [[366, "fipy.terms.transientTerm.TransientTerm.cacheRHSvector"]], "fipy.terms.transientterm": [[366, "module-fipy.terms.transientTerm"]], "justerrorvector() (fipy.terms.transientterm.transientterm method)": [[366, "fipy.terms.transientTerm.TransientTerm.justErrorVector"]], "justresidualvector() (fipy.terms.transientterm.transientterm method)": [[366, "fipy.terms.transientTerm.TransientTerm.justResidualVector"]], "matrix (fipy.terms.transientterm.transientterm property)": [[366, "fipy.terms.transientTerm.TransientTerm.matrix"]], "residualvectorandnorm() (fipy.terms.transientterm.transientterm method)": [[366, "fipy.terms.transientTerm.TransientTerm.residualVectorAndNorm"]], "solve() (fipy.terms.transientterm.transientterm method)": [[366, "fipy.terms.transientTerm.TransientTerm.solve"]], "sweep() (fipy.terms.transientterm.transientterm method)": [[366, "fipy.terms.transientTerm.TransientTerm.sweep"]], "fipy.terms.unaryterm": [[367, "module-fipy.terms.unaryTerm"]], "rhsvector (fipy.terms.upwindconvectionterm.upwindconvectionterm property)": [[368, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.RHSvector"]], "upwindconvectionterm (class in fipy.terms.upwindconvectionterm)": [[368, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm"]], "__eq__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[368, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__eq__"]], "__hash__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[368, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__hash__"]], "__mul__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[368, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__mul__"]], "__neg__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[368, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__neg__"]], "__repr__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[368, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[368, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[368, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[368, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.cacheRHSvector"]], "fipy.terms.upwindconvectionterm": [[368, "module-fipy.terms.upwindConvectionTerm"]], "justerrorvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[368, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[368, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.justResidualVector"]], "matrix (fipy.terms.upwindconvectionterm.upwindconvectionterm property)": [[368, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[368, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[368, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.solve"]], "sweep() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[368, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.sweep"]], "rhsvector (fipy.terms.vanleerconvectionterm.vanleerconvectionterm property)": [[369, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.RHSvector"]], "vanleerconvectionterm (class in fipy.terms.vanleerconvectionterm)": [[369, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm"]], "__eq__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[369, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__eq__"]], "__hash__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[369, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__hash__"]], "__mul__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[369, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__mul__"]], "__neg__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[369, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__neg__"]], "__repr__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[369, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[369, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[369, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[369, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.cacheRHSvector"]], "fipy.terms.vanleerconvectionterm": [[369, "module-fipy.terms.vanLeerConvectionTerm"]], "justerrorvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[369, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[369, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.justResidualVector"]], "matrix (fipy.terms.vanleerconvectionterm.vanleerconvectionterm property)": [[369, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[369, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[369, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.solve"]], "sweep() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[369, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.sweep"]], "fipy.testfipy": [[370, "module-fipy.testFiPy"]], "fipy.tests": [[371, "module-fipy.tests"]], "execbutnotest() (in module fipy.tests.doctestplus)": [[372, "fipy.tests.doctestPlus.execButNoTest"]], "fipy.tests.doctestplus": [[372, "module-fipy.tests.doctestPlus"]], "register_skipper() (in module fipy.tests.doctestplus)": [[372, "fipy.tests.doctestPlus.register_skipper"]], "report_skips() (in module fipy.tests.doctestplus)": [[372, "fipy.tests.doctestPlus.report_skips"]], "testmod() (in module fipy.tests.doctestplus)": [[372, "fipy.tests.doctestPlus.testmod"]], "fipy.tests.lateimporttest": [[373, "module-fipy.tests.lateImportTest"]], "deprecationerroringtestprogram (class in fipy.tests.test)": [[374, "fipy.tests.test.DeprecationErroringTestProgram"]], "finalize_options() (fipy.tests.test.test method)": [[374, "fipy.tests.test.test.finalize_options"]], "fipy.tests.test": [[374, "module-fipy.tests.test"]], "initialize_options() (fipy.tests.test.test method)": [[374, "fipy.tests.test.test.initialize_options"]], "test (class in fipy.tests.test)": [[374, "fipy.tests.test.test"]], "testprogram (class in fipy.tests.testprogram)": [[375, "fipy.tests.testProgram.TestProgram"]], "fipy.tests.testprogram": [[375, "module-fipy.tests.testProgram"]], "main (in module fipy.tests.testprogram)": [[375, "fipy.tests.testProgram.main"]], "physicalfield (class in fipy.tools)": [[376, "fipy.tools.PhysicalField"]], "sharedtemporaryfile() (in module fipy.tools)": [[376, "fipy.tools.SharedTemporaryFile"]], "vitals (class in fipy.tools)": [[376, "fipy.tools.Vitals"]], "__abs__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__abs__"]], "__add__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__add__"]], "__array__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__array__"]], "__array_wrap__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__array_wrap__"]], "__bool__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__bool__"]], "__div__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__div__"]], "__eq__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__eq__"]], "__float__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__float__"]], "__ge__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__ge__"]], "__getitem__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__getitem__"]], "__gt__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__gt__"]], "__hash__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__hash__"]], "__le__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__le__"]], "__lt__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__lt__"]], "__mod__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__mod__"]], "__mul__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__mul__"]], "__ne__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__ne__"]], "__neg__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__neg__"]], "__nonzero__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__nonzero__"]], "__pow__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__pow__"]], "__radd__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__radd__"]], "__repr__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__repr__"]], "__rmul__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__rmul__"]], "__setitem__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__setitem__"]], "__str__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__str__"]], "__str__() (fipy.tools.vitals method)": [[376, "fipy.tools.Vitals.__str__"]], "__sub__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__sub__"]], "__truediv__() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.__truediv__"]], "add() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.add"]], "allclose() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.allclose"]], "allequal() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.allequal"]], "appendinfo() (fipy.tools.vitals method)": [[376, "fipy.tools.Vitals.appendInfo"]], "arccos() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.arccos"]], "arccosh() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.arccosh"]], "arcsin() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.arcsin"]], "arctan() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.arctan"]], "arctan2() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.arctan2"]], "arctanh() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.arctanh"]], "ceil() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.ceil"]], "conjugate() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.conjugate"]], "converttounit() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.convertToUnit"]], "copy() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.copy"]], "cos() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.cos"]], "cosh() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.cosh"]], "divide() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.divide"]], "documentelement (fipy.tools.vitals property)": [[376, "fipy.tools.Vitals.documentElement"]], "dot() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.dot"]], "fipy.tools": [[376, "module-fipy.tools"]], "firstchild (fipy.tools.vitals property)": [[376, "fipy.tools.Vitals.firstChild"]], "floor() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.floor"]], "getsctype() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.getsctype"]], "inbaseunits() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.inBaseUnits"]], "indimensionless() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.inDimensionless"]], "inradians() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.inRadians"]], "insiunits() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.inSIUnits"]], "inunitsof() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.inUnitsOf"]], "itemset() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.itemset"]], "lastchild (fipy.tools.vitals property)": [[376, "fipy.tools.Vitals.lastChild"]], "localname (fipy.tools.vitals property)": [[376, "fipy.tools.Vitals.localName"]], "log() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.log"]], "log10() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.log10"]], "multiply() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.multiply"]], "numericvalue (fipy.tools.physicalfield property)": [[376, "fipy.tools.PhysicalField.numericValue"]], "parallelcomm (in module fipy.tools)": [[376, "fipy.tools.parallelComm"]], "put() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.put"]], "reshape() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.reshape"]], "serialcomm (in module fipy.tools)": [[376, "fipy.tools.serialComm"]], "shape (fipy.tools.physicalfield property)": [[376, "fipy.tools.PhysicalField.shape"]], "sign() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.sign"]], "sin() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.sin"]], "sinh() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.sinh"]], "sqrt() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.sqrt"]], "subtract() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.subtract"]], "sum() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.sum"]], "take() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.take"]], "tan() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.tan"]], "tanh() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.tanh"]], "tostring() (fipy.tools.physicalfield method)": [[376, "fipy.tools.PhysicalField.tostring"]], "unit (fipy.tools.physicalfield property)": [[376, "fipy.tools.PhysicalField.unit"]], "fipy.tools.comms": [[377, "module-fipy.tools.comms"]], "commwrapper (class in fipy.tools.comms.commwrapper)": [[378, "fipy.tools.comms.commWrapper.CommWrapper"]], "__getstate__() (fipy.tools.comms.commwrapper.commwrapper method)": [[378, "fipy.tools.comms.commWrapper.CommWrapper.__getstate__"]], "__repr__() (fipy.tools.comms.commwrapper.commwrapper method)": [[378, "fipy.tools.comms.commWrapper.CommWrapper.__repr__"]], "fipy.tools.comms.commwrapper": [[378, "module-fipy.tools.comms.commWrapper"]], "dummycomm (class in fipy.tools.comms.dummycomm)": [[379, "fipy.tools.comms.dummyComm.DummyComm"]], "__getstate__() (fipy.tools.comms.dummycomm.dummycomm method)": [[379, "fipy.tools.comms.dummyComm.DummyComm.__getstate__"]], "__repr__() (fipy.tools.comms.dummycomm.dummycomm method)": [[379, "fipy.tools.comms.dummyComm.DummyComm.__repr__"]], "fipy.tools.comms.dummycomm": [[379, "module-fipy.tools.comms.dummyComm"]], "print() (in module fipy.tools.debug)": [[380, "fipy.tools.debug.PRINT"]], "fipy.tools.debug": [[380, "module-fipy.tools.debug"]], "deprecate() (in module fipy.tools.decorators)": [[381, "fipy.tools.decorators.deprecate"]], "fipy.tools.decorators": [[381, "module-fipy.tools.decorators"]], "fipy.tools.dimensions": [[382, "module-fipy.tools.dimensions"]], "fipy.tools.dimensions.dictwithdefault": [[383, "module-fipy.tools.dimensions.DictWithDefault"]], "fipy.tools.dimensions.numberdict": [[384, "module-fipy.tools.dimensions.NumberDict"]], "physicalfield (class in fipy.tools.dimensions.physicalfield)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField"]], "physicalunit (class in fipy.tools.dimensions.physicalfield)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit"]], "__abs__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__abs__"]], "__add__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__add__"]], "__array__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__array__"]], "__array_wrap__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__array_wrap__"]], "__bool__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__bool__"]], "__div__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__div__"]], "__div__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.__div__"]], "__eq__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__eq__"]], "__eq__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.__eq__"]], "__float__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__float__"]], "__ge__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__ge__"]], "__ge__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.__ge__"]], "__getitem__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__getitem__"]], "__gt__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__gt__"]], "__gt__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.__gt__"]], "__hash__ (fipy.tools.dimensions.physicalfield.physicalunit attribute)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.__hash__"]], "__hash__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__hash__"]], "__le__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__le__"]], "__le__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.__le__"]], "__lt__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__lt__"]], "__lt__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.__lt__"]], "__mod__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__mod__"]], "__mul__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__mul__"]], "__mul__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.__mul__"]], "__ne__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__ne__"]], "__ne__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.__ne__"]], "__neg__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__neg__"]], "__nonzero__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__nonzero__"]], "__pow__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__pow__"]], "__pow__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.__pow__"]], "__radd__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__radd__"]], "__rdiv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rdiv__"]], "__repr__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__repr__"]], "__repr__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.__repr__"]], "__rmul__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__rmul__"]], "__rmul__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rmul__"]], "__rtruediv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rtruediv__"]], "__setitem__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__setitem__"]], "__str__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__str__"]], "__str__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.__str__"]], "__sub__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__sub__"]], "__truediv__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.__truediv__"]], "__truediv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.__truediv__"]], "add() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.add"]], "allclose() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.allclose"]], "allequal() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.allequal"]], "arccos() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.arccos"]], "arccosh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.arccosh"]], "arcsin() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.arcsin"]], "arctan() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.arctan"]], "arctan2() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.arctan2"]], "arctanh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.arctanh"]], "ceil() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.ceil"]], "conjugate() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.conjugate"]], "conversionfactorto() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.conversionFactorTo"]], "conversiontupleto() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.conversionTupleTo"]], "converttounit() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.convertToUnit"]], "copy() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.copy"]], "cos() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.cos"]], "cosh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.cosh"]], "divide() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.divide"]], "dot() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.dot"]], "fipy.tools.dimensions.physicalfield": [[385, "module-fipy.tools.dimensions.physicalField"]], "floor() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.floor"]], "getsctype() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.getsctype"]], "inbaseunits() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.inBaseUnits"]], "indimensionless() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.inDimensionless"]], "inradians() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.inRadians"]], "insiunits() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.inSIUnits"]], "inunitsof() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.inUnitsOf"]], "isangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.isAngle"]], "iscompatible() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.isCompatible"]], "isdimensionless() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.isDimensionless"]], "isdimensionlessorangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.isDimensionlessOrAngle"]], "isinverseangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.isInverseAngle"]], "itemset() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.itemset"]], "log() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.log"]], "log10() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.log10"]], "multiply() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.multiply"]], "name() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.name"]], "numericvalue (fipy.tools.dimensions.physicalfield.physicalfield property)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.numericValue"]], "put() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.put"]], "reshape() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.reshape"]], "setname() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalUnit.setName"]], "shape (fipy.tools.dimensions.physicalfield.physicalfield property)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.shape"]], "sign() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.sign"]], "sin() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.sin"]], "sinh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.sinh"]], "sqrt() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.sqrt"]], "subtract() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.subtract"]], "sum() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.sum"]], "take() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.take"]], "tan() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.tan"]], "tanh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.tanh"]], "tostring() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.tostring"]], "unit (fipy.tools.dimensions.physicalfield.physicalfield property)": [[385, "fipy.tools.dimensions.physicalField.PhysicalField.unit"]], "read() (in module fipy.tools.dump)": [[386, "fipy.tools.dump.read"]], "write() (in module fipy.tools.dump)": [[386, "fipy.tools.dump.write"]], "fipy.tools.inline": [[387, "module-fipy.tools.inline"]], "fipy.tools.logging": [[388, "module-fipy.tools.logging"]], "package_info() (in module fipy.tools.logging)": [[388, "fipy.tools.logging.package_info"]], "l1norm() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.L1norm"]], "l2norm() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.L2norm"]], "linfnorm() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.LINFnorm"]], "all() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.all"]], "allclose() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.allclose"]], "allequal() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.allequal"]], "dot() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.dot"]], "fipy.tools.numerix": [[389, "module-fipy.tools.numerix"]], "getshape() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.getShape"]], "getunit() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.getUnit"]], "isclose() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.isclose"]], "nearest() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.nearest"]], "put() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.put"]], "rank() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.rank"]], "reshape() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.reshape"]], "sqrtdot() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.sqrtDot"]], "sum() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.sum"]], "take() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.take"]], "tostring() (in module fipy.tools.numerix)": [[389, "fipy.tools.numerix.tostring"]], "parse() (in module fipy.tools.parser)": [[390, "fipy.tools.parser.parse"]], "sharedtemporaryfile() (in module fipy.tools.sharedtempfile)": [[391, "fipy.tools.sharedtempfile.SharedTemporaryFile"]], "fipy.tools.sharedtempfile": [[391, "module-fipy.tools.sharedtempfile"]], "fipy.tools.test": [[392, "module-fipy.tools.test"]], "fipy.tools.vector": [[393, "module-fipy.tools.vector"]], "prune() (in module fipy.tools.vector)": [[393, "fipy.tools.vector.prune"]], "putadd() (in module fipy.tools.vector)": [[393, "fipy.tools.vector.putAdd"]], "fipy.tools.version": [[394, "module-fipy.tools.version"]], "vitals (class in fipy.tools.vitals)": [[395, "fipy.tools.vitals.Vitals"]], "__str__() (fipy.tools.vitals.vitals method)": [[395, "fipy.tools.vitals.Vitals.__str__"]], "appendinfo() (fipy.tools.vitals.vitals method)": [[395, "fipy.tools.vitals.Vitals.appendInfo"]], "documentelement (fipy.tools.vitals.vitals property)": [[395, "fipy.tools.vitals.Vitals.documentElement"]], "fipy.tools.vitals": [[395, "module-fipy.tools.vitals"]], "firstchild (fipy.tools.vitals.vitals property)": [[395, "fipy.tools.vitals.Vitals.firstChild"]], "lastchild (fipy.tools.vitals.vitals property)": [[395, "fipy.tools.vitals.Vitals.lastChild"]], "localname (fipy.tools.vitals.vitals property)": [[395, "fipy.tools.vitals.Vitals.localName"]], "fipy.variables": [[396, "module-fipy.variables"]], "fipy.variables.addoverfacesvariable": [[397, "module-fipy.variables.addOverFacesVariable"]], "fipy.variables.arithmeticcelltofacevariable": [[398, "module-fipy.variables.arithmeticCellToFaceVariable"]], "betanoisevariable (class in fipy.variables.betanoisevariable)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable"]], "__abs__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__abs__"]], "__and__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__and__"]], "__array__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__bool__"]], "__call__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__call__"]], "__eq__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__eq__"]], "__ge__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__gt__"]], "__hash__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__hash__"]], "__invert__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__invert__"]], "__le__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__le__"]], "__lt__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__lt__"]], "__ne__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__ne__"]], "__new__() (fipy.variables.betanoisevariable.betanoisevariable static method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__or__"]], "__pow__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__pow__"]], "__repr__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__setstate__"]], "__str__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__str__"]], "all() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.all"]], "allclose() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.allclose"]], "any() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.betanoisevariable.betanoisevariable property)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.constrain"]], "constraintmask (fipy.variables.betanoisevariable.betanoisevariable property)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.constraintMask"]], "copy() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.copy"]], "dot() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.dot"]], "facegrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.betanoisevariable.betanoisevariable property)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceValue"]], "fipy.variables.betanoisevariable": [[399, "module-fipy.variables.betaNoiseVariable"]], "gaussgrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.getsctype"]], "globalvalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.globalValue"]], "grad (fipy.variables.betanoisevariable.betanoisevariable property)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.betanoisevariable.betanoisevariable property)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.mag"]], "max() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.max"]], "min() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.min"]], "minmodfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.minmodFaceValue"]], "old (fipy.variables.betanoisevariable.betanoisevariable property)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.old"]], "rdot() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.rdot"]], "release() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.release"]], "scramble() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.scramble"]], "setvalue() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.setValue"]], "shape (fipy.variables.betanoisevariable.betanoisevariable property)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.shape"]], "std() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.std"]], "unit (fipy.variables.betanoisevariable.betanoisevariable property)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.unit"]], "updateold() (fipy.variables.betanoisevariable.betanoisevariable method)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.updateOld"]], "value (fipy.variables.betanoisevariable.betanoisevariable property)": [[399, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.value"]], "fipy.variables.binaryoperatorvariable": [[400, "module-fipy.variables.binaryOperatorVariable"]], "fipy.variables.celltofacevariable": [[401, "module-fipy.variables.cellToFaceVariable"]], "cellvariable (class in fipy.variables.cellvariable)": [[402, "fipy.variables.cellVariable.CellVariable"]], "__abs__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__abs__"]], "__and__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__and__"]], "__array__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__array__"]], "__array_wrap__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__array_wrap__"]], "__bool__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__bool__"]], "__call__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__call__"]], "__eq__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__eq__"]], "__ge__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__ge__"]], "__getitem__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__getitem__"]], "__getstate__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__getstate__"]], "__gt__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__gt__"]], "__hash__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__hash__"]], "__invert__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__invert__"]], "__le__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__le__"]], "__lt__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__lt__"]], "__ne__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__ne__"]], "__new__() (fipy.variables.cellvariable.cellvariable static method)": [[402, "fipy.variables.cellVariable.CellVariable.__new__"]], "__nonzero__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__nonzero__"]], "__or__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__or__"]], "__pow__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__pow__"]], "__repr__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__repr__"]], "__setstate__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__setstate__"]], "__str__() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.__str__"]], "all() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.all"]], "allclose() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.allclose"]], "any() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.any"]], "arithmeticfacevalue (fipy.variables.cellvariable.cellvariable property)": [[402, "fipy.variables.cellVariable.CellVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.cellvariable.cellvariable property)": [[402, "fipy.variables.cellVariable.CellVariable.cellVolumeAverage"]], "constrain() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.constrain"]], "constraintmask (fipy.variables.cellvariable.cellvariable property)": [[402, "fipy.variables.cellVariable.CellVariable.constraintMask"]], "copy() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.copy"]], "dot() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.dot"]], "facegrad (fipy.variables.cellvariable.cellvariable property)": [[402, "fipy.variables.cellVariable.CellVariable.faceGrad"]], "facegradaverage (fipy.variables.cellvariable.cellvariable property)": [[402, "fipy.variables.cellVariable.CellVariable.faceGradAverage"]], "facevalue (fipy.variables.cellvariable.cellvariable property)": [[402, "fipy.variables.cellVariable.CellVariable.faceValue"]], "fipy.variables.cellvariable": [[402, "module-fipy.variables.cellVariable"]], "gaussgrad (fipy.variables.cellvariable.cellvariable property)": [[402, "fipy.variables.cellVariable.CellVariable.gaussGrad"]], "getsctype() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.getsctype"]], "globalvalue (fipy.variables.cellvariable.cellvariable property)": [[402, "fipy.variables.cellVariable.CellVariable.globalValue"]], "grad (fipy.variables.cellvariable.cellvariable property)": [[402, "fipy.variables.cellVariable.CellVariable.grad"]], "harmonicfacevalue (fipy.variables.cellvariable.cellvariable property)": [[402, "fipy.variables.cellVariable.CellVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.inBaseUnits"]], "inunitsof() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.cellvariable.cellvariable property)": [[402, "fipy.variables.cellVariable.CellVariable.leastSquaresGrad"]], "mag (fipy.variables.cellvariable.cellvariable property)": [[402, "fipy.variables.cellVariable.CellVariable.mag"]], "max() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.max"]], "min() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.min"]], "minmodfacevalue (fipy.variables.cellvariable.cellvariable property)": [[402, "fipy.variables.cellVariable.CellVariable.minmodFaceValue"]], "old (fipy.variables.cellvariable.cellvariable property)": [[402, "fipy.variables.cellVariable.CellVariable.old"]], "rdot() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.rdot"]], "release() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.release"]], "setvalue() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.setValue"]], "shape (fipy.variables.cellvariable.cellvariable property)": [[402, "fipy.variables.cellVariable.CellVariable.shape"]], "std() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.std"]], "unit (fipy.variables.cellvariable.cellvariable property)": [[402, "fipy.variables.cellVariable.CellVariable.unit"]], "updateold() (fipy.variables.cellvariable.cellvariable method)": [[402, "fipy.variables.cellVariable.CellVariable.updateOld"]], "value (fipy.variables.cellvariable.cellvariable property)": [[402, "fipy.variables.cellVariable.CellVariable.value"]], "fipy.variables.constant": [[403, "module-fipy.variables.constant"]], "fipy.variables.constraintmask": [[404, "module-fipy.variables.constraintMask"]], "fipy.variables.coupledcellvariable": [[405, "module-fipy.variables.coupledCellVariable"]], "distancevariable (class in fipy.variables.distancevariable)": [[406, "fipy.variables.distanceVariable.DistanceVariable"]], "__abs__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__abs__"]], "__and__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__and__"]], "__array__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__array__"]], "__array_wrap__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__array_wrap__"]], "__bool__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__bool__"]], "__call__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__call__"]], "__eq__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__eq__"]], "__ge__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__ge__"]], "__getitem__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__getitem__"]], "__getstate__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__getstate__"]], "__gt__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__gt__"]], "__hash__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__hash__"]], "__invert__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__invert__"]], "__le__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__le__"]], "__lt__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__lt__"]], "__ne__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__ne__"]], "__new__() (fipy.variables.distancevariable.distancevariable static method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__new__"]], "__nonzero__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__nonzero__"]], "__or__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__or__"]], "__pow__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__pow__"]], "__repr__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__repr__"]], "__setstate__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__setstate__"]], "__str__() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.__str__"]], "all() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.all"]], "allclose() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.allclose"]], "any() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.any"]], "arithmeticfacevalue (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.arithmeticFaceValue"]], "calcdistancefunction() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.calcDistanceFunction"]], "cellinterfaceareas (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.cellInterfaceAreas"]], "cellvolumeaverage (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.cellVolumeAverage"]], "constrain() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.constrain"]], "constraintmask (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.constraintMask"]], "copy() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.copy"]], "dot() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.dot"]], "extendvariable() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.extendVariable"]], "facegrad (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.faceGrad"]], "facegradaverage (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.faceGradAverage"]], "facevalue (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.faceValue"]], "fipy.variables.distancevariable": [[406, "module-fipy.variables.distanceVariable"]], "gaussgrad (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.gaussGrad"]], "getsctype() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.getsctype"]], "globalvalue (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.globalValue"]], "grad (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.grad"]], "harmonicfacevalue (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.leastSquaresGrad"]], "mag (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.mag"]], "max() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.max"]], "min() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.min"]], "minmodfacevalue (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.minmodFaceValue"]], "old (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.old"]], "rdot() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.rdot"]], "release() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.release"]], "setvalue() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.setValue"]], "shape (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.shape"]], "std() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.std"]], "unit (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.unit"]], "updateold() (fipy.variables.distancevariable.distancevariable method)": [[406, "fipy.variables.distanceVariable.DistanceVariable.updateOld"]], "value (fipy.variables.distancevariable.distancevariable property)": [[406, "fipy.variables.distanceVariable.DistanceVariable.value"]], "exponentialnoisevariable (class in fipy.variables.exponentialnoisevariable)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable"]], "__abs__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__abs__"]], "__and__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__and__"]], "__array__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__bool__"]], "__call__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__call__"]], "__eq__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__eq__"]], "__ge__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__gt__"]], "__hash__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__hash__"]], "__invert__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__invert__"]], "__le__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__le__"]], "__lt__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__lt__"]], "__ne__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__ne__"]], "__new__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable static method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__or__"]], "__pow__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__pow__"]], "__repr__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__setstate__"]], "__str__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__str__"]], "all() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.all"]], "allclose() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.allclose"]], "any() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.constrain"]], "constraintmask (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.constraintMask"]], "copy() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.copy"]], "dot() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.dot"]], "facegrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceValue"]], "fipy.variables.exponentialnoisevariable": [[407, "module-fipy.variables.exponentialNoiseVariable"]], "gaussgrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.getsctype"]], "globalvalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.globalValue"]], "grad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.mag"]], "max() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.max"]], "min() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.min"]], "minmodfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.minmodFaceValue"]], "old (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.old"]], "rdot() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.rdot"]], "release() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.release"]], "scramble() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.scramble"]], "setvalue() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.setValue"]], "shape (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.shape"]], "std() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.std"]], "unit (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.unit"]], "updateold() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.updateOld"]], "value (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[407, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.value"]], "fipy.variables.facegradcontributionsvariable": [[408, "module-fipy.variables.faceGradContributionsVariable"]], "fipy.variables.facegradvariable": [[409, "module-fipy.variables.faceGradVariable"]], "facevariable (class in fipy.variables.facevariable)": [[410, "fipy.variables.faceVariable.FaceVariable"]], "__abs__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__abs__"]], "__and__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__and__"]], "__array__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__array__"]], "__array_wrap__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__array_wrap__"]], "__bool__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__bool__"]], "__call__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__call__"]], "__eq__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__eq__"]], "__ge__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__ge__"]], "__getitem__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__getitem__"]], "__getstate__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__getstate__"]], "__gt__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__gt__"]], "__hash__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__hash__"]], "__invert__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__invert__"]], "__le__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__le__"]], "__lt__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__lt__"]], "__ne__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__ne__"]], "__new__() (fipy.variables.facevariable.facevariable static method)": [[410, "fipy.variables.faceVariable.FaceVariable.__new__"]], "__nonzero__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__nonzero__"]], "__or__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__or__"]], "__pow__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__pow__"]], "__repr__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__repr__"]], "__setstate__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__setstate__"]], "__str__() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.__str__"]], "all() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.all"]], "allclose() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.allclose"]], "any() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.any"]], "constrain() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.constrain"]], "constraintmask (fipy.variables.facevariable.facevariable property)": [[410, "fipy.variables.faceVariable.FaceVariable.constraintMask"]], "copy() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.copy"]], "divergence (fipy.variables.facevariable.facevariable property)": [[410, "fipy.variables.faceVariable.FaceVariable.divergence"]], "dot() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.dot"]], "fipy.variables.facevariable": [[410, "module-fipy.variables.faceVariable"]], "getsctype() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.getsctype"]], "inbaseunits() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.inUnitsOf"]], "mag (fipy.variables.facevariable.facevariable property)": [[410, "fipy.variables.faceVariable.FaceVariable.mag"]], "max() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.max"]], "min() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.min"]], "rdot() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.rdot"]], "release() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.release"]], "setvalue() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.setValue"]], "shape (fipy.variables.facevariable.facevariable property)": [[410, "fipy.variables.faceVariable.FaceVariable.shape"]], "std() (fipy.variables.facevariable.facevariable method)": [[410, "fipy.variables.faceVariable.FaceVariable.std"]], "unit (fipy.variables.facevariable.facevariable property)": [[410, "fipy.variables.faceVariable.FaceVariable.unit"]], "value (fipy.variables.facevariable.facevariable property)": [[410, "fipy.variables.faceVariable.FaceVariable.value"]], "gammanoisevariable (class in fipy.variables.gammanoisevariable)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable"]], "__abs__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__abs__"]], "__and__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__and__"]], "__array__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__bool__"]], "__call__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__call__"]], "__eq__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__eq__"]], "__ge__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__gt__"]], "__hash__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__hash__"]], "__invert__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__invert__"]], "__le__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__le__"]], "__lt__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__lt__"]], "__ne__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__ne__"]], "__new__() (fipy.variables.gammanoisevariable.gammanoisevariable static method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__or__"]], "__pow__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__pow__"]], "__repr__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__setstate__"]], "__str__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__str__"]], "all() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.all"]], "allclose() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.allclose"]], "any() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.constrain"]], "constraintmask (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.constraintMask"]], "copy() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.copy"]], "dot() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.dot"]], "facegrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceValue"]], "fipy.variables.gammanoisevariable": [[411, "module-fipy.variables.gammaNoiseVariable"]], "gaussgrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.getsctype"]], "globalvalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.globalValue"]], "grad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.mag"]], "max() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.max"]], "min() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.min"]], "minmodfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.minmodFaceValue"]], "old (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.old"]], "rdot() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.rdot"]], "release() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.release"]], "scramble() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.scramble"]], "setvalue() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.setValue"]], "shape (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.shape"]], "std() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.std"]], "unit (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.unit"]], "updateold() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.updateOld"]], "value (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[411, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.value"]], "fipy.variables.gausscellgradvariable": [[412, "module-fipy.variables.gaussCellGradVariable"]], "gaussiannoisevariable (class in fipy.variables.gaussiannoisevariable)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable"]], "__abs__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__abs__"]], "__and__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__and__"]], "__array__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__bool__"]], "__call__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__call__"]], "__eq__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__eq__"]], "__ge__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__gt__"]], "__hash__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__hash__"]], "__invert__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__invert__"]], "__le__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__le__"]], "__lt__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__lt__"]], "__ne__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__ne__"]], "__new__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable static method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__or__"]], "__pow__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__pow__"]], "__repr__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__setstate__"]], "__str__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__str__"]], "all() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.all"]], "allclose() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.allclose"]], "any() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.constrain"]], "constraintmask (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.constraintMask"]], "copy() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.copy"]], "dot() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.dot"]], "facegrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceValue"]], "fipy.variables.gaussiannoisevariable": [[413, "module-fipy.variables.gaussianNoiseVariable"]], "gaussgrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.getsctype"]], "globalvalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.globalValue"]], "grad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.mag"]], "max() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.max"]], "min() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.min"]], "minmodfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.minmodFaceValue"]], "old (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.old"]], "rdot() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.rdot"]], "release() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.release"]], "scramble() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.scramble"]], "setvalue() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.setValue"]], "shape (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.shape"]], "std() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.std"]], "unit (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.unit"]], "updateold() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.updateOld"]], "value (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[413, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.value"]], "fipy.variables.harmoniccelltofacevariable": [[414, "module-fipy.variables.harmonicCellToFaceVariable"]], "histogramvariable (class in fipy.variables.histogramvariable)": [[415, "fipy.variables.histogramVariable.HistogramVariable"]], "__abs__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__abs__"]], "__and__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__and__"]], "__array__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__array__"]], "__array_wrap__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__array_wrap__"]], "__bool__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__bool__"]], "__call__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__call__"]], "__eq__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__eq__"]], "__ge__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__ge__"]], "__getitem__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__getitem__"]], "__getstate__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__getstate__"]], "__gt__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__gt__"]], "__hash__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__hash__"]], "__invert__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__invert__"]], "__le__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__le__"]], "__lt__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__lt__"]], "__ne__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__ne__"]], "__new__() (fipy.variables.histogramvariable.histogramvariable static method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__new__"]], "__nonzero__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__nonzero__"]], "__or__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__or__"]], "__pow__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__pow__"]], "__repr__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__repr__"]], "__setstate__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__setstate__"]], "__str__() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.__str__"]], "all() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.all"]], "allclose() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.allclose"]], "any() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.any"]], "arithmeticfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[415, "fipy.variables.histogramVariable.HistogramVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.histogramvariable.histogramvariable property)": [[415, "fipy.variables.histogramVariable.HistogramVariable.cellVolumeAverage"]], "constrain() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.constrain"]], "constraintmask (fipy.variables.histogramvariable.histogramvariable property)": [[415, "fipy.variables.histogramVariable.HistogramVariable.constraintMask"]], "copy() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.copy"]], "dot() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.dot"]], "facegrad (fipy.variables.histogramvariable.histogramvariable property)": [[415, "fipy.variables.histogramVariable.HistogramVariable.faceGrad"]], "facegradaverage (fipy.variables.histogramvariable.histogramvariable property)": [[415, "fipy.variables.histogramVariable.HistogramVariable.faceGradAverage"]], "facevalue (fipy.variables.histogramvariable.histogramvariable property)": [[415, "fipy.variables.histogramVariable.HistogramVariable.faceValue"]], "fipy.variables.histogramvariable": [[415, "module-fipy.variables.histogramVariable"]], "gaussgrad (fipy.variables.histogramvariable.histogramvariable property)": [[415, "fipy.variables.histogramVariable.HistogramVariable.gaussGrad"]], "getsctype() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.getsctype"]], "globalvalue (fipy.variables.histogramvariable.histogramvariable property)": [[415, "fipy.variables.histogramVariable.HistogramVariable.globalValue"]], "grad (fipy.variables.histogramvariable.histogramvariable property)": [[415, "fipy.variables.histogramVariable.HistogramVariable.grad"]], "harmonicfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[415, "fipy.variables.histogramVariable.HistogramVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.inBaseUnits"]], "inunitsof() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.histogramvariable.histogramvariable property)": [[415, "fipy.variables.histogramVariable.HistogramVariable.leastSquaresGrad"]], "mag (fipy.variables.histogramvariable.histogramvariable property)": [[415, "fipy.variables.histogramVariable.HistogramVariable.mag"]], "max() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.max"]], "min() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.min"]], "minmodfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[415, "fipy.variables.histogramVariable.HistogramVariable.minmodFaceValue"]], "old (fipy.variables.histogramvariable.histogramvariable property)": [[415, "fipy.variables.histogramVariable.HistogramVariable.old"]], "rdot() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.rdot"]], "release() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.release"]], "setvalue() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.setValue"]], "shape (fipy.variables.histogramvariable.histogramvariable property)": [[415, "fipy.variables.histogramVariable.HistogramVariable.shape"]], "std() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.std"]], "unit (fipy.variables.histogramvariable.histogramvariable property)": [[415, "fipy.variables.histogramVariable.HistogramVariable.unit"]], "updateold() (fipy.variables.histogramvariable.histogramvariable method)": [[415, "fipy.variables.histogramVariable.HistogramVariable.updateOld"]], "value (fipy.variables.histogramvariable.histogramvariable property)": [[415, "fipy.variables.histogramVariable.HistogramVariable.value"]], "fipy.variables.interfaceareavariable": [[416, "module-fipy.variables.interfaceAreaVariable"]], "fipy.variables.interfaceflagvariable": [[417, "module-fipy.variables.interfaceFlagVariable"]], "fipy.variables.leastsquarescellgradvariable": [[418, "module-fipy.variables.leastSquaresCellGradVariable"]], "fipy.variables.levelsetdiffusionvariable": [[419, "module-fipy.variables.levelSetDiffusionVariable"]], "meshvariable (class in fipy.variables.meshvariable)": [[420, "fipy.variables.meshVariable.MeshVariable"]], "__abs__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__abs__"]], "__and__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__and__"]], "__array__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__array__"]], "__array_wrap__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__array_wrap__"]], "__bool__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__bool__"]], "__call__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__call__"]], "__eq__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__eq__"]], "__ge__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__ge__"]], "__getitem__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__getitem__"]], "__getstate__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__getstate__"]], "__gt__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__gt__"]], "__hash__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__hash__"]], "__invert__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__invert__"]], "__le__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__le__"]], "__lt__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__lt__"]], "__ne__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__ne__"]], "__new__() (fipy.variables.meshvariable.meshvariable static method)": [[420, "fipy.variables.meshVariable.MeshVariable.__new__"]], "__nonzero__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__nonzero__"]], "__or__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__or__"]], "__pow__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__pow__"]], "__repr__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__repr__"]], "__setstate__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__setstate__"]], "__str__() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.__str__"]], "all() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.all"]], "allclose() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.allclose"]], "any() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.any"]], "constrain() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.constrain"]], "constraintmask (fipy.variables.meshvariable.meshvariable property)": [[420, "fipy.variables.meshVariable.MeshVariable.constraintMask"]], "copy() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.copy"]], "dot() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.dot"]], "fipy.variables.meshvariable": [[420, "module-fipy.variables.meshVariable"]], "getsctype() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.getsctype"]], "inbaseunits() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.inBaseUnits"]], "inunitsof() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.inUnitsOf"]], "mag (fipy.variables.meshvariable.meshvariable property)": [[420, "fipy.variables.meshVariable.MeshVariable.mag"]], "max() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.max"]], "min() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.min"]], "rdot() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.rdot"]], "release() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.release"]], "setvalue() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.setValue"]], "shape (fipy.variables.meshvariable.meshvariable property)": [[420, "fipy.variables.meshVariable.MeshVariable.shape"]], "std() (fipy.variables.meshvariable.meshvariable method)": [[420, "fipy.variables.meshVariable.MeshVariable.std"]], "unit (fipy.variables.meshvariable.meshvariable property)": [[420, "fipy.variables.meshVariable.MeshVariable.unit"]], "value (fipy.variables.meshvariable.meshvariable property)": [[420, "fipy.variables.meshVariable.MeshVariable.value"]], "fipy.variables.minmodcelltofacevariable": [[421, "module-fipy.variables.minmodCellToFaceVariable"]], "fipy.variables.modcellgradvariable": [[422, "module-fipy.variables.modCellGradVariable"]], "fipy.variables.modcelltofacevariable": [[423, "module-fipy.variables.modCellToFaceVariable"]], "fipy.variables.modfacegradvariable": [[424, "module-fipy.variables.modFaceGradVariable"]], "fipy.variables.modphysicalfield": [[425, "module-fipy.variables.modPhysicalField"]], "modularvariable (class in fipy.variables.modularvariable)": [[426, "fipy.variables.modularVariable.ModularVariable"]], "__abs__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__abs__"]], "__and__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__and__"]], "__array__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__array__"]], "__array_wrap__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__array_wrap__"]], "__bool__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__bool__"]], "__call__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__call__"]], "__eq__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__eq__"]], "__ge__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__ge__"]], "__getitem__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__getitem__"]], "__getstate__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__getstate__"]], "__gt__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__gt__"]], "__hash__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__hash__"]], "__invert__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__invert__"]], "__le__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__le__"]], "__lt__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__lt__"]], "__ne__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__ne__"]], "__new__() (fipy.variables.modularvariable.modularvariable static method)": [[426, "fipy.variables.modularVariable.ModularVariable.__new__"]], "__nonzero__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__nonzero__"]], "__or__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__or__"]], "__pow__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__pow__"]], "__repr__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__repr__"]], "__setstate__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__setstate__"]], "__str__() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.__str__"]], "all() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.all"]], "allclose() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.allclose"]], "any() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.any"]], "arithmeticfacevalue (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.cellVolumeAverage"]], "constrain() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.constrain"]], "constraintmask (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.constraintMask"]], "copy() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.copy"]], "dot() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.dot"]], "facegrad (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.faceGrad"]], "facegradaverage (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.faceGradAverage"]], "facegradnomod (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.faceGradNoMod"]], "facevalue (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.faceValue"]], "fipy.variables.modularvariable": [[426, "module-fipy.variables.modularVariable"]], "gaussgrad (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.gaussGrad"]], "getsctype() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.getsctype"]], "globalvalue (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.globalValue"]], "grad (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.grad"]], "harmonicfacevalue (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.inBaseUnits"]], "inunitsof() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.leastSquaresGrad"]], "mag (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.mag"]], "max() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.max"]], "min() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.min"]], "minmodfacevalue (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.minmodFaceValue"]], "old (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.old"]], "rdot() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.rdot"]], "release() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.release"]], "setvalue() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.setValue"]], "shape (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.shape"]], "std() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.std"]], "unit (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.unit"]], "updateold() (fipy.variables.modularvariable.modularvariable method)": [[426, "fipy.variables.modularVariable.ModularVariable.updateOld"]], "value (fipy.variables.modularvariable.modularvariable property)": [[426, "fipy.variables.modularVariable.ModularVariable.value"]], "noisevariable (class in fipy.variables.noisevariable)": [[427, "fipy.variables.noiseVariable.NoiseVariable"]], "__abs__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__abs__"]], "__and__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__and__"]], "__array__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__bool__"]], "__call__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__call__"]], "__eq__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__eq__"]], "__ge__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__ge__"]], "__getitem__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__getstate__"]], "__gt__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__gt__"]], "__hash__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__hash__"]], "__invert__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__invert__"]], "__le__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__le__"]], "__lt__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__lt__"]], "__ne__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__ne__"]], "__new__() (fipy.variables.noisevariable.noisevariable static method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__new__"]], "__nonzero__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__nonzero__"]], "__or__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__or__"]], "__pow__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__pow__"]], "__repr__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__repr__"]], "__setstate__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__setstate__"]], "__str__() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.__str__"]], "all() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.all"]], "allclose() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.allclose"]], "any() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.noisevariable.noisevariable property)": [[427, "fipy.variables.noiseVariable.NoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.noisevariable.noisevariable property)": [[427, "fipy.variables.noiseVariable.NoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.constrain"]], "constraintmask (fipy.variables.noisevariable.noisevariable property)": [[427, "fipy.variables.noiseVariable.NoiseVariable.constraintMask"]], "copy() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.copy"]], "dot() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.dot"]], "facegrad (fipy.variables.noisevariable.noisevariable property)": [[427, "fipy.variables.noiseVariable.NoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.noisevariable.noisevariable property)": [[427, "fipy.variables.noiseVariable.NoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.noisevariable.noisevariable property)": [[427, "fipy.variables.noiseVariable.NoiseVariable.faceValue"]], "fipy.variables.noisevariable": [[427, "module-fipy.variables.noiseVariable"]], "gaussgrad (fipy.variables.noisevariable.noisevariable property)": [[427, "fipy.variables.noiseVariable.NoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.getsctype"]], "globalvalue (fipy.variables.noisevariable.noisevariable property)": [[427, "fipy.variables.noiseVariable.NoiseVariable.globalValue"]], "grad (fipy.variables.noisevariable.noisevariable property)": [[427, "fipy.variables.noiseVariable.NoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.noisevariable.noisevariable property)": [[427, "fipy.variables.noiseVariable.NoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.noisevariable.noisevariable property)": [[427, "fipy.variables.noiseVariable.NoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.noisevariable.noisevariable property)": [[427, "fipy.variables.noiseVariable.NoiseVariable.mag"]], "max() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.max"]], "min() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.min"]], "minmodfacevalue (fipy.variables.noisevariable.noisevariable property)": [[427, "fipy.variables.noiseVariable.NoiseVariable.minmodFaceValue"]], "old (fipy.variables.noisevariable.noisevariable property)": [[427, "fipy.variables.noiseVariable.NoiseVariable.old"]], "rdot() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.rdot"]], "release() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.release"]], "scramble() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.scramble"]], "setvalue() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.setValue"]], "shape (fipy.variables.noisevariable.noisevariable property)": [[427, "fipy.variables.noiseVariable.NoiseVariable.shape"]], "std() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.std"]], "unit (fipy.variables.noisevariable.noisevariable property)": [[427, "fipy.variables.noiseVariable.NoiseVariable.unit"]], "updateold() (fipy.variables.noisevariable.noisevariable method)": [[427, "fipy.variables.noiseVariable.NoiseVariable.updateOld"]], "value (fipy.variables.noisevariable.noisevariable property)": [[427, "fipy.variables.noiseVariable.NoiseVariable.value"]], "fipy.variables.operatorvariable": [[428, "module-fipy.variables.operatorVariable"]], "scharfettergummelfacevariable (class in fipy.variables.scharfettergummelfacevariable)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable"]], "__abs__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__abs__"]], "__and__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__and__"]], "__array__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__array__"]], "__array_wrap__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__array_wrap__"]], "__bool__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__bool__"]], "__call__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__call__"]], "__eq__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__eq__"]], "__ge__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__ge__"]], "__getitem__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__getitem__"]], "__getstate__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__getstate__"]], "__gt__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__gt__"]], "__hash__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__hash__"]], "__invert__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__invert__"]], "__le__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__le__"]], "__lt__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__lt__"]], "__ne__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__ne__"]], "__new__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable static method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__new__"]], "__nonzero__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__nonzero__"]], "__or__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__or__"]], "__pow__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__pow__"]], "__repr__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__repr__"]], "__setstate__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__setstate__"]], "__str__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__str__"]], "all() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.all"]], "allclose() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.allclose"]], "any() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.any"]], "constrain() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.constrain"]], "constraintmask (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.constraintMask"]], "copy() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.copy"]], "divergence (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.divergence"]], "dot() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.dot"]], "fipy.variables.scharfettergummelfacevariable": [[429, "module-fipy.variables.scharfetterGummelFaceVariable"]], "getsctype() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.getsctype"]], "inbaseunits() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.inUnitsOf"]], "mag (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.mag"]], "max() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.max"]], "min() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.min"]], "rdot() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.rdot"]], "release() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.release"]], "setvalue() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.setValue"]], "shape (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.shape"]], "std() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.std"]], "unit (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.unit"]], "value (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[429, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.value"]], "surfactantconvectionvariable (class in fipy.variables.surfactantconvectionvariable)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable"]], "__abs__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__abs__"]], "__and__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__and__"]], "__array__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__array__"]], "__array_wrap__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__array_wrap__"]], "__bool__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__bool__"]], "__call__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__call__"]], "__eq__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__eq__"]], "__ge__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__ge__"]], "__getitem__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__getitem__"]], "__getstate__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__getstate__"]], "__gt__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__gt__"]], "__hash__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__hash__"]], "__invert__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__invert__"]], "__le__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__le__"]], "__lt__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__lt__"]], "__ne__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__ne__"]], "__new__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable static method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__new__"]], "__nonzero__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__nonzero__"]], "__or__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__or__"]], "__pow__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__pow__"]], "__repr__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__repr__"]], "__setstate__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__setstate__"]], "__str__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__str__"]], "all() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.all"]], "allclose() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.allclose"]], "any() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.any"]], "constrain() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.constrain"]], "constraintmask (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.constraintMask"]], "copy() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.copy"]], "divergence (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.divergence"]], "dot() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.dot"]], "fipy.variables.surfactantconvectionvariable": [[430, "module-fipy.variables.surfactantConvectionVariable"]], "getsctype() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.getsctype"]], "inbaseunits() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.inBaseUnits"]], "inunitsof() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.inUnitsOf"]], "mag (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.mag"]], "max() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.max"]], "min() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.min"]], "rdot() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.rdot"]], "release() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.release"]], "setvalue() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.setValue"]], "shape (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.shape"]], "std() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.std"]], "unit (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.unit"]], "value (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[430, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.value"]], "surfactantvariable (class in fipy.variables.surfactantvariable)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable"]], "__abs__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__abs__"]], "__and__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__and__"]], "__array__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__array__"]], "__array_wrap__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__array_wrap__"]], "__bool__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__bool__"]], "__call__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__call__"]], "__eq__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__eq__"]], "__ge__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__ge__"]], "__getitem__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__getitem__"]], "__getstate__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__getstate__"]], "__gt__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__gt__"]], "__hash__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__hash__"]], "__invert__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__invert__"]], "__le__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__le__"]], "__lt__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__lt__"]], "__ne__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__ne__"]], "__new__() (fipy.variables.surfactantvariable.surfactantvariable static method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__new__"]], "__nonzero__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__nonzero__"]], "__or__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__or__"]], "__pow__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__pow__"]], "__repr__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__repr__"]], "__setstate__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__setstate__"]], "__str__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.__str__"]], "all() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.all"]], "allclose() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.allclose"]], "any() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.any"]], "arithmeticfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.cellVolumeAverage"]], "constrain() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.constrain"]], "constraintmask (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.constraintMask"]], "copy() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.copy"]], "dot() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.dot"]], "facegrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.faceGrad"]], "facegradaverage (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.faceGradAverage"]], "facevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.faceValue"]], "fipy.variables.surfactantvariable": [[431, "module-fipy.variables.surfactantVariable"]], "gaussgrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.gaussGrad"]], "getsctype() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.getsctype"]], "globalvalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.globalValue"]], "grad (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.grad"]], "harmonicfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.inBaseUnits"]], "inunitsof() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.inUnitsOf"]], "interfacevar (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.interfaceVar"]], "leastsquaresgrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.leastSquaresGrad"]], "mag (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.mag"]], "max() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.max"]], "min() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.min"]], "minmodfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.minmodFaceValue"]], "old (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.old"]], "rdot() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.rdot"]], "release() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.release"]], "setvalue() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.setValue"]], "shape (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.shape"]], "std() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.std"]], "unit (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.unit"]], "updateold() (fipy.variables.surfactantvariable.surfactantvariable method)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.updateOld"]], "value (fipy.variables.surfactantvariable.surfactantvariable property)": [[431, "fipy.variables.surfactantVariable.SurfactantVariable.value"]], "fipy.variables.test": [[432, "module-fipy.variables.test"]], "fipy.variables.unaryoperatorvariable": [[433, "module-fipy.variables.unaryOperatorVariable"]], "uniformnoisevariable (class in fipy.variables.uniformnoisevariable)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable"]], "__abs__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__abs__"]], "__and__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__and__"]], "__array__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__bool__"]], "__call__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__call__"]], "__eq__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__eq__"]], "__ge__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__gt__"]], "__hash__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__hash__"]], "__invert__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__invert__"]], "__le__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__le__"]], "__lt__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__lt__"]], "__ne__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__ne__"]], "__new__() (fipy.variables.uniformnoisevariable.uniformnoisevariable static method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__or__"]], "__pow__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__pow__"]], "__repr__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__setstate__"]], "__str__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__str__"]], "all() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.all"]], "allclose() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.allclose"]], "any() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.constrain"]], "constraintmask (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.constraintMask"]], "copy() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.copy"]], "dot() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.dot"]], "facegrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceValue"]], "fipy.variables.uniformnoisevariable": [[434, "module-fipy.variables.uniformNoiseVariable"]], "gaussgrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.getsctype"]], "globalvalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.globalValue"]], "grad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.mag"]], "max() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.max"]], "min() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.min"]], "minmodfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.minmodFaceValue"]], "old (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.old"]], "rdot() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.rdot"]], "release() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.release"]], "scramble() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.scramble"]], "setvalue() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.setValue"]], "shape (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.shape"]], "std() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.std"]], "unit (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.unit"]], "updateold() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.updateOld"]], "value (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[434, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.value"]], "variable (class in fipy.variables.variable)": [[435, "fipy.variables.variable.Variable"]], "__abs__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__abs__"]], "__and__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__and__"]], "__array__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__array__"]], "__array_wrap__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__array_wrap__"]], "__bool__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__bool__"]], "__call__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__call__"]], "__eq__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__eq__"]], "__ge__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__ge__"]], "__getitem__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__getitem__"]], "__getstate__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__getstate__"]], "__gt__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__gt__"]], "__hash__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__hash__"]], "__invert__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__invert__"]], "__le__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__le__"]], "__lt__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__lt__"]], "__ne__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__ne__"]], "__new__() (fipy.variables.variable.variable static method)": [[435, "fipy.variables.variable.Variable.__new__"]], "__nonzero__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__nonzero__"]], "__or__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__or__"]], "__pow__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__pow__"]], "__repr__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__repr__"]], "__setstate__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__setstate__"]], "__str__() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.__str__"]], "all() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.all"]], "allclose() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.allclose"]], "any() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.any"]], "constrain() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.constrain"]], "copy() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.copy"]], "fipy.variables.variable": [[435, "module-fipy.variables.variable"]], "getsctype() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.getsctype"]], "inbaseunits() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.inBaseUnits"]], "inunitsof() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.inUnitsOf"]], "mag (fipy.variables.variable.variable property)": [[435, "fipy.variables.variable.Variable.mag"]], "max() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.max"]], "min() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.min"]], "release() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.release"]], "setvalue() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.setValue"]], "shape (fipy.variables.variable.variable property)": [[435, "fipy.variables.variable.Variable.shape"]], "std() (fipy.variables.variable.variable method)": [[435, "fipy.variables.variable.Variable.std"]], "unit (fipy.variables.variable.variable property)": [[435, "fipy.variables.variable.Variable.unit"]], "value (fipy.variables.variable.variable property)": [[435, "fipy.variables.variable.Variable.value"]], "dummyviewer (class in fipy.viewers)": [[436, "fipy.viewers.DummyViewer"]], "meshdimensionerror": [[436, "fipy.viewers.MeshDimensionError"]], "viewer() (in module fipy.viewers)": [[436, "fipy.viewers.Viewer"]], "__cause__ (fipy.viewers.meshdimensionerror attribute)": [[436, "fipy.viewers.MeshDimensionError.__cause__"]], "__context__ (fipy.viewers.meshdimensionerror attribute)": [[436, "fipy.viewers.MeshDimensionError.__context__"]], "__delattr__() (fipy.viewers.meshdimensionerror method)": [[436, "fipy.viewers.MeshDimensionError.__delattr__"]], "__getattribute__() (fipy.viewers.meshdimensionerror method)": [[436, "fipy.viewers.MeshDimensionError.__getattribute__"]], "__reduce__() (fipy.viewers.meshdimensionerror method)": [[436, "fipy.viewers.MeshDimensionError.__reduce__"]], "__repr__() (fipy.viewers.meshdimensionerror method)": [[436, "fipy.viewers.MeshDimensionError.__repr__"]], "__setattr__() (fipy.viewers.meshdimensionerror method)": [[436, "fipy.viewers.MeshDimensionError.__setattr__"]], "__str__() (fipy.viewers.meshdimensionerror method)": [[436, "fipy.viewers.MeshDimensionError.__str__"]], "add_note() (fipy.viewers.meshdimensionerror method)": [[436, "fipy.viewers.MeshDimensionError.add_note"]], "plot() (fipy.viewers.dummyviewer method)": [[436, "fipy.viewers.DummyViewer.plot"]], "plotmesh() (fipy.viewers.dummyviewer method)": [[436, "fipy.viewers.DummyViewer.plotMesh"]], "setlimits() (fipy.viewers.dummyviewer method)": [[436, "fipy.viewers.DummyViewer.setLimits"]], "title (fipy.viewers.dummyviewer property)": [[436, "fipy.viewers.DummyViewer.title"]], "vars (fipy.viewers.dummyviewer property)": [[436, "fipy.viewers.DummyViewer.vars"]], "with_traceback() (fipy.viewers.meshdimensionerror method)": [[436, "fipy.viewers.MeshDimensionError.with_traceback"]], "matplotlibviewer() (in module fipy.viewers.matplotlibviewer)": [[437, "fipy.viewers.matplotlibViewer.MatplotlibViewer"]], "fipy.viewers.matplotlibviewer": [[437, "module-fipy.viewers.matplotlibViewer"]], "abstractmatplotlib2dviewer (class in fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer)": [[438, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer"]], "axes (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[438, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[438, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[438, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[438, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.fig"]], "fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer": [[438, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"]], "id (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[438, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.id"]], "log (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[438, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[438, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[438, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[438, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[438, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[438, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.vars"]], "abstractmatplotlibviewer (class in fipy.viewers.matplotlibviewer.abstractmatplotlibviewer)": [[439, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer"]], "axes (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[439, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[439, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[439, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[439, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.fig"]], "fipy.viewers.matplotlibviewer.abstractmatplotlibviewer": [[439, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"]], "id (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[439, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.id"]], "log (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[439, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[439, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[439, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[439, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[439, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.title"]], "vars (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[439, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.vars"]], "matplotlib1dviewer (class in fipy.viewers.matplotlibviewer.matplotlib1dviewer)": [[440, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[440, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[440, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[440, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[440, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib1dviewer": [[440, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[440, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.id"]], "lines (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[440, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.lines"]], "log (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[440, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[440, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[440, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[440, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[440, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[440, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.vars"]], "matplotlib2dcontourviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer)": [[441, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[441, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[441, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[441, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[441, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer": [[441, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[441, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.id"]], "levels (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[441, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.levels"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[441, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[441, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[441, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[441, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[441, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[441, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.vars"]], "matplotlib2dgridcontourviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer)": [[442, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer": [[442, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.id"]], "levels (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.levels"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[442, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[442, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[442, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[442, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.vars"]], "matplotlib2dgridviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dgridviewer)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dgridviewer": [[443, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[443, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.vars"]], "matplotlib2dviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dviewer)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.cmap"]], "collection (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.collection"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dviewer": [[444, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[444, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.vars"]], "matplotlibsparsematrixviewer (class in fipy.viewers.matplotlibviewer.matplotlibsparsematrixviewer)": [[445, "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer.MatplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibviewer.matplotlibsparsematrixviewer": [[445, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"]], "matplotlibstreamviewer (class in fipy.viewers.matplotlibviewer.matplotlibstreamviewer)": [[446, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlibstreamviewer": [[446, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.id"]], "kwargs (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.kwargs"]], "log (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[446, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[446, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[446, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[446, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.vars"]], "matplotlibvectorviewer (class in fipy.viewers.matplotlibviewer.matplotlibvectorviewer)": [[447, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[447, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[447, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[447, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[447, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlibvectorviewer": [[447, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[447, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[447, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[447, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[447, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[447, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[447, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[447, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.vars"]], "fipy.viewers.matplotlibviewer.test": [[448, "module-fipy.viewers.matplotlibViewer.test"]], "mayaviclient (class in fipy.viewers.mayaviviewer)": [[449, "fipy.viewers.mayaviViewer.MayaviClient"]], "fipy.viewers.mayaviviewer": [[449, "module-fipy.viewers.mayaviViewer"]], "fps (fipy.viewers.mayaviviewer.mayaviclient property)": [[449, "fipy.viewers.mayaviViewer.MayaviClient.fps"]], "plot() (fipy.viewers.mayaviviewer.mayaviclient method)": [[449, "fipy.viewers.mayaviViewer.MayaviClient.plot"]], "plotmesh() (fipy.viewers.mayaviviewer.mayaviclient method)": [[449, "fipy.viewers.mayaviViewer.MayaviClient.plotMesh"]], "setlimits() (fipy.viewers.mayaviviewer.mayaviclient method)": [[449, "fipy.viewers.mayaviViewer.MayaviClient.setLimits"]], "title (fipy.viewers.mayaviviewer.mayaviclient property)": [[449, "fipy.viewers.mayaviViewer.MayaviClient.title"]], "vars (fipy.viewers.mayaviviewer.mayaviclient property)": [[449, "fipy.viewers.mayaviViewer.MayaviClient.vars"]], "mayaviclient (class in fipy.viewers.mayaviviewer.mayaviclient)": [[450, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient"]], "fipy.viewers.mayaviviewer.mayaviclient": [[450, "module-fipy.viewers.mayaviViewer.mayaviClient"]], "fps (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[450, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.fps"]], "plot() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[450, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.plot"]], "plotmesh() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[450, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.plotMesh"]], "setlimits() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[450, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.setLimits"]], "title (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[450, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.title"]], "vars (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[450, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.vars"]], "mayavidaemon (class in fipy.viewers.mayaviviewer.mayavidaemon)": [[451, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon"]], "fipy.viewers.mayaviviewer.mayavidaemon": [[451, "module-fipy.viewers.mayaviViewer.mayaviDaemon"]], "main() (in module fipy.viewers.mayaviviewer.mayavidaemon)": [[451, "fipy.viewers.mayaviViewer.mayaviDaemon.main"]], "parse_command_line() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[451, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.parse_command_line"]], "setup_source() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[451, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.setup_source"]], "update_pipeline() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[451, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.update_pipeline"]], "view_data() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[451, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.view_data"]], "fipy.viewers.mayaviviewer.test": [[452, "module-fipy.viewers.mayaviViewer.test"]], "multiviewer (class in fipy.viewers.multiviewer)": [[453, "fipy.viewers.multiViewer.MultiViewer"]], "fipy.viewers.multiviewer": [[453, "module-fipy.viewers.multiViewer"]], "plot() (fipy.viewers.multiviewer.multiviewer method)": [[453, "fipy.viewers.multiViewer.MultiViewer.plot"]], "plotmesh() (fipy.viewers.multiviewer.multiviewer method)": [[453, "fipy.viewers.multiViewer.MultiViewer.plotMesh"]], "setlimits() (fipy.viewers.multiviewer.multiviewer method)": [[453, "fipy.viewers.multiViewer.MultiViewer.setLimits"]], "title (fipy.viewers.multiviewer.multiviewer property)": [[453, "fipy.viewers.multiViewer.MultiViewer.title"]], "vars (fipy.viewers.multiviewer.multiviewer property)": [[453, "fipy.viewers.multiViewer.MultiViewer.vars"]], "fipy.viewers.test": [[454, "module-fipy.viewers.test"]], "fipy.viewers.testinteractive": [[455, "module-fipy.viewers.testinteractive"]], "tsvviewer (class in fipy.viewers.tsvviewer)": [[456, "fipy.viewers.tsvViewer.TSVViewer"]], "fipy.viewers.tsvviewer": [[456, "module-fipy.viewers.tsvViewer"]], "plot() (fipy.viewers.tsvviewer.tsvviewer method)": [[456, "fipy.viewers.tsvViewer.TSVViewer.plot"]], "plotmesh() (fipy.viewers.tsvviewer.tsvviewer method)": [[456, "fipy.viewers.tsvViewer.TSVViewer.plotMesh"]], "setlimits() (fipy.viewers.tsvviewer.tsvviewer method)": [[456, "fipy.viewers.tsvViewer.TSVViewer.setLimits"]], "title (fipy.viewers.tsvviewer.tsvviewer property)": [[456, "fipy.viewers.tsvViewer.TSVViewer.title"]], "vars (fipy.viewers.tsvviewer.tsvviewer property)": [[456, "fipy.viewers.tsvViewer.TSVViewer.vars"]], "abstractviewer (class in fipy.viewers.viewer)": [[457, "fipy.viewers.viewer.AbstractViewer"]], "fipy.viewers.viewer": [[457, "module-fipy.viewers.viewer"]], "plot() (fipy.viewers.viewer.abstractviewer method)": [[457, "fipy.viewers.viewer.AbstractViewer.plot"]], "plotmesh() (fipy.viewers.viewer.abstractviewer method)": [[457, "fipy.viewers.viewer.AbstractViewer.plotMesh"]], "setlimits() (fipy.viewers.viewer.abstractviewer method)": [[457, "fipy.viewers.viewer.AbstractViewer.setLimits"]], "title (fipy.viewers.viewer.abstractviewer property)": [[457, "fipy.viewers.viewer.AbstractViewer.title"]], "vars (fipy.viewers.viewer.abstractviewer property)": [[457, "fipy.viewers.viewer.AbstractViewer.vars"]], "vtkcellviewer (class in fipy.viewers.vtkviewer)": [[458, "fipy.viewers.vtkViewer.VTKCellViewer"]], "vtkfaceviewer (class in fipy.viewers.vtkviewer)": [[458, "fipy.viewers.vtkViewer.VTKFaceViewer"]], "vtkviewer() (in module fipy.viewers.vtkviewer)": [[458, "fipy.viewers.vtkViewer.VTKViewer"]], "fipy.viewers.vtkviewer": [[458, "module-fipy.viewers.vtkViewer"]], "plot() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[458, "fipy.viewers.vtkViewer.VTKCellViewer.plot"]], "plot() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[458, "fipy.viewers.vtkViewer.VTKFaceViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[458, "fipy.viewers.vtkViewer.VTKCellViewer.plotMesh"]], "plotmesh() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[458, "fipy.viewers.vtkViewer.VTKFaceViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[458, "fipy.viewers.vtkViewer.VTKCellViewer.setLimits"]], "setlimits() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[458, "fipy.viewers.vtkViewer.VTKFaceViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkcellviewer property)": [[458, "fipy.viewers.vtkViewer.VTKCellViewer.title"]], "title (fipy.viewers.vtkviewer.vtkfaceviewer property)": [[458, "fipy.viewers.vtkViewer.VTKFaceViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkcellviewer property)": [[458, "fipy.viewers.vtkViewer.VTKCellViewer.vars"]], "vars (fipy.viewers.vtkviewer.vtkfaceviewer property)": [[458, "fipy.viewers.vtkViewer.VTKFaceViewer.vars"]], "fipy.viewers.vtkviewer.test": [[459, "module-fipy.viewers.vtkViewer.test"]], "vtkcellviewer (class in fipy.viewers.vtkviewer.vtkcellviewer)": [[460, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer"]], "fipy.viewers.vtkviewer.vtkcellviewer": [[460, "module-fipy.viewers.vtkViewer.vtkCellViewer"]], "plot() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[460, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[460, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[460, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer property)": [[460, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer property)": [[460, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.vars"]], "vtkfaceviewer (class in fipy.viewers.vtkviewer.vtkfaceviewer)": [[461, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer"]], "fipy.viewers.vtkviewer.vtkfaceviewer": [[461, "module-fipy.viewers.vtkViewer.vtkFaceViewer"]], "plot() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[461, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[461, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[461, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer property)": [[461, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer property)": [[461, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.vars"]], "vtkviewer (class in fipy.viewers.vtkviewer.vtkviewer)": [[462, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer"]], "fipy.viewers.vtkviewer.vtkviewer": [[462, "module-fipy.viewers.vtkViewer.vtkViewer"]], "plot() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[462, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[462, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[462, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkviewer.vtkviewer property)": [[462, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkviewer.vtkviewer property)": [[462, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.vars"]], "appveyor": [[463, "term-AppVeyor"]], "azure": [[463, "term-Azure"]], "buildbot": [[463, "term-Buildbot"]], "circleci": [[463, "term-CircleCI"]], "continuous integration": [[463, "term-Continuous-Integration"]], "github actions": [[463, "term-GitHub-Actions"]], "ipython": [[463, "term-IPython"]], "json": [[463, "term-JSON"]], "mpi": [[463, "term-MPI"]], "matplotlib": [[463, "term-Matplotlib"]], "mayavi": [[463, "term-MayaVi"], [463, "term-Mayavi"]], "numpy": [[463, "term-NumPy"]], "numeric": [[463, "term-Numeric"]], "openmp": [[463, "term-OpenMP"]], "pep 3000": [[463, "index-0"]], "petsc": [[463, "term-PETSc"]], "pyamg": [[463, "term-PyAMG"]], "pypi": [[463, "term-PyPI"]], "pytrilinos": [[463, "term-PyTrilinos"]], "pyrex": [[463, "term-Pyrex"]], "pysparse": [[463, "term-Pysparse"]], "python": [[463, "term-Python"]], "python 3": [[463, "term-Python-3"]], "pyxviewer": [[463, "term-PyxViewer"]], "scientificpython": [[463, "term-ScientificPython"]], "sphinx": [[463, "term-Sphinx"]], "travisci": [[463, "term-TravisCI"]], "trilinos": [[463, "term-Trilinos"]], "weave": [[463, "term-Weave"]], "windows": [[463, "term-Windows"]], "conda": [[463, "term-conda"]], "linux": [[463, "term-linux"]], "macos": [[463, "term-macOS"]], "mpi4py": [[463, "term-mpi4py"]], "numarray": [[463, "term-numarray"]], "pandas": [[463, "term-pandas"]], "petsc4py": [[463, "term-petsc4py"]], "pip": [[463, "term-pip"]], "pyamgx": [[463, "term-pyamgx"]], "package": [[471, "module-package"]], "package.subpackage": [[472, "module-package.subpackage"]], "base (class in package.subpackage.base)": [[473, "package.subpackage.base.Base"]], "method1() (package.subpackage.base.base method)": [[473, "package.subpackage.base.Base.method1"]], "method2() (package.subpackage.base.base method)": [[473, "package.subpackage.base.Base.method2"]], "package.subpackage.base": [[473, "module-package.subpackage.base"]], "object (class in package.subpackage.object)": [[474, "package.subpackage.object.Object"]], "method1() (package.subpackage.object.object method)": [[474, "package.subpackage.object.Object.method1"]], "method2() (package.subpackage.object.object method)": [[474, "package.subpackage.object.Object.method2"]], "package.subpackage.object": [[474, "module-package.subpackage.object"]]}})